
ROVER.elf:     file format elf32-littlenios2
ROVER.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00000000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000269cc memsz 0x00036044 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00001800  00001800  00000800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00023a5c  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ff8  04023c18  04023c18  00024c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ddc  04024c10  04024c10  00025c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f678  040269ec  040269ec  000279ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000279ec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001590  00000000  00000000  00027a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000031c6  00000000  00000000  00028fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00043e2e  00000000  00000000  0002c16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e269  00000000  00000000  0006ff9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00029b26  00000000  00000000  0007e205  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003bdc  00000000  00000000  000a7d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036d6  00000000  00000000  000ab908  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000153c6  00000000  00000000  000aefde  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000c43a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000dc0  00000000  00000000  000c43e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000cb650  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000cb656  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000cb659  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000cb65a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000cb65b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000cb65f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000cb663  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000cb667  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000cb670  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000cb679  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000cb682  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  000cb687  2**0
                  CONTENTS, READONLY
 29 .jdi          00004619  00000000  00000000  000cb6a7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b6e7b  00000000  00000000  000cfcc0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001800 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
04023c18 l    d  .rodata	00000000 .rodata
04024c10 l    d  .rwdata	00000000 .rwdata
040269ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LSM303.c
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 motors.c
00000000 l    df *ABS*	00000000 terasic_spi.c
00000000 l    df *ABS*	00000000 main.c
04024c10 l     O .rwdata	000001f8 szTestList
00000000 l    df *ABS*	00000000 map.c
00000000 l    df *ABS*	00000000 nav.c
00000000 l    df *ABS*	00000000 s_fmax.c
00000000 l    df *ABS*	00000000 s_fmin.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_atan.c
04024454 l     O .rodata	00000020 atanhi
04024474 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
040076c4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
04007ef0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04008eac l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
04024e08 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400a3e8 l     F .text	00000058 __sprint_r
0402462e l     O .rodata	00000010 blanks.3452
0402461e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
04024646 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
04024769 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0400dbec l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400f614 l     F .text	00000058 std
0400f720 l     F .text	00000008 __fp_lock
0400f728 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0402693c l     O .rwdata	00000004 charset
0402490c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04024a54 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
04012474 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
04012874 l     F .text	00000048 match
04025630 l     O .rwdata	00000014 fpi.1950
04024a70 l     O .rodata	00000028 tinytens
0402561c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
04015084 l     F .text	00000024 htinit
04015110 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
040159bc l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
04016fb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04017054 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04017228 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0401734c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
040174a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
040176ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04026960 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04017c6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0402696c l     O .rwdata	00000004 lockid
04026a80 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
04026970 l     O .rwdata	00000004 lockid
04026a88 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
040196a4 l     F .text	00000044 OS_InitMisc
040196e8 l     F .text	0000006c OS_InitRdyList
0401984c l     F .text	000000e0 OS_InitTCBList
040195c8 l     F .text	000000dc OS_InitEventList
04019754 l     F .text	0000007c OS_InitTaskIdle
040197d0 l     F .text	0000007c OS_InitTaskStat
04019ac0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0401b9e0 l     F .text	00000110 OS_FlagTaskRdy
0401b738 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040257ec l     O .rwdata	000000c8 epcs
040258b4 l     O .rwdata	0000106c jtag_uart
04020330 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
040203f4 l     F .text	00000288 alt_epcs_flash_query
040203bc l     F .text	00000038 alt_flash_device_register
0402067c l     F .text	00000108 alt_epcs_flash_memcmp
04020b04 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04020fcc l     F .text	000002c4 altera_avalon_jtag_uart_irq
04021290 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04021aa8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
04021d00 l     F .text	00000038 epcs_await_wip_released
04021d38 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040225e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04022a68 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04022bb8 l     F .text	000000f8 alt_file_locked
04022e3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040239f4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04023ba8 l     F .text	00000040 alt_sim_halt
0401103c g     F .text	00000094 _mprec_log10
040002f0 g     F .text	00000104 I2C_Read
040269be g     O .rwdata	00000002 OSTaskNameSize
04026a08 g     O .bss	00000004 SYSTEM_STATUS
04020a04 g     F .text	00000090 alt_epcs_flash_get_info
04011128 g     F .text	00000088 __any_on
04015c50 g     F .text	00000070 _isatty_r
04024a2c g     O .rodata	00000028 __mprec_tinytens
04002f7c g     F .text	0000004c motorReverse
04017500 g     F .text	000000c8 alt_main
0400a1d4 g     F .text	000000a0 _puts_r
04035dd4 g     O .bss	00000100 alt_irq
04007674 g     F .text	00000018 fabs
04015cc0 g     F .text	00000078 _lseek_r
0401c2d4 g     F .text	000000d4 OS_MemInit
04006894 g     F .text	00000130 sqrt
04000de8 g     F .text	0000006c setMagGain
04003bd8 g     F .text	00000264 newDir
04020234 g     F .text	00000064 OSTimeSet
0400133c g     F .text	0000004c heading_Y
04016c10 g     F .text	00000088 __eqdf2
04018220 g     F .text	000006b4 OSEventPendMulti
04036064 g       *ABS*	00000000 __alt_heap_start
0402329c g     F .text	00000020 OSTaskCreateHook
04026b0c g     O .bss	00002000 task1_stk
04026a0c g     O .bss	00000004 RIGHT_CLEAR
0400a15c g     F .text	00000044 printf
04026996 g     O .rwdata	00000002 OSMboxEn
04018928 g     F .text	0000007c OSIntEnter
040018ec g     F .text	000000d0 ADXL345_SPI_Init
04012674 g     F .text	00000068 __sseek
0400f67c g     F .text	000000a4 __sinit
040269a6 g     O .rwdata	00000002 OSQEn
04010600 g     F .text	00000084 _setlocale_r
0400f77c g     F .text	0000009c __sfmoreglue
04014d20 g     F .text	0000001c ungetc
04017edc g     F .text	000000d0 __malloc_unlock
04006784 g     F .text	0000010c round
040232f8 g     F .text	0000001c OSTaskStatHook
04026a90 g     O .bss	00000001 OSLockNesting
040128bc g     F .text	000015cc _strtod_r
04007b5c g     F .text	00000174 __divsf3
04002d24 g     F .text	000000a0 M_checkMotion
040269e4 g     O .rwdata	00000002 OSDataSize
04026a91 g     O .bss	00000001 OSRunning
04004264 g     F .text	0000003c EnableKeyInterrupt
04010ab8 g     F .text	000000e0 memmove
04023330 g     F .text	0000001c OSInitHookBegin
040038c4 g     F .text	000001a8 evalHistory
040042a0 g     F .text	0000009c ShowMenu
040269dc g     O .rwdata	00000002 OSTmrSize
0400f76c g     F .text	00000010 _cleanup
040111b0 g     F .text	000000bc _Balloc
04007d48 g     F .text	00000094 __fixsfsi
04000c24 g     F .text	00000028 getTimeout
04026a94 g     O .bss	00000004 OSIdleCtr
04008a10 g     F .text	00000088 __gtdf2
04022f68 g       .text	00000000 OSStartTsk
040099e4 g     F .text	00000010 __errno
04019df4 g     F .text	000002e0 OS_TCBInit
04021c08 g     F .text	000000f8 epcs_sector_erase
04000760 g     F .text	00000124 i2c_write
00001800 g     F .entry	00000000 __reset
040269e2 g     O .rwdata	00000002 OSTmrWheelTblSize
04026982 g     O .rwdata	00000002 OSEventSize
04026a98 g     O .bss	00000001 OSPrioHighRdy
04015010 g     F .text	00000074 _fstat_r
04002b14 g     F .text	000000c4 stoptofull
040232bc g     F .text	00000020 OSTaskDelHook
04026a58 g     O .bss	00000004 errno
04008e00 g     F .text	00000038 __make_dp
0400d9b0 g     F .text	00000024 __svfscanf
04022f48 g       .text	00000000 OSStartHighRdy
0401e9ec g     F .text	00000200 OSTaskCreateExt
0401b254 g     F .text	00000068 OSFlagPendGetFlagsRdy
040269c2 g     O .rwdata	00000002 OSTaskStatStkSize
040094a4 g     F .text	0000002c __make_fp
0401a260 g     F .text	00000334 OSFlagAccept
0401ca10 g     F .text	000000c8 OSQFlush
0401c3a8 g     F .text	00000154 OSQAccept
04026a70 g     O .bss	00000004 alt_argv
0402e920 g       *ABS*	00000000 _gp
04017a28 g     F .text	00000120 usleep
040078a8 g     F .text	00000070 __subsf3
04000c94 g     F .text	00000064 enableDefault
0401e818 g     F .text	000001d4 OSTaskCreate
040057bc g     F .text	000000c8 Servo_Task
0401e2a4 g     F .text	00000574 OSTaskChangePrio
04026a8c g     O .bss	00000004 alt_heapsem
040269f0 g     O .bss	00000004 oldRightOpening
0401a0d4 g     F .text	0000018c OSDebugInit
0401ebec g     F .text	0000040c OSTaskDel
040009d0 g     F .text	00000178 i2c_data_verify
04002564 g     F .text	000005b0 FLASH_Verify
04001d98 g     F .text	000000d0 Flash_Open
0402566c g     O .rwdata	00000180 alt_fd_list
04032bb0 g     O .bss	00000370 OSFlagTbl
04001ec0 g     F .text	0000013c Flash_GetBlockInfo
040193a4 g     F .text	000000b8 OS_EventTaskRemove
04021f0c g     F .text	00000064 epcs_write_status_register
04000fc8 g     F .text	00000030 LSM303_read
04022708 g     F .text	00000094 alt_find_dev
04010a18 g     F .text	000000a0 memcpy
04015a08 g     F .text	00000248 __hexnan
040269ac g     O .rwdata	00000002 OSRdyTblSize
0400f760 g     F .text	0000000c _cleanup_r
04008c30 g     F .text	000000f8 __floatsidf
04022b40 g     F .text	00000078 alt_io_redirect
04008b20 g     F .text	00000088 __ltdf2
04023c18 g       *ABS*	00000000 __DTOR_END__
0400a274 g     F .text	00000014 puts
04017fac g     F .text	00000130 OSEventNameGet
04026990 g     O .rwdata	00000002 OSFlagMax
040108b4 g     F .text	00000040 mbrtowc
04002ee8 g     F .text	00000044 turnRight
04001b94 g     F .text	00000044 ADXL345_SPI_IdRead
04020b98 g     F .text	0000011c alt_epcs_flash_write_block
04006704 g     F .text	00000080 __fpclassifyd
04004960 g     F .text	000000dc DEMO_EEPROM
0400d9d4 g     F .text	00000068 _vfscanf_r
04010f8c g     F .text	000000b0 __ratio
040189a4 g     F .text	00000100 OSIntExit
040269ca g     O .rwdata	00000002 OSTCBSize
04026a99 g     O .bss	00000001 OSPrioCur
0402150c g     F .text	000002c0 altera_avalon_jtag_uart_read
04009a08 g     F .text	00000014 malloc
04000bf4 g     F .text	00000030 setTimeout
0400a1a0 g     F .text	00000034 _printf_r
04008fe8 g     F .text	00000008 __udivsi3
04017288 g     F .text	000000c4 isatty
040269b0 g     O .rwdata	00000002 OSStkWidth
040105b0 g     F .text	0000002c iswspace
0402493c g     O .rodata	000000c8 __mprec_tens
040269a4 g     O .rwdata	00000002 OSPtrSize
040269f4 g     O .bss	00000004 newLeftOpening
040105dc g     F .text	00000008 __locale_charset
04026984 g     O .rwdata	00000002 OSEventTblSize
04015db0 g     F .text	000000a4 __fixunsdfsi
04022ebc g       .text	00000000 OSCtxSw
04000504 g     F .text	0000015c I2C_MultipleRead
04026a4c g     O .bss	00000004 __malloc_top_pad
04026a9c g     O .bss	00000004 OSTCBList
04026a68 g     O .bss	00000004 alt_fd_list_lock
04014794 g     F .text	00000024 strtoul
04026938 g     O .rwdata	00000004 __mb_cur_max
040105e4 g     F .text	0000000c _localeconv_r
040147b8 g     F .text	000002f0 _strtoull_r
04011914 g     F .text	0000003c __i2b
0400ff94 g     F .text	0000049c __sfvwrite_r
04032f20 g     O .bss	00000c30 OSMemTbl
04026aa0 g     O .bss	00000001 OSTickStepState
0400a288 g     F .text	00000070 _sbrk_r
04002f2c g     F .text	00000050 turn180
040269a8 g     O .rwdata	00000002 OSQMax
04026a10 g     O .bss	00000004 FRONT_VOLT
04033b50 g     O .bss	00000800 OSTaskStatStk
0401bebc g     F .text	0000010c OSMemNameGet
04028b0c g     O .bss	00002000 task4_stk
04026988 g     O .rwdata	00000002 OSFlagEn
04015d38 g     F .text	00000078 _read_r
040269ce g     O .rwdata	00000002 OSTimeTickHookEn
04017014 g     F .text	00000024 alt_dcache_flush
0401baf0 g     F .text	000000ac OS_FlagUnlink
0401cf74 g     F .text	00000180 OSQPost
04025610 g     O .rwdata	0000000c __lc_ctype
04026950 g     O .rwdata	00000004 alt_max_fd
04019980 g     F .text	0000006c OS_MemCopy
040199ec g     F .text	000000d4 OS_Sched
040097e4 g     F .text	00000138 __unpack_d
04014eec g     F .text	00000110 _fclose_r
0401bdb8 g     F .text	00000104 OSMemGet
0401f320 g     F .text	000001c4 OSTaskNameSet
0400f5e0 g     F .text	00000034 fflush
04026a50 g     O .bss	00000004 __malloc_max_sbrked_mem
04026aa4 g     O .bss	00000004 OSCtxSwCtr
04004778 g     F .text	00000118 DEMO_ADC
04023314 g     F .text	0000001c OSTimeTickHook
04001bd8 g     F .text	000000f4 ADC_Read
04026992 g     O .rwdata	00000002 OSFlagNameSize
04007ddc g     F .text	00000054 __extendsfdf2
0401945c g     F .text	00000104 OS_EventTaskRemoveMulti
04008380 g     F .text	00000074 __adddf3
04016b20 g     F .text	00000078 __nesf2
04026a14 g     O .bss	00000008 ENCODER_1A
04019250 g     F .text	00000154 OS_EventTaskWaitMulti
04020a94 g     F .text	00000070 alt_epcs_flash_erase_block
04010e6c g     F .text	00000120 __b2d
04005884 g     F .text	0000035c servoRotate
040269aa g     O .rwdata	00000002 OSQSize
040164c0 g     F .text	00000660 __umoddi3
040173ac g     F .text	000000f4 lseek
0401db50 g     F .text	0000027c OSSemPend
04026920 g     O .rwdata	00000004 __fdlib_version
04002e24 g     F .text	0000007c turnLeft_Simple
04026928 g     O .rwdata	00000004 _global_impure_ptr
040019bc g     F .text	000000a4 ADXL345_SPI_WaitDataReady
04022224 g     F .text	00000058 epcs_exit_4_bytes_mode
04011cbc g     F .text	000005f4 _realloc_r
04026994 g     O .rwdata	00000002 OSLowestPrio
04036064 g       *ABS*	00000000 __bss_end
04022970 g     F .text	000000f8 alt_iic_isr_register
04023384 g     F .text	00000020 OSTCBInitHook
040269da g     O .rwdata	00000002 OSTmrCfgTicksPerSec
04017918 g     F .text	00000110 alt_tick
04032ab0 g     O .bss	00000100 __hexdig
04015e54 g     F .text	0000066c __udivdi3
0402697c g     O .rwdata	00000002 OSEventEn
04024a04 g     O .rodata	00000028 __mprec_bigtens
04011b9c g     F .text	00000120 __s2b
040269d6 g     O .rwdata	00000002 OSTmrCfgNameSize
040037a0 g     F .text	00000124 printHistory
040062b8 g     F .text	00000100 SensorsCalibrate
04016d20 g     F .text	00000194 __floatunsidf
04010d8c g     F .text	00000060 __mcmp
04026934 g     O .rwdata	00000004 __ctype_ptr
0400f748 g     F .text	00000018 __fp_lock_all
04022928 g     F .text	00000048 alt_ic_irq_enabled
040001f4 g     F .text	000000fc I2C_Write
04026a1c g     O .bss	00000008 ENCODER_INIT
0401b8fc g     F .text	000000e4 OS_FlagInit
04017880 g     F .text	00000098 alt_alarm_stop
04014218 g     F .text	00000024 strtol
040269b8 g     O .rwdata	00000002 OSTaskIdleStkSize
04026ae0 g     O .bss	00000004 alt_irq_active
0401d6dc g     F .text	000000c0 OSSemAccept
0401c0e8 g     F .text	000000f0 OSMemPut
0401bb9c g     F .text	0000021c OSMemCreate
04026aa8 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	000000d0 alt_irq_handler
04025644 g     O .rwdata	00000028 alt_dev_null
040269cc g     O .rwdata	00000002 OSTicksPerSec
04009334 g     F .text	000000c8 __unpack_f
04002c78 g     F .text	000000ac slowtostop
04000660 g     F .text	00000088 i2c_start
04022ebc g       .text	00000000 OSIntCtxSw
0402ab0c g     O .bss	0000003c FRONT_SERVO
04001648 g     F .text	00000134 vector_cross
04017038 g     F .text	0000001c alt_dcache_flush_all
04010c58 g     F .text	00000070 __hi0bits
04004a3c g     F .text	00000080 DEMO_EPCS
04008d28 g     F .text	000000d8 __fixdfsi
04026a24 g     O .bss	00000008 ENCODER_0A
040269f8 g     O .bss	00000004 newRightOpening
04005be0 g     F .text	00000244 navigateFront
04013fac g     F .text	0000001c strtod
04026aac g     O .bss	00000004 OSTCBFreeList
0401ddcc g     F .text	0000017c OSSemPendAbort
04026948 g     O .rwdata	00000008 alt_dev_list
04017b48 g     F .text	00000124 write
04003e3c g     F .text	00000024 oppositeDir
040069c4 g     F .text	00000350 __ieee754_atan2
040269d0 g     O .rwdata	00000002 OSVersionNbr
04007cd0 g     F .text	00000078 __gtsf2
04017150 g     F .text	000000d8 fstat
04008ba8 g     F .text	00000088 __ledf2
04026978 g     O .rwdata	00000004 OSEndiannessTest
04011a7c g     F .text	00000120 __pow5mult
04026a5c g     O .bss	00000004 __nlocale_changed
04008ff0 g     F .text	00000008 __umodsi3
0400433c g     F .text	00000148 DEMO_PWM
0400a2f8 g     F .text	00000034 _scanf_r
040220e0 g     F .text	0000006c epcs_read_electronic_signature
0402698a g     O .rwdata	00000002 OSFlagGrpSize
04001ffc g     F .text	000000b8 Flash_Read
04036064 g       *ABS*	00000000 end
040091d4 g     F .text	00000160 __pack_f
04020e94 g     F .text	00000138 altera_avalon_jtag_uart_init
04019c64 g     F .text	000000c8 OS_TaskStat
04023c14 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
040040c8 g     F .text	00000158 SPI_MultipleRead
04021b18 g     F .text	00000090 alt_avalon_timer_sc_init
04009154 g     F .text	00000080 __clzsi2
040217cc g     F .text	000002dc altera_avalon_jtag_uart_write
04001e68 g     F .text	00000058 Flash_Close
0400f66c g     F .text	00000004 __sfp_lock_acquire
04010934 g     F .text	000000e4 memchr
0400177c g     F .text	000000a8 vector_dot
0401992c g     F .text	00000054 OS_MemClr
0400a440 g     F .text	00001ec4 ___vfprintf_internal_r
04022f8c g     F .text	00000310 OSTaskStkInit
0401260c g     F .text	00000060 _sprintf_r
0400fc80 g     F .text	00000314 _free_r
04018fac g     F .text	00000194 OS_EventTaskRdy
040239f8 g     F .text	000001b0 __call_exitprocs
04026ab0 g     O .bss	00000001 OSCPUUsage
04026a60 g     O .bss	00000004 __mlocale_changed
04026930 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	00000038 _start
04026a78 g     O .bss	00000004 _alt_tick_rate
0401cad8 g     F .text	00000320 OSQPend
0401423c g     F .text	00000318 _strtoll_r
0401fce4 g     F .text	0000014c OSTimeDly
04011574 g     F .text	0000014c __lshift
040233a4 g     F .text	00000238 alt_avalon_spi_command
04006890 g     F .text	00000004 atan2
04026a7c g     O .bss	00000004 _alt_nticks
040175c8 g     F .text	00000124 read
04000c4c g     F .text	00000048 compassInit
040202cc g     F .text	00000064 alt_sys_init
040238c0 g     F .text	00000134 __register_exitproc
04002bd8 g     F .text	000000a0 stoptopartial
04001ac8 g     F .text	000000cc ADXL345_SPI_XYZ_Read
04026ab1 g     O .bss	00000001 OSTaskCtr
040269fc g     O .bss	00000004 oldLeftOpening
0401fe30 g     F .text	00000190 OSTimeDlyHMSM
040116c0 g     F .text	00000254 __multiply
040213a4 g     F .text	00000074 altera_avalon_jtag_uart_close
04026a00 g     O .bss	00000004 bug
04008ff8 g     F .text	00000038 __mulsi3
04026ae4 g     O .bss	00000028 __malloc_current_mallinfo
0402697e g     O .rwdata	00000002 OSEventMax
0401126c g     F .text	0000017c __d2b
0401df48 g     F .text	00000128 OSSemPost
04021ba8 g     F .text	00000060 epcs_read_status_register
04018b30 g     F .text	000000e4 OSSchedUnlock
0400667c g     F .text	00000088 fmin
04020d4c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04014554 g     F .text	00000240 _strtoul_r
040236fc g     F .text	00000104 alt_get_fd
0402ab48 g     O .bss	00002000 task6_stk
04026ab4 g     O .bss	00000004 OSMemFreeList
04018c84 g     F .text	000000ac OSStatInit
040223d0 g     F .text	0000015c alt_busy_sleep
0401b664 g     F .text	000000d4 OSFlagQuery
0400991c g     F .text	000000c8 __fpcmp_parts_d
04000e54 g     F .text	00000174 readMag
040269b4 g     O .rwdata	00000002 OSTaskCreateExtEn
04014e7c g     F .text	00000070 _close_r
04026a2c g     O .bss	00000004 MainQueue
0402214c g     F .text	00000080 epcs_read_device_id
0402384c g     F .text	00000074 memcmp
04018f90 g     F .text	0000001c OS_Dummy
04020dfc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04000b48 g     F .text	00000084 I2C_Verify
04036064 g       *ABS*	00000000 __alt_stack_base
04020e44 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0400dab0 g     F .text	0000013c __swsetup_r
04034350 g     O .bss	000001e0 OSQTbl
040087b8 g     F .text	00000258 __divdf3
0400f818 g     F .text	000000f0 __sfp
040023f8 g     F .text	00000084 Flash_GetBlockCount
040110d0 g     F .text	00000058 __copybits
04025208 g     O .rwdata	00000408 __malloc_av_
0400f678 g     F .text	00000004 __sinit_lock_release
040006e8 g     F .text	00000078 i2c_stop
04026ab8 g     O .bss	00000004 OSTCBHighRdy
040046b0 g     F .text	000000ac DEMO_COMPASS
040083f4 g     F .text	000003c4 __muldf3
04012758 g     F .text	00000060 __sread
04026a04 g     O .bss	00000004 counter
04024494 g     O .rodata	00000010 __thenan_sf
0400fb14 g     F .text	00000040 fread
04026abc g     O .bss	00000004 OSQFreeList
040235dc g     F .text	00000120 alt_find_file
0402252c g     F .text	000000b4 alt_dev_llist_insert
04017dd4 g     F .text	00000108 __malloc_lock
040177c4 g     F .text	000000bc sbrk
040180dc g     F .text	00000144 OSEventNameSet
0400f3e4 g     F .text	000001fc _fflush_r
04014db4 g     F .text	000000c8 _calloc_r
04026ac0 g     O .bss	00000001 OSRdyGrp
04026958 g     O .rwdata	00000008 alt_flash_dev_list
04004d9c g     F .text	00000644 Navigation_Task
04001ccc g     F .text	000000cc Flash_InfoDump
040269ec g       *ABS*	00000000 __bss_start
040269ec g     O .bss	00000004 bKeyPressed
04010b98 g     F .text	00000098 memset
040063b8 g     F .text	0000023c main
04026a74 g     O .bss	00000004 alt_envp
04026a54 g     O .bss	00000004 __malloc_max_total_mem
04020da4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04000884 g     F .text	0000014c i2c_read
04024ad0 g     O .rodata	00000100 OSUnMapTbl
04016b98 g     F .text	00000078 __ltsf2
0400f908 g     F .text	0000020c _fread_r
04026a30 g     O .bss	00000004 LEFT_VOLT
040269ae g     O .rwdata	00000002 OSSemEn
0401b2bc g     F .text	000003a8 OSFlagPost
0401266c g     F .text	00000008 __sclose
040076bc g     F .text	00000008 matherr
06000000 g       *ABS*	00000000 __alt_heap_limit
04014ffc g     F .text	00000014 fclose
04019140 g     F .text	00000110 OS_EventTaskWait
0400549c g     F .text	000001d4 History_Task
04013fc8 g     F .text	00000250 _strtol_r
04008e38 g     F .text	00000074 __truncdfsf2
04019d2c g     F .text	000000c8 OS_TaskStatStkChk
04035ed4 g     O .bss	00000190 _atexit0
0401eff8 g     F .text	00000170 OSTaskDelReq
0400de30 g     F .text	000015b4 _dtoa_r
04009a1c g     F .text	00000740 _malloc_r
04026954 g     O .rwdata	00000004 alt_errno
04018c14 g     F .text	00000070 OSStart
0402cb48 g     O .bss	00002000 task3_stk
04014aa8 g     F .text	000000dc __submore
04017d78 g     F .text	0000005c __env_unlock
040104f8 g     F .text	000000b8 _fwalk
0401f4e4 g     F .text	00000218 OSTaskResume
0401c1d8 g     F .text	000000fc OSMemQuery
040269c0 g     O .rwdata	00000002 OSTaskStatEn
040108f4 g     F .text	00000040 _mbtowc_r
0402699a g     O .rwdata	00000002 OSMemMax
0401d0f4 g     F .text	00000188 OSQPostFront
04001824 g     F .text	000000c8 vector_normalize
04008f28 g     F .text	00000060 __divsi3
04026ac1 g     O .bss	00000003 OSRdyTbl
04026974 g     O .rwdata	00000002 OSDebugEn
040244a4 g     O .rodata	00000014 __thenan_df
0400fb54 g     F .text	0000012c _malloc_trim_r
04023c18 g       *ABS*	00000000 __CTOR_END__
0400797c g     F .text	000001e0 __mulsf3
0402698c g     O .rwdata	00000002 OSFlagNodeSize
040269d4 g     O .rwdata	00000002 OSTmrCfgMax
04020784 g     F .text	00000280 alt_epcs_flash_write
040127b8 g     F .text	000000bc strcmp
0401c4fc g     F .text	00000214 OSQCreate
0401f168 g     F .text	000001b8 OSTaskNameGet
0401d27c g     F .text	00000234 OSQPostOpt
04018d30 g     F .text	00000240 OSTimeTick
040269bc g     O .rwdata	00000002 OSTaskMax
04023c18 g       *ABS*	00000000 __DTOR_LIST__
0401d79c g     F .text	00000114 OSSemCreate
04005e24 g     F .text	00000074 isSensorClear
040269e0 g     O .rwdata	00000002 OSTmrWheelSize
04016c98 g     F .text	00000088 __nedf2
04000d68 g     F .text	00000080 readMagReg
040269b6 g     O .rwdata	00000002 OSTaskDelEn
0401e070 g     F .text	00000130 OSSemQuery
0401c710 g     F .text	00000300 OSQDel
0401cdf8 g     F .text	0000017c OSQPendAbort
04020298 g     F .text	00000034 alt_irq_init
0401774c g     F .text	00000078 alt_release_fd
04006fdc g     F .text	00000698 atan
04004084 g     F .text	00000044 SPI_Write
04012598 g     F .text	00000074 sprintf
040244b8 g     O .rodata	00000100 __clz_tab
0400247c g     F .text	000000e8 Flash_Size
04026a64 g     O .bss	00000004 _PathLocale
04026a34 g     O .bss	00000004 MOTOR_0_STATUS
04013e88 g     F .text	00000124 strtof
04023800 g     F .text	00000014 atexit
04014d3c g     F .text	00000078 _write_r
04026a38 g     O .bss	00000004 TRVL_INDEX
0400475c g     F .text	0000001c DEMO_ACCELEROMETER
04018aa4 g     F .text	0000008c OSSchedLock
04010684 g     F .text	0000001c setlocale
0400a32c g     F .text	00000048 scanf
0401a594 g     F .text	0000013c OSFlagCreate
04012590 g     F .text	00000008 nanf
04026924 g     O .rwdata	00000004 _impure_ptr
04026a6c g     O .bss	00000004 alt_argc
04010834 g     F .text	00000080 _mbrtowc_r
040226a4 g     F .text	00000064 _do_dtors
04026a3c g     O .bss	00000004 FRONT_CLEAR
04026986 g     O .rwdata	00000002 OSEventMultiEn
040122b0 g     F .text	000001c4 __srefill_r
04002fc8 g     F .text	000003ec motorGo
0401a6d0 g     F .text	000002a8 OSFlagDel
04026ac4 g     O .bss	00000004 OSEventFreeList
04000020 g       .exceptions	00000000 alt_irq_entry
04010dec g     F .text	00000080 __ulp
04012490 g     F .text	00000040 __isinfd
04003a6c g     F .text	0000016c executeHistory
0401ac10 g     F .text	00000644 OSFlagPend
040269d2 g     O .rwdata	00000002 OSTmrEn
0400f730 g     F .text	00000018 __fp_unlock_all
040003f4 g     F .text	00000110 I2C_MultipleWrite
04026940 g     O .rwdata	00000008 alt_fs_list
04019b30 g     F .text	00000080 OS_StrCopy
040033b4 g     F .text	000003ec motorGoForward
0402699c g     O .rwdata	00000002 OSMemNameSize
04000cf8 g     F .text	00000070 writeMagReg
0402334c g     F .text	0000001c OSInitHookEnd
040269c8 g     O .rwdata	00000002 OSTCBPrioTblMax
040105f0 g     F .text	00000010 localeconv
04021d70 g     F .text	0000014c epcs_read_buffer
04026a40 g     O .bss	00000004 LEFT_CLEAR
04005e98 g     F .text	000002f0 Encoder_Task
04006d14 g     F .text	000002c8 __ieee754_sqrt
040269c4 g     O .rwdata	00000002 OSTaskStatStkChkEn
04020368 g     F .text	00000054 alt_epcs_flash_init
0402279c g     F .text	00000050 alt_ic_isr_register
04026998 g     O .rwdata	00000002 OSMemEn
040150a8 g     F .text	00000068 __hexdig_init
040269a2 g     O .rwdata	00000002 OSMutexEn
0402eb48 g     O .bss	00001f40 TRVL
040269ec g       *ABS*	00000000 _edata
04036064 g       *ABS*	00000000 _end
04017080 g     F .text	0000007c alt_flash_open_dev
04026ac8 g     O .bss	00000001 OSIntNesting
04006188 g     F .text	00000130 EncoderCalibrate
0400da3c g     F .text	00000074 vfscanf
04021418 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0401ffc0 g     F .text	00000210 OSTimeDlyResume
040065f4 g     F .text	00000088 fmax
0401aabc g     F .text	00000154 OSFlagNameSet
0401f6fc g     F .text	000001fc OSTaskStkChk
04022888 g     F .text	000000a0 alt_ic_irq_disable
040221cc g     F .text	00000058 epcs_enter_4_bytes_mode
0402699e g     O .rwdata	00000002 OSMemSize
040020b4 g     F .text	00000250 Flash_Write
040126dc g     F .text	0000007c __swrite
04003e60 g     F .text	000000a0 returnHbridgeIn
0402692c g     O .rwdata	00000004 __malloc_trim_threshold
04004484 g     F .text	0000022c DEMO_ENCODERS
04004abc g     F .text	00000184 GenerateTest
04022e9c g     F .text	00000020 altera_nios2_qsys_irq_init
04026acc g     O .bss	00000004 OSTCBCur
04023814 g     F .text	00000038 exit
040053e0 g     F .text	000000bc LSM303_Task
040269a0 g     O .rwdata	00000002 OSMemTblSize
04010430 g     F .text	000000c8 _fwalk_reent
04007e30 g     F .text	000000c0 __floatunsisf
040113e8 g     F .text	0000018c __mdiff
040170fc g     F .text	00000054 alt_flash_close_dev
04004890 g     F .text	000000d0 mainalt2
04008f88 g     F .text	00000060 __modsi3
04026a44 g     O .bss	00000004 MOTOR_1_STATUS
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400f670 g     F .text	00000004 __sfp_lock_release
040188d4 g     F .text	00000054 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0401fb24 g     F .text	00000144 OSTaskQuery
04004c40 g     F .text	0000015c GenerateForward
04001a60 g     F .text	00000068 ADXL345_SPI_IsDataReady
0401d630 g     F .text	000000ac OS_QInit
040124d0 g     F .text	000000c0 __sccl
04019bb0 g     F .text	00000058 OS_StrLen
0401bfc8 g     F .text	00000120 OSMemNameSet
04024668 g     O .rodata	00000101 _ctype_
040269ba g     O .rwdata	00000002 OSTaskProfileEn
04026ad0 g     O .bss	00000004 OSTime
04003f4c g     F .text	00000138 SPI_MultipleWrite
040093fc g     F .text	000000a8 __fpcmp_parts_f
04034530 g     O .bss	00000800 OSTaskIdleStk
04023be8 g     F .text	0000002c _exit
0400768c g     F .text	00000030 __isnand
0402227c g     F .text	00000154 alt_alarm_start
0401a978 g     F .text	00000144 OSFlagNameGet
040201d0 g     F .text	00000064 OSTimeGet
04009030 g     F .text	00000124 __muldi3
04026a48 g     O .bss	00000004 RIGHT_VOLT
040106a0 g     F .text	00000194 __smakebuf_r
0400a374 g     F .text	00000074 strlen
04021ebc g     F .text	00000050 epcs_write_enable
040232dc g     F .text	0000001c OSTaskSwHook
04022cb0 g     F .text	0000018c open
04034d30 g     O .bss	00000b40 OSEventTbl
04008a98 g     F .text	00000088 __gedf2
04035870 g     O .bss	00000510 OSTCBTbl
040151c0 g     F .text	000007fc __gethex
0401e1a0 g     F .text	00000104 OSSemSet
04002ea0 g     F .text	00000048 turnLeft
04003f00 g     F .text	0000004c SPI_Init
040269e8 g     O .rwdata	00000004 alt_priority_mask
0401d8b0 g     F .text	000002a0 OSSemDel
04026ad4 g     O .bss	00000004 OSFlagFreeList
040227ec g     F .text	0000009c alt_ic_irq_enable
04026980 g     O .rwdata	00000002 OSEventNameSize
0400c304 g     F .text	00000024 __vfprintf_internal
04026ad8 g     O .bss	00000001 OSStatRdy
00001800 g       *ABS*	00000000 __alt_mem_epcs
04035d80 g     O .bss	00000054 OSTCBPrioTbl
04017ccc g     F .text	000000ac __env_lock
040269c6 g     O .rwdata	00000002 OSTaskSwHookEn
04008300 g     F .text	00000080 __subdf3
04005670 g     F .text	0000014c checkLeftRight
04020cb4 g     F .text	00000098 alt_epcs_flash_read
04004220 g     F .text	00000044 SPI_Read
04000bcc g     F .text	00000028 timeoutOccurred
04010cc8 g     F .text	000000c4 __lo0bits
04002304 g     F .text	000000f4 Flash_Erase
0400c328 g     F .text	00001688 __svfscanf_r
04026964 g     O .rwdata	00000008 alt_alarm_list
04014b84 g     F .text	0000019c _ungetc_r
0402698e g     O .rwdata	00000002 OSFlagWidth
04022640 g     F .text	00000064 _do_ctors
04016eb4 g     F .text	00000100 close
04007918 g     F .text	00000064 __addsf3
04030a88 g     O .bss	00002000 task5_stk
04026a84 g     O .bss	00000004 alt_envsem
04026adc g     O .bss	00000004 OSIdleCtrRun
04018f70 g     F .text	00000020 OSVersion
04002dc4 g     F .text	00000060 M_allStop
040269d8 g     O .rwdata	00000002 OSTmrCfgWheelSize
04000ff8 g     F .text	00000344 LSM303_calibrate
0401fc68 g     F .text	0000007c OS_TaskStkClr
040094d0 g     F .text	00000314 __pack_d
040269b2 g     O .rwdata	00000002 OSTaskCreateEn
04019560 g     F .text	00000068 OS_EventWaitListInit
04023368 g     F .text	0000001c OSTaskIdleHook
040099f4 g     F .text	00000014 free
0400f674 g     F .text	00000004 __sinit_lock_acquire
04021f70 g     F .text	00000170 epcs_write_buffer
04011950 g     F .text	0000012c __multadd
04010c30 g     F .text	00000028 _Bfree
04032a88 g     O .bss	00000028 MainQueueBaseAddress
0401f8f8 g     F .text	0000022c OSTaskSuspend
04001388 g     F .text	000002c0 heading
04019c08 g     F .text	0000005c OS_TaskIdle
040269de g     O .rwdata	00000002 OSTmrTblSize
0401d4b0 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	40189280 	call	4018928 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0ffff17 	ldw	r3,-4(fp)
 4000120:	e0bffe17 	ldw	r2,-8(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	1005003a 	cmpeq	r2,r2,zero
 400012c:	1000161e 	bne	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000130:	e0bffd17 	ldw	r2,-12(fp)
 4000134:	00c100f4 	movhi	r3,1027
 4000138:	18d77504 	addi	r3,r3,24020
 400013c:	100490fa 	slli	r2,r2,3
 4000140:	10c5883a 	add	r2,r2,r3
 4000144:	11400017 	ldw	r5,0(r2)
 4000148:	e0bffd17 	ldw	r2,-12(fp)
 400014c:	00c100f4 	movhi	r3,1027
 4000150:	18d77504 	addi	r3,r3,24020
 4000154:	100490fa 	slli	r2,r2,3
 4000158:	10c5883a 	add	r2,r2,r3
 400015c:	10800104 	addi	r2,r2,4
 4000160:	11000017 	ldw	r4,0(r2)
 4000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000168:	0005313a 	rdctl	r2,ipending
 400016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000178:	e0bfff17 	ldw	r2,-4(fp)
 400017c:	1004c03a 	cmpne	r2,r2,zero
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffe17 	ldw	r2,-8(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	40189a40 	call	40189a4 <OSIntExit>
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001bc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001c4:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 40001c8:	d6ba4814 	ori	gp,gp,59680
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001cc:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 40001d0:	109a7b14 	ori	r2,r2,27116

    movhi r3, %hi(__bss_end)
 40001d4:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 40001d8:	18d81914 	ori	r3,r3,24676

    beq r2, r3, 1f
 40001dc:	10c00326 	beq	r2,r3,40001ec <_start+0x30>

0:
    stw zero, (r2)
 40001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e8:	10fffd36 	bltu	r2,r3,40001e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	40175000 	call	4017500 <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <alt_after_alt_main>

040001f4 <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 40001f4:	defff804 	addi	sp,sp,-32
 40001f8:	dfc00715 	stw	ra,28(sp)
 40001fc:	df000615 	stw	fp,24(sp)
 4000200:	df000604 	addi	fp,sp,24
 4000204:	e13ffb15 	stw	r4,-20(fp)
 4000208:	e17ffc15 	stw	r5,-16(fp)
 400020c:	e0800217 	ldw	r2,8(fp)
 4000210:	e1bffd05 	stb	r6,-12(fp)
 4000214:	e1fffe05 	stb	r7,-8(fp)
 4000218:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 400021c:	00800044 	movi	r2,1
 4000220:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4000224:	e13ffb17 	ldw	r4,-20(fp)
 4000228:	e17ffc17 	ldw	r5,-16(fp)
 400022c:	40006600 	call	4000660 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4000230:	e0bffd03 	ldbu	r2,-12(fp)
 4000234:	11803fcc 	andi	r6,r2,255
 4000238:	e13ffb17 	ldw	r4,-20(fp)
 400023c:	e17ffc17 	ldw	r5,-16(fp)
 4000240:	40007600 	call	4000760 <i2c_write>
 4000244:	1004c03a 	cmpne	r2,r2,zero
 4000248:	1000041e 	bne	r2,zero,400025c <I2C_Write+0x68>
        bSuccess = FALSE;
 400024c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
        printf("I2C Fail: Address NACK!\n");
 4000250:	010100b4 	movhi	r4,1026
 4000254:	210f0604 	addi	r4,r4,15384
 4000258:	400a2740 	call	400a274 <puts>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 400025c:	e0bffa17 	ldw	r2,-24(fp)
 4000260:	1005003a 	cmpeq	r2,r2,zero
 4000264:	10000a1e 	bne	r2,zero,4000290 <I2C_Write+0x9c>
 4000268:	e1bffe03 	ldbu	r6,-8(fp)
 400026c:	e13ffb17 	ldw	r4,-20(fp)
 4000270:	e17ffc17 	ldw	r5,-16(fp)
 4000274:	40007600 	call	4000760 <i2c_write>
 4000278:	1004c03a 	cmpne	r2,r2,zero
 400027c:	1000041e 	bne	r2,zero,4000290 <I2C_Write+0x9c>
        bSuccess = FALSE;
 4000280:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
        printf("I2C Fail: SubAddress NACK!\n");
 4000284:	010100b4 	movhi	r4,1026
 4000288:	210f0c04 	addi	r4,r4,15408
 400028c:	400a2740 	call	400a274 <puts>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4000290:	e0bffa17 	ldw	r2,-24(fp)
 4000294:	1005003a 	cmpeq	r2,r2,zero
 4000298:	10000a1e 	bne	r2,zero,40002c4 <I2C_Write+0xd0>
 400029c:	e1bfff03 	ldbu	r6,-4(fp)
 40002a0:	e13ffb17 	ldw	r4,-20(fp)
 40002a4:	e17ffc17 	ldw	r5,-16(fp)
 40002a8:	40007600 	call	4000760 <i2c_write>
 40002ac:	1004c03a 	cmpne	r2,r2,zero
 40002b0:	1000041e 	bne	r2,zero,40002c4 <I2C_Write+0xd0>
        bSuccess = FALSE;
 40002b4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
        printf("I2C Fail: write NACK!\n");
 40002b8:	010100b4 	movhi	r4,1026
 40002bc:	210f1304 	addi	r4,r4,15436
 40002c0:	400a2740 	call	400a274 <puts>
    }
    i2c_stop(clk_base, data_base);
 40002c4:	e13ffb17 	ldw	r4,-20(fp)
 40002c8:	e17ffc17 	ldw	r5,-16(fp)
 40002cc:	40006e80 	call	40006e8 <i2c_stop>
    
    usleep(7 * 1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 40002d0:	0106d604 	movi	r4,7000
 40002d4:	4017a280 	call	4017a28 <usleep>
    
    return bSuccess;
 40002d8:	e0bffa17 	ldw	r2,-24(fp)


}
 40002dc:	e037883a 	mov	sp,fp
 40002e0:	dfc00117 	ldw	ra,4(sp)
 40002e4:	df000017 	ldw	fp,0(sp)
 40002e8:	dec00204 	addi	sp,sp,8
 40002ec:	f800283a 	ret

040002f0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 40002f0:	defff904 	addi	sp,sp,-28
 40002f4:	dfc00615 	stw	ra,24(sp)
 40002f8:	df000515 	stw	fp,20(sp)
 40002fc:	df000504 	addi	fp,sp,20
 4000300:	e13ffc15 	stw	r4,-16(fp)
 4000304:	e17ffd15 	stw	r5,-12(fp)
 4000308:	e1bffe05 	stb	r6,-8(fp)
 400030c:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 4000310:	00800044 	movi	r2,1
 4000314:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4000318:	e13ffc17 	ldw	r4,-16(fp)
 400031c:	e17ffd17 	ldw	r5,-12(fp)
 4000320:	40006600 	call	4000660 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4000324:	e0bffe03 	ldbu	r2,-8(fp)
 4000328:	11803fcc 	andi	r6,r2,255
 400032c:	e13ffc17 	ldw	r4,-16(fp)
 4000330:	e17ffd17 	ldw	r5,-12(fp)
 4000334:	40007600 	call	4000760 <i2c_write>
 4000338:	1004c03a 	cmpne	r2,r2,zero
 400033c:	1000011e 	bne	r2,zero,4000344 <I2C_Read+0x54>
        bSuccess = FALSE;
 4000340:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4000344:	e0bffb17 	ldw	r2,-20(fp)
 4000348:	1005003a 	cmpeq	r2,r2,zero
 400034c:	1000071e 	bne	r2,zero,400036c <I2C_Read+0x7c>
 4000350:	e1bfff03 	ldbu	r6,-4(fp)
 4000354:	e13ffc17 	ldw	r4,-16(fp)
 4000358:	e17ffd17 	ldw	r5,-12(fp)
 400035c:	40007600 	call	4000760 <i2c_write>
 4000360:	1004c03a 	cmpne	r2,r2,zero
 4000364:	1000011e 	bne	r2,zero,400036c <I2C_Read+0x7c>
        bSuccess = FALSE;
 4000368:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
 400036c:	e13ffc17 	ldw	r4,-16(fp)
 4000370:	e17ffd17 	ldw	r5,-12(fp)
 4000374:	40006600 	call	4000660 <i2c_start>
    DeviceAddr |= 1; // Read
 4000378:	e0bffe03 	ldbu	r2,-8(fp)
 400037c:	10800054 	ori	r2,r2,1
 4000380:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4000384:	e0bffb17 	ldw	r2,-20(fp)
 4000388:	1005003a 	cmpeq	r2,r2,zero
 400038c:	1000081e 	bne	r2,zero,40003b0 <I2C_Read+0xc0>
 4000390:	e0bffe03 	ldbu	r2,-8(fp)
 4000394:	11803fcc 	andi	r6,r2,255
 4000398:	e13ffc17 	ldw	r4,-16(fp)
 400039c:	e17ffd17 	ldw	r5,-12(fp)
 40003a0:	40007600 	call	4000760 <i2c_write>
 40003a4:	1004c03a 	cmpne	r2,r2,zero
 40003a8:	1000011e 	bne	r2,zero,40003b0 <I2C_Read+0xc0>
        bSuccess = FALSE;
 40003ac:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
 40003b0:	e0bffb17 	ldw	r2,-20(fp)
 40003b4:	1005003a 	cmpeq	r2,r2,zero
 40003b8:	1000051e 	bne	r2,zero,40003d0 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 40003bc:	e13ffc17 	ldw	r4,-16(fp)
 40003c0:	e17ffd17 	ldw	r5,-12(fp)
 40003c4:	e1800217 	ldw	r6,8(fp)
 40003c8:	000f883a 	mov	r7,zero
 40003cc:	40008840 	call	4000884 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 40003d0:	e13ffc17 	ldw	r4,-16(fp)
 40003d4:	e17ffd17 	ldw	r5,-12(fp)
 40003d8:	40006e80 	call	40006e8 <i2c_stop>
    
    return bSuccess;
 40003dc:	e0bffb17 	ldw	r2,-20(fp)
}
 40003e0:	e037883a 	mov	sp,fp
 40003e4:	dfc00117 	ldw	ra,4(sp)
 40003e8:	df000017 	ldw	fp,0(sp)
 40003ec:	dec00204 	addi	sp,sp,8
 40003f0:	f800283a 	ret

040003f4 <I2C_MultipleWrite>:


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 40003f4:	defff704 	addi	sp,sp,-36
 40003f8:	dfc00815 	stw	ra,32(sp)
 40003fc:	df000715 	stw	fp,28(sp)
 4000400:	df000704 	addi	fp,sp,28
 4000404:	e13ffb15 	stw	r4,-20(fp)
 4000408:	e17ffc15 	stw	r5,-16(fp)
 400040c:	e0800317 	ldw	r2,12(fp)
 4000410:	e1bffd05 	stb	r6,-12(fp)
 4000414:	e1fffe05 	stb	r7,-8(fp)
 4000418:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 400041c:	00800044 	movi	r2,1
 4000420:	e0bffa15 	stw	r2,-24(fp)
    int i;

    i2c_start(clk_base, data_base);
 4000424:	e13ffb17 	ldw	r4,-20(fp)
 4000428:	e17ffc17 	ldw	r5,-16(fp)
 400042c:	40006600 	call	4000660 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4000430:	e0bffd03 	ldbu	r2,-12(fp)
 4000434:	11803fcc 	andi	r6,r2,255
 4000438:	e13ffb17 	ldw	r4,-20(fp)
 400043c:	e17ffc17 	ldw	r5,-16(fp)
 4000440:	40007600 	call	4000760 <i2c_write>
 4000444:	1004c03a 	cmpne	r2,r2,zero
 4000448:	1000011e 	bne	r2,zero,4000450 <I2C_MultipleWrite+0x5c>
        bSuccess = FALSE;
 400044c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4000450:	e0bffa17 	ldw	r2,-24(fp)
 4000454:	1005003a 	cmpeq	r2,r2,zero
 4000458:	1000071e 	bne	r2,zero,4000478 <I2C_MultipleWrite+0x84>
 400045c:	e1bffe03 	ldbu	r6,-8(fp)
 4000460:	e13ffb17 	ldw	r4,-20(fp)
 4000464:	e17ffc17 	ldw	r5,-16(fp)
 4000468:	40007600 	call	4000760 <i2c_write>
 400046c:	1004c03a 	cmpne	r2,r2,zero
 4000470:	1000011e 	bne	r2,zero,4000478 <I2C_MultipleWrite+0x84>
        bSuccess = FALSE;
 4000474:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 4000478:	e0bffa17 	ldw	r2,-24(fp)
 400047c:	1005003a 	cmpeq	r2,r2,zero
 4000480:	1000151e 	bne	r2,zero,40004d8 <I2C_MultipleWrite+0xe4>
        for(i=0;i<len && bSuccess;i++){
 4000484:	e03ff915 	stw	zero,-28(fp)
 4000488:	00000d06 	br	40004c0 <I2C_MultipleWrite+0xcc>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 400048c:	e0800217 	ldw	r2,8(fp)
 4000490:	10800003 	ldbu	r2,0(r2)
 4000494:	11803fcc 	andi	r6,r2,255
 4000498:	e13ffb17 	ldw	r4,-20(fp)
 400049c:	e17ffc17 	ldw	r5,-16(fp)
 40004a0:	40007600 	call	4000760 <i2c_write>
 40004a4:	e0bffa15 	stw	r2,-24(fp)
            pData++;
 40004a8:	e0800217 	ldw	r2,8(fp)
 40004ac:	10800044 	addi	r2,r2,1
 40004b0:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 40004b4:	e0bff917 	ldw	r2,-28(fp)
 40004b8:	10800044 	addi	r2,r2,1
 40004bc:	e0bff915 	stw	r2,-28(fp)
 40004c0:	e0ffff0b 	ldhu	r3,-4(fp)
 40004c4:	e0bff917 	ldw	r2,-28(fp)
 40004c8:	10c0030e 	bge	r2,r3,40004d8 <I2C_MultipleWrite+0xe4>
 40004cc:	e0bffa17 	ldw	r2,-24(fp)
 40004d0:	1004c03a 	cmpne	r2,r2,zero
 40004d4:	103fed1e 	bne	r2,zero,400048c <I2C_MultipleWrite+0x98>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 40004d8:	e13ffb17 	ldw	r4,-20(fp)
 40004dc:	e17ffc17 	ldw	r5,-16(fp)
 40004e0:	40006e80 	call	40006e8 <i2c_stop>
    
    usleep(8*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 40004e4:	0107d004 	movi	r4,8000
 40004e8:	4017a280 	call	4017a28 <usleep>
    
    return bSuccess;
 40004ec:	e0bffa17 	ldw	r2,-24(fp)


}
 40004f0:	e037883a 	mov	sp,fp
 40004f4:	dfc00117 	ldw	ra,4(sp)
 40004f8:	df000017 	ldw	fp,0(sp)
 40004fc:	dec00204 	addi	sp,sp,8
 4000500:	f800283a 	ret

04000504 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 4000504:	defff704 	addi	sp,sp,-36
 4000508:	dfc00815 	stw	ra,32(sp)
 400050c:	df000715 	stw	fp,28(sp)
 4000510:	df000704 	addi	fp,sp,28
 4000514:	e13ffb15 	stw	r4,-20(fp)
 4000518:	e17ffc15 	stw	r5,-16(fp)
 400051c:	e0800317 	ldw	r2,12(fp)
 4000520:	e1bffd05 	stb	r6,-12(fp)
 4000524:	e1fffe05 	stb	r7,-8(fp)
 4000528:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 400052c:	00800044 	movi	r2,1
 4000530:	e0bff915 	stw	r2,-28(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4000534:	e13ffb17 	ldw	r4,-20(fp)
 4000538:	e17ffc17 	ldw	r5,-16(fp)
 400053c:	40006600 	call	4000660 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4000540:	e0bffd03 	ldbu	r2,-12(fp)
 4000544:	11803fcc 	andi	r6,r2,255
 4000548:	e13ffb17 	ldw	r4,-20(fp)
 400054c:	e17ffc17 	ldw	r5,-16(fp)
 4000550:	40007600 	call	4000760 <i2c_write>
 4000554:	1004c03a 	cmpne	r2,r2,zero
 4000558:	1000011e 	bne	r2,zero,4000560 <I2C_MultipleRead+0x5c>
        bSuccess = FALSE;
 400055c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4000560:	e0bff917 	ldw	r2,-28(fp)
 4000564:	1005003a 	cmpeq	r2,r2,zero
 4000568:	1000071e 	bne	r2,zero,4000588 <I2C_MultipleRead+0x84>
 400056c:	e1bffe03 	ldbu	r6,-8(fp)
 4000570:	e13ffb17 	ldw	r4,-20(fp)
 4000574:	e17ffc17 	ldw	r5,-16(fp)
 4000578:	40007600 	call	4000760 <i2c_write>
 400057c:	1004c03a 	cmpne	r2,r2,zero
 4000580:	1000011e 	bne	r2,zero,4000588 <I2C_MultipleRead+0x84>
        bSuccess = FALSE;
 4000584:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 4000588:	e0bff917 	ldw	r2,-28(fp)
 400058c:	1005003a 	cmpeq	r2,r2,zero
 4000590:	1000031e 	bne	r2,zero,40005a0 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 4000594:	e13ffb17 	ldw	r4,-20(fp)
 4000598:	e17ffc17 	ldw	r5,-16(fp)
 400059c:	40006600 	call	4000660 <i2c_start>
    DeviceAddr |= 1; // Read
 40005a0:	e0bffd03 	ldbu	r2,-12(fp)
 40005a4:	10800054 	ori	r2,r2,1
 40005a8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 40005ac:	e0bff917 	ldw	r2,-28(fp)
 40005b0:	1005003a 	cmpeq	r2,r2,zero
 40005b4:	1000081e 	bne	r2,zero,40005d8 <I2C_MultipleRead+0xd4>
 40005b8:	e0bffd03 	ldbu	r2,-12(fp)
 40005bc:	11803fcc 	andi	r6,r2,255
 40005c0:	e13ffb17 	ldw	r4,-20(fp)
 40005c4:	e17ffc17 	ldw	r5,-16(fp)
 40005c8:	40007600 	call	4000760 <i2c_write>
 40005cc:	1004c03a 	cmpne	r2,r2,zero
 40005d0:	1000011e 	bne	r2,zero,40005d8 <I2C_MultipleRead+0xd4>
        bSuccess = FALSE;
 40005d4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 40005d8:	e0bff917 	ldw	r2,-28(fp)
 40005dc:	1005003a 	cmpeq	r2,r2,zero
 40005e0:	1000161e 	bne	r2,zero,400063c <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 40005e4:	e03ffa15 	stw	zero,-24(fp)
 40005e8:	00000e06 	br	4000624 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 40005ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40005f0:	10ffffc4 	addi	r3,r2,-1
 40005f4:	e0bffa17 	ldw	r2,-24(fp)
 40005f8:	188ec03a 	cmpne	r7,r3,r2
 40005fc:	e13ffb17 	ldw	r4,-20(fp)
 4000600:	e17ffc17 	ldw	r5,-16(fp)
 4000604:	e1800217 	ldw	r6,8(fp)
 4000608:	40008840 	call	4000884 <i2c_read>
            pBuf++;
 400060c:	e0800217 	ldw	r2,8(fp)
 4000610:	10800044 	addi	r2,r2,1
 4000614:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4000618:	e0bffa17 	ldw	r2,-24(fp)
 400061c:	10800044 	addi	r2,r2,1
 4000620:	e0bffa15 	stw	r2,-24(fp)
 4000624:	e0ffff0b 	ldhu	r3,-4(fp)
 4000628:	e0bffa17 	ldw	r2,-24(fp)
 400062c:	10c0030e 	bge	r2,r3,400063c <I2C_MultipleRead+0x138>
 4000630:	e0bff917 	ldw	r2,-28(fp)
 4000634:	1004c03a 	cmpne	r2,r2,zero
 4000638:	103fec1e 	bne	r2,zero,40005ec <I2C_MultipleRead+0xe8>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 400063c:	e13ffb17 	ldw	r4,-20(fp)
 4000640:	e17ffc17 	ldw	r5,-16(fp)
 4000644:	40006e80 	call	40006e8 <i2c_stop>
    
    return bSuccess;    
 4000648:	e0bff917 	ldw	r2,-28(fp)
    
}
 400064c:	e037883a 	mov	sp,fp
 4000650:	dfc00117 	ldw	ra,4(sp)
 4000654:	df000017 	ldw	fp,0(sp)
 4000658:	dec00204 	addi	sp,sp,8
 400065c:	f800283a 	ret

04000660 <i2c_start>:
///////////// Internal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 4000660:	defffc04 	addi	sp,sp,-16
 4000664:	dfc00315 	stw	ra,12(sp)
 4000668:	df000215 	stw	fp,8(sp)
 400066c:	df000204 	addi	fp,sp,8
 4000670:	e13ffe15 	stw	r4,-8(fp)
 4000674:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 4000678:	e0bfff17 	ldw	r2,-4(fp)
 400067c:	10800104 	addi	r2,r2,4
 4000680:	1007883a 	mov	r3,r2
 4000684:	00800044 	movi	r2,1
 4000688:	18800035 	stwio	r2,0(r3)



    // start condition
    SDA_HIGH(data_base); // data high
 400068c:	e0bfff17 	ldw	r2,-4(fp)
 4000690:	1007883a 	mov	r3,r2
 4000694:	00800044 	movi	r2,1
 4000698:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 400069c:	e0bffe17 	ldw	r2,-8(fp)
 40006a0:	1007883a 	mov	r3,r2
 40006a4:	00800044 	movi	r2,1
 40006a8:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 40006ac:	0101f404 	movi	r4,2000
 40006b0:	4017a280 	call	4017a28 <usleep>

    SDA_LOW(data_base); // data low
 40006b4:	e0bfff17 	ldw	r2,-4(fp)
 40006b8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 40006bc:	0101f404 	movi	r4,2000
 40006c0:	4017a280 	call	4017a28 <usleep>
    SCL_LOW(clk_base); // clock low
 40006c4:	e0bffe17 	ldw	r2,-8(fp)
 40006c8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 40006cc:	0101f404 	movi	r4,2000
 40006d0:	4017a280 	call	4017a28 <usleep>
}
 40006d4:	e037883a 	mov	sp,fp
 40006d8:	dfc00117 	ldw	ra,4(sp)
 40006dc:	df000017 	ldw	fp,0(sp)
 40006e0:	dec00204 	addi	sp,sp,8
 40006e4:	f800283a 	ret

040006e8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 40006e8:	defffc04 	addi	sp,sp,-16
 40006ec:	dfc00315 	stw	ra,12(sp)
 40006f0:	df000215 	stw	fp,8(sp)
 40006f4:	df000204 	addi	fp,sp,8
 40006f8:	e13ffe15 	stw	r4,-8(fp)
 40006fc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 4000700:	e0bfff17 	ldw	r2,-4(fp)
 4000704:	10800104 	addi	r2,r2,4
 4000708:	1007883a 	mov	r3,r2
 400070c:	00800044 	movi	r2,1
 4000710:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 4000714:	e0bfff17 	ldw	r2,-4(fp)
 4000718:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
 400071c:	e0bffe17 	ldw	r2,-8(fp)
 4000720:	1007883a 	mov	r3,r2
 4000724:	00800044 	movi	r2,1
 4000728:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 400072c:	0101f404 	movi	r4,2000
 4000730:	4017a280 	call	4017a28 <usleep>
    SDA_HIGH(data_base); // data high
 4000734:	e0bfff17 	ldw	r2,-4(fp)
 4000738:	1007883a 	mov	r3,r2
 400073c:	00800044 	movi	r2,1
 4000740:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 4000744:	0101f404 	movi	r4,2000
 4000748:	4017a280 	call	4017a28 <usleep>
    


}
 400074c:	e037883a 	mov	sp,fp
 4000750:	dfc00117 	ldw	ra,4(sp)
 4000754:	df000017 	ldw	fp,0(sp)
 4000758:	dec00204 	addi	sp,sp,8
 400075c:	f800283a 	ret

04000760 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 4000760:	defff804 	addi	sp,sp,-32
 4000764:	dfc00715 	stw	ra,28(sp)
 4000768:	df000615 	stw	fp,24(sp)
 400076c:	df000604 	addi	fp,sp,24
 4000770:	e13ffd15 	stw	r4,-12(fp)
 4000774:	e17ffe15 	stw	r5,-8(fp)
 4000778:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 400077c:	00bfe004 	movi	r2,-128
 4000780:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 4000784:	e0bffe17 	ldw	r2,-8(fp)
 4000788:	10800104 	addi	r2,r2,4
 400078c:	1007883a 	mov	r3,r2
 4000790:	00800044 	movi	r2,1
 4000794:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 4000798:	e03ffa15 	stw	zero,-24(fp)
 400079c:	00001f06 	br	400081c <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 40007a0:	e0bffd17 	ldw	r2,-12(fp)
 40007a4:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 40007a8:	e0ffff03 	ldbu	r3,-4(fp)
 40007ac:	e0bffc03 	ldbu	r2,-16(fp)
 40007b0:	1884703a 	and	r2,r3,r2
 40007b4:	10803fcc 	andi	r2,r2,255
 40007b8:	1005003a 	cmpeq	r2,r2,zero
 40007bc:	1000051e 	bne	r2,zero,40007d4 <i2c_write+0x74>
            SDA_HIGH(data_base);
 40007c0:	e0bffe17 	ldw	r2,-8(fp)
 40007c4:	1007883a 	mov	r3,r2
 40007c8:	00800044 	movi	r2,1
 40007cc:	18800035 	stwio	r2,0(r3)
 40007d0:	00000206 	br	40007dc <i2c_write+0x7c>
        }else{
            SDA_LOW(data_base);
 40007d4:	e0bffe17 	ldw	r2,-8(fp)
 40007d8:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 40007dc:	e0bffc03 	ldbu	r2,-16(fp)
 40007e0:	1004d07a 	srli	r2,r2,1
 40007e4:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 40007e8:	e0bffd17 	ldw	r2,-12(fp)
 40007ec:	1007883a 	mov	r3,r2
 40007f0:	00800044 	movi	r2,1
 40007f4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 40007f8:	0101f404 	movi	r4,2000
 40007fc:	4017a280 	call	4017a28 <usleep>
        SCL_LOW(clk_base);
 4000800:	e0bffd17 	ldw	r2,-12(fp)
 4000804:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 4000808:	0101f404 	movi	r4,2000
 400080c:	4017a280 	call	4017a28 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 4000810:	e0bffa17 	ldw	r2,-24(fp)
 4000814:	10800044 	addi	r2,r2,1
 4000818:	e0bffa15 	stw	r2,-24(fp)
 400081c:	e0bffa17 	ldw	r2,-24(fp)
 4000820:	10800210 	cmplti	r2,r2,8
 4000824:	103fde1e 	bne	r2,zero,40007a0 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 4000828:	e0bffe17 	ldw	r2,-8(fp)
 400082c:	10800104 	addi	r2,r2,4
 4000830:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 4000834:	e0bffd17 	ldw	r2,-12(fp)
 4000838:	1007883a 	mov	r3,r2
 400083c:	00800044 	movi	r2,1
 4000840:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 4000844:	0101f404 	movi	r4,2000
 4000848:	4017a280 	call	4017a28 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 400084c:	e0bffe17 	ldw	r2,-8(fp)
 4000850:	10800037 	ldwio	r2,0(r2)
 4000854:	1005003a 	cmpeq	r2,r2,zero
 4000858:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 400085c:	e0bffd17 	ldw	r2,-12(fp)
 4000860:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 4000864:	0101f404 	movi	r4,2000
 4000868:	4017a280 	call	4017a28 <usleep>
    return bAck;
 400086c:	e0bffb17 	ldw	r2,-20(fp)
}    
 4000870:	e037883a 	mov	sp,fp
 4000874:	dfc00117 	ldw	ra,4(sp)
 4000878:	df000017 	ldw	fp,0(sp)
 400087c:	dec00204 	addi	sp,sp,8
 4000880:	f800283a 	ret

04000884 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 4000884:	defff804 	addi	sp,sp,-32
 4000888:	dfc00715 	stw	ra,28(sp)
 400088c:	df000615 	stw	fp,24(sp)
 4000890:	df000604 	addi	fp,sp,24
 4000894:	e13ffc15 	stw	r4,-16(fp)
 4000898:	e17ffd15 	stw	r5,-12(fp)
 400089c:	e1bffe15 	stw	r6,-8(fp)
 40008a0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 40008a4:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 40008a8:	e0bffd17 	ldw	r2,-12(fp)
 40008ac:	10800104 	addi	r2,r2,4
 40008b0:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 40008b4:	e0bffc17 	ldw	r2,-16(fp)
 40008b8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 40008bc:	0101f404 	movi	r4,2000
 40008c0:	4017a280 	call	4017a28 <usleep>

    for(i=0;i<8;i++){
 40008c4:	e03ffa15 	stw	zero,-24(fp)
 40008c8:	00001706 	br	4000928 <i2c_read+0xa4>
        Data <<= 1;
 40008cc:	e0bffb03 	ldbu	r2,-20(fp)
 40008d0:	1085883a 	add	r2,r2,r2
 40008d4:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 40008d8:	e0bffc17 	ldw	r2,-16(fp)
 40008dc:	1007883a 	mov	r3,r2
 40008e0:	00800044 	movi	r2,1
 40008e4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 40008e8:	0101f404 	movi	r4,2000
 40008ec:	4017a280 	call	4017a28 <usleep>
        if (SDA_READ(data_base))  // read data   
 40008f0:	e0bffd17 	ldw	r2,-12(fp)
 40008f4:	10800037 	ldwio	r2,0(r2)
 40008f8:	1005003a 	cmpeq	r2,r2,zero
 40008fc:	1000031e 	bne	r2,zero,400090c <i2c_read+0x88>
            Data |= 0x01;
 4000900:	e0bffb03 	ldbu	r2,-20(fp)
 4000904:	10800054 	ori	r2,r2,1
 4000908:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 400090c:	e0bffc17 	ldw	r2,-16(fp)
 4000910:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 4000914:	0101f404 	movi	r4,2000
 4000918:	4017a280 	call	4017a28 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 400091c:	e0bffa17 	ldw	r2,-24(fp)
 4000920:	10800044 	addi	r2,r2,1
 4000924:	e0bffa15 	stw	r2,-24(fp)
 4000928:	e0bffa17 	ldw	r2,-24(fp)
 400092c:	10800210 	cmplti	r2,r2,8
 4000930:	103fe61e 	bne	r2,zero,40008cc <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 4000934:	e0bffc17 	ldw	r2,-16(fp)
 4000938:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 400093c:	e0bffd17 	ldw	r2,-12(fp)
 4000940:	10800104 	addi	r2,r2,4
 4000944:	1007883a 	mov	r3,r2
 4000948:	00800044 	movi	r2,1
 400094c:	18800035 	stwio	r2,0(r3)
    if (bAck)
 4000950:	e0bfff17 	ldw	r2,-4(fp)
 4000954:	1005003a 	cmpeq	r2,r2,zero
 4000958:	1000031e 	bne	r2,zero,4000968 <i2c_read+0xe4>
        SDA_LOW(data_base);
 400095c:	e0bffd17 	ldw	r2,-12(fp)
 4000960:	10000035 	stwio	zero,0(r2)
 4000964:	00000406 	br	4000978 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 4000968:	e0bffd17 	ldw	r2,-12(fp)
 400096c:	1007883a 	mov	r3,r2
 4000970:	00800044 	movi	r2,1
 4000974:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 4000978:	e0bffc17 	ldw	r2,-16(fp)
 400097c:	1007883a 	mov	r3,r2
 4000980:	00800044 	movi	r2,1
 4000984:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 4000988:	0101f404 	movi	r4,2000
 400098c:	4017a280 	call	4017a28 <usleep>
    SCL_LOW(clk_base); // clock low
 4000990:	e0bffc17 	ldw	r2,-16(fp)
 4000994:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 4000998:	0101f404 	movi	r4,2000
 400099c:	4017a280 	call	4017a28 <usleep>
    SDA_LOW(data_base);  // data low
 40009a0:	e0bffd17 	ldw	r2,-12(fp)
 40009a4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 40009a8:	0101f404 	movi	r4,2000
 40009ac:	4017a280 	call	4017a28 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 40009b0:	e0fffe17 	ldw	r3,-8(fp)
 40009b4:	e0bffb03 	ldbu	r2,-20(fp)
 40009b8:	18800005 	stb	r2,0(r3)
}
 40009bc:	e037883a 	mov	sp,fp
 40009c0:	dfc00117 	ldw	ra,4(sp)
 40009c4:	df000017 	ldw	fp,0(sp)
 40009c8:	dec00204 	addi	sp,sp,8
 40009cc:	f800283a 	ret

040009d0 <i2c_data_verify>:

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 40009d0:	defff704 	addi	sp,sp,-36
 40009d4:	dfc00815 	stw	ra,32(sp)
 40009d8:	df000715 	stw	fp,28(sp)
 40009dc:	df000704 	addi	fp,sp,28
 40009e0:	e13ffd15 	stw	r4,-12(fp)
 40009e4:	e17ffe15 	stw	r5,-8(fp)
 40009e8:	e1bfff05 	stb	r6,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 40009ec:	00bfe804 	movi	r2,-96
 40009f0:	e0bffa45 	stb	r2,-23(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40009f4:	008100b4 	movhi	r2,1026
 40009f8:	109a9f04 	addi	r2,r2,27260
 40009fc:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 4000a00:	e0bffa05 	stb	r2,-24(fp)
    if (TestData == 0)
 4000a04:	e0bffa03 	ldbu	r2,-24(fp)
 4000a08:	1004c03a 	cmpne	r2,r2,zero
 4000a0c:	1000021e 	bne	r2,zero,4000a18 <i2c_data_verify+0x48>
        TestData = 0x12;
 4000a10:	00800484 	movi	r2,18
 4000a14:	e0bffa05 	stb	r2,-24(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 4000a18:	e1bffa47 	ldb	r6,-23(fp)
 4000a1c:	e1ffff03 	ldbu	r7,-4(fp)
 4000a20:	e0bffc04 	addi	r2,fp,-16
 4000a24:	d8800015 	stw	r2,0(sp)
 4000a28:	e13ffd17 	ldw	r4,-12(fp)
 4000a2c:	e17ffe17 	ldw	r5,-8(fp)
 4000a30:	40002f00 	call	40002f0 <I2C_Read>
 4000a34:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // write
 4000a38:	e0bffb17 	ldw	r2,-20(fp)
 4000a3c:	1005003a 	cmpeq	r2,r2,zero
 4000a40:	1000081e 	bne	r2,zero,4000a64 <i2c_data_verify+0x94>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 4000a44:	e1bffa47 	ldb	r6,-23(fp)
 4000a48:	e1ffff03 	ldbu	r7,-4(fp)
 4000a4c:	e0bffa03 	ldbu	r2,-24(fp)
 4000a50:	d8800015 	stw	r2,0(sp)
 4000a54:	e13ffd17 	ldw	r4,-12(fp)
 4000a58:	e17ffe17 	ldw	r5,-8(fp)
 4000a5c:	40001f40 	call	40001f4 <I2C_Write>
 4000a60:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 4000a64:	e0bffb17 	ldw	r2,-20(fp)
 4000a68:	1005003a 	cmpeq	r2,r2,zero
 4000a6c:	1000081e 	bne	r2,zero,4000a90 <i2c_data_verify+0xc0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 4000a70:	e1bffa47 	ldb	r6,-23(fp)
 4000a74:	e1ffff03 	ldbu	r7,-4(fp)
 4000a78:	e0bffc44 	addi	r2,fp,-15
 4000a7c:	d8800015 	stw	r2,0(sp)
 4000a80:	e13ffd17 	ldw	r4,-12(fp)
 4000a84:	e17ffe17 	ldw	r5,-8(fp)
 4000a88:	40002f00 	call	40002f0 <I2C_Read>
 4000a8c:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != TestData)) // verify
 4000a90:	e0bffb17 	ldw	r2,-20(fp)
 4000a94:	1005003a 	cmpeq	r2,r2,zero
 4000a98:	1000051e 	bne	r2,zero,4000ab0 <i2c_data_verify+0xe0>
 4000a9c:	e0bffc43 	ldbu	r2,-15(fp)
 4000aa0:	10c03fcc 	andi	r3,r2,255
 4000aa4:	e0bffa03 	ldbu	r2,-24(fp)
 4000aa8:	18800126 	beq	r3,r2,4000ab0 <i2c_data_verify+0xe0>
        bPass = FALSE;        
 4000aac:	e03ffb15 	stw	zero,-20(fp)
    // restore        
    if (bPass) // write back
 4000ab0:	e0bffb17 	ldw	r2,-20(fp)
 4000ab4:	1005003a 	cmpeq	r2,r2,zero
 4000ab8:	1000091e 	bne	r2,zero,4000ae0 <i2c_data_verify+0x110>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 4000abc:	e1bffa47 	ldb	r6,-23(fp)
 4000ac0:	e1ffff03 	ldbu	r7,-4(fp)
 4000ac4:	e0bffc03 	ldbu	r2,-16(fp)
 4000ac8:	10803fcc 	andi	r2,r2,255
 4000acc:	d8800015 	stw	r2,0(sp)
 4000ad0:	e13ffd17 	ldw	r4,-12(fp)
 4000ad4:	e17ffe17 	ldw	r5,-8(fp)
 4000ad8:	40001f40 	call	40001f4 <I2C_Write>
 4000adc:	e0bffb15 	stw	r2,-20(fp)
    if (bPass) // read        
 4000ae0:	e0bffb17 	ldw	r2,-20(fp)
 4000ae4:	1005003a 	cmpeq	r2,r2,zero
 4000ae8:	1000081e 	bne	r2,zero,4000b0c <i2c_data_verify+0x13c>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 4000aec:	e1bffa47 	ldb	r6,-23(fp)
 4000af0:	e1ffff03 	ldbu	r7,-4(fp)
 4000af4:	e0bffc44 	addi	r2,fp,-15
 4000af8:	d8800015 	stw	r2,0(sp)
 4000afc:	e13ffd17 	ldw	r4,-12(fp)
 4000b00:	e17ffe17 	ldw	r5,-8(fp)
 4000b04:	40002f00 	call	40002f0 <I2C_Read>
 4000b08:	e0bffb15 	stw	r2,-20(fp)
    if (bPass && (Data != OrgData)) // verify
 4000b0c:	e0bffb17 	ldw	r2,-20(fp)
 4000b10:	1005003a 	cmpeq	r2,r2,zero
 4000b14:	1000061e 	bne	r2,zero,4000b30 <i2c_data_verify+0x160>
 4000b18:	e0bffc43 	ldbu	r2,-15(fp)
 4000b1c:	e0fffc03 	ldbu	r3,-16(fp)
 4000b20:	11003fcc 	andi	r4,r2,255
 4000b24:	18803fcc 	andi	r2,r3,255
 4000b28:	20800126 	beq	r4,r2,4000b30 <i2c_data_verify+0x160>
        bPass = FALSE; 
 4000b2c:	e03ffb15 	stw	zero,-20(fp)
        
    return bPass;
 4000b30:	e0bffb17 	ldw	r2,-20(fp)
}
 4000b34:	e037883a 	mov	sp,fp
 4000b38:	dfc00117 	ldw	ra,4(sp)
 4000b3c:	df000017 	ldw	fp,0(sp)
 4000b40:	dec00204 	addi	sp,sp,8
 4000b44:	f800283a 	ret

04000b48 <I2C_Verify>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 4000b48:	defffa04 	addi	sp,sp,-24
 4000b4c:	dfc00515 	stw	ra,20(sp)
 4000b50:	df000415 	stw	fp,16(sp)
 4000b54:	df000404 	addi	fp,sp,16
 4000b58:	e13ffd15 	stw	r4,-12(fp)
 4000b5c:	e17ffe15 	stw	r5,-8(fp)
 4000b60:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 4000b64:	e0bfff17 	ldw	r2,-4(fp)
 4000b68:	10804068 	cmpgeui	r2,r2,257
 4000b6c:	1000101e 	bne	r2,zero,4000bb0 <I2C_Verify+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 4000b70:	e13ffd17 	ldw	r4,-12(fp)
 4000b74:	e17ffe17 	ldw	r5,-8(fp)
 4000b78:	000d883a 	mov	r6,zero
 4000b7c:	40009d00 	call	40009d0 <i2c_data_verify>
 4000b80:	e0bffc15 	stw	r2,-16(fp)
        if (bPass)
 4000b84:	e0bffc17 	ldw	r2,-16(fp)
 4000b88:	1005003a 	cmpeq	r2,r2,zero
 4000b8c:	1000091e 	bne	r2,zero,4000bb4 <I2C_Verify+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 4000b90:	e0bfff17 	ldw	r2,-4(fp)
 4000b94:	10bfffc4 	addi	r2,r2,-1
 4000b98:	11803fcc 	andi	r6,r2,255
 4000b9c:	e13ffd17 	ldw	r4,-12(fp)
 4000ba0:	e17ffe17 	ldw	r5,-8(fp)
 4000ba4:	40009d00 	call	40009d0 <i2c_data_verify>
 4000ba8:	e0bffc15 	stw	r2,-16(fp)
 4000bac:	00000106 	br	4000bb4 <I2C_Verify+0x6c>
    }else{
        bPass = FALSE;
 4000bb0:	e03ffc15 	stw	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 4000bb4:	e0bffc17 	ldw	r2,-16(fp)
}
 4000bb8:	e037883a 	mov	sp,fp
 4000bbc:	dfc00117 	ldw	ra,4(sp)
 4000bc0:	df000017 	ldw	fp,0(sp)
 4000bc4:	dec00204 	addi	sp,sp,8
 4000bc8:	f800283a 	ret

04000bcc <timeoutOccurred>:
#define ACC_ADDRESS_SA0_A_LOW  0x30
#define ACC_ADDRESS_SA0_A_HIGH 0x32

// Timeout Methods //////////////////////////////////////////////////////////////
bool timeoutOccurred(LSM303 *compass)
{
 4000bcc:	defffe04 	addi	sp,sp,-8
 4000bd0:	df000115 	stw	fp,4(sp)
 4000bd4:	df000104 	addi	fp,sp,4
 4000bd8:	e13fff15 	stw	r4,-4(fp)
  return compass->did_timeout;
 4000bdc:	e0bfff17 	ldw	r2,-4(fp)
 4000be0:	10800e17 	ldw	r2,56(r2)
}
 4000be4:	e037883a 	mov	sp,fp
 4000be8:	df000017 	ldw	fp,0(sp)
 4000bec:	dec00104 	addi	sp,sp,4
 4000bf0:	f800283a 	ret

04000bf4 <setTimeout>:

void setTimeout(LSM303 *compass, unsigned int timeout)
{
 4000bf4:	defffd04 	addi	sp,sp,-12
 4000bf8:	df000215 	stw	fp,8(sp)
 4000bfc:	df000204 	addi	fp,sp,8
 4000c00:	e13ffe15 	stw	r4,-8(fp)
 4000c04:	e17fff15 	stw	r5,-4(fp)
  compass->io_timeout = timeout;
 4000c08:	e0fffe17 	ldw	r3,-8(fp)
 4000c0c:	e0bfff17 	ldw	r2,-4(fp)
 4000c10:	18800d15 	stw	r2,52(r3)
}
 4000c14:	e037883a 	mov	sp,fp
 4000c18:	df000017 	ldw	fp,0(sp)
 4000c1c:	dec00104 	addi	sp,sp,4
 4000c20:	f800283a 	ret

04000c24 <getTimeout>:

unsigned int getTimeout(LSM303 *compass)
{
 4000c24:	defffe04 	addi	sp,sp,-8
 4000c28:	df000115 	stw	fp,4(sp)
 4000c2c:	df000104 	addi	fp,sp,4
 4000c30:	e13fff15 	stw	r4,-4(fp)
  return compass->io_timeout;
 4000c34:	e0bfff17 	ldw	r2,-4(fp)
 4000c38:	10800d17 	ldw	r2,52(r2)
}
 4000c3c:	e037883a 	mov	sp,fp
 4000c40:	df000017 	ldw	fp,0(sp)
 4000c44:	dec00104 	addi	sp,sp,4
 4000c48:	f800283a 	ret

04000c4c <compassInit>:

// Initialize the LSM303
void compassInit(LSM303 *compass)
{  
 4000c4c:	defffe04 	addi	sp,sp,-8
 4000c50:	df000115 	stw	fp,4(sp)
 4000c54:	df000104 	addi	fp,sp,4
 4000c58:	e13fff15 	stw	r4,-4(fp)
	compass->acc_address = ACC_ADDRESS_SA0_A_HIGH;
 4000c5c:	e0ffff17 	ldw	r3,-4(fp)
 4000c60:	00800c84 	movi	r2,50
 4000c64:	18800c85 	stb	r2,50(r3)
    compass->_device = LSM303DLHC_DEVICE;
 4000c68:	e0ffff17 	ldw	r3,-4(fp)
 4000c6c:	00800084 	movi	r2,2
 4000c70:	18800c45 	stb	r2,49(r3)

    compass->m_min.x = -520;
    compass->m_min.y = -570;
    compass->m_min.z = -770;
*/
    compass->io_timeout = 0;  // 0 = no timeout
 4000c74:	e0bfff17 	ldw	r2,-4(fp)
 4000c78:	10000d15 	stw	zero,52(r2)
    compass->did_timeout = FALSE;
 4000c7c:	e0bfff17 	ldw	r2,-4(fp)
 4000c80:	10000e15 	stw	zero,56(r2)
}
 4000c84:	e037883a 	mov	sp,fp
 4000c88:	df000017 	ldw	fp,0(sp)
 4000c8c:	dec00104 	addi	sp,sp,4
 4000c90:	f800283a 	ret

04000c94 <enableDefault>:

// Turns on the LSM303's accelerometer and magnetometers and places them in normal
// mode.
void enableDefault(void)
{
 4000c94:	defffd04 	addi	sp,sp,-12
 4000c98:	dfc00215 	stw	ra,8(sp)
 4000c9c:	df000115 	stw	fp,4(sp)
 4000ca0:	df000104 	addi	fp,sp,4
 // else{		printf("Failed to enable accelerometer\r\n");
 // }

  //For magnetic sensors the default (factory) 7-bit slave address is 0011110xb. R = 1, W = 0 so READ = 0x00111101 = 0x3D

  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_MR_REG_M, 0x00)){
 4000ca4:	d8000015 	stw	zero,0(sp)
 4000ca8:	01004034 	movhi	r4,256
 4000cac:	01404034 	movhi	r5,256
 4000cb0:	29400404 	addi	r5,r5,16
 4000cb4:	01800f04 	movi	r6,60
 4000cb8:	01c00084 	movi	r7,2
 4000cbc:	40001f40 	call	40001f4 <I2C_Write>
 4000cc0:	1005003a 	cmpeq	r2,r2,zero
 4000cc4:	1000041e 	bne	r2,zero,4000cd8 <enableDefault+0x44>
	  printf("Initialize success!\n");
 4000cc8:	010100b4 	movhi	r4,1026
 4000ccc:	210f1904 	addi	r4,r4,15460
 4000cd0:	400a2740 	call	400a274 <puts>
 4000cd4:	00000306 	br	4000ce4 <enableDefault+0x50>
  }
  else{
      printf("Failed to enable magnetometer\r\n");
 4000cd8:	010100b4 	movhi	r4,1026
 4000cdc:	210f1e04 	addi	r4,r4,15480
 4000ce0:	400a2740 	call	400a274 <puts>
  }
}
 4000ce4:	e037883a 	mov	sp,fp
 4000ce8:	dfc00117 	ldw	ra,4(sp)
 4000cec:	df000017 	ldw	fp,0(sp)
 4000cf0:	dec00204 	addi	sp,sp,8
 4000cf4:	f800283a 	ret

04000cf8 <writeMagReg>:

// Writes a magnetometer register
void writeMagReg(alt_u8 reg, alt_u8 value)
{
 4000cf8:	defffb04 	addi	sp,sp,-20
 4000cfc:	dfc00415 	stw	ra,16(sp)
 4000d00:	df000315 	stw	fp,12(sp)
 4000d04:	df000304 	addi	fp,sp,12
 4000d08:	e13ffe05 	stb	r4,-8(fp)
 4000d0c:	e17fff05 	stb	r5,-4(fp)
  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, reg, value)){
 4000d10:	e1fffe03 	ldbu	r7,-8(fp)
 4000d14:	e0bfff03 	ldbu	r2,-4(fp)
 4000d18:	d8800015 	stw	r2,0(sp)
 4000d1c:	01004034 	movhi	r4,256
 4000d20:	01404034 	movhi	r5,256
 4000d24:	29400404 	addi	r5,r5,16
 4000d28:	01800f04 	movi	r6,60
 4000d2c:	40001f40 	call	40001f4 <I2C_Write>
 4000d30:	1005003a 	cmpeq	r2,r2,zero
 4000d34:	1000041e 	bne	r2,zero,4000d48 <writeMagReg+0x50>
	  printf("Success!\n");
 4000d38:	010100b4 	movhi	r4,1026
 4000d3c:	210f2604 	addi	r4,r4,15512
 4000d40:	400a2740 	call	400a274 <puts>
 4000d44:	00000306 	br	4000d54 <writeMagReg+0x5c>
  }else{
        printf("Failed to write magnetometer\r\n");
 4000d48:	010100b4 	movhi	r4,1026
 4000d4c:	210f2904 	addi	r4,r4,15524
 4000d50:	400a2740 	call	400a274 <puts>
  }
}
 4000d54:	e037883a 	mov	sp,fp
 4000d58:	dfc00117 	ldw	ra,4(sp)
 4000d5c:	df000017 	ldw	fp,0(sp)
 4000d60:	dec00204 	addi	sp,sp,8
 4000d64:	f800283a 	ret

04000d68 <readMagReg>:

// Reads a magnetometer register
alt_u8 readMagReg(alt_u8 reg)
{
 4000d68:	defffb04 	addi	sp,sp,-20
 4000d6c:	dfc00415 	stw	ra,16(sp)
 4000d70:	df000315 	stw	fp,12(sp)
 4000d74:	df000304 	addi	fp,sp,12
 4000d78:	e13fff05 	stb	r4,-4(fp)
  alt_u8 *value;
  
  if (I2C_Read(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, reg, value)){
 4000d7c:	e1ffff03 	ldbu	r7,-4(fp)
 4000d80:	e0bffe17 	ldw	r2,-8(fp)
 4000d84:	d8800015 	stw	r2,0(sp)
 4000d88:	01004034 	movhi	r4,256
 4000d8c:	01404034 	movhi	r5,256
 4000d90:	29400404 	addi	r5,r5,16
 4000d94:	01800f04 	movi	r6,60
 4000d98:	40002f00 	call	40002f0 <I2C_Read>
 4000d9c:	1005003a 	cmpeq	r2,r2,zero
 4000da0:	1000051e 	bne	r2,zero,4000db8 <readMagReg+0x50>
	  printf("Success! %02x \n", (int) &value);
 4000da4:	e17ffe04 	addi	r5,fp,-8
 4000da8:	010100b4 	movhi	r4,1026
 4000dac:	210f3104 	addi	r4,r4,15556
 4000db0:	400a15c0 	call	400a15c <printf>
 4000db4:	00000406 	br	4000dc8 <readMagReg+0x60>
  }else{
        printf("Failed to read magnetometer register\r\n");
 4000db8:	010100b4 	movhi	r4,1026
 4000dbc:	210f3504 	addi	r4,r4,15572
 4000dc0:	400a2740 	call	400a274 <puts>
        value = 0;
 4000dc4:	e03ffe15 	stw	zero,-8(fp)
  }

  return *value;
 4000dc8:	e0bffe17 	ldw	r2,-8(fp)
 4000dcc:	10800003 	ldbu	r2,0(r2)
 4000dd0:	10803fcc 	andi	r2,r2,255
}
 4000dd4:	e037883a 	mov	sp,fp
 4000dd8:	dfc00117 	ldw	ra,4(sp)
 4000ddc:	df000017 	ldw	fp,0(sp)
 4000de0:	dec00204 	addi	sp,sp,8
 4000de4:	f800283a 	ret

04000de8 <setMagGain>:

void setMagGain(alt_u8 value)
{
 4000de8:	defffc04 	addi	sp,sp,-16
 4000dec:	dfc00315 	stw	ra,12(sp)
 4000df0:	df000215 	stw	fp,8(sp)
 4000df4:	df000204 	addi	fp,sp,8
 4000df8:	e13fff05 	stb	r4,-4(fp)
	//check to see if value is in maggain
  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303_CRB_REG_M, value)){
 4000dfc:	e0bfff03 	ldbu	r2,-4(fp)
 4000e00:	d8800015 	stw	r2,0(sp)
 4000e04:	01004034 	movhi	r4,256
 4000e08:	01404034 	movhi	r5,256
 4000e0c:	29400404 	addi	r5,r5,16
 4000e10:	01800f04 	movi	r6,60
 4000e14:	01c00044 	movi	r7,1
 4000e18:	40001f40 	call	40001f4 <I2C_Write>
 4000e1c:	1005003a 	cmpeq	r2,r2,zero
 4000e20:	1000041e 	bne	r2,zero,4000e34 <setMagGain+0x4c>
	  printf("Success!\n");
 4000e24:	010100b4 	movhi	r4,1026
 4000e28:	210f2604 	addi	r4,r4,15512
 4000e2c:	400a2740 	call	400a274 <puts>
 4000e30:	00000306 	br	4000e40 <setMagGain+0x58>
  }else{
        printf("Failed to write magnetometer gain\r\n");
 4000e34:	010100b4 	movhi	r4,1026
 4000e38:	210f3f04 	addi	r4,r4,15612
 4000e3c:	400a2740 	call	400a274 <puts>
  }
}
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	dfc00117 	ldw	ra,4(sp)
 4000e48:	df000017 	ldw	fp,0(sp)
 4000e4c:	dec00204 	addi	sp,sp,8
 4000e50:	f800283a 	ret

04000e54 <readMag>:

// Reads the 3 magnetometer channels and stores them in vector m
void readMag(LSM303 *compass)
{
 4000e54:	defff404 	addi	sp,sp,-48
 4000e58:	dfc00b15 	stw	ra,44(sp)
 4000e5c:	df000a15 	stw	fp,40(sp)
 4000e60:	df000a04 	addi	fp,sp,40
 4000e64:	e13fff15 	stw	r4,-4(fp)
	alt_u16 xhm, xlm, yhm, ylm, zhm, zlm;
	alt_u8 szBuf[5]; //need 6 values, magnetometer only refreshes data once these 6 values have been read
	int Num, i;

	if (I2C_MultipleRead(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303DLHC_OUT_X_H_M , szBuf, sizeof(szBuf)))
 4000e68:	e0bffd04 	addi	r2,fp,-12
 4000e6c:	d8800015 	stw	r2,0(sp)
 4000e70:	00800144 	movi	r2,5
 4000e74:	d8800115 	stw	r2,4(sp)
 4000e78:	01004034 	movhi	r4,256
 4000e7c:	01404034 	movhi	r5,256
 4000e80:	29400404 	addi	r5,r5,16
 4000e84:	01800f04 	movi	r6,60
 4000e88:	01c000c4 	movi	r7,3
 4000e8c:	40005040 	call	4000504 <I2C_MultipleRead>
 4000e90:	1005003a 	cmpeq	r2,r2,zero
 4000e94:	1000261e 	bne	r2,zero,4000f30 <readMag+0xdc>
	{
		Num = sizeof(szBuf)/sizeof(szBuf[0]);
 4000e98:	00800144 	movi	r2,5
 4000e9c:	e0bff915 	stw	r2,-28(fp)
        for(i=0;i<Num;i++){
 4000ea0:	e03ff815 	stw	zero,-32(fp)
 4000ea4:	00000c06 	br	4000ed8 <readMag+0x84>
            printf("Addr[%d] = %02xh\r\n", i, szBuf[i]);
 4000ea8:	e0fff817 	ldw	r3,-32(fp)
 4000eac:	e0bffd04 	addi	r2,fp,-12
 4000eb0:	10c5883a 	add	r2,r2,r3
 4000eb4:	10800003 	ldbu	r2,0(r2)
 4000eb8:	11803fcc 	andi	r6,r2,255
 4000ebc:	010100b4 	movhi	r4,1026
 4000ec0:	210f4804 	addi	r4,r4,15648
 4000ec4:	e17ff817 	ldw	r5,-32(fp)
 4000ec8:	400a15c0 	call	400a15c <printf>
	int Num, i;

	if (I2C_MultipleRead(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, MAG_ADDRESS, LSM303DLHC_OUT_X_H_M , szBuf, sizeof(szBuf)))
	{
		Num = sizeof(szBuf)/sizeof(szBuf[0]);
        for(i=0;i<Num;i++){
 4000ecc:	e0bff817 	ldw	r2,-32(fp)
 4000ed0:	10800044 	addi	r2,r2,1
 4000ed4:	e0bff815 	stw	r2,-32(fp)
 4000ed8:	e0fff817 	ldw	r3,-32(fp)
 4000edc:	e0bff917 	ldw	r2,-28(fp)
 4000ee0:	18bff116 	blt	r3,r2,4000ea8 <readMag+0x54>
            printf("Addr[%d] = %02xh\r\n", i, szBuf[i]);
        }

        xhm = szBuf[0];
 4000ee4:	e0bffd03 	ldbu	r2,-12(fp)
 4000ee8:	10803fcc 	andi	r2,r2,255
 4000eec:	e0bffc8d 	sth	r2,-14(fp)
        xlm = szBuf[1];
 4000ef0:	e0bffd43 	ldbu	r2,-11(fp)
 4000ef4:	10803fcc 	andi	r2,r2,255
 4000ef8:	e0bffc0d 	sth	r2,-16(fp)
        zhm = szBuf[2];
 4000efc:	e0bffd83 	ldbu	r2,-10(fp)
 4000f00:	10803fcc 	andi	r2,r2,255
 4000f04:	e0bffa8d 	sth	r2,-22(fp)
        zlm = szBuf[3];
 4000f08:	e0bffdc3 	ldbu	r2,-9(fp)
 4000f0c:	10803fcc 	andi	r2,r2,255
 4000f10:	e0bffa0d 	sth	r2,-24(fp)
        yhm = szBuf[4];
 4000f14:	e0bffe03 	ldbu	r2,-8(fp)
 4000f18:	10803fcc 	andi	r2,r2,255
 4000f1c:	e0bffb8d 	sth	r2,-18(fp)
        ylm = szBuf[5];
 4000f20:	e0bffe43 	ldbu	r2,-7(fp)
 4000f24:	10803fcc 	andi	r2,r2,255
 4000f28:	e0bffb0d 	sth	r2,-20(fp)
 4000f2c:	00000306 	br	4000f3c <readMag+0xe8>
    }
	else{
        printf("Failed to read magnetometer\r\n");
 4000f30:	010100b4 	movhi	r4,1026
 4000f34:	210f4d04 	addi	r4,r4,15668
 4000f38:	400a2740 	call	400a274 <puts>
    }

  // combine high and low bytes
  compass->m.x = (alt_u16)(xhm << 8 | xlm);
 4000f3c:	e0bffc8b 	ldhu	r2,-14(fp)
 4000f40:	1004923a 	slli	r2,r2,8
 4000f44:	1007883a 	mov	r3,r2
 4000f48:	e0bffc0b 	ldhu	r2,-16(fp)
 4000f4c:	1884b03a 	or	r2,r3,r2
 4000f50:	113fffcc 	andi	r4,r2,65535
 4000f54:	4007e300 	call	4007e30 <__floatunsisf>
 4000f58:	1007883a 	mov	r3,r2
 4000f5c:	e0bfff17 	ldw	r2,-4(fp)
 4000f60:	10c00315 	stw	r3,12(r2)
  compass->m.y = (alt_u16)(yhm << 8 | ylm);
 4000f64:	e0bffb8b 	ldhu	r2,-18(fp)
 4000f68:	1004923a 	slli	r2,r2,8
 4000f6c:	1007883a 	mov	r3,r2
 4000f70:	e0bffb0b 	ldhu	r2,-20(fp)
 4000f74:	1884b03a 	or	r2,r3,r2
 4000f78:	113fffcc 	andi	r4,r2,65535
 4000f7c:	4007e300 	call	4007e30 <__floatunsisf>
 4000f80:	1007883a 	mov	r3,r2
 4000f84:	e0bfff17 	ldw	r2,-4(fp)
 4000f88:	10c00415 	stw	r3,16(r2)
  compass->m.z = (alt_u16)(zhm << 8 | zlm);
 4000f8c:	e0bffa8b 	ldhu	r2,-22(fp)
 4000f90:	1004923a 	slli	r2,r2,8
 4000f94:	1007883a 	mov	r3,r2
 4000f98:	e0bffa0b 	ldhu	r2,-24(fp)
 4000f9c:	1884b03a 	or	r2,r3,r2
 4000fa0:	113fffcc 	andi	r4,r2,65535
 4000fa4:	4007e300 	call	4007e30 <__floatunsisf>
 4000fa8:	1007883a 	mov	r3,r2
 4000fac:	e0bfff17 	ldw	r2,-4(fp)
 4000fb0:	10c00515 	stw	r3,20(r2)
}
 4000fb4:	e037883a 	mov	sp,fp
 4000fb8:	dfc00117 	ldw	ra,4(sp)
 4000fbc:	df000017 	ldw	fp,0(sp)
 4000fc0:	dec00204 	addi	sp,sp,8
 4000fc4:	f800283a 	ret

04000fc8 <LSM303_read>:

// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303_read(LSM303 *compass)
{
 4000fc8:	defffd04 	addi	sp,sp,-12
 4000fcc:	dfc00215 	stw	ra,8(sp)
 4000fd0:	df000115 	stw	fp,4(sp)
 4000fd4:	df000104 	addi	fp,sp,4
 4000fd8:	e13fff15 	stw	r4,-4(fp)
  //readAcc();
  readMag(compass);
 4000fdc:	e13fff17 	ldw	r4,-4(fp)
 4000fe0:	4000e540 	call	4000e54 <readMag>
}
 4000fe4:	e037883a 	mov	sp,fp
 4000fe8:	dfc00117 	ldw	ra,4(sp)
 4000fec:	df000017 	ldw	fp,0(sp)
 4000ff0:	dec00204 	addi	sp,sp,8
 4000ff4:	f800283a 	ret

04000ff8 <LSM303_calibrate>:

void LSM303_calibrate(LSM303 *compass)
{
 4000ff8:	defff504 	addi	sp,sp,-44
 4000ffc:	dfc00a15 	stw	ra,40(sp)
 4001000:	df000915 	stw	fp,36(sp)
 4001004:	dc400815 	stw	r17,32(sp)
 4001008:	dc000715 	stw	r16,28(sp)
 400100c:	df000704 	addi	fp,sp,28
 4001010:	e13fff15 	stw	r4,-4(fp)
  vector running_min = {2047, 2047, 2047}, running_max = {-2048, -2048, -2048};
 4001014:	00914034 	movhi	r2,17664
 4001018:	10b80004 	addi	r2,r2,-8192
 400101c:	e0bff915 	stw	r2,-28(fp)
 4001020:	00914034 	movhi	r2,17664
 4001024:	10b80004 	addi	r2,r2,-8192
 4001028:	e0bffa15 	stw	r2,-24(fp)
 400102c:	00914034 	movhi	r2,17664
 4001030:	10b80004 	addi	r2,r2,-8192
 4001034:	e0bffb15 	stw	r2,-20(fp)
 4001038:	00b14034 	movhi	r2,50432
 400103c:	e0bffc15 	stw	r2,-16(fp)
 4001040:	00b14034 	movhi	r2,50432
 4001044:	e0bffd15 	stw	r2,-12(fp)
 4001048:	00b14034 	movhi	r2,50432
 400104c:	e0bffe15 	stw	r2,-8(fp)
  running_min.x = fmin(running_min.x, compass->m.x);
 4001050:	e0bff917 	ldw	r2,-28(fp)
 4001054:	1009883a 	mov	r4,r2
 4001058:	4007ddc0 	call	4007ddc <__extendsfdf2>
 400105c:	1021883a 	mov	r16,r2
 4001060:	1823883a 	mov	r17,r3
 4001064:	e0bfff17 	ldw	r2,-4(fp)
 4001068:	10800317 	ldw	r2,12(r2)
 400106c:	1009883a 	mov	r4,r2
 4001070:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001074:	100f883a 	mov	r7,r2
 4001078:	1811883a 	mov	r8,r3
 400107c:	8009883a 	mov	r4,r16
 4001080:	880b883a 	mov	r5,r17
 4001084:	380d883a 	mov	r6,r7
 4001088:	400f883a 	mov	r7,r8
 400108c:	400667c0 	call	400667c <fmin>
 4001090:	100b883a 	mov	r5,r2
 4001094:	180d883a 	mov	r6,r3
 4001098:	2809883a 	mov	r4,r5
 400109c:	300b883a 	mov	r5,r6
 40010a0:	4008e380 	call	4008e38 <__truncdfsf2>
 40010a4:	e0bff915 	stw	r2,-28(fp)
  running_min.y = fmin(running_min.y, compass->m.y);
 40010a8:	e0bffa17 	ldw	r2,-24(fp)
 40010ac:	1009883a 	mov	r4,r2
 40010b0:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40010b4:	1021883a 	mov	r16,r2
 40010b8:	1823883a 	mov	r17,r3
 40010bc:	e0bfff17 	ldw	r2,-4(fp)
 40010c0:	10800417 	ldw	r2,16(r2)
 40010c4:	1009883a 	mov	r4,r2
 40010c8:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40010cc:	100f883a 	mov	r7,r2
 40010d0:	1811883a 	mov	r8,r3
 40010d4:	8009883a 	mov	r4,r16
 40010d8:	880b883a 	mov	r5,r17
 40010dc:	380d883a 	mov	r6,r7
 40010e0:	400f883a 	mov	r7,r8
 40010e4:	400667c0 	call	400667c <fmin>
 40010e8:	100b883a 	mov	r5,r2
 40010ec:	180d883a 	mov	r6,r3
 40010f0:	2809883a 	mov	r4,r5
 40010f4:	300b883a 	mov	r5,r6
 40010f8:	4008e380 	call	4008e38 <__truncdfsf2>
 40010fc:	e0bffa15 	stw	r2,-24(fp)
  running_min.z = fmin(running_min.z, compass->m.z);
 4001100:	e0bffb17 	ldw	r2,-20(fp)
 4001104:	1009883a 	mov	r4,r2
 4001108:	4007ddc0 	call	4007ddc <__extendsfdf2>
 400110c:	1021883a 	mov	r16,r2
 4001110:	1823883a 	mov	r17,r3
 4001114:	e0bfff17 	ldw	r2,-4(fp)
 4001118:	10800517 	ldw	r2,20(r2)
 400111c:	1009883a 	mov	r4,r2
 4001120:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001124:	100f883a 	mov	r7,r2
 4001128:	1811883a 	mov	r8,r3
 400112c:	8009883a 	mov	r4,r16
 4001130:	880b883a 	mov	r5,r17
 4001134:	380d883a 	mov	r6,r7
 4001138:	400f883a 	mov	r7,r8
 400113c:	400667c0 	call	400667c <fmin>
 4001140:	100b883a 	mov	r5,r2
 4001144:	180d883a 	mov	r6,r3
 4001148:	2809883a 	mov	r4,r5
 400114c:	300b883a 	mov	r5,r6
 4001150:	4008e380 	call	4008e38 <__truncdfsf2>
 4001154:	e0bffb15 	stw	r2,-20(fp)

  running_max.x = fmax(running_max.x, compass->m.x);
 4001158:	e0bffc17 	ldw	r2,-16(fp)
 400115c:	1009883a 	mov	r4,r2
 4001160:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001164:	1021883a 	mov	r16,r2
 4001168:	1823883a 	mov	r17,r3
 400116c:	e0bfff17 	ldw	r2,-4(fp)
 4001170:	10800317 	ldw	r2,12(r2)
 4001174:	1009883a 	mov	r4,r2
 4001178:	4007ddc0 	call	4007ddc <__extendsfdf2>
 400117c:	100f883a 	mov	r7,r2
 4001180:	1811883a 	mov	r8,r3
 4001184:	8009883a 	mov	r4,r16
 4001188:	880b883a 	mov	r5,r17
 400118c:	380d883a 	mov	r6,r7
 4001190:	400f883a 	mov	r7,r8
 4001194:	40065f40 	call	40065f4 <fmax>
 4001198:	100b883a 	mov	r5,r2
 400119c:	180d883a 	mov	r6,r3
 40011a0:	2809883a 	mov	r4,r5
 40011a4:	300b883a 	mov	r5,r6
 40011a8:	4008e380 	call	4008e38 <__truncdfsf2>
 40011ac:	e0bffc15 	stw	r2,-16(fp)
  running_max.y = fmax(running_max.y, compass->m.y);
 40011b0:	e0bffd17 	ldw	r2,-12(fp)
 40011b4:	1009883a 	mov	r4,r2
 40011b8:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40011bc:	1021883a 	mov	r16,r2
 40011c0:	1823883a 	mov	r17,r3
 40011c4:	e0bfff17 	ldw	r2,-4(fp)
 40011c8:	10800417 	ldw	r2,16(r2)
 40011cc:	1009883a 	mov	r4,r2
 40011d0:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40011d4:	100f883a 	mov	r7,r2
 40011d8:	1811883a 	mov	r8,r3
 40011dc:	8009883a 	mov	r4,r16
 40011e0:	880b883a 	mov	r5,r17
 40011e4:	380d883a 	mov	r6,r7
 40011e8:	400f883a 	mov	r7,r8
 40011ec:	40065f40 	call	40065f4 <fmax>
 40011f0:	100b883a 	mov	r5,r2
 40011f4:	180d883a 	mov	r6,r3
 40011f8:	2809883a 	mov	r4,r5
 40011fc:	300b883a 	mov	r5,r6
 4001200:	4008e380 	call	4008e38 <__truncdfsf2>
 4001204:	e0bffd15 	stw	r2,-12(fp)
  running_max.z = fmax(running_max.z, compass->m.z);
 4001208:	e0bffe17 	ldw	r2,-8(fp)
 400120c:	1009883a 	mov	r4,r2
 4001210:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001214:	1021883a 	mov	r16,r2
 4001218:	1823883a 	mov	r17,r3
 400121c:	e0bfff17 	ldw	r2,-4(fp)
 4001220:	10800517 	ldw	r2,20(r2)
 4001224:	1009883a 	mov	r4,r2
 4001228:	4007ddc0 	call	4007ddc <__extendsfdf2>
 400122c:	100f883a 	mov	r7,r2
 4001230:	1811883a 	mov	r8,r3
 4001234:	8009883a 	mov	r4,r16
 4001238:	880b883a 	mov	r5,r17
 400123c:	380d883a 	mov	r6,r7
 4001240:	400f883a 	mov	r7,r8
 4001244:	40065f40 	call	40065f4 <fmax>
 4001248:	100b883a 	mov	r5,r2
 400124c:	180d883a 	mov	r6,r3
 4001250:	2809883a 	mov	r4,r5
 4001254:	300b883a 	mov	r5,r6
 4001258:	4008e380 	call	4008e38 <__truncdfsf2>
 400125c:	e0bffe15 	stw	r2,-8(fp)

  printf("M min \n");
 4001260:	010100b4 	movhi	r4,1026
 4001264:	210f5504 	addi	r4,r4,15700
 4001268:	400a2740 	call	400a274 <puts>
  printf("X: %d \n", (int)running_min.x);
 400126c:	e0bff917 	ldw	r2,-28(fp)
 4001270:	1009883a 	mov	r4,r2
 4001274:	4007d480 	call	4007d48 <__fixsfsi>
 4001278:	100b883a 	mov	r5,r2
 400127c:	010100b4 	movhi	r4,1026
 4001280:	210f5704 	addi	r4,r4,15708
 4001284:	400a15c0 	call	400a15c <printf>
  printf("Y: %d \n", (int)running_min.y);
 4001288:	e0bffa17 	ldw	r2,-24(fp)
 400128c:	1009883a 	mov	r4,r2
 4001290:	4007d480 	call	4007d48 <__fixsfsi>
 4001294:	100b883a 	mov	r5,r2
 4001298:	010100b4 	movhi	r4,1026
 400129c:	210f5904 	addi	r4,r4,15716
 40012a0:	400a15c0 	call	400a15c <printf>
  printf("Z: %d \n", (int)running_min.z);
 40012a4:	e0bffb17 	ldw	r2,-20(fp)
 40012a8:	1009883a 	mov	r4,r2
 40012ac:	4007d480 	call	4007d48 <__fixsfsi>
 40012b0:	100b883a 	mov	r5,r2
 40012b4:	010100b4 	movhi	r4,1026
 40012b8:	210f5b04 	addi	r4,r4,15724
 40012bc:	400a15c0 	call	400a15c <printf>

  printf("M max \n");
 40012c0:	010100b4 	movhi	r4,1026
 40012c4:	210f5d04 	addi	r4,r4,15732
 40012c8:	400a2740 	call	400a274 <puts>
  printf("X: %d \n", (int)running_max.x);
 40012cc:	e0bffc17 	ldw	r2,-16(fp)
 40012d0:	1009883a 	mov	r4,r2
 40012d4:	4007d480 	call	4007d48 <__fixsfsi>
 40012d8:	100b883a 	mov	r5,r2
 40012dc:	010100b4 	movhi	r4,1026
 40012e0:	210f5704 	addi	r4,r4,15708
 40012e4:	400a15c0 	call	400a15c <printf>
  printf("Y: %d \n", (int)running_max.y);
 40012e8:	e0bffd17 	ldw	r2,-12(fp)
 40012ec:	1009883a 	mov	r4,r2
 40012f0:	4007d480 	call	4007d48 <__fixsfsi>
 40012f4:	100b883a 	mov	r5,r2
 40012f8:	010100b4 	movhi	r4,1026
 40012fc:	210f5904 	addi	r4,r4,15716
 4001300:	400a15c0 	call	400a15c <printf>
  printf("Z: %d \n", (int)running_max.z);
 4001304:	e0bffe17 	ldw	r2,-8(fp)
 4001308:	1009883a 	mov	r4,r2
 400130c:	4007d480 	call	4007d48 <__fixsfsi>
 4001310:	100b883a 	mov	r5,r2
 4001314:	010100b4 	movhi	r4,1026
 4001318:	210f5b04 	addi	r4,r4,15724
 400131c:	400a15c0 	call	400a15c <printf>
}
 4001320:	e037883a 	mov	sp,fp
 4001324:	dfc00317 	ldw	ra,12(sp)
 4001328:	df000217 	ldw	fp,8(sp)
 400132c:	dc400117 	ldw	r17,4(sp)
 4001330:	dc000017 	ldw	r16,0(sp)
 4001334:	dec00404 	addi	sp,sp,16
 4001338:	f800283a 	ret

0400133c <heading_Y>:

// Returns the number of degrees from the -Y axis that it
// is pointing.
int heading_Y(LSM303 *compass)
{
 400133c:	defffa04 	addi	sp,sp,-24
 4001340:	dfc00515 	stw	ra,20(sp)
 4001344:	df000415 	stw	fp,16(sp)
 4001348:	df000404 	addi	fp,sp,16
 400134c:	e13fff15 	stw	r4,-4(fp)
	vector new = {0, -1, 0};
 4001350:	e03ffc15 	stw	zero,-16(fp)
 4001354:	00afe034 	movhi	r2,49024
 4001358:	e0bffd15 	stw	r2,-12(fp)
 400135c:	e03ffe15 	stw	zero,-8(fp)
	return heading(compass, new);
 4001360:	e13fff17 	ldw	r4,-4(fp)
 4001364:	e17ffc17 	ldw	r5,-16(fp)
 4001368:	e1bffd17 	ldw	r6,-12(fp)
 400136c:	e1fffe17 	ldw	r7,-8(fp)
 4001370:	40013880 	call	4001388 <heading>
}
 4001374:	e037883a 	mov	sp,fp
 4001378:	dfc00117 	ldw	ra,4(sp)
 400137c:	df000017 	ldw	fp,0(sp)
 4001380:	dec00204 	addi	sp,sp,8
 4001384:	f800283a 	ret

04001388 <heading>:
// vectors is East. The vectors East and North form a basis for the
// horizontal plane. The From vector is projected into the horizontal
// plane and the angle between the projected vector and north is
// returned.
int heading(LSM303 *compass, vector from)
{
 4001388:	deffee04 	addi	sp,sp,-72
 400138c:	dfc01115 	stw	ra,68(sp)
 4001390:	df001015 	stw	fp,64(sp)
 4001394:	dc400f15 	stw	r17,60(sp)
 4001398:	dc000e15 	stw	r16,56(sp)
 400139c:	df000e04 	addi	fp,sp,56
 40013a0:	e13ffc15 	stw	r4,-16(fp)
 40013a4:	e17ffd15 	stw	r5,-12(fp)
 40013a8:	e1bffe15 	stw	r6,-8(fp)
 40013ac:	e1ffff15 	stw	r7,-4(fp)
    // shift and scale
	compass->m.x = (compass->m.x - compass->m_min.x) / (compass->m_max.x - compass->m_min.x) * 2 - 1.0;
 40013b0:	e0bffc17 	ldw	r2,-16(fp)
 40013b4:	10c00317 	ldw	r3,12(r2)
 40013b8:	e0bffc17 	ldw	r2,-16(fp)
 40013bc:	10800917 	ldw	r2,36(r2)
 40013c0:	1809883a 	mov	r4,r3
 40013c4:	100b883a 	mov	r5,r2
 40013c8:	40078a80 	call	40078a8 <__subsf3>
 40013cc:	1021883a 	mov	r16,r2
 40013d0:	e0bffc17 	ldw	r2,-16(fp)
 40013d4:	10c00617 	ldw	r3,24(r2)
 40013d8:	e0bffc17 	ldw	r2,-16(fp)
 40013dc:	10800917 	ldw	r2,36(r2)
 40013e0:	1809883a 	mov	r4,r3
 40013e4:	100b883a 	mov	r5,r2
 40013e8:	40078a80 	call	40078a8 <__subsf3>
 40013ec:	8009883a 	mov	r4,r16
 40013f0:	100b883a 	mov	r5,r2
 40013f4:	4007b5c0 	call	4007b5c <__divsf3>
 40013f8:	1009883a 	mov	r4,r2
 40013fc:	100b883a 	mov	r5,r2
 4001400:	40079180 	call	4007918 <__addsf3>
 4001404:	1009883a 	mov	r4,r2
 4001408:	014fe034 	movhi	r5,16256
 400140c:	40078a80 	call	40078a8 <__subsf3>
 4001410:	1007883a 	mov	r3,r2
 4001414:	e0bffc17 	ldw	r2,-16(fp)
 4001418:	10c00315 	stw	r3,12(r2)
	compass->m.y = (compass->m.y - compass->m_min.y) / (compass->m_max.y - compass->m_min.y) * 2 - 1.0;
 400141c:	e0bffc17 	ldw	r2,-16(fp)
 4001420:	10c00417 	ldw	r3,16(r2)
 4001424:	e0bffc17 	ldw	r2,-16(fp)
 4001428:	10800a17 	ldw	r2,40(r2)
 400142c:	1809883a 	mov	r4,r3
 4001430:	100b883a 	mov	r5,r2
 4001434:	40078a80 	call	40078a8 <__subsf3>
 4001438:	1021883a 	mov	r16,r2
 400143c:	e0bffc17 	ldw	r2,-16(fp)
 4001440:	10c00717 	ldw	r3,28(r2)
 4001444:	e0bffc17 	ldw	r2,-16(fp)
 4001448:	10800a17 	ldw	r2,40(r2)
 400144c:	1809883a 	mov	r4,r3
 4001450:	100b883a 	mov	r5,r2
 4001454:	40078a80 	call	40078a8 <__subsf3>
 4001458:	8009883a 	mov	r4,r16
 400145c:	100b883a 	mov	r5,r2
 4001460:	4007b5c0 	call	4007b5c <__divsf3>
 4001464:	1009883a 	mov	r4,r2
 4001468:	100b883a 	mov	r5,r2
 400146c:	40079180 	call	4007918 <__addsf3>
 4001470:	1009883a 	mov	r4,r2
 4001474:	014fe034 	movhi	r5,16256
 4001478:	40078a80 	call	40078a8 <__subsf3>
 400147c:	1007883a 	mov	r3,r2
 4001480:	e0bffc17 	ldw	r2,-16(fp)
 4001484:	10c00415 	stw	r3,16(r2)
	compass->m.z = (compass->m.z - compass->m_min.z) / (compass->m_max.z - compass->m_min.z) * 2 - 1.0;
 4001488:	e0bffc17 	ldw	r2,-16(fp)
 400148c:	10c00517 	ldw	r3,20(r2)
 4001490:	e0bffc17 	ldw	r2,-16(fp)
 4001494:	10800b17 	ldw	r2,44(r2)
 4001498:	1809883a 	mov	r4,r3
 400149c:	100b883a 	mov	r5,r2
 40014a0:	40078a80 	call	40078a8 <__subsf3>
 40014a4:	1021883a 	mov	r16,r2
 40014a8:	e0bffc17 	ldw	r2,-16(fp)
 40014ac:	10c00817 	ldw	r3,32(r2)
 40014b0:	e0bffc17 	ldw	r2,-16(fp)
 40014b4:	10800b17 	ldw	r2,44(r2)
 40014b8:	1809883a 	mov	r4,r3
 40014bc:	100b883a 	mov	r5,r2
 40014c0:	40078a80 	call	40078a8 <__subsf3>
 40014c4:	8009883a 	mov	r4,r16
 40014c8:	100b883a 	mov	r5,r2
 40014cc:	4007b5c0 	call	4007b5c <__divsf3>
 40014d0:	1009883a 	mov	r4,r2
 40014d4:	100b883a 	mov	r5,r2
 40014d8:	40079180 	call	4007918 <__addsf3>
 40014dc:	1009883a 	mov	r4,r2
 40014e0:	014fe034 	movhi	r5,16256
 40014e4:	40078a80 	call	40078a8 <__subsf3>
 40014e8:	1007883a 	mov	r3,r2
 40014ec:	e0bffc17 	ldw	r2,-16(fp)
 40014f0:	10c00515 	stw	r3,20(r2)

    vector temp_a = compass->a;
 40014f4:	e0fffc17 	ldw	r3,-16(fp)
 40014f8:	18800017 	ldw	r2,0(r3)
 40014fc:	e0bff315 	stw	r2,-52(fp)
 4001500:	18800117 	ldw	r2,4(r3)
 4001504:	e0bff415 	stw	r2,-48(fp)
 4001508:	18800217 	ldw	r2,8(r3)
 400150c:	e0bff515 	stw	r2,-44(fp)
    // normalize
    vector_normalize(&temp_a);
 4001510:	e13ff304 	addi	r4,fp,-52
 4001514:	40018240 	call	4001824 <vector_normalize>
    //vector_normalize(&m);

    // compute E and N
    vector E;
    vector N;
    vector_cross(&compass->m, &temp_a, &E);
 4001518:	e0bffc17 	ldw	r2,-16(fp)
 400151c:	11000304 	addi	r4,r2,12
 4001520:	e17ff304 	addi	r5,fp,-52
 4001524:	e1bff604 	addi	r6,fp,-40
 4001528:	40016480 	call	4001648 <vector_cross>
    vector_normalize(&E);
 400152c:	e13ff604 	addi	r4,fp,-40
 4001530:	40018240 	call	4001824 <vector_normalize>
    vector_cross(&temp_a, &E, &N);
 4001534:	e13ff304 	addi	r4,fp,-52
 4001538:	e17ff604 	addi	r5,fp,-40
 400153c:	e1bff904 	addi	r6,fp,-28
 4001540:	40016480 	call	4001648 <vector_cross>
  
    // compute heading
    int heading = round(atan2(vector_dot(&E, &from), vector_dot(&N, &from)) * 180 / M_PI);
 4001544:	e13ff604 	addi	r4,fp,-40
 4001548:	e17ffd04 	addi	r5,fp,-12
 400154c:	400177c0 	call	400177c <vector_dot>
 4001550:	1009883a 	mov	r4,r2
 4001554:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001558:	1021883a 	mov	r16,r2
 400155c:	1823883a 	mov	r17,r3
 4001560:	e13ff904 	addi	r4,fp,-28
 4001564:	e17ffd04 	addi	r5,fp,-12
 4001568:	400177c0 	call	400177c <vector_dot>
 400156c:	1009883a 	mov	r4,r2
 4001570:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4001574:	100f883a 	mov	r7,r2
 4001578:	1811883a 	mov	r8,r3
 400157c:	8009883a 	mov	r4,r16
 4001580:	880b883a 	mov	r5,r17
 4001584:	380d883a 	mov	r6,r7
 4001588:	400f883a 	mov	r7,r8
 400158c:	40068900 	call	4006890 <atan2>
 4001590:	100b883a 	mov	r5,r2
 4001594:	180d883a 	mov	r6,r3
 4001598:	2809883a 	mov	r4,r5
 400159c:	300b883a 	mov	r5,r6
 40015a0:	000d883a 	mov	r6,zero
 40015a4:	01d019f4 	movhi	r7,16487
 40015a8:	39e00004 	addi	r7,r7,-32768
 40015ac:	40083f40 	call	40083f4 <__muldf3>
 40015b0:	1009883a 	mov	r4,r2
 40015b4:	180b883a 	mov	r5,r3
 40015b8:	2005883a 	mov	r2,r4
 40015bc:	2807883a 	mov	r3,r5
 40015c0:	1009883a 	mov	r4,r2
 40015c4:	180b883a 	mov	r5,r3
 40015c8:	01951134 	movhi	r6,21572
 40015cc:	318b4604 	addi	r6,r6,11544
 40015d0:	01d00274 	movhi	r7,16393
 40015d4:	39c87ec4 	addi	r7,r7,8699
 40015d8:	40087b80 	call	40087b8 <__divdf3>
 40015dc:	1009883a 	mov	r4,r2
 40015e0:	180b883a 	mov	r5,r3
 40015e4:	2005883a 	mov	r2,r4
 40015e8:	2807883a 	mov	r3,r5
 40015ec:	1009883a 	mov	r4,r2
 40015f0:	180b883a 	mov	r5,r3
 40015f4:	40067840 	call	4006784 <round>
 40015f8:	100b883a 	mov	r5,r2
 40015fc:	180d883a 	mov	r6,r3
 4001600:	2809883a 	mov	r4,r5
 4001604:	300b883a 	mov	r5,r6
 4001608:	4008d280 	call	4008d28 <__fixdfsi>
 400160c:	e0bff215 	stw	r2,-56(fp)
    if (heading < 0) heading += 360;
 4001610:	e0bff217 	ldw	r2,-56(fp)
 4001614:	1004403a 	cmpge	r2,r2,zero
 4001618:	1000031e 	bne	r2,zero,4001628 <heading+0x2a0>
 400161c:	e0bff217 	ldw	r2,-56(fp)
 4001620:	10805a04 	addi	r2,r2,360
 4001624:	e0bff215 	stw	r2,-56(fp)
  return heading;
 4001628:	e0bff217 	ldw	r2,-56(fp)
}
 400162c:	e037883a 	mov	sp,fp
 4001630:	dfc00317 	ldw	ra,12(sp)
 4001634:	df000217 	ldw	fp,8(sp)
 4001638:	dc400117 	ldw	r17,4(sp)
 400163c:	dc000017 	ldw	r16,0(sp)
 4001640:	dec00404 	addi	sp,sp,16
 4001644:	f800283a 	ret

04001648 <vector_cross>:

void vector_cross(const vector *a,const vector *b, vector *out)
{
 4001648:	defffa04 	addi	sp,sp,-24
 400164c:	dfc00515 	stw	ra,20(sp)
 4001650:	df000415 	stw	fp,16(sp)
 4001654:	dc000315 	stw	r16,12(sp)
 4001658:	df000304 	addi	fp,sp,12
 400165c:	e13ffd15 	stw	r4,-12(fp)
 4001660:	e17ffe15 	stw	r5,-8(fp)
 4001664:	e1bfff15 	stw	r6,-4(fp)
  out->x = a->y*b->z - a->z*b->y;
 4001668:	e0bffd17 	ldw	r2,-12(fp)
 400166c:	10c00117 	ldw	r3,4(r2)
 4001670:	e0bffe17 	ldw	r2,-8(fp)
 4001674:	10800217 	ldw	r2,8(r2)
 4001678:	1809883a 	mov	r4,r3
 400167c:	100b883a 	mov	r5,r2
 4001680:	400797c0 	call	400797c <__mulsf3>
 4001684:	1021883a 	mov	r16,r2
 4001688:	e0bffd17 	ldw	r2,-12(fp)
 400168c:	10c00217 	ldw	r3,8(r2)
 4001690:	e0bffe17 	ldw	r2,-8(fp)
 4001694:	10800117 	ldw	r2,4(r2)
 4001698:	1809883a 	mov	r4,r3
 400169c:	100b883a 	mov	r5,r2
 40016a0:	400797c0 	call	400797c <__mulsf3>
 40016a4:	8009883a 	mov	r4,r16
 40016a8:	100b883a 	mov	r5,r2
 40016ac:	40078a80 	call	40078a8 <__subsf3>
 40016b0:	1007883a 	mov	r3,r2
 40016b4:	e0bfff17 	ldw	r2,-4(fp)
 40016b8:	10c00015 	stw	r3,0(r2)
  out->y = a->z*b->x - a->x*b->z;
 40016bc:	e0bffd17 	ldw	r2,-12(fp)
 40016c0:	10c00217 	ldw	r3,8(r2)
 40016c4:	e0bffe17 	ldw	r2,-8(fp)
 40016c8:	10800017 	ldw	r2,0(r2)
 40016cc:	1809883a 	mov	r4,r3
 40016d0:	100b883a 	mov	r5,r2
 40016d4:	400797c0 	call	400797c <__mulsf3>
 40016d8:	1021883a 	mov	r16,r2
 40016dc:	e0bffd17 	ldw	r2,-12(fp)
 40016e0:	10c00017 	ldw	r3,0(r2)
 40016e4:	e0bffe17 	ldw	r2,-8(fp)
 40016e8:	10800217 	ldw	r2,8(r2)
 40016ec:	1809883a 	mov	r4,r3
 40016f0:	100b883a 	mov	r5,r2
 40016f4:	400797c0 	call	400797c <__mulsf3>
 40016f8:	8009883a 	mov	r4,r16
 40016fc:	100b883a 	mov	r5,r2
 4001700:	40078a80 	call	40078a8 <__subsf3>
 4001704:	1007883a 	mov	r3,r2
 4001708:	e0bfff17 	ldw	r2,-4(fp)
 400170c:	10c00115 	stw	r3,4(r2)
  out->z = a->x*b->y - a->y*b->x;
 4001710:	e0bffd17 	ldw	r2,-12(fp)
 4001714:	10c00017 	ldw	r3,0(r2)
 4001718:	e0bffe17 	ldw	r2,-8(fp)
 400171c:	10800117 	ldw	r2,4(r2)
 4001720:	1809883a 	mov	r4,r3
 4001724:	100b883a 	mov	r5,r2
 4001728:	400797c0 	call	400797c <__mulsf3>
 400172c:	1021883a 	mov	r16,r2
 4001730:	e0bffd17 	ldw	r2,-12(fp)
 4001734:	10c00117 	ldw	r3,4(r2)
 4001738:	e0bffe17 	ldw	r2,-8(fp)
 400173c:	10800017 	ldw	r2,0(r2)
 4001740:	1809883a 	mov	r4,r3
 4001744:	100b883a 	mov	r5,r2
 4001748:	400797c0 	call	400797c <__mulsf3>
 400174c:	8009883a 	mov	r4,r16
 4001750:	100b883a 	mov	r5,r2
 4001754:	40078a80 	call	40078a8 <__subsf3>
 4001758:	1007883a 	mov	r3,r2
 400175c:	e0bfff17 	ldw	r2,-4(fp)
 4001760:	10c00215 	stw	r3,8(r2)
}
 4001764:	e037883a 	mov	sp,fp
 4001768:	dfc00217 	ldw	ra,8(sp)
 400176c:	df000117 	ldw	fp,4(sp)
 4001770:	dc000017 	ldw	r16,0(sp)
 4001774:	dec00304 	addi	sp,sp,12
 4001778:	f800283a 	ret

0400177c <vector_dot>:

float vector_dot(const vector *a,const vector *b)
{
 400177c:	defffb04 	addi	sp,sp,-20
 4001780:	dfc00415 	stw	ra,16(sp)
 4001784:	df000315 	stw	fp,12(sp)
 4001788:	dc000215 	stw	r16,8(sp)
 400178c:	df000204 	addi	fp,sp,8
 4001790:	e13ffe15 	stw	r4,-8(fp)
 4001794:	e17fff15 	stw	r5,-4(fp)
  return a->x*b->x+a->y*b->y+a->z*b->z;
 4001798:	e0bffe17 	ldw	r2,-8(fp)
 400179c:	10c00017 	ldw	r3,0(r2)
 40017a0:	e0bfff17 	ldw	r2,-4(fp)
 40017a4:	10800017 	ldw	r2,0(r2)
 40017a8:	1809883a 	mov	r4,r3
 40017ac:	100b883a 	mov	r5,r2
 40017b0:	400797c0 	call	400797c <__mulsf3>
 40017b4:	1021883a 	mov	r16,r2
 40017b8:	e0bffe17 	ldw	r2,-8(fp)
 40017bc:	10c00117 	ldw	r3,4(r2)
 40017c0:	e0bfff17 	ldw	r2,-4(fp)
 40017c4:	10800117 	ldw	r2,4(r2)
 40017c8:	1809883a 	mov	r4,r3
 40017cc:	100b883a 	mov	r5,r2
 40017d0:	400797c0 	call	400797c <__mulsf3>
 40017d4:	8009883a 	mov	r4,r16
 40017d8:	100b883a 	mov	r5,r2
 40017dc:	40079180 	call	4007918 <__addsf3>
 40017e0:	1021883a 	mov	r16,r2
 40017e4:	e0bffe17 	ldw	r2,-8(fp)
 40017e8:	10c00217 	ldw	r3,8(r2)
 40017ec:	e0bfff17 	ldw	r2,-4(fp)
 40017f0:	10800217 	ldw	r2,8(r2)
 40017f4:	1809883a 	mov	r4,r3
 40017f8:	100b883a 	mov	r5,r2
 40017fc:	400797c0 	call	400797c <__mulsf3>
 4001800:	8009883a 	mov	r4,r16
 4001804:	100b883a 	mov	r5,r2
 4001808:	40079180 	call	4007918 <__addsf3>
}
 400180c:	e037883a 	mov	sp,fp
 4001810:	dfc00217 	ldw	ra,8(sp)
 4001814:	df000117 	ldw	fp,4(sp)
 4001818:	dc000017 	ldw	r16,0(sp)
 400181c:	dec00304 	addi	sp,sp,12
 4001820:	f800283a 	ret

04001824 <vector_normalize>:

void vector_normalize(vector *a)
{
 4001824:	defffc04 	addi	sp,sp,-16
 4001828:	dfc00315 	stw	ra,12(sp)
 400182c:	df000215 	stw	fp,8(sp)
 4001830:	df000204 	addi	fp,sp,8
 4001834:	e13fff15 	stw	r4,-4(fp)
  float mag = sqrt(vector_dot(a,a));
 4001838:	e13fff17 	ldw	r4,-4(fp)
 400183c:	e17fff17 	ldw	r5,-4(fp)
 4001840:	400177c0 	call	400177c <vector_dot>
 4001844:	1009883a 	mov	r4,r2
 4001848:	4007ddc0 	call	4007ddc <__extendsfdf2>
 400184c:	100b883a 	mov	r5,r2
 4001850:	180d883a 	mov	r6,r3
 4001854:	2809883a 	mov	r4,r5
 4001858:	300b883a 	mov	r5,r6
 400185c:	40068940 	call	4006894 <sqrt>
 4001860:	100b883a 	mov	r5,r2
 4001864:	180d883a 	mov	r6,r3
 4001868:	2809883a 	mov	r4,r5
 400186c:	300b883a 	mov	r5,r6
 4001870:	4008e380 	call	4008e38 <__truncdfsf2>
 4001874:	e0bffe15 	stw	r2,-8(fp)
  a->x /= mag;
 4001878:	e0bfff17 	ldw	r2,-4(fp)
 400187c:	10800017 	ldw	r2,0(r2)
 4001880:	1009883a 	mov	r4,r2
 4001884:	e17ffe17 	ldw	r5,-8(fp)
 4001888:	4007b5c0 	call	4007b5c <__divsf3>
 400188c:	1007883a 	mov	r3,r2
 4001890:	e0bfff17 	ldw	r2,-4(fp)
 4001894:	10c00015 	stw	r3,0(r2)
  a->y /= mag;
 4001898:	e0bfff17 	ldw	r2,-4(fp)
 400189c:	10800117 	ldw	r2,4(r2)
 40018a0:	1009883a 	mov	r4,r2
 40018a4:	e17ffe17 	ldw	r5,-8(fp)
 40018a8:	4007b5c0 	call	4007b5c <__divsf3>
 40018ac:	1007883a 	mov	r3,r2
 40018b0:	e0bfff17 	ldw	r2,-4(fp)
 40018b4:	10c00115 	stw	r3,4(r2)
  a->z /= mag;
 40018b8:	e0bfff17 	ldw	r2,-4(fp)
 40018bc:	10800217 	ldw	r2,8(r2)
 40018c0:	1009883a 	mov	r4,r2
 40018c4:	e17ffe17 	ldw	r5,-8(fp)
 40018c8:	4007b5c0 	call	4007b5c <__divsf3>
 40018cc:	1007883a 	mov	r3,r2
 40018d0:	e0bfff17 	ldw	r2,-4(fp)
 40018d4:	10c00215 	stw	r3,8(r2)
}
 40018d8:	e037883a 	mov	sp,fp
 40018dc:	dfc00117 	ldw	ra,4(sp)
 40018e0:	df000017 	ldw	fp,0(sp)
 40018e4:	dec00204 	addi	sp,sp,8
 40018e8:	f800283a 	ret

040018ec <ADXL345_SPI_Init>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 40018ec:	defffc04 	addi	sp,sp,-16
 40018f0:	dfc00315 	stw	ra,12(sp)
 40018f4:	df000215 	stw	fp,8(sp)
 40018f8:	df000204 	addi	fp,sp,8
 40018fc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 4001900:	e13fff17 	ldw	r4,-4(fp)
 4001904:	4003f000 	call	4003f00 <SPI_Init>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 4001908:	e13fff17 	ldw	r4,-4(fp)
 400190c:	01400c44 	movi	r5,49
 4001910:	01801004 	movi	r6,64
 4001914:	40040840 	call	4004084 <SPI_Write>
 4001918:	e0bffe15 	stw	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 400191c:	e13fff17 	ldw	r4,-4(fp)
 4001920:	4003f000 	call	4003f00 <SPI_Init>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 4001924:	e0bffe17 	ldw	r2,-8(fp)
 4001928:	1005003a 	cmpeq	r2,r2,zero
 400192c:	1000051e 	bne	r2,zero,4001944 <ADXL345_SPI_Init+0x58>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 4001930:	e13fff17 	ldw	r4,-4(fp)
 4001934:	01400b04 	movi	r5,44
 4001938:	01800304 	movi	r6,12
 400193c:	40040840 	call	4004084 <SPI_Write>
 4001940:	e0bffe15 	stw	r2,-8(fp)
    }
    
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 4001944:	e0bffe17 	ldw	r2,-8(fp)
 4001948:	1005003a 	cmpeq	r2,r2,zero
 400194c:	1000051e 	bne	r2,zero,4001964 <ADXL345_SPI_Init+0x78>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 4001950:	e13fff17 	ldw	r4,-4(fp)
 4001954:	01400b84 	movi	r5,46
 4001958:	01802004 	movi	r6,128
 400195c:	40040840 	call	4004084 <SPI_Write>
 4001960:	e0bffe15 	stw	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 4001964:	e0bffe17 	ldw	r2,-8(fp)
 4001968:	1005003a 	cmpeq	r2,r2,zero
 400196c:	1000051e 	bne	r2,zero,4001984 <ADXL345_SPI_Init+0x98>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 4001970:	e13fff17 	ldw	r4,-4(fp)
 4001974:	01400b44 	movi	r5,45
 4001978:	000d883a 	mov	r6,zero
 400197c:	40040840 	call	4004084 <SPI_Write>
 4001980:	e0bffe15 	stw	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 4001984:	e0bffe17 	ldw	r2,-8(fp)
 4001988:	1005003a 	cmpeq	r2,r2,zero
 400198c:	1000051e 	bne	r2,zero,40019a4 <ADXL345_SPI_Init+0xb8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 4001990:	e13fff17 	ldw	r4,-4(fp)
 4001994:	01400b44 	movi	r5,45
 4001998:	01800204 	movi	r6,8
 400199c:	40040840 	call	4004084 <SPI_Write>
 40019a0:	e0bffe15 	stw	r2,-8(fp)
        
    }
    
            
    return bSuccess;
 40019a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40019a8:	e037883a 	mov	sp,fp
 40019ac:	dfc00117 	ldw	ra,4(sp)
 40019b0:	df000017 	ldw	fp,0(sp)
 40019b4:	dec00204 	addi	sp,sp,8
 40019b8:	f800283a 	ret

040019bc <ADXL345_SPI_WaitDataReady>:

bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 40019bc:	defffa04 	addi	sp,sp,-24
 40019c0:	dfc00515 	stw	ra,20(sp)
 40019c4:	df000415 	stw	fp,16(sp)
 40019c8:	dc000315 	stw	r16,12(sp)
 40019cc:	df000304 	addi	fp,sp,12
 40019d0:	e13fff15 	stw	r4,-4(fp)
 40019d4:	008100b4 	movhi	r2,1026
 40019d8:	109a9f04 	addi	r2,r2,27260
 40019dc:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 40019e0:	e0bffd15 	stw	r2,-12(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 40019e4:	e13fff17 	ldw	r4,-4(fp)
 40019e8:	4001a600 	call	4001a60 <ADXL345_SPI_IsDataReady>
 40019ec:	e0bffe15 	stw	r2,-8(fp)
        if (!bDataReady)
 40019f0:	e0bffe17 	ldw	r2,-8(fp)
 40019f4:	1004c03a 	cmpne	r2,r2,zero
 40019f8:	1000021e 	bne	r2,zero,4001a04 <ADXL345_SPI_WaitDataReady+0x48>
            usleep(500); 
 40019fc:	01007d04 	movi	r4,500
 4001a00:	4017a280 	call	4017a28 <usleep>
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
 4001a04:	e0bffe17 	ldw	r2,-8(fp)
 4001a08:	1004c03a 	cmpne	r2,r2,zero
 4001a0c:	10000d1e 	bne	r2,zero,4001a44 <ADXL345_SPI_WaitDataReady+0x88>
 4001a10:	008100b4 	movhi	r2,1026
 4001a14:	109a9f04 	addi	r2,r2,27260
 4001a18:	10800017 	ldw	r2,0(r2)
 4001a1c:	1007883a 	mov	r3,r2
 4001a20:	e0bffd17 	ldw	r2,-12(fp)
 4001a24:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001a28:	008100b4 	movhi	r2,1026
 4001a2c:	109a9e04 	addi	r2,r2,27256
 4001a30:	10800017 	ldw	r2,0(r2)
 4001a34:	1009883a 	mov	r4,r2
 4001a38:	014000c4 	movi	r5,3
 4001a3c:	4008fe80 	call	4008fe8 <__udivsi3>
 4001a40:	80bfe836 	bltu	r16,r2,40019e4 <ADXL345_SPI_WaitDataReady+0x28>
    
    return bDataReady;
 4001a44:	e0bffe17 	ldw	r2,-8(fp)
        
}    
 4001a48:	e037883a 	mov	sp,fp
 4001a4c:	dfc00217 	ldw	ra,8(sp)
 4001a50:	df000117 	ldw	fp,4(sp)
 4001a54:	dc000017 	ldw	r16,0(sp)
 4001a58:	dec00304 	addi	sp,sp,12
 4001a5c:	f800283a 	ret

04001a60 <ADXL345_SPI_IsDataReady>:

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 4001a60:	defffb04 	addi	sp,sp,-20
 4001a64:	dfc00415 	stw	ra,16(sp)
 4001a68:	df000315 	stw	fp,12(sp)
 4001a6c:	df000304 	addi	fp,sp,12
 4001a70:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 4001a74:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 4001a78:	e1bffe04 	addi	r6,fp,-8
 4001a7c:	e13fff17 	ldw	r4,-4(fp)
 4001a80:	01400c04 	movi	r5,48
 4001a84:	40042200 	call	4004220 <SPI_Read>
 4001a88:	1005003a 	cmpeq	r2,r2,zero
 4001a8c:	1000081e 	bne	r2,zero,4001ab0 <ADXL345_SPI_IsDataReady+0x50>
        if (data8 & XL345_DATAREADY)
 4001a90:	e0bffe03 	ldbu	r2,-8(fp)
 4001a94:	10803fcc 	andi	r2,r2,255
 4001a98:	1080201c 	xori	r2,r2,128
 4001a9c:	10bfe004 	addi	r2,r2,-128
 4001aa0:	1004403a 	cmpge	r2,r2,zero
 4001aa4:	1000021e 	bne	r2,zero,4001ab0 <ADXL345_SPI_IsDataReady+0x50>
            bReady = TRUE;
 4001aa8:	00800044 	movi	r2,1
 4001aac:	e0bffd15 	stw	r2,-12(fp)
    }            
    
    return bReady;
 4001ab0:	e0bffd17 	ldw	r2,-12(fp)
}
 4001ab4:	e037883a 	mov	sp,fp
 4001ab8:	dfc00117 	ldw	ra,4(sp)
 4001abc:	df000017 	ldw	fp,0(sp)
 4001ac0:	dec00204 	addi	sp,sp,8
 4001ac4:	f800283a 	ret

04001ac8 <ADXL345_SPI_XYZ_Read>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 4001ac8:	defff904 	addi	sp,sp,-28
 4001acc:	dfc00615 	stw	ra,24(sp)
 4001ad0:	df000515 	stw	fp,20(sp)
 4001ad4:	df000504 	addi	fp,sp,20
 4001ad8:	e13ffe15 	stw	r4,-8(fp)
 4001adc:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 4001ae0:	e1bffc04 	addi	r6,fp,-16
 4001ae4:	e13ffe17 	ldw	r4,-8(fp)
 4001ae8:	01400c84 	movi	r5,50
 4001aec:	01c00184 	movi	r7,6
 4001af0:	40040c80 	call	40040c8 <SPI_MultipleRead>
 4001af4:	e0bffb15 	stw	r2,-20(fp)
    if (bPass){
 4001af8:	e0bffb17 	ldw	r2,-20(fp)
 4001afc:	1005003a 	cmpeq	r2,r2,zero
 4001b00:	10001e1e 	bne	r2,zero,4001b7c <ADXL345_SPI_XYZ_Read+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 4001b04:	e0bffc43 	ldbu	r2,-15(fp)
 4001b08:	10803fcc 	andi	r2,r2,255
 4001b0c:	1004923a 	slli	r2,r2,8
 4001b10:	1007883a 	mov	r3,r2
 4001b14:	e0bffc03 	ldbu	r2,-16(fp)
 4001b18:	10803fcc 	andi	r2,r2,255
 4001b1c:	1884b03a 	or	r2,r3,r2
 4001b20:	1007883a 	mov	r3,r2
 4001b24:	e0bfff17 	ldw	r2,-4(fp)
 4001b28:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 4001b2c:	e0bfff17 	ldw	r2,-4(fp)
 4001b30:	11000084 	addi	r4,r2,2
 4001b34:	e0bffcc3 	ldbu	r2,-13(fp)
 4001b38:	10803fcc 	andi	r2,r2,255
 4001b3c:	1004923a 	slli	r2,r2,8
 4001b40:	1007883a 	mov	r3,r2
 4001b44:	e0bffc83 	ldbu	r2,-14(fp)
 4001b48:	10803fcc 	andi	r2,r2,255
 4001b4c:	1884b03a 	or	r2,r3,r2
 4001b50:	2080000d 	sth	r2,0(r4)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 4001b54:	e0bfff17 	ldw	r2,-4(fp)
 4001b58:	11000104 	addi	r4,r2,4
 4001b5c:	e0bffd43 	ldbu	r2,-11(fp)
 4001b60:	10803fcc 	andi	r2,r2,255
 4001b64:	1004923a 	slli	r2,r2,8
 4001b68:	1007883a 	mov	r3,r2
 4001b6c:	e0bffd03 	ldbu	r2,-12(fp)
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1884b03a 	or	r2,r3,r2
 4001b78:	2080000d 	sth	r2,0(r4)
    }        
    
    return bPass;
 4001b7c:	e0bffb17 	ldw	r2,-20(fp)
}
 4001b80:	e037883a 	mov	sp,fp
 4001b84:	dfc00117 	ldw	ra,4(sp)
 4001b88:	df000017 	ldw	fp,0(sp)
 4001b8c:	dec00204 	addi	sp,sp,8
 4001b90:	f800283a 	ret

04001b94 <ADXL345_SPI_IdRead>:

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 4001b94:	defffb04 	addi	sp,sp,-20
 4001b98:	dfc00415 	stw	ra,16(sp)
 4001b9c:	df000315 	stw	fp,12(sp)
 4001ba0:	df000304 	addi	fp,sp,12
 4001ba4:	e13ffe15 	stw	r4,-8(fp)
 4001ba8:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 4001bac:	e13ffe17 	ldw	r4,-8(fp)
 4001bb0:	000b883a 	mov	r5,zero
 4001bb4:	e1bfff17 	ldw	r6,-4(fp)
 4001bb8:	40042200 	call	4004220 <SPI_Read>
 4001bbc:	e0bffd15 	stw	r2,-12(fp)
    
    return bPass;
 4001bc0:	e0bffd17 	ldw	r2,-12(fp)
}
 4001bc4:	e037883a 	mov	sp,fp
 4001bc8:	dfc00117 	ldw	ra,4(sp)
 4001bcc:	df000017 	ldw	fp,0(sp)
 4001bd0:	dec00204 	addi	sp,sp,8
 4001bd4:	f800283a 	ret

04001bd8 <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 4001bd8:	defff904 	addi	sp,sp,-28
 4001bdc:	dfc00615 	stw	ra,24(sp)
 4001be0:	df000515 	stw	fp,20(sp)
 4001be4:	df000504 	addi	fp,sp,20
 4001be8:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 4001bec:	e03ffe0d 	sth	zero,-8(fp)
    bool bDone = FALSE;
 4001bf0:	e03ffd15 	stw	zero,-12(fp)
    const int nMaxWait = 1000;
 4001bf4:	0080fa04 	movi	r2,1000
 4001bf8:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
 4001bfc:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel; //0, 1, 2 ...
 4001c00:	e0bfff03 	ldbu	r2,-4(fp)
 4001c04:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 4001c08:	e0fffe8b 	ldhu	r3,-6(fp)
 4001c0c:	00802404 	movi	r2,144
 4001c10:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 4001c14:	e0fffe8b 	ldhu	r3,-6(fp)
 4001c18:	00a00004 	movi	r2,-32768
 4001c1c:	1884b03a 	or	r2,r3,r2
 4001c20:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 4001c24:	e0fffe8b 	ldhu	r3,-6(fp)
 4001c28:	00802404 	movi	r2,144
 4001c2c:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
 4001c30:	0109c404 	movi	r4,10000
 4001c34:	4017a280 	call	4017a28 <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 4001c38:	00000906 	br	4001c60 <ADC_Read+0x88>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 4001c3c:	00802404 	movi	r2,144
 4001c40:	10800037 	ldwio	r2,0(r2)
 4001c44:	e0bffe8d 	sth	r2,-6(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 4001c48:	e0bffe8b 	ldhu	r2,-6(fp)
 4001c4c:	10bfffcc 	andi	r2,r2,65535
 4001c50:	10a0001c 	xori	r2,r2,32768
 4001c54:	10a00004 	addi	r2,r2,-32768
 4001c58:	1004d7fa 	srli	r2,r2,31
 4001c5c:	e0bffd15 	stw	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 4001c60:	e0bffd17 	ldw	r2,-12(fp)
 4001c64:	1004c03a 	cmpne	r2,r2,zero
 4001c68:	10000a1e 	bne	r2,zero,4001c94 <ADC_Read+0xbc>
 4001c6c:	e0fffb17 	ldw	r3,-20(fp)
 4001c70:	e0bffc17 	ldw	r2,-16(fp)
 4001c74:	10c4403a 	cmpge	r2,r2,r3
 4001c78:	1007883a 	mov	r3,r2
 4001c7c:	e0bffb17 	ldw	r2,-20(fp)
 4001c80:	10800044 	addi	r2,r2,1
 4001c84:	e0bffb15 	stw	r2,-20(fp)
 4001c88:	18803fcc 	andi	r2,r3,255
 4001c8c:	1004c03a 	cmpne	r2,r2,zero
 4001c90:	103fea1e 	bne	r2,zero,4001c3c <ADC_Read+0x64>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 4001c94:	e0bffd17 	ldw	r2,-12(fp)
 4001c98:	1005003a 	cmpeq	r2,r2,zero
 4001c9c:	1000031e 	bne	r2,zero,4001cac <ADC_Read+0xd4>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 4001ca0:	e0bffe8b 	ldhu	r2,-6(fp)
 4001ca4:	1083ffcc 	andi	r2,r2,4095
 4001ca8:	e0bffe0d 	sth	r2,-8(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 4001cac:	00802404 	movi	r2,144
 4001cb0:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
 4001cb4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4001cb8:	e037883a 	mov	sp,fp
 4001cbc:	dfc00117 	ldw	ra,4(sp)
 4001cc0:	df000017 	ldw	fp,0(sp)
 4001cc4:	dec00204 	addi	sp,sp,8
 4001cc8:	f800283a 	ret

04001ccc <Flash_InfoDump>:
    int number_of_regions_flash;
}FLASH_INFO;



bool Flash_InfoDump(char *pFlashName){
 4001ccc:	defff304 	addi	sp,sp,-52
 4001cd0:	dfc00c15 	stw	ra,48(sp)
 4001cd4:	df000b15 	stw	fp,44(sp)
 4001cd8:	df000b04 	addi	fp,sp,44
 4001cdc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 4001ce0:	e03ffc15 	stw	zero,-16(fp)
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code;
    /* Set write_data to all 0xa */
    FLASH_DEBUG(("Flash_InfoDump\r\n"));
    fd = alt_flash_open_dev(pFlashName);
 4001ce4:	e13fff17 	ldw	r4,-4(fp)
 4001ce8:	40170800 	call	4017080 <alt_flash_open_dev>
 4001cec:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 4001cf0:	e0bffa17 	ldw	r2,-24(fp)
 4001cf4:	1005003a 	cmpeq	r2,r2,zero
 4001cf8:	1000211e 	bne	r2,zero,4001d80 <Flash_InfoDump+0xb4>
 4001cfc:	e0bffa17 	ldw	r2,-24(fp)
 4001d00:	e0bff515 	stw	r2,-44(fp)
 4001d04:	e0bffd04 	addi	r2,fp,-12
 4001d08:	e0bff615 	stw	r2,-40(fp)
 4001d0c:	e0bffe04 	addi	r2,fp,-8
 4001d10:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 4001d14:	e0bff517 	ldw	r2,-44(fp)
 4001d18:	10800717 	ldw	r2,28(r2)
 4001d1c:	e13ff517 	ldw	r4,-44(fp)
 4001d20:	e17ff617 	ldw	r5,-40(fp)
 4001d24:	e1bff717 	ldw	r6,-36(fp)
 4001d28:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 4001d2c:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0){
 4001d30:	e0bff917 	ldw	r2,-28(fp)
 4001d34:	1004c03a 	cmpne	r2,r2,zero
 4001d38:	10000f1e 	bne	r2,zero,4001d78 <Flash_InfoDump+0xac>
            int i;
            bSuccess = TRUE;
 4001d3c:	00800044 	movi	r2,1
 4001d40:	e0bffc15 	stw	r2,-16(fp)
            nextreg = regions;
 4001d44:	e0bffd17 	ldw	r2,-12(fp)
 4001d48:	e0bffb15 	stw	r2,-20(fp)
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 4001d4c:	e03ff815 	stw	zero,-32(fp)
 4001d50:	00000606 	br	4001d6c <Flash_InfoDump+0xa0>
                FLASH_DEBUG(("regsion[%d]\r\n", i));
                FLASH_DEBUG(("  offset:%d\r\n", nextreg->offset));
                FLASH_DEBUG(("  region_size:%d\r\n", nextreg->region_size));
                FLASH_DEBUG(("  number_of_blocks:%d\r\n", nextreg->number_of_blocks));
                FLASH_DEBUG(("  block_size;:%d\r\n", nextreg->block_size));
                nextreg++;
 4001d54:	e0bffb17 	ldw	r2,-20(fp)
 4001d58:	10800404 	addi	r2,r2,16
 4001d5c:	e0bffb15 	stw	r2,-20(fp)
        if (ret_code == 0){
            int i;
            bSuccess = TRUE;
            nextreg = regions;
            FLASH_DEBUG(("number_of_regsion:%d\r\n", number_of_regions));
            for(i=0;i<number_of_regions;i++){
 4001d60:	e0bff817 	ldw	r2,-32(fp)
 4001d64:	10800044 	addi	r2,r2,1
 4001d68:	e0bff815 	stw	r2,-32(fp)
 4001d6c:	e0fffe17 	ldw	r3,-8(fp)
 4001d70:	e0bff817 	ldw	r2,-32(fp)
 4001d74:	10fff716 	blt	r2,r3,4001d54 <Flash_InfoDump+0x88>
                nextreg++;
            }                
        }else{
            FLASH_DEBUG(("alt_get_flash_info error, ret_code:%d fail\r\n", ret_code));
        }
        alt_flash_close_dev(fd);
 4001d78:	e13ffa17 	ldw	r4,-24(fp)
 4001d7c:	40170fc0 	call	40170fc <alt_flash_close_dev>
    }
    
    if (!bSuccess)        
        FLASH_DEBUG(("Flash_InfoDump fail\r\n"));

    return bSuccess;
 4001d80:	e0bffc17 	ldw	r2,-16(fp)
    
}
 4001d84:	e037883a 	mov	sp,fp
 4001d88:	dfc00117 	ldw	ra,4(sp)
 4001d8c:	df000017 	ldw	fp,0(sp)
 4001d90:	dec00204 	addi	sp,sp,8
 4001d94:	f800283a 	ret

04001d98 <Flash_Open>:



FLASH_HANDLE Flash_Open(char *pFlashName){
 4001d98:	defff704 	addi	sp,sp,-36
 4001d9c:	dfc00815 	stw	ra,32(sp)
 4001da0:	df000715 	stw	fp,28(sp)
 4001da4:	df000704 	addi	fp,sp,28
 4001da8:	e13fff15 	stw	r4,-4(fp)
    int error_code;
    bool bSuccess = FALSE;
 4001dac:	e03ffd15 	stw	zero,-12(fp)
    FLASH_INFO *pFlash=NULL;
 4001db0:	e03ffc15 	stw	zero,-16(fp)
    
    pFlash = (FLASH_INFO *)malloc(sizeof(FLASH_INFO));
 4001db4:	01000304 	movi	r4,12
 4001db8:	4009a080 	call	4009a08 <malloc>
 4001dbc:	e0bffc15 	stw	r2,-16(fp)
    pFlash->fd_flash = alt_flash_open_dev(pFlashName);
 4001dc0:	e13fff17 	ldw	r4,-4(fp)
 4001dc4:	40170800 	call	4017080 <alt_flash_open_dev>
 4001dc8:	1007883a 	mov	r3,r2
 4001dcc:	e0bffc17 	ldw	r2,-16(fp)
 4001dd0:	10c00015 	stw	r3,0(r2)
    if (pFlash->fd_flash){
 4001dd4:	e0bffc17 	ldw	r2,-16(fp)
 4001dd8:	10800017 	ldw	r2,0(r2)
 4001ddc:	1005003a 	cmpeq	r2,r2,zero
 4001de0:	1000151e 	bne	r2,zero,4001e38 <Flash_Open+0xa0>
        error_code = alt_get_flash_info(pFlash->fd_flash,&pFlash->regions_flash,&pFlash->number_of_regions_flash);
 4001de4:	e0bffc17 	ldw	r2,-16(fp)
 4001de8:	10c00017 	ldw	r3,0(r2)
 4001dec:	e0bffc17 	ldw	r2,-16(fp)
 4001df0:	11000104 	addi	r4,r2,4
 4001df4:	e0bffc17 	ldw	r2,-16(fp)
 4001df8:	10800204 	addi	r2,r2,8
 4001dfc:	e0fff915 	stw	r3,-28(fp)
 4001e00:	e13ffa15 	stw	r4,-24(fp)
 4001e04:	e0bffb15 	stw	r2,-20(fp)
 4001e08:	e0bff917 	ldw	r2,-28(fp)
 4001e0c:	10800717 	ldw	r2,28(r2)
 4001e10:	e13ff917 	ldw	r4,-28(fp)
 4001e14:	e17ffa17 	ldw	r5,-24(fp)
 4001e18:	e1bffb17 	ldw	r6,-20(fp)
 4001e1c:	103ee83a 	callr	r2
 4001e20:	e0bffe15 	stw	r2,-8(fp)
        if (error_code == 0){
 4001e24:	e0bffe17 	ldw	r2,-8(fp)
 4001e28:	1004c03a 	cmpne	r2,r2,zero
 4001e2c:	1000021e 	bne	r2,zero,4001e38 <Flash_Open+0xa0>
            bSuccess = TRUE;
 4001e30:	00800044 	movi	r2,1
 4001e34:	e0bffd15 	stw	r2,-12(fp)
        }            
    }
    
    if (!bSuccess){
 4001e38:	e0bffd17 	ldw	r2,-12(fp)
 4001e3c:	1004c03a 	cmpne	r2,r2,zero
 4001e40:	1000031e 	bne	r2,zero,4001e50 <Flash_Open+0xb8>
        free(pFlash);
 4001e44:	e13ffc17 	ldw	r4,-16(fp)
 4001e48:	40099f40 	call	40099f4 <free>
        pFlash= NULL;
 4001e4c:	e03ffc15 	stw	zero,-16(fp)
    }        
    return pFlash;
 4001e50:	e0bffc17 	ldw	r2,-16(fp)
            
}
 4001e54:	e037883a 	mov	sp,fp
 4001e58:	dfc00117 	ldw	ra,4(sp)
 4001e5c:	df000017 	ldw	fp,0(sp)
 4001e60:	dec00204 	addi	sp,sp,8
 4001e64:	f800283a 	ret

04001e68 <Flash_Close>:

bool Flash_Close(FLASH_HANDLE Handle){
 4001e68:	defffc04 	addi	sp,sp,-16
 4001e6c:	dfc00315 	stw	ra,12(sp)
 4001e70:	df000215 	stw	fp,8(sp)
 4001e74:	df000204 	addi	fp,sp,8
 4001e78:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 4001e7c:	e0bfff17 	ldw	r2,-4(fp)
 4001e80:	e0bffe15 	stw	r2,-8(fp)
    if (pFlash->fd_flash){
 4001e84:	e0bffe17 	ldw	r2,-8(fp)
 4001e88:	10800017 	ldw	r2,0(r2)
 4001e8c:	1005003a 	cmpeq	r2,r2,zero
 4001e90:	1000031e 	bne	r2,zero,4001ea0 <Flash_Close+0x38>
        alt_flash_close_dev(pFlash->fd_flash);
 4001e94:	e0bffe17 	ldw	r2,-8(fp)
 4001e98:	11000017 	ldw	r4,0(r2)
 4001e9c:	40170fc0 	call	40170fc <alt_flash_close_dev>
    }
    free(Handle);
 4001ea0:	e13fff17 	ldw	r4,-4(fp)
 4001ea4:	40099f40 	call	40099f4 <free>
    return TRUE;
 4001ea8:	00800044 	movi	r2,1
}
 4001eac:	e037883a 	mov	sp,fp
 4001eb0:	dfc00117 	ldw	ra,4(sp)
 4001eb4:	df000017 	ldw	fp,0(sp)
 4001eb8:	dec00204 	addi	sp,sp,8
 4001ebc:	f800283a 	ret

04001ec0 <Flash_GetBlockInfo>:

bool Flash_GetBlockInfo(FLASH_HANDLE Handle, alt_u16 block_index, alt_32 *poffset, alt_32 *psize){
 4001ec0:	defff204 	addi	sp,sp,-56
 4001ec4:	df000d15 	stw	fp,52(sp)
 4001ec8:	df000d04 	addi	fp,sp,52
 4001ecc:	e13ffb15 	stw	r4,-20(fp)
 4001ed0:	e1bffd15 	stw	r6,-12(fp)
 4001ed4:	e1fffe15 	stw	r7,-8(fp)
 4001ed8:	e17ffc0d 	sth	r5,-16(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 4001edc:	e0bffb17 	ldw	r2,-20(fp)
 4001ee0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 offset=0, length;        
 4001ee4:	e03ff915 	stw	zero,-28(fp)
    int r, i, block_count=0;
 4001ee8:	e03ff515 	stw	zero,-44(fp)
    flash_region *nextreg = pFlash->regions_flash;
 4001eec:	e0bffa17 	ldw	r2,-24(fp)
 4001ef0:	10800117 	ldw	r2,4(r2)
 4001ef4:	e0bff415 	stw	r2,-48(fp)
    bool bFind = FALSE;
 4001ef8:	e03ff315 	stw	zero,-52(fp)
    
    if (!pFlash->fd_flash)
 4001efc:	e0bffa17 	ldw	r2,-24(fp)
 4001f00:	10800017 	ldw	r2,0(r2)
 4001f04:	1004c03a 	cmpne	r2,r2,zero
 4001f08:	1000021e 	bne	r2,zero,4001f14 <Flash_GetBlockInfo+0x54>
        return FALSE;
 4001f0c:	e03fff15 	stw	zero,-4(fp)
 4001f10:	00003506 	br	4001fe8 <Flash_GetBlockInfo+0x128>
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 4001f14:	e03ff715 	stw	zero,-36(fp)
 4001f18:	00002106 	br	4001fa0 <Flash_GetBlockInfo+0xe0>
        for(i=0;i<nextreg->number_of_blocks;i++){
 4001f1c:	e03ff615 	stw	zero,-40(fp)
 4001f20:	00001506 	br	4001f78 <Flash_GetBlockInfo+0xb8>
            if (block_count == block_index){
 4001f24:	e0fffc0b 	ldhu	r3,-16(fp)
 4001f28:	e0bff517 	ldw	r2,-44(fp)
 4001f2c:	1880061e 	bne	r3,r2,4001f48 <Flash_GetBlockInfo+0x88>
                bFind = TRUE;
 4001f30:	00800044 	movi	r2,1
 4001f34:	e0bff315 	stw	r2,-52(fp)
                length = nextreg->block_size;
 4001f38:	e0bff417 	ldw	r2,-48(fp)
 4001f3c:	10800317 	ldw	r2,12(r2)
 4001f40:	e0bff815 	stw	r2,-32(fp)
 4001f44:	00000906 	br	4001f6c <Flash_GetBlockInfo+0xac>
            }else{
                offset += nextreg->block_size;
 4001f48:	e0bff417 	ldw	r2,-48(fp)
 4001f4c:	10800317 	ldw	r2,12(r2)
 4001f50:	1007883a 	mov	r3,r2
 4001f54:	e0bff917 	ldw	r2,-28(fp)
 4001f58:	10c5883a 	add	r2,r2,r3
 4001f5c:	e0bff915 	stw	r2,-28(fp)
                block_count++;
 4001f60:	e0bff517 	ldw	r2,-44(fp)
 4001f64:	10800044 	addi	r2,r2,1
 4001f68:	e0bff515 	stw	r2,-44(fp)
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
        for(i=0;i<nextreg->number_of_blocks;i++){
 4001f6c:	e0bff617 	ldw	r2,-40(fp)
 4001f70:	10800044 	addi	r2,r2,1
 4001f74:	e0bff615 	stw	r2,-40(fp)
 4001f78:	e0bff417 	ldw	r2,-48(fp)
 4001f7c:	10c00217 	ldw	r3,8(r2)
 4001f80:	e0bff617 	ldw	r2,-40(fp)
 4001f84:	10ffe716 	blt	r2,r3,4001f24 <Flash_GetBlockInfo+0x64>
            }else{
                offset += nextreg->block_size;
                block_count++;
            }
        }
        nextreg++;
 4001f88:	e0bff417 	ldw	r2,-48(fp)
 4001f8c:	10800404 	addi	r2,r2,16
 4001f90:	e0bff415 	stw	r2,-48(fp)
    
    if (!pFlash->fd_flash)
        return FALSE;
    
    
    for(r=0;r<pFlash->number_of_regions_flash && !bFind;r++){
 4001f94:	e0bff717 	ldw	r2,-36(fp)
 4001f98:	10800044 	addi	r2,r2,1
 4001f9c:	e0bff715 	stw	r2,-36(fp)
 4001fa0:	e0bffa17 	ldw	r2,-24(fp)
 4001fa4:	10c00217 	ldw	r3,8(r2)
 4001fa8:	e0bff717 	ldw	r2,-36(fp)
 4001fac:	10c0030e 	bge	r2,r3,4001fbc <Flash_GetBlockInfo+0xfc>
 4001fb0:	e0bff317 	ldw	r2,-52(fp)
 4001fb4:	1005003a 	cmpeq	r2,r2,zero
 4001fb8:	103fd81e 	bne	r2,zero,4001f1c <Flash_GetBlockInfo+0x5c>
                block_count++;
            }
        }
        nextreg++;
    }    
    if (bFind){
 4001fbc:	e0bff317 	ldw	r2,-52(fp)
 4001fc0:	1005003a 	cmpeq	r2,r2,zero
 4001fc4:	1000061e 	bne	r2,zero,4001fe0 <Flash_GetBlockInfo+0x120>
        *poffset = offset;
 4001fc8:	e0fff917 	ldw	r3,-28(fp)
 4001fcc:	e0bffd17 	ldw	r2,-12(fp)
 4001fd0:	10c00015 	stw	r3,0(r2)
        *psize = length;
 4001fd4:	e0fff817 	ldw	r3,-32(fp)
 4001fd8:	e0bffe17 	ldw	r2,-8(fp)
 4001fdc:	10c00015 	stw	r3,0(r2)
    }
    
    return bFind;
 4001fe0:	e0bff317 	ldw	r2,-52(fp)
 4001fe4:	e0bfff15 	stw	r2,-4(fp)
 4001fe8:	e0bfff17 	ldw	r2,-4(fp)
    
}
 4001fec:	e037883a 	mov	sp,fp
 4001ff0:	df000017 	ldw	fp,0(sp)
 4001ff4:	dec00104 	addi	sp,sp,4
 4001ff8:	f800283a 	ret

04001ffc <Flash_Read>:

bool Flash_Read(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szBuf, alt_u32 size){
 4001ffc:	defff304 	addi	sp,sp,-52
 4002000:	dfc00c15 	stw	ra,48(sp)
 4002004:	df000b15 	stw	fp,44(sp)
 4002008:	df000b04 	addi	fp,sp,44
 400200c:	e13ffb15 	stw	r4,-20(fp)
 4002010:	e17ffc15 	stw	r5,-16(fp)
 4002014:	e1bffd15 	stw	r6,-12(fp)
 4002018:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 400201c:	e0bffb17 	ldw	r2,-20(fp)
 4002020:	e0bffa15 	stw	r2,-24(fp)
    int error_code;
    if (!pFlash->fd_flash)
 4002024:	e0bffa17 	ldw	r2,-24(fp)
 4002028:	10800017 	ldw	r2,0(r2)
 400202c:	1004c03a 	cmpne	r2,r2,zero
 4002030:	1000021e 	bne	r2,zero,400203c <Flash_Read+0x40>
        return FALSE;
 4002034:	e03fff15 	stw	zero,-4(fp)
 4002038:	00001806 	br	400209c <Flash_Read+0xa0>
    error_code = alt_read_flash(pFlash->fd_flash, offset, szBuf, size);
 400203c:	e0bffa17 	ldw	r2,-24(fp)
 4002040:	10800017 	ldw	r2,0(r2)
 4002044:	e0fffc17 	ldw	r3,-16(fp)
 4002048:	e13ffe17 	ldw	r4,-8(fp)
 400204c:	e0bff515 	stw	r2,-44(fp)
 4002050:	e0fff615 	stw	r3,-40(fp)
 4002054:	e0bffd17 	ldw	r2,-12(fp)
 4002058:	e0bff715 	stw	r2,-36(fp)
 400205c:	e13ff815 	stw	r4,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 4002060:	e0bff517 	ldw	r2,-44(fp)
 4002064:	10800617 	ldw	r2,24(r2)
 4002068:	e13ff517 	ldw	r4,-44(fp)
 400206c:	e17ff617 	ldw	r5,-40(fp)
 4002070:	e1bff717 	ldw	r6,-36(fp)
 4002074:	e1fff817 	ldw	r7,-32(fp)
 4002078:	103ee83a 	callr	r2
 400207c:	e0bff915 	stw	r2,-28(fp)
    if (error_code == 0)
 4002080:	e0bff917 	ldw	r2,-28(fp)
 4002084:	1004c03a 	cmpne	r2,r2,zero
 4002088:	1000031e 	bne	r2,zero,4002098 <Flash_Read+0x9c>
        return TRUE;
 400208c:	00800044 	movi	r2,1
 4002090:	e0bfff15 	stw	r2,-4(fp)
 4002094:	00000106 	br	400209c <Flash_Read+0xa0>
    return FALSE;                    
 4002098:	e03fff15 	stw	zero,-4(fp)
 400209c:	e0bfff17 	ldw	r2,-4(fp)
    
}
 40020a0:	e037883a 	mov	sp,fp
 40020a4:	dfc00117 	ldw	ra,4(sp)
 40020a8:	df000017 	ldw	fp,0(sp)
 40020ac:	dec00204 	addi	sp,sp,8
 40020b0:	f800283a 	ret

040020b4 <Flash_Write>:

bool Flash_Write(FLASH_HANDLE Handle, alt_u32 offset, alt_u8 *szData, alt_u32 size){
 40020b4:	deffe804 	addi	sp,sp,-96
 40020b8:	dfc01715 	stw	ra,92(sp)
 40020bc:	df001615 	stw	fp,88(sp)
 40020c0:	df001604 	addi	fp,sp,88
 40020c4:	e13ffb15 	stw	r4,-20(fp)
 40020c8:	e17ffc15 	stw	r5,-16(fp)
 40020cc:	e1bffd15 	stw	r6,-12(fp)
 40020d0:	e1fffe15 	stw	r7,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 40020d4:	e0bffb17 	ldw	r2,-20(fp)
 40020d8:	e0bffa15 	stw	r2,-24(fp)
    bool bSuccess = TRUE;
 40020dc:	00800044 	movi	r2,1
 40020e0:	e0bff915 	stw	r2,-28(fp)
    int error_code;
    
    if (!pFlash->fd_flash)
 40020e4:	e0bffa17 	ldw	r2,-24(fp)
 40020e8:	10800017 	ldw	r2,0(r2)
 40020ec:	1004c03a 	cmpne	r2,r2,zero
 40020f0:	1000021e 	bne	r2,zero,40020fc <Flash_Write+0x48>
        return FALSE;
 40020f4:	e03fff15 	stw	zero,-4(fp)
 40020f8:	00007c06 	br	40022ec <Flash_Write+0x238>
    }else{
        FLASH_DEBUG(("alt_write_flash fail, error_code=%d\r\n", error_code));
    }    
#else
    int block_offset, block_size, write_count, this_write_size, r, i;//, first_offset;        
    flash_region *nextreg = pFlash->regions_flash;
 40020fc:	e0bffa17 	ldw	r2,-24(fp)
 4002100:	10800117 	ldw	r2,4(r2)
 4002104:	e0bff115 	stw	r2,-60(fp)

    
    block_offset = 0;
 4002108:	e03ff715 	stw	zero,-36(fp)
    write_count = 0;
 400210c:	e03ff515 	stw	zero,-44(fp)
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 4002110:	e03ff315 	stw	zero,-52(fp)
 4002114:	00006c06 	br	40022c8 <Flash_Write+0x214>
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 4002118:	e03ff215 	stw	zero,-56(fp)
 400211c:	00005d06 	br	4002294 <Flash_Write+0x1e0>
            block_size = nextreg->block_size;
 4002120:	e0bff117 	ldw	r2,-60(fp)
 4002124:	10800317 	ldw	r2,12(r2)
 4002128:	e0bff615 	stw	r2,-40(fp)
//            FLASH_DEBUG(("block_offset=%d, block_size=%d\r\n", block_offset, block_size));
//            if ((offset >= block_offset) && ((offset+size) <= (block_offset + block_size))){
            if (((offset+write_count) >= block_offset) && (write_count < size)){
 400212c:	e0fff517 	ldw	r3,-44(fp)
 4002130:	e0bffc17 	ldw	r2,-16(fp)
 4002134:	1887883a 	add	r3,r3,r2
 4002138:	e0bff717 	ldw	r2,-36(fp)
 400213c:	18804e36 	bltu	r3,r2,4002278 <Flash_Write+0x1c4>
 4002140:	e0fff517 	ldw	r3,-44(fp)
 4002144:	e0bffe17 	ldw	r2,-8(fp)
 4002148:	18804b2e 	bgeu	r3,r2,4002278 <Flash_Write+0x1c4>
                // write
                this_write_size = size - write_count;
 400214c:	e0fff517 	ldw	r3,-44(fp)
 4002150:	e0bffe17 	ldw	r2,-8(fp)
 4002154:	10c5c83a 	sub	r2,r2,r3
 4002158:	e0bff415 	stw	r2,-48(fp)
                if (write_count == 0){
 400215c:	e0bff517 	ldw	r2,-44(fp)
 4002160:	1004c03a 	cmpne	r2,r2,zero
 4002164:	1000101e 	bne	r2,zero,40021a8 <Flash_Write+0xf4>
                    // first block
                    if (this_write_size > (block_offset + block_size - offset))
 4002168:	e13ff417 	ldw	r4,-48(fp)
 400216c:	e0fff717 	ldw	r3,-36(fp)
 4002170:	e0bff617 	ldw	r2,-40(fp)
 4002174:	1885883a 	add	r2,r3,r2
 4002178:	1007883a 	mov	r3,r2
 400217c:	e0bffc17 	ldw	r2,-16(fp)
 4002180:	1885c83a 	sub	r2,r3,r2
 4002184:	11000d2e 	bgeu	r2,r4,40021bc <Flash_Write+0x108>
                        this_write_size = block_offset + block_size - offset;
 4002188:	e0fff717 	ldw	r3,-36(fp)
 400218c:	e0bff617 	ldw	r2,-40(fp)
 4002190:	1885883a 	add	r2,r3,r2
 4002194:	1007883a 	mov	r3,r2
 4002198:	e0bffc17 	ldw	r2,-16(fp)
 400219c:	1885c83a 	sub	r2,r3,r2
 40021a0:	e0bff415 	stw	r2,-48(fp)
 40021a4:	00000506 	br	40021bc <Flash_Write+0x108>
                }else{
                    // block aligement
                    if (this_write_size > block_size)
 40021a8:	e0fff417 	ldw	r3,-48(fp)
 40021ac:	e0bff617 	ldw	r2,-40(fp)
 40021b0:	10c0020e 	bge	r2,r3,40021bc <Flash_Write+0x108>
                        this_write_size = block_size;
 40021b4:	e0bff617 	ldw	r2,-40(fp)
 40021b8:	e0bff415 	stw	r2,-48(fp)
                }        
                error_code = alt_write_flash_block(pFlash->fd_flash, block_offset, offset+write_count, szData+write_count, this_write_size);
 40021bc:	e0bffa17 	ldw	r2,-24(fp)
 40021c0:	11000017 	ldw	r4,0(r2)
 40021c4:	e0fff517 	ldw	r3,-44(fp)
 40021c8:	e0bffc17 	ldw	r2,-16(fp)
 40021cc:	1885883a 	add	r2,r3,r2
 40021d0:	100b883a 	mov	r5,r2
 40021d4:	e0bff517 	ldw	r2,-44(fp)
 40021d8:	1007883a 	mov	r3,r2
 40021dc:	e0bffd17 	ldw	r2,-12(fp)
 40021e0:	1887883a 	add	r3,r3,r2
 40021e4:	e13feb15 	stw	r4,-84(fp)
 40021e8:	e0bff717 	ldw	r2,-36(fp)
 40021ec:	e0bfec15 	stw	r2,-80(fp)
 40021f0:	e17fed15 	stw	r5,-76(fp)
 40021f4:	e0ffee15 	stw	r3,-72(fp)
 40021f8:	e0bff417 	ldw	r2,-48(fp)
 40021fc:	e0bfef15 	stw	r2,-68(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 4002200:	e0bfeb17 	ldw	r2,-84(fp)
 4002204:	10c00917 	ldw	r3,36(r2)
 4002208:	e0bfef17 	ldw	r2,-68(fp)
 400220c:	d8800015 	stw	r2,0(sp)
 4002210:	e13feb17 	ldw	r4,-84(fp)
 4002214:	e17fec17 	ldw	r5,-80(fp)
 4002218:	e1bfed17 	ldw	r6,-76(fp)
 400221c:	e1ffee17 	ldw	r7,-72(fp)
 4002220:	183ee83a 	callr	r3
 4002224:	e0bff015 	stw	r2,-64(fp)

  if(!ret_code)
 4002228:	e0bff017 	ldw	r2,-64(fp)
 400222c:	1004c03a 	cmpne	r2,r2,zero
 4002230:	1000071e 	bne	r2,zero,4002250 <Flash_Write+0x19c>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 4002234:	e0bfeb17 	ldw	r2,-84(fp)
 4002238:	10800a17 	ldw	r2,40(r2)
 400223c:	1007883a 	mov	r3,r2
 4002240:	e0bfed17 	ldw	r2,-76(fp)
 4002244:	1889883a 	add	r4,r3,r2
 4002248:	e17fef17 	ldw	r5,-68(fp)
 400224c:	40170140 	call	4017014 <alt_dcache_flush>

  return ret_code;
 4002250:	e0bff017 	ldw	r2,-64(fp)
 4002254:	e0bff815 	stw	r2,-32(fp)
                //FLASH_DEBUG(("alt_write_flash_block, block_offset:%d, offset:%d, len:%d, this block_size:%d\r\n", block_offset, offset+write_count, this_write_size, block_size));
                if (error_code != 0){
 4002258:	e0bff817 	ldw	r2,-32(fp)
 400225c:	1005003a 	cmpeq	r2,r2,zero
 4002260:	1000011e 	bne	r2,zero,4002268 <Flash_Write+0x1b4>
                    bSuccess = FALSE;
 4002264:	e03ff915 	stw	zero,-28(fp)
                    FLASH_DEBUG(("alt_write_flash_block fail, error_code=%d\r\n", error_code));
                }    
                write_count += this_write_size;
 4002268:	e0bff517 	ldw	r2,-44(fp)
 400226c:	e0fff417 	ldw	r3,-48(fp)
 4002270:	10c5883a 	add	r2,r2,r3
 4002274:	e0bff515 	stw	r2,-44(fp)
            }
            block_offset += block_size;
 4002278:	e0fff717 	ldw	r3,-36(fp)
 400227c:	e0bff617 	ldw	r2,-40(fp)
 4002280:	1885883a 	add	r2,r3,r2
 4002284:	e0bff715 	stw	r2,-36(fp)

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
        for(i=0;i<nextreg->number_of_blocks && bSuccess;i++){
 4002288:	e0bff217 	ldw	r2,-56(fp)
 400228c:	10800044 	addi	r2,r2,1
 4002290:	e0bff215 	stw	r2,-56(fp)
 4002294:	e0bff117 	ldw	r2,-60(fp)
 4002298:	10c00217 	ldw	r3,8(r2)
 400229c:	e0bff217 	ldw	r2,-56(fp)
 40022a0:	10c0030e 	bge	r2,r3,40022b0 <Flash_Write+0x1fc>
 40022a4:	e0bff917 	ldw	r2,-28(fp)
 40022a8:	1004c03a 	cmpne	r2,r2,zero
 40022ac:	103f9c1e 	bne	r2,zero,4002120 <Flash_Write+0x6c>
                }    
                write_count += this_write_size;
            }
            block_offset += block_size;
        }
        nextreg++;
 40022b0:	e0bff117 	ldw	r2,-60(fp)
 40022b4:	10800404 	addi	r2,r2,16
 40022b8:	e0bff115 	stw	r2,-60(fp)
    flash_region *nextreg = pFlash->regions_flash;

    
    block_offset = 0;
    write_count = 0;
    for(r=0;r<pFlash->number_of_regions_flash && bSuccess;r++){
 40022bc:	e0bff317 	ldw	r2,-52(fp)
 40022c0:	10800044 	addi	r2,r2,1
 40022c4:	e0bff315 	stw	r2,-52(fp)
 40022c8:	e0bffa17 	ldw	r2,-24(fp)
 40022cc:	10c00217 	ldw	r3,8(r2)
 40022d0:	e0bff317 	ldw	r2,-52(fp)
 40022d4:	10c0030e 	bge	r2,r3,40022e4 <Flash_Write+0x230>
 40022d8:	e0bff917 	ldw	r2,-28(fp)
 40022dc:	1004c03a 	cmpne	r2,r2,zero
 40022e0:	103f8d1e 	bne	r2,zero,4002118 <Flash_Write+0x64>
    error_code = alt_write_flash(fd_flash, offset, szData, size); // it will erase flash block content before write data
//    error_code = alt_write_flash_block(fd_flash, offset, offset+size, szData, size); // it will preserve flash content
    if (error_code == 0)
        return TRUE;
*/        
    return bSuccess;                    
 40022e4:	e0bff917 	ldw	r2,-28(fp)
 40022e8:	e0bfff15 	stw	r2,-4(fp)
 40022ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40022f0:	e037883a 	mov	sp,fp
 40022f4:	dfc00117 	ldw	ra,4(sp)
 40022f8:	df000017 	ldw	fp,0(sp)
 40022fc:	dec00204 	addi	sp,sp,8
 4002300:	f800283a 	ret

04002304 <Flash_Erase>:

bool Flash_Erase(FLASH_HANDLE Handle, alt_u16 block_index){
 4002304:	defff204 	addi	sp,sp,-56
 4002308:	dfc00d15 	stw	ra,52(sp)
 400230c:	df000c15 	stw	fp,48(sp)
 4002310:	df000c04 	addi	fp,sp,48
 4002314:	e13ffd15 	stw	r4,-12(fp)
 4002318:	e17ffe0d 	sth	r5,-8(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;
 400231c:	e0bffd17 	ldw	r2,-12(fp)
 4002320:	e0bffa15 	stw	r2,-24(fp)
    if (!pFlash->fd_flash)
 4002324:	e0bffa17 	ldw	r2,-24(fp)
 4002328:	10800017 	ldw	r2,0(r2)
 400232c:	1004c03a 	cmpne	r2,r2,zero
 4002330:	1000021e 	bne	r2,zero,400233c <Flash_Erase+0x38>
        return FALSE;
 4002334:	e03fff15 	stw	zero,-4(fp)
 4002338:	00002906 	br	40023e0 <Flash_Erase+0xdc>
    alt_u32 offset;
    alt_u32 length;        
    int error_code;
    bool bSuccess = FALSE;
 400233c:	e03ff815 	stw	zero,-32(fp)

    
    if (Flash_GetBlockInfo(Handle, block_index, &offset, &length)){
 4002340:	e17ffe0b 	ldhu	r5,-8(fp)
 4002344:	e1bffb04 	addi	r6,fp,-20
 4002348:	e1fffc04 	addi	r7,fp,-16
 400234c:	e13ffd17 	ldw	r4,-12(fp)
 4002350:	4001ec00 	call	4001ec0 <Flash_GetBlockInfo>
 4002354:	1005003a 	cmpeq	r2,r2,zero
 4002358:	10001f1e 	bne	r2,zero,40023d8 <Flash_Erase+0xd4>
        error_code = alt_erase_flash_block(pFlash->fd_flash, offset, length);
 400235c:	e0bffa17 	ldw	r2,-24(fp)
 4002360:	10c00017 	ldw	r3,0(r2)
 4002364:	e0bffb17 	ldw	r2,-20(fp)
 4002368:	1009883a 	mov	r4,r2
 400236c:	e0bffc17 	ldw	r2,-16(fp)
 4002370:	e0fff415 	stw	r3,-48(fp)
 4002374:	e13ff515 	stw	r4,-44(fp)
 4002378:	e0bff615 	stw	r2,-40(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 400237c:	e0bff417 	ldw	r2,-48(fp)
 4002380:	10800817 	ldw	r2,32(r2)
 4002384:	e13ff417 	ldw	r4,-48(fp)
 4002388:	e17ff517 	ldw	r5,-44(fp)
 400238c:	103ee83a 	callr	r2
 4002390:	e0bff715 	stw	r2,-36(fp)
  
  if(!ret_code)
 4002394:	e0bff717 	ldw	r2,-36(fp)
 4002398:	1004c03a 	cmpne	r2,r2,zero
 400239c:	1000071e 	bne	r2,zero,40023bc <Flash_Erase+0xb8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 40023a0:	e0bff417 	ldw	r2,-48(fp)
 40023a4:	10800a17 	ldw	r2,40(r2)
 40023a8:	1007883a 	mov	r3,r2
 40023ac:	e0bff517 	ldw	r2,-44(fp)
 40023b0:	1889883a 	add	r4,r3,r2
 40023b4:	e17ff617 	ldw	r5,-40(fp)
 40023b8:	40170140 	call	4017014 <alt_dcache_flush>

  return ret_code;
 40023bc:	e0bff717 	ldw	r2,-36(fp)
 40023c0:	e0bff915 	stw	r2,-28(fp)
        //DEBUG_FLASH("Erase block[%d], offset=%Xh, lenght=%Xh", block_no, offset, length);
        if (error_code == 0)
 40023c4:	e0bff917 	ldw	r2,-28(fp)
 40023c8:	1004c03a 	cmpne	r2,r2,zero
 40023cc:	1000021e 	bne	r2,zero,40023d8 <Flash_Erase+0xd4>
            bSuccess = TRUE;
 40023d0:	00800044 	movi	r2,1
 40023d4:	e0bff815 	stw	r2,-32(fp)
    }        
    
    return bSuccess;    
 40023d8:	e0bff817 	ldw	r2,-32(fp)
 40023dc:	e0bfff15 	stw	r2,-4(fp)
 40023e0:	e0bfff17 	ldw	r2,-4(fp)
}
 40023e4:	e037883a 	mov	sp,fp
 40023e8:	dfc00117 	ldw	ra,4(sp)
 40023ec:	df000017 	ldw	fp,0(sp)
 40023f0:	dec00204 	addi	sp,sp,8
 40023f4:	f800283a 	ret

040023f8 <Flash_GetBlockCount>:

alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
 40023f8:	defffa04 	addi	sp,sp,-24
 40023fc:	df000515 	stw	fp,20(sp)
 4002400:	df000504 	addi	fp,sp,20
 4002404:	e13fff15 	stw	r4,-4(fp)
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
 4002408:	e0bfff17 	ldw	r2,-4(fp)
 400240c:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 no=0;
 4002410:	e03ffd0d 	sth	zero,-12(fp)
    flash_region *nextreg = pFlash->regions_flash;
 4002414:	e0bffe17 	ldw	r2,-8(fp)
 4002418:	10800117 	ldw	r2,4(r2)
 400241c:	e0bffc15 	stw	r2,-16(fp)
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 4002420:	e03ffb15 	stw	zero,-20(fp)
 4002424:	00000c06 	br	4002458 <Flash_GetBlockCount+0x60>
        no += nextreg->number_of_blocks;
 4002428:	e0bffc17 	ldw	r2,-16(fp)
 400242c:	10800217 	ldw	r2,8(r2)
 4002430:	1007883a 	mov	r3,r2
 4002434:	e0bffd0b 	ldhu	r2,-12(fp)
 4002438:	10c5883a 	add	r2,r2,r3
 400243c:	e0bffd0d 	sth	r2,-12(fp)
        nextreg++;
 4002440:	e0bffc17 	ldw	r2,-16(fp)
 4002444:	10800404 	addi	r2,r2,16
 4002448:	e0bffc15 	stw	r2,-16(fp)
alt_u16 Flash_GetBlockCount(FLASH_HANDLE Handle){
    FLASH_INFO *pFlash = (FLASH_INFO *)Handle;    
    alt_u16 no=0;
    flash_region *nextreg = pFlash->regions_flash;
    int r;
    for(r=0;r<pFlash->number_of_regions_flash;r++){
 400244c:	e0bffb17 	ldw	r2,-20(fp)
 4002450:	10800044 	addi	r2,r2,1
 4002454:	e0bffb15 	stw	r2,-20(fp)
 4002458:	e0bffe17 	ldw	r2,-8(fp)
 400245c:	10c00217 	ldw	r3,8(r2)
 4002460:	e0bffb17 	ldw	r2,-20(fp)
 4002464:	10fff016 	blt	r2,r3,4002428 <Flash_GetBlockCount+0x30>
        no += nextreg->number_of_blocks;
        nextreg++;
    }
    return no;
 4002468:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400246c:	e037883a 	mov	sp,fp
 4002470:	df000017 	ldw	fp,0(sp)
 4002474:	dec00104 	addi	sp,sp,4
 4002478:	f800283a 	ret

0400247c <Flash_Size>:


alt_u32 Flash_Size(char *pFlashName){
 400247c:	defff304 	addi	sp,sp,-52
 4002480:	dfc00c15 	stw	ra,48(sp)
 4002484:	df000b15 	stw	fp,44(sp)
 4002488:	df000b04 	addi	fp,sp,44
 400248c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 FlashSize = 0;
 4002490:	e03ffc15 	stw	zero,-16(fp)
    flash_region *regions, *nextreg;
    alt_flash_fd* fd;
    int number_of_regions;
    int ret_code, i;
    /* Set write_data to all 0xa */
    fd = alt_flash_open_dev(pFlashName);
 4002494:	e13fff17 	ldw	r4,-4(fp)
 4002498:	40170800 	call	4017080 <alt_flash_open_dev>
 400249c:	e0bffa15 	stw	r2,-24(fp)
    if (fd){
 40024a0:	e0bffa17 	ldw	r2,-24(fp)
 40024a4:	1005003a 	cmpeq	r2,r2,zero
 40024a8:	1000281e 	bne	r2,zero,400254c <Flash_Size+0xd0>
 40024ac:	e0bffa17 	ldw	r2,-24(fp)
 40024b0:	e0bff515 	stw	r2,-44(fp)
 40024b4:	e0bffd04 	addi	r2,fp,-12
 40024b8:	e0bff615 	stw	r2,-40(fp)
 40024bc:	e0bffe04 	addi	r2,fp,-8
 40024c0:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 40024c4:	e0bff517 	ldw	r2,-44(fp)
 40024c8:	10800717 	ldw	r2,28(r2)
 40024cc:	e13ff517 	ldw	r4,-44(fp)
 40024d0:	e17ff617 	ldw	r5,-40(fp)
 40024d4:	e1bff717 	ldw	r6,-36(fp)
 40024d8:	103ee83a 	callr	r2
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
 40024dc:	e0bff915 	stw	r2,-28(fp)
        if (ret_code == 0 && number_of_regions >= 1){
 40024e0:	e0bff917 	ldw	r2,-28(fp)
 40024e4:	1004c03a 	cmpne	r2,r2,zero
 40024e8:	1000161e 	bne	r2,zero,4002544 <Flash_Size+0xc8>
 40024ec:	e0bffe17 	ldw	r2,-8(fp)
 40024f0:	10800050 	cmplti	r2,r2,1
 40024f4:	1000131e 	bne	r2,zero,4002544 <Flash_Size+0xc8>
            nextreg = regions;
 40024f8:	e0bffd17 	ldw	r2,-12(fp)
 40024fc:	e0bffb15 	stw	r2,-20(fp)
            for(i=0;i<number_of_regions;i++){
 4002500:	e03ff815 	stw	zero,-32(fp)
 4002504:	00000c06 	br	4002538 <Flash_Size+0xbc>
                FlashSize += nextreg->region_size;
 4002508:	e0bffb17 	ldw	r2,-20(fp)
 400250c:	10800117 	ldw	r2,4(r2)
 4002510:	1007883a 	mov	r3,r2
 4002514:	e0bffc17 	ldw	r2,-16(fp)
 4002518:	10c5883a 	add	r2,r2,r3
 400251c:	e0bffc15 	stw	r2,-16(fp)
                nextreg++;
 4002520:	e0bffb17 	ldw	r2,-20(fp)
 4002524:	10800404 	addi	r2,r2,16
 4002528:	e0bffb15 	stw	r2,-20(fp)
    fd = alt_flash_open_dev(pFlashName);
    if (fd){
        ret_code = alt_get_flash_info(fd,&regions,&number_of_regions);
        if (ret_code == 0 && number_of_regions >= 1){
            nextreg = regions;
            for(i=0;i<number_of_regions;i++){
 400252c:	e0bff817 	ldw	r2,-32(fp)
 4002530:	10800044 	addi	r2,r2,1
 4002534:	e0bff815 	stw	r2,-32(fp)
 4002538:	e0fffe17 	ldw	r3,-8(fp)
 400253c:	e0bff817 	ldw	r2,-32(fp)
 4002540:	10fff116 	blt	r2,r3,4002508 <Flash_Size+0x8c>
                FlashSize += nextreg->region_size;
                nextreg++;
            }
        }
        alt_flash_close_dev(fd);
 4002544:	e13ffa17 	ldw	r4,-24(fp)
 4002548:	40170fc0 	call	40170fc <alt_flash_close_dev>
    }
    return FlashSize;
 400254c:	e0bffc17 	ldw	r2,-16(fp)
}    
 4002550:	e037883a 	mov	sp,fp
 4002554:	dfc00117 	ldw	ra,4(sp)
 4002558:	df000017 	ldw	fp,0(sp)
 400255c:	dec00204 	addi	sp,sp,8
 4002560:	f800283a 	ret

04002564 <FLASH_Verify>:



// bQuick=TRUE: just check first and last block 
bool FLASH_Verify(char *pFlashName, alt_u8 InitValue, bool bShowMessage, bool bQuickVerify){
 4002564:	deffea04 	addi	sp,sp,-88
 4002568:	dfc01515 	stw	ra,84(sp)
 400256c:	df001415 	stw	fp,80(sp)
 4002570:	df001404 	addi	fp,sp,80
 4002574:	e13ffb15 	stw	r4,-20(fp)
 4002578:	e1bffd15 	stw	r6,-12(fp)
 400257c:	e1fffe15 	stw	r7,-8(fp)
 4002580:	e17ffc05 	stb	r5,-16(fp)
    bool bPass = TRUE;
 4002584:	00800044 	movi	r2,1
 4002588:	e0bff815 	stw	r2,-32(fp)
    int i, k, BlockNum;
    FLASH_HANDLE hFlash;
    alt_u32 Offset, Size;
    alt_u8 *pBuf, Cnt;
    const int nBufSize = 8*1024; // 16K
 400258c:	00880004 	movi	r2,8192
 4002590:	e0bff115 	stw	r2,-60(fp)
    int nWriteSizeSum, nWriteSize;
    int nReadSizeSum, nReadSize;
    
    hFlash = Flash_Open(pFlashName);
 4002594:	e13ffb17 	ldw	r4,-20(fp)
 4002598:	4001d980 	call	4001d98 <Flash_Open>
 400259c:	e0bff415 	stw	r2,-48(fp)
    if (!hFlash){
 40025a0:	e0bff417 	ldw	r2,-48(fp)
 40025a4:	1004c03a 	cmpne	r2,r2,zero
 40025a8:	1000081e 	bne	r2,zero,40025cc <FLASH_Verify+0x68>
        if (bShowMessage)
 40025ac:	e0bffd17 	ldw	r2,-12(fp)
 40025b0:	1005003a 	cmpeq	r2,r2,zero
 40025b4:	1000031e 	bne	r2,zero,40025c4 <FLASH_Verify+0x60>
            printf("Failed to open flash.\r\n");
 40025b8:	010100b4 	movhi	r4,1026
 40025bc:	210f5f04 	addi	r4,r4,15740
 40025c0:	400a2740 	call	400a274 <puts>
        return FALSE;
 40025c4:	e03fff15 	stw	zero,-4(fp)
 40025c8:	00014c06 	br	4002afc <FLASH_Verify+0x598>
    }        
        
        
    BlockNum = Flash_GetBlockCount(hFlash);
 40025cc:	e13ff417 	ldw	r4,-48(fp)
 40025d0:	40023f80 	call	40023f8 <Flash_GetBlockCount>
 40025d4:	10bfffcc 	andi	r2,r2,65535
 40025d8:	e0bff515 	stw	r2,-44(fp)
    
    //===== alloc buffer
    pBuf = (alt_u8 *)malloc(nBufSize);
 40025dc:	e13ff117 	ldw	r4,-60(fp)
 40025e0:	4009a080 	call	4009a08 <malloc>
 40025e4:	e0bff315 	stw	r2,-52(fp)
    if (!pBuf){
 40025e8:	e0bff317 	ldw	r2,-52(fp)
 40025ec:	1004c03a 	cmpne	r2,r2,zero
 40025f0:	1000081e 	bne	r2,zero,4002614 <FLASH_Verify+0xb0>
        if (bShowMessage)
 40025f4:	e0bffd17 	ldw	r2,-12(fp)
 40025f8:	1005003a 	cmpeq	r2,r2,zero
 40025fc:	1000031e 	bne	r2,zero,400260c <FLASH_Verify+0xa8>
            printf("[Error] Failed to alloc memory.\r\n");
 4002600:	010100b4 	movhi	r4,1026
 4002604:	210f6504 	addi	r4,r4,15764
 4002608:	400a2740 	call	400a274 <puts>
        return FALSE;
 400260c:	e03fff15 	stw	zero,-4(fp)
 4002610:	00013a06 	br	4002afc <FLASH_Verify+0x598>
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 4002614:	e03ff715 	stw	zero,-36(fp)
 4002618:	00002306 	br	40026a8 <FLASH_Verify+0x144>
        if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 400261c:	e0bffe17 	ldw	r2,-8(fp)
 4002620:	1005003a 	cmpeq	r2,r2,zero
 4002624:	1000071e 	bne	r2,zero,4002644 <FLASH_Verify+0xe0>
 4002628:	e0bff717 	ldw	r2,-36(fp)
 400262c:	1005003a 	cmpeq	r2,r2,zero
 4002630:	1000041e 	bne	r2,zero,4002644 <FLASH_Verify+0xe0>
 4002634:	e0bff517 	ldw	r2,-44(fp)
 4002638:	10ffffc4 	addi	r3,r2,-1
 400263c:	e0bff717 	ldw	r2,-36(fp)
 4002640:	1880161e 	bne	r3,r2,400269c <FLASH_Verify+0x138>
            continue;
        bPass = Flash_Erase(hFlash, i);
 4002644:	e0bff717 	ldw	r2,-36(fp)
 4002648:	117fffcc 	andi	r5,r2,65535
 400264c:	e13ff417 	ldw	r4,-48(fp)
 4002650:	40023040 	call	4002304 <Flash_Erase>
 4002654:	e0bff815 	stw	r2,-32(fp)
        if (bShowMessage){
 4002658:	e0bffd17 	ldw	r2,-12(fp)
 400265c:	1005003a 	cmpeq	r2,r2,zero
 4002660:	10000e1e 	bne	r2,zero,400269c <FLASH_Verify+0x138>
            if (!bPass)
 4002664:	e0bff817 	ldw	r2,-32(fp)
 4002668:	1004c03a 	cmpne	r2,r2,zero
 400266c:	1000061e 	bne	r2,zero,4002688 <FLASH_Verify+0x124>
                printf("[Error] Failed to erase flash block %d/%d\r\n.\r\n", i, BlockNum);
 4002670:	010100b4 	movhi	r4,1026
 4002674:	210f6e04 	addi	r4,r4,15800
 4002678:	e17ff717 	ldw	r5,-36(fp)
 400267c:	e1bff517 	ldw	r6,-44(fp)
 4002680:	400a15c0 	call	400a15c <printf>
 4002684:	00000506 	br	400269c <FLASH_Verify+0x138>
            else
                printf("Erase Block %d/%d\r\n", i, BlockNum);
 4002688:	010100b4 	movhi	r4,1026
 400268c:	210f7a04 	addi	r4,r4,15848
 4002690:	e17ff717 	ldw	r5,-36(fp)
 4002694:	e1bff517 	ldw	r6,-44(fp)
 4002698:	400a15c0 	call	400a15c <printf>
        return FALSE;
    }        
    
    
    //===== erase
    for(i=0;i<BlockNum && bPass;i++){
 400269c:	e0bff717 	ldw	r2,-36(fp)
 40026a0:	10800044 	addi	r2,r2,1
 40026a4:	e0bff715 	stw	r2,-36(fp)
 40026a8:	e0fff717 	ldw	r3,-36(fp)
 40026ac:	e0bff517 	ldw	r2,-44(fp)
 40026b0:	1880030e 	bge	r3,r2,40026c0 <FLASH_Verify+0x15c>
 40026b4:	e0bff817 	ldw	r2,-32(fp)
 40026b8:	1004c03a 	cmpne	r2,r2,zero
 40026bc:	103fd71e 	bne	r2,zero,400261c <FLASH_Verify+0xb8>
                printf("Erase Block %d/%d\r\n", i, BlockNum);
        }            
    }        
    
    //===== write
    if (bPass){
 40026c0:	e0bff817 	ldw	r2,-32(fp)
 40026c4:	1005003a 	cmpeq	r2,r2,zero
 40026c8:	1000681e 	bne	r2,zero,400286c <FLASH_Verify+0x308>
        Cnt = InitValue;
 40026cc:	e0bffc03 	ldbu	r2,-16(fp)
 40026d0:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 40026d4:	e03ff715 	stw	zero,-36(fp)
 40026d8:	00005e06 	br	4002854 <FLASH_Verify+0x2f0>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 40026dc:	e0bffe17 	ldw	r2,-8(fp)
 40026e0:	1005003a 	cmpeq	r2,r2,zero
 40026e4:	1000071e 	bne	r2,zero,4002704 <FLASH_Verify+0x1a0>
 40026e8:	e0bff717 	ldw	r2,-36(fp)
 40026ec:	1005003a 	cmpeq	r2,r2,zero
 40026f0:	1000041e 	bne	r2,zero,4002704 <FLASH_Verify+0x1a0>
 40026f4:	e0bff517 	ldw	r2,-44(fp)
 40026f8:	10ffffc4 	addi	r3,r2,-1
 40026fc:	e0bff717 	ldw	r2,-36(fp)
 4002700:	1880511e 	bne	r3,r2,4002848 <FLASH_Verify+0x2e4>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 4002704:	e0bff717 	ldw	r2,-36(fp)
 4002708:	117fffcc 	andi	r5,r2,65535
 400270c:	e1bff904 	addi	r6,fp,-28
 4002710:	e1fffa04 	addi	r7,fp,-24
 4002714:	e13ff417 	ldw	r4,-48(fp)
 4002718:	4001ec00 	call	4001ec0 <Flash_GetBlockInfo>
 400271c:	e0bff815 	stw	r2,-32(fp)
            if (!bPass)
 4002720:	e0bff817 	ldw	r2,-32(fp)
 4002724:	1005003a 	cmpeq	r2,r2,zero
 4002728:	1000471e 	bne	r2,zero,4002848 <FLASH_Verify+0x2e4>
                continue;
                
            if (bShowMessage)            
 400272c:	e0bffd17 	ldw	r2,-12(fp)
 4002730:	1005003a 	cmpeq	r2,r2,zero
 4002734:	1000071e 	bne	r2,zero,4002754 <FLASH_Verify+0x1f0>
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 4002738:	e0bffa17 	ldw	r2,-24(fp)
 400273c:	100f883a 	mov	r7,r2
 4002740:	010100b4 	movhi	r4,1026
 4002744:	210f7f04 	addi	r4,r4,15868
 4002748:	e17ff717 	ldw	r5,-36(fp)
 400274c:	e1bff517 	ldw	r6,-44(fp)
 4002750:	400a15c0 	call	400a15c <printf>
            nWriteSizeSum = 0;
 4002754:	e03ff015 	stw	zero,-64(fp)
            while(nWriteSizeSum < Size && bPass){
 4002758:	00003506 	br	4002830 <FLASH_Verify+0x2cc>
                // cal write size
                nWriteSize = nBufSize;
 400275c:	e0bff117 	ldw	r2,-60(fp)
 4002760:	e0bfef15 	stw	r2,-68(fp)
                if (nWriteSize > (Size - nWriteSizeSum))
 4002764:	e13fef17 	ldw	r4,-68(fp)
 4002768:	e0fffa17 	ldw	r3,-24(fp)
 400276c:	e0bff017 	ldw	r2,-64(fp)
 4002770:	1885c83a 	sub	r2,r3,r2
 4002774:	1100042e 	bgeu	r2,r4,4002788 <FLASH_Verify+0x224>
                    nWriteSize = Size - nWriteSizeSum;
 4002778:	e0bffa17 	ldw	r2,-24(fp)
 400277c:	e0fff017 	ldw	r3,-64(fp)
 4002780:	10c5c83a 	sub	r2,r2,r3
 4002784:	e0bfef15 	stw	r2,-68(fp)
                // fill data
                for(k=0;k<nWriteSize;k++){
 4002788:	e03ff615 	stw	zero,-40(fp)
 400278c:	00000c06 	br	40027c0 <FLASH_Verify+0x25c>
                    *(pBuf+k) = Cnt++;
 4002790:	e0bff617 	ldw	r2,-40(fp)
 4002794:	1007883a 	mov	r3,r2
 4002798:	e0bff317 	ldw	r2,-52(fp)
 400279c:	1887883a 	add	r3,r3,r2
 40027a0:	e0bff203 	ldbu	r2,-56(fp)
 40027a4:	18800005 	stb	r2,0(r3)
 40027a8:	e0bff203 	ldbu	r2,-56(fp)
 40027ac:	10800044 	addi	r2,r2,1
 40027b0:	e0bff205 	stb	r2,-56(fp)
                // cal write size
                nWriteSize = nBufSize;
                if (nWriteSize > (Size - nWriteSizeSum))
                    nWriteSize = Size - nWriteSizeSum;
                // fill data
                for(k=0;k<nWriteSize;k++){
 40027b4:	e0bff617 	ldw	r2,-40(fp)
 40027b8:	10800044 	addi	r2,r2,1
 40027bc:	e0bff615 	stw	r2,-40(fp)
 40027c0:	e0fff617 	ldw	r3,-40(fp)
 40027c4:	e0bfef17 	ldw	r2,-68(fp)
 40027c8:	18bff116 	blt	r3,r2,4002790 <FLASH_Verify+0x22c>
                    *(pBuf+k) = Cnt++;
                }                     
                // write data block
                bPass = Flash_Write(hFlash, Offset+nWriteSizeSum, pBuf, nWriteSize);
 40027cc:	e0fff917 	ldw	r3,-28(fp)
 40027d0:	e0bff017 	ldw	r2,-64(fp)
 40027d4:	188b883a 	add	r5,r3,r2
 40027d8:	e1ffef17 	ldw	r7,-68(fp)
 40027dc:	e13ff417 	ldw	r4,-48(fp)
 40027e0:	e1bff317 	ldw	r6,-52(fp)
 40027e4:	40020b40 	call	40020b4 <Flash_Write>
 40027e8:	e0bff815 	stw	r2,-32(fp)
                if (bShowMessage && !bPass)            
 40027ec:	e0bffd17 	ldw	r2,-12(fp)
 40027f0:	1005003a 	cmpeq	r2,r2,zero
 40027f4:	1000081e 	bne	r2,zero,4002818 <FLASH_Verify+0x2b4>
 40027f8:	e0bff817 	ldw	r2,-32(fp)
 40027fc:	1004c03a 	cmpne	r2,r2,zero
 4002800:	1000051e 	bne	r2,zero,4002818 <FLASH_Verify+0x2b4>
                    printf("[Error] Write Block[%d/%d] NG\r\n", i, BlockNum);
 4002804:	010100b4 	movhi	r4,1026
 4002808:	210f8704 	addi	r4,r4,15900
 400280c:	e17ff717 	ldw	r5,-36(fp)
 4002810:	e1bff517 	ldw	r6,-44(fp)
 4002814:	400a15c0 	call	400a15c <printf>
                //
                usleep(20*1000);
 4002818:	01138804 	movi	r4,20000
 400281c:	4017a280 	call	4017a28 <usleep>
                //
                nWriteSizeSum += nWriteSize;
 4002820:	e0bff017 	ldw	r2,-64(fp)
 4002824:	e0ffef17 	ldw	r3,-68(fp)
 4002828:	10c5883a 	add	r2,r2,r3
 400282c:	e0bff015 	stw	r2,-64(fp)
                continue;
                
            if (bShowMessage)            
                printf("Write Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nWriteSizeSum = 0;
            while(nWriteSizeSum < Size && bPass){
 4002830:	e0fff017 	ldw	r3,-64(fp)
 4002834:	e0bffa17 	ldw	r2,-24(fp)
 4002838:	1880032e 	bgeu	r3,r2,4002848 <FLASH_Verify+0x2e4>
 400283c:	e0bff817 	ldw	r2,-32(fp)
 4002840:	1004c03a 	cmpne	r2,r2,zero
 4002844:	103fc51e 	bne	r2,zero,400275c <FLASH_Verify+0x1f8>
    }        
    
    //===== write
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 4002848:	e0bff717 	ldw	r2,-36(fp)
 400284c:	10800044 	addi	r2,r2,1
 4002850:	e0bff715 	stw	r2,-36(fp)
 4002854:	e0fff717 	ldw	r3,-36(fp)
 4002858:	e0bff517 	ldw	r2,-44(fp)
 400285c:	1880030e 	bge	r3,r2,400286c <FLASH_Verify+0x308>
 4002860:	e0bff817 	ldw	r2,-32(fp)
 4002864:	1004c03a 	cmpne	r2,r2,zero
 4002868:	103f9c1e 	bne	r2,zero,40026dc <FLASH_Verify+0x178>
                nWriteSizeSum += nWriteSize;
            }
        }
    }
  
    if (bPass){
 400286c:	e0bff817 	ldw	r2,-32(fp)
 4002870:	1005003a 	cmpeq	r2,r2,zero
 4002874:	1000071e 	bne	r2,zero,4002894 <FLASH_Verify+0x330>
        if (bShowMessage)      
 4002878:	e0bffd17 	ldw	r2,-12(fp)
 400287c:	1005003a 	cmpeq	r2,r2,zero
 4002880:	1000031e 	bne	r2,zero,4002890 <FLASH_Verify+0x32c>
            printf("alt_dcache_flush_all\r\n");
 4002884:	010100b4 	movhi	r4,1026
 4002888:	210f8f04 	addi	r4,r4,15932
 400288c:	400a2740 	call	400a274 <puts>
        alt_dcache_flush_all();
 4002890:	40170380 	call	4017038 <alt_dcache_flush_all>
    }        
      
    //===== read & verify
    if (bPass){
 4002894:	e0bff817 	ldw	r2,-32(fp)
 4002898:	1005003a 	cmpeq	r2,r2,zero
 400289c:	10008b1e 	bne	r2,zero,4002acc <FLASH_Verify+0x568>
        Cnt = InitValue;
 40028a0:	e0bffc03 	ldbu	r2,-16(fp)
 40028a4:	e0bff205 	stb	r2,-56(fp)
        for(i=0;i<BlockNum && bPass;i++){
 40028a8:	e03ff715 	stw	zero,-36(fp)
 40028ac:	00008106 	br	4002ab4 <FLASH_Verify+0x550>
            if (bQuickVerify && (i !=0 )&& (i != (BlockNum-1)))
 40028b0:	e0bffe17 	ldw	r2,-8(fp)
 40028b4:	1005003a 	cmpeq	r2,r2,zero
 40028b8:	1000071e 	bne	r2,zero,40028d8 <FLASH_Verify+0x374>
 40028bc:	e0bff717 	ldw	r2,-36(fp)
 40028c0:	1005003a 	cmpeq	r2,r2,zero
 40028c4:	1000041e 	bne	r2,zero,40028d8 <FLASH_Verify+0x374>
 40028c8:	e0bff517 	ldw	r2,-44(fp)
 40028cc:	10ffffc4 	addi	r3,r2,-1
 40028d0:	e0bff717 	ldw	r2,-36(fp)
 40028d4:	1880741e 	bne	r3,r2,4002aa8 <FLASH_Verify+0x544>
                continue;
            
            bPass = Flash_GetBlockInfo(hFlash, i, &Offset, &Size);
 40028d8:	e0bff717 	ldw	r2,-36(fp)
 40028dc:	117fffcc 	andi	r5,r2,65535
 40028e0:	e1bff904 	addi	r6,fp,-28
 40028e4:	e1fffa04 	addi	r7,fp,-24
 40028e8:	e13ff417 	ldw	r4,-48(fp)
 40028ec:	4001ec00 	call	4001ec0 <Flash_GetBlockInfo>
 40028f0:	e0bff815 	stw	r2,-32(fp)
            if (!bPass){
 40028f4:	e0bff817 	ldw	r2,-32(fp)
 40028f8:	1004c03a 	cmpne	r2,r2,zero
 40028fc:	1000081e 	bne	r2,zero,4002920 <FLASH_Verify+0x3bc>
                if (bShowMessage)      
 4002900:	e0bffd17 	ldw	r2,-12(fp)
 4002904:	1005003a 	cmpeq	r2,r2,zero
 4002908:	1000671e 	bne	r2,zero,4002aa8 <FLASH_Verify+0x544>
                    printf("[Error] Flash_GetBlockInfo at block %d\r\n", i);
 400290c:	010100b4 	movhi	r4,1026
 4002910:	210f9504 	addi	r4,r4,15956
 4002914:	e17ff717 	ldw	r5,-36(fp)
 4002918:	400a15c0 	call	400a15c <printf>
                continue;
 400291c:	00006206 	br	4002aa8 <FLASH_Verify+0x544>
            }    
            if (bShowMessage)            
 4002920:	e0bffd17 	ldw	r2,-12(fp)
 4002924:	1005003a 	cmpeq	r2,r2,zero
 4002928:	1000071e 	bne	r2,zero,4002948 <FLASH_Verify+0x3e4>
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
 400292c:	e0bffa17 	ldw	r2,-24(fp)
 4002930:	100f883a 	mov	r7,r2
 4002934:	010100b4 	movhi	r4,1026
 4002938:	210fa004 	addi	r4,r4,16000
 400293c:	e17ff717 	ldw	r5,-36(fp)
 4002940:	e1bff517 	ldw	r6,-44(fp)
 4002944:	400a15c0 	call	400a15c <printf>
            nReadSizeSum = 0;
 4002948:	e03fee15 	stw	zero,-72(fp)
            while(nReadSizeSum < Size && bPass){
 400294c:	00005006 	br	4002a90 <FLASH_Verify+0x52c>
                // cal write size
                nReadSize = nBufSize;
 4002950:	e0bff117 	ldw	r2,-60(fp)
 4002954:	e0bfed15 	stw	r2,-76(fp)
                if (nReadSize > (Size - nReadSizeSum))
 4002958:	e13fed17 	ldw	r4,-76(fp)
 400295c:	e0fffa17 	ldw	r3,-24(fp)
 4002960:	e0bfee17 	ldw	r2,-72(fp)
 4002964:	1885c83a 	sub	r2,r3,r2
 4002968:	1100042e 	bgeu	r2,r4,400297c <FLASH_Verify+0x418>
                    nReadSize = Size - nReadSizeSum;
 400296c:	e0bffa17 	ldw	r2,-24(fp)
 4002970:	e0ffee17 	ldw	r3,-72(fp)
 4002974:	10c5c83a 	sub	r2,r2,r3
 4002978:	e0bfed15 	stw	r2,-76(fp)
                    
                // read data block
                bPass = Flash_Read(hFlash, Offset+nReadSizeSum, pBuf, nReadSize);
 400297c:	e0fff917 	ldw	r3,-28(fp)
 4002980:	e0bfee17 	ldw	r2,-72(fp)
 4002984:	188b883a 	add	r5,r3,r2
 4002988:	e1ffed17 	ldw	r7,-76(fp)
 400298c:	e13ff417 	ldw	r4,-48(fp)
 4002990:	e1bff317 	ldw	r6,-52(fp)
 4002994:	4001ffc0 	call	4001ffc <Flash_Read>
 4002998:	e0bff815 	stw	r2,-32(fp)
                if (!bPass){
 400299c:	e0bff817 	ldw	r2,-32(fp)
 40029a0:	1004c03a 	cmpne	r2,r2,zero
 40029a4:	10000c1e 	bne	r2,zero,40029d8 <FLASH_Verify+0x474>
                    if (bShowMessage)      
 40029a8:	e0bffd17 	ldw	r2,-12(fp)
 40029ac:	1005003a 	cmpeq	r2,r2,zero
 40029b0:	1000331e 	bne	r2,zero,4002a80 <FLASH_Verify+0x51c>
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
 40029b4:	e0bff917 	ldw	r2,-28(fp)
 40029b8:	1007883a 	mov	r3,r2
 40029bc:	e0bfee17 	ldw	r2,-72(fp)
 40029c0:	188d883a 	add	r6,r3,r2
 40029c4:	010100b4 	movhi	r4,1026
 40029c8:	210fa804 	addi	r4,r4,16032
 40029cc:	e17ff717 	ldw	r5,-36(fp)
 40029d0:	400a15c0 	call	400a15c <printf>
 40029d4:	00002a06 	br	4002a80 <FLASH_Verify+0x51c>
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 40029d8:	e03ff615 	stw	zero,-40(fp)
 40029dc:	00002206 	br	4002a68 <FLASH_Verify+0x504>
                        if (*(pBuf+k) != Cnt){
 40029e0:	e0bff617 	ldw	r2,-40(fp)
 40029e4:	1007883a 	mov	r3,r2
 40029e8:	e0bff317 	ldw	r2,-52(fp)
 40029ec:	1885883a 	add	r2,r3,r2
 40029f0:	10800003 	ldbu	r2,0(r2)
 40029f4:	10c03fcc 	andi	r3,r2,255
 40029f8:	e0bff203 	ldbu	r2,-56(fp)
 40029fc:	18801426 	beq	r3,r2,4002a50 <FLASH_Verify+0x4ec>
                            if (bShowMessage)      
 4002a00:	e0bffd17 	ldw	r2,-12(fp)
 4002a04:	1005003a 	cmpeq	r2,r2,zero
 4002a08:	10000f1e 	bne	r2,zero,4002a48 <FLASH_Verify+0x4e4>
                                printf("[Error] Verify fail, block:%d, index:%d, read=%Xh, expected=%Xh\r\n", i, nReadSizeSum+k, *(pBuf+k), Cnt);
 4002a0c:	e0ffee17 	ldw	r3,-72(fp)
 4002a10:	e0bff617 	ldw	r2,-40(fp)
 4002a14:	188d883a 	add	r6,r3,r2
 4002a18:	e0bff617 	ldw	r2,-40(fp)
 4002a1c:	1007883a 	mov	r3,r2
 4002a20:	e0bff317 	ldw	r2,-52(fp)
 4002a24:	1885883a 	add	r2,r3,r2
 4002a28:	10800003 	ldbu	r2,0(r2)
 4002a2c:	11c03fcc 	andi	r7,r2,255
 4002a30:	e0bff203 	ldbu	r2,-56(fp)
 4002a34:	d8800015 	stw	r2,0(sp)
 4002a38:	010100b4 	movhi	r4,1026
 4002a3c:	210fb404 	addi	r4,r4,16080
 4002a40:	e17ff717 	ldw	r5,-36(fp)
 4002a44:	400a15c0 	call	400a15c <printf>
                            bPass = FALSE;
 4002a48:	e03ff815 	stw	zero,-32(fp)
 4002a4c:	00000306 	br	4002a5c <FLASH_Verify+0x4f8>
                        }else{    
                            Cnt++;
 4002a50:	e0bff203 	ldbu	r2,-56(fp)
 4002a54:	10800044 	addi	r2,r2,1
 4002a58:	e0bff205 	stb	r2,-56(fp)
                    if (bShowMessage)      
                        printf("[Error] Flash_Read fail at block-offset %d-%d\r\n", i, (int)Offset+nReadSizeSum);
                }else{
                    // verify
                    // verify data
                    for(k=0;k<nReadSize && bPass;k++){
 4002a5c:	e0bff617 	ldw	r2,-40(fp)
 4002a60:	10800044 	addi	r2,r2,1
 4002a64:	e0bff615 	stw	r2,-40(fp)
 4002a68:	e0fff617 	ldw	r3,-40(fp)
 4002a6c:	e0bfed17 	ldw	r2,-76(fp)
 4002a70:	1880030e 	bge	r3,r2,4002a80 <FLASH_Verify+0x51c>
 4002a74:	e0bff817 	ldw	r2,-32(fp)
 4002a78:	1004c03a 	cmpne	r2,r2,zero
 4002a7c:	103fd81e 	bne	r2,zero,40029e0 <FLASH_Verify+0x47c>
                            Cnt++;
                        }
                    }                     
                }                        
                //
                nReadSizeSum += nReadSize;
 4002a80:	e0bfee17 	ldw	r2,-72(fp)
 4002a84:	e0ffed17 	ldw	r3,-76(fp)
 4002a88:	10c5883a 	add	r2,r2,r3
 4002a8c:	e0bfee15 	stw	r2,-72(fp)
                continue;
            }    
            if (bShowMessage)            
                printf("Read Block[%d/%d], size=%d\r\n", i, BlockNum, (int)Size);
            nReadSizeSum = 0;
            while(nReadSizeSum < Size && bPass){
 4002a90:	e0ffee17 	ldw	r3,-72(fp)
 4002a94:	e0bffa17 	ldw	r2,-24(fp)
 4002a98:	1880032e 	bgeu	r3,r2,4002aa8 <FLASH_Verify+0x544>
 4002a9c:	e0bff817 	ldw	r2,-32(fp)
 4002aa0:	1004c03a 	cmpne	r2,r2,zero
 4002aa4:	103faa1e 	bne	r2,zero,4002950 <FLASH_Verify+0x3ec>
    }        
      
    //===== read & verify
    if (bPass){
        Cnt = InitValue;
        for(i=0;i<BlockNum && bPass;i++){
 4002aa8:	e0bff717 	ldw	r2,-36(fp)
 4002aac:	10800044 	addi	r2,r2,1
 4002ab0:	e0bff715 	stw	r2,-36(fp)
 4002ab4:	e0fff717 	ldw	r3,-36(fp)
 4002ab8:	e0bff517 	ldw	r2,-44(fp)
 4002abc:	1880030e 	bge	r3,r2,4002acc <FLASH_Verify+0x568>
 4002ac0:	e0bff817 	ldw	r2,-32(fp)
 4002ac4:	1004c03a 	cmpne	r2,r2,zero
 4002ac8:	103f791e 	bne	r2,zero,40028b0 <FLASH_Verify+0x34c>
                nReadSizeSum += nReadSize;
            }
        }  
    }
    
    if (pBuf)
 4002acc:	e0bff317 	ldw	r2,-52(fp)
 4002ad0:	1005003a 	cmpeq	r2,r2,zero
 4002ad4:	1000021e 	bne	r2,zero,4002ae0 <FLASH_Verify+0x57c>
        free(pBuf);
 4002ad8:	e13ff317 	ldw	r4,-52(fp)
 4002adc:	40099f40 	call	40099f4 <free>
    
    if (hFlash)
 4002ae0:	e0bff417 	ldw	r2,-48(fp)
 4002ae4:	1005003a 	cmpeq	r2,r2,zero
 4002ae8:	1000021e 	bne	r2,zero,4002af4 <FLASH_Verify+0x590>
        Flash_Close(hFlash);
 4002aec:	e13ff417 	ldw	r4,-48(fp)
 4002af0:	4001e680 	call	4001e68 <Flash_Close>
    
    //
    return bPass;
 4002af4:	e0bff817 	ldw	r2,-32(fp)
 4002af8:	e0bfff15 	stw	r2,-4(fp)
 4002afc:	e0bfff17 	ldw	r2,-4(fp)
}
 4002b00:	e037883a 	mov	sp,fp
 4002b04:	dfc00117 	ldw	ra,4(sp)
 4002b08:	df000017 	ldw	fp,0(sp)
 4002b0c:	dec00204 	addi	sp,sp,8
 4002b10:	f800283a 	ret

04002b14 <stoptofull>:

#include "includes.h"
#include "robot_includes.h"
#include "motors.h"

void stoptofull(void){
 4002b14:	defffe04 	addi	sp,sp,-8
 4002b18:	dfc00115 	stw	ra,4(sp)
 4002b1c:	df000015 	stw	fp,0(sp)
 4002b20:	d839883a 	mov	fp,sp
	if (M_checkMotion() == TRUE){ //motors are still moving
 4002b24:	4002d240 	call	4002d24 <M_checkMotion>
 4002b28:	10800058 	cmpnei	r2,r2,1
 4002b2c:	1000011e 	bne	r2,zero,4002b34 <stoptofull+0x20>
		M_allStop();
 4002b30:	4002dc40 	call	4002dc4 <M_allStop>
	}

	IOWR(PWM_0_BASE, 0, 0.25 * 31250);
 4002b34:	00c02004 	movi	r3,128
 4002b38:	0087a104 	movi	r2,7812
 4002b3c:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.25 * 31250);
 4002b40:	00c01c04 	movi	r3,112
 4002b44:	0087a104 	movi	r2,7812
 4002b48:	18800035 	stwio	r2,0(r3)
	usleep(0.5 * SECOND_DELAY);
 4002b4c:	01000234 	movhi	r4,8
 4002b50:	21284804 	addi	r4,r4,-24288
 4002b54:	4017a280 	call	4017a28 <usleep>
	IOWR(PWM_0_BASE, 0, 0.50 * 31250);
 4002b58:	00c02004 	movi	r3,128
 4002b5c:	008f4244 	movi	r2,15625
 4002b60:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.50 * 31250);
 4002b64:	00c01c04 	movi	r3,112
 4002b68:	008f4244 	movi	r2,15625
 4002b6c:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002b70:	010003f4 	movhi	r4,15
 4002b74:	21109004 	addi	r4,r4,16960
 4002b78:	4017a280 	call	4017a28 <usleep>
	IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 4002b7c:	00c02004 	movi	r3,128
 4002b80:	0096e344 	movi	r2,23437
 4002b84:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.75 * 31250);
 4002b88:	00c01c04 	movi	r3,112
 4002b8c:	0096e344 	movi	r2,23437
 4002b90:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002b94:	010003f4 	movhi	r4,15
 4002b98:	21109004 	addi	r4,r4,16960
 4002b9c:	4017a280 	call	4017a28 <usleep>
	IOWR(PWM_0_BASE, 0, 1 * 31250);
 4002ba0:	00c02004 	movi	r3,128
 4002ba4:	009e8484 	movi	r2,31250
 4002ba8:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 1 * 31250);
 4002bac:	00c01c04 	movi	r3,112
 4002bb0:	009e8484 	movi	r2,31250
 4002bb4:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002bb8:	010003f4 	movhi	r4,15
 4002bbc:	21109004 	addi	r4,r4,16960
 4002bc0:	4017a280 	call	4017a28 <usleep>
}
 4002bc4:	e037883a 	mov	sp,fp
 4002bc8:	dfc00117 	ldw	ra,4(sp)
 4002bcc:	df000017 	ldw	fp,0(sp)
 4002bd0:	dec00204 	addi	sp,sp,8
 4002bd4:	f800283a 	ret

04002bd8 <stoptopartial>:

void stoptopartial(void){
 4002bd8:	defffe04 	addi	sp,sp,-8
 4002bdc:	dfc00115 	stw	ra,4(sp)
 4002be0:	df000015 	stw	fp,0(sp)
 4002be4:	d839883a 	mov	fp,sp
	if (M_checkMotion() == TRUE){ //motors are still moving
 4002be8:	4002d240 	call	4002d24 <M_checkMotion>
 4002bec:	10800058 	cmpnei	r2,r2,1
 4002bf0:	1000011e 	bne	r2,zero,4002bf8 <stoptopartial+0x20>
		M_allStop();
 4002bf4:	4002dc40 	call	4002dc4 <M_allStop>
	}

	IOWR(PWM_0_BASE, 0, 0.5 * 31250);
 4002bf8:	00c02004 	movi	r3,128
 4002bfc:	008f4244 	movi	r2,15625
 4002c00:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.5 * 31250);
 4002c04:	00c01c04 	movi	r3,112
 4002c08:	008f4244 	movi	r2,15625
 4002c0c:	18800035 	stwio	r2,0(r3)
	usleep(0.5 * SECOND_DELAY);
 4002c10:	01000234 	movhi	r4,8
 4002c14:	21284804 	addi	r4,r4,-24288
 4002c18:	4017a280 	call	4017a28 <usleep>

	IOWR(PWM_0_BASE, 0, 0.63 * 31250);
 4002c1c:	00c02004 	movi	r3,128
 4002c20:	009339c4 	movi	r2,19687
 4002c24:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.65 * 31250);
 4002c28:	00c01c04 	movi	r3,112
 4002c2c:	0093d604 	movi	r2,20312
 4002c30:	18800035 	stwio	r2,0(r3)
	usleep(0.5 * SECOND_DELAY);
 4002c34:	01000234 	movhi	r4,8
 4002c38:	21284804 	addi	r4,r4,-24288
 4002c3c:	4017a280 	call	4017a28 <usleep>

	IOWR(PWM_0_BASE, 0, 0.859 * 31250); //0.859 for 90%
 4002c40:	00c02004 	movi	r3,128
 4002c44:	009a36c4 	movi	r2,26843
 4002c48:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.9 * 31250); //0.9 for 90%
 4002c4c:	00c01c04 	movi	r3,112
 4002c50:	009b7744 	movi	r2,28125
 4002c54:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002c58:	010003f4 	movhi	r4,15
 4002c5c:	21109004 	addi	r4,r4,16960
 4002c60:	4017a280 	call	4017a28 <usleep>

}
 4002c64:	e037883a 	mov	sp,fp
 4002c68:	dfc00117 	ldw	ra,4(sp)
 4002c6c:	df000017 	ldw	fp,0(sp)
 4002c70:	dec00204 	addi	sp,sp,8
 4002c74:	f800283a 	ret

04002c78 <slowtostop>:

void slowtostop(void){
 4002c78:	defffe04 	addi	sp,sp,-8
 4002c7c:	dfc00115 	stw	ra,4(sp)
 4002c80:	df000015 	stw	fp,0(sp)
 4002c84:	d839883a 	mov	fp,sp

	IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 4002c88:	00c02004 	movi	r3,128
 4002c8c:	0096e344 	movi	r2,23437
 4002c90:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.75 * 31250);
 4002c94:	00c01c04 	movi	r3,112
 4002c98:	0096e344 	movi	r2,23437
 4002c9c:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002ca0:	010003f4 	movhi	r4,15
 4002ca4:	21109004 	addi	r4,r4,16960
 4002ca8:	4017a280 	call	4017a28 <usleep>

	IOWR(PWM_0_BASE, 0, 0.50 * 31250);
 4002cac:	00c02004 	movi	r3,128
 4002cb0:	008f4244 	movi	r2,15625
 4002cb4:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.50 * 31250);
 4002cb8:	00c01c04 	movi	r3,112
 4002cbc:	008f4244 	movi	r2,15625
 4002cc0:	18800035 	stwio	r2,0(r3)
	usleep(0.75 * SECOND_DELAY);
 4002cc4:	010002f4 	movhi	r4,11
 4002cc8:	211c6c04 	addi	r4,r4,29104
 4002ccc:	4017a280 	call	4017a28 <usleep>

	IOWR(PWM_0_BASE, 0, 0.25 * 31250);
 4002cd0:	00c02004 	movi	r3,128
 4002cd4:	0087a104 	movi	r2,7812
 4002cd8:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.25 * 31250);
 4002cdc:	00c01c04 	movi	r3,112
 4002ce0:	0087a104 	movi	r2,7812
 4002ce4:	18800035 	stwio	r2,0(r3)
	usleep(0.25 * SECOND_DELAY);
 4002ce8:	01000134 	movhi	r4,4
 4002cec:	21342404 	addi	r4,r4,-12144
 4002cf0:	4017a280 	call	4017a28 <usleep>

	IOWR(PWM_0_BASE, 0, 0);
 4002cf4:	00802004 	movi	r2,128
 4002cf8:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 4002cfc:	00801c04 	movi	r2,112
 4002d00:	10000035 	stwio	zero,0(r2)
	usleep(1 * SECOND_DELAY);
 4002d04:	010003f4 	movhi	r4,15
 4002d08:	21109004 	addi	r4,r4,16960
 4002d0c:	4017a280 	call	4017a28 <usleep>
}
 4002d10:	e037883a 	mov	sp,fp
 4002d14:	dfc00117 	ldw	ra,4(sp)
 4002d18:	df000017 	ldw	fp,0(sp)
 4002d1c:	dec00204 	addi	sp,sp,8
 4002d20:	f800283a 	ret

04002d24 <M_checkMotion>:

/* Read the previous values of the PWM registers, make sure zero is being sent */
int M_checkMotion(void){
 4002d24:	defff804 	addi	sp,sp,-32
 4002d28:	df000715 	stw	fp,28(sp)
 4002d2c:	df000704 	addi	fp,sp,28

	int i;
	bool isMoving = FALSE;
 4002d30:	e03ffa15 	stw	zero,-24(fp)
	//double test = 0;
	int L298_REGISTERS[] = {PWM_0_BASE, PWM_1_BASE, PWM_2_BASE, PWM_3_BASE};
 4002d34:	00802004 	movi	r2,128
 4002d38:	e0bffc15 	stw	r2,-16(fp)
 4002d3c:	00801e04 	movi	r2,120
 4002d40:	e0bffd15 	stw	r2,-12(fp)
 4002d44:	00801c04 	movi	r2,112
 4002d48:	e0bffe15 	stw	r2,-8(fp)
 4002d4c:	00801a04 	movi	r2,104
 4002d50:	e0bfff15 	stw	r2,-4(fp)

	int L298size = (int) sizeof(L298_REGISTERS)/sizeof(L298_REGISTERS[0]);
 4002d54:	00800104 	movi	r2,4
 4002d58:	e0bff915 	stw	r2,-28(fp)
	//printf("The size is: %d \n", L298size);
	for (i = 0; i < L298size; i++){
 4002d5c:	e03ffb15 	stw	zero,-20(fp)
 4002d60:	00001006 	br	4002da4 <M_checkMotion+0x80>
		//test = IORD(L298_REGISTERS[i], 0);
		//printf("Register value is : %f , Register is: %d \n", test, L298_REGISTERS[i]);
		if (IORD(L298_REGISTERS[i], 0) > 0){
 4002d64:	e0bffb17 	ldw	r2,-20(fp)
 4002d68:	1085883a 	add	r2,r2,r2
 4002d6c:	1085883a 	add	r2,r2,r2
 4002d70:	e0fff904 	addi	r3,fp,-28
 4002d74:	10c5883a 	add	r2,r2,r3
 4002d78:	10800304 	addi	r2,r2,12
 4002d7c:	10800017 	ldw	r2,0(r2)
 4002d80:	10800037 	ldwio	r2,0(r2)
 4002d84:	10800050 	cmplti	r2,r2,1
 4002d88:	1000031e 	bne	r2,zero,4002d98 <M_checkMotion+0x74>
			isMoving = TRUE;
 4002d8c:	00800044 	movi	r2,1
 4002d90:	e0bffa15 	stw	r2,-24(fp)
			break;
 4002d94:	00000606 	br	4002db0 <M_checkMotion+0x8c>
	//double test = 0;
	int L298_REGISTERS[] = {PWM_0_BASE, PWM_1_BASE, PWM_2_BASE, PWM_3_BASE};

	int L298size = (int) sizeof(L298_REGISTERS)/sizeof(L298_REGISTERS[0]);
	//printf("The size is: %d \n", L298size);
	for (i = 0; i < L298size; i++){
 4002d98:	e0bffb17 	ldw	r2,-20(fp)
 4002d9c:	10800044 	addi	r2,r2,1
 4002da0:	e0bffb15 	stw	r2,-20(fp)
 4002da4:	e0fffb17 	ldw	r3,-20(fp)
 4002da8:	e0bff917 	ldw	r2,-28(fp)
 4002dac:	18bfed16 	blt	r3,r2,4002d64 <M_checkMotion+0x40>
			isMoving = TRUE;
			break;
		}
	}

	return isMoving;
 4002db0:	e0bffa17 	ldw	r2,-24(fp)
}
 4002db4:	e037883a 	mov	sp,fp
 4002db8:	df000017 	ldw	fp,0(sp)
 4002dbc:	dec00104 	addi	sp,sp,4
 4002dc0:	f800283a 	ret

04002dc4 <M_allStop>:

void M_allStop(void){
 4002dc4:	defffe04 	addi	sp,sp,-8
 4002dc8:	dfc00115 	stw	ra,4(sp)
 4002dcc:	df000015 	stw	fp,0(sp)
 4002dd0:	d839883a 	mov	fp,sp
	//Signal all L298 inputs to go to 0 (coast)
	//Brakes = 1 1
	IOWR(PWM_0_BASE, 0, 1);
 4002dd4:	00c02004 	movi	r3,128
 4002dd8:	00800044 	movi	r2,1
 4002ddc:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_1_BASE, 0, 1);
 4002de0:	00c01e04 	movi	r3,120
 4002de4:	00800044 	movi	r2,1
 4002de8:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 1);
 4002dec:	00c01c04 	movi	r3,112
 4002df0:	00800044 	movi	r2,1
 4002df4:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_3_BASE, 0, 1);
 4002df8:	00c01a04 	movi	r3,104
 4002dfc:	00800044 	movi	r2,1
 4002e00:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002e04:	010003f4 	movhi	r4,15
 4002e08:	21109004 	addi	r4,r4,16960
 4002e0c:	4017a280 	call	4017a28 <usleep>
}
 4002e10:	e037883a 	mov	sp,fp
 4002e14:	dfc00117 	ldw	ra,4(sp)
 4002e18:	df000017 	ldw	fp,0(sp)
 4002e1c:	dec00204 	addi	sp,sp,8
 4002e20:	f800283a 	ret

04002e24 <turnLeft_Simple>:

void turnLeft_Simple(void){
 4002e24:	defffe04 	addi	sp,sp,-8
 4002e28:	dfc00115 	stw	ra,4(sp)
 4002e2c:	df000015 	stw	fp,0(sp)
 4002e30:	d839883a 	mov	fp,sp
	//turn for a time limited amount
	IOWR(PWM_1_BASE, 0, 0.50 * 31250); //tell left motor to go reverse
 4002e34:	00c01e04 	movi	r3,120
 4002e38:	008f4244 	movi	r2,15625
 4002e3c:	18800035 	stwio	r2,0(r3)
    IOWR(PWM_2_BASE, 0, 0.50 * 31250);
 4002e40:	00c01c04 	movi	r3,112
 4002e44:	008f4244 	movi	r2,15625
 4002e48:	18800035 	stwio	r2,0(r3)
	usleep(0.5 * SECOND_DELAY);
 4002e4c:	01000234 	movhi	r4,8
 4002e50:	21284804 	addi	r4,r4,-24288
 4002e54:	4017a280 	call	4017a28 <usleep>
	IOWR(PWM_1_BASE, 0, 0.75 * 31250); //tell left motor to go reverse
 4002e58:	00c01e04 	movi	r3,120
 4002e5c:	0096e344 	movi	r2,23437
 4002e60:	18800035 	stwio	r2,0(r3)
    IOWR(PWM_2_BASE, 0, 0.75 * 31250);
 4002e64:	00c01c04 	movi	r3,112
 4002e68:	0096e344 	movi	r2,23437
 4002e6c:	18800035 	stwio	r2,0(r3)
	usleep(1 * SECOND_DELAY);
 4002e70:	010003f4 	movhi	r4,15
 4002e74:	21109004 	addi	r4,r4,16960
 4002e78:	4017a280 	call	4017a28 <usleep>
	IOWR(PWM_1_BASE, 0, 0);
 4002e7c:	00801e04 	movi	r2,120
 4002e80:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 4002e84:	00801c04 	movi	r2,112
 4002e88:	10000035 	stwio	zero,0(r2)
}
 4002e8c:	e037883a 	mov	sp,fp
 4002e90:	dfc00117 	ldw	ra,4(sp)
 4002e94:	df000017 	ldw	fp,0(sp)
 4002e98:	dec00204 	addi	sp,sp,8
 4002e9c:	f800283a 	ret

04002ea0 <turnLeft>:

void turnLeft(){
 4002ea0:	defffc04 	addi	sp,sp,-16
 4002ea4:	dfc00315 	stw	ra,12(sp)
 4002ea8:	df000215 	stw	fp,8(sp)
 4002eac:	df000204 	addi	fp,sp,8
	motorGo(1, 2, 0.75, 103);
 4002eb0:	d8000015 	stw	zero,0(sp)
 4002eb4:	009016b4 	movhi	r2,16474
 4002eb8:	10b00004 	addi	r2,r2,-16384
 4002ebc:	d8800115 	stw	r2,4(sp)
 4002ec0:	01000044 	movi	r4,1
 4002ec4:	01400084 	movi	r5,2
 4002ec8:	000d883a 	mov	r6,zero
 4002ecc:	01cffa34 	movhi	r7,16360
 4002ed0:	4002fc80 	call	4002fc8 <motorGo>
}
 4002ed4:	e037883a 	mov	sp,fp
 4002ed8:	dfc00117 	ldw	ra,4(sp)
 4002edc:	df000017 	ldw	fp,0(sp)
 4002ee0:	dec00204 	addi	sp,sp,8
 4002ee4:	f800283a 	ret

04002ee8 <turnRight>:

void turnRight(){
 4002ee8:	defffc04 	addi	sp,sp,-16
 4002eec:	dfc00315 	stw	ra,12(sp)
 4002ef0:	df000215 	stw	fp,8(sp)
 4002ef4:	df000204 	addi	fp,sp,8
	motorGo(0, 3, 0.75, 100);
 4002ef8:	d8000015 	stw	zero,0(sp)
 4002efc:	00901674 	movhi	r2,16473
 4002f00:	d8800115 	stw	r2,4(sp)
 4002f04:	0009883a 	mov	r4,zero
 4002f08:	014000c4 	movi	r5,3
 4002f0c:	000d883a 	mov	r6,zero
 4002f10:	01cffa34 	movhi	r7,16360
 4002f14:	4002fc80 	call	4002fc8 <motorGo>
}
 4002f18:	e037883a 	mov	sp,fp
 4002f1c:	dfc00117 	ldw	ra,4(sp)
 4002f20:	df000017 	ldw	fp,0(sp)
 4002f24:	dec00204 	addi	sp,sp,8
 4002f28:	f800283a 	ret

04002f2c <turn180>:

void turn180(){
 4002f2c:	defffc04 	addi	sp,sp,-16
 4002f30:	dfc00315 	stw	ra,12(sp)
 4002f34:	df000215 	stw	fp,8(sp)
 4002f38:	df000204 	addi	fp,sp,8
	motorGo(0, 3, 0.9, 218);
 4002f3c:	d8000015 	stw	zero,0(sp)
 4002f40:	00901af4 	movhi	r2,16491
 4002f44:	10900004 	addi	r2,r2,16384
 4002f48:	d8800115 	stw	r2,4(sp)
 4002f4c:	0009883a 	mov	r4,zero
 4002f50:	014000c4 	movi	r5,3
 4002f54:	01b33374 	movhi	r6,52429
 4002f58:	31b33344 	addi	r6,r6,-13107
 4002f5c:	01cffb74 	movhi	r7,16365
 4002f60:	39f33304 	addi	r7,r7,-13108
 4002f64:	4002fc80 	call	4002fc8 <motorGo>
}
 4002f68:	e037883a 	mov	sp,fp
 4002f6c:	dfc00117 	ldw	ra,4(sp)
 4002f70:	df000017 	ldw	fp,0(sp)
 4002f74:	dec00204 	addi	sp,sp,8
 4002f78:	f800283a 	ret

04002f7c <motorReverse>:

void motorReverse(){
 4002f7c:	defffc04 	addi	sp,sp,-16
 4002f80:	dfc00315 	stw	ra,12(sp)
 4002f84:	df000215 	stw	fp,8(sp)
 4002f88:	df000204 	addi	fp,sp,8
	motorGo(1, 3, 0.9, 120);
 4002f8c:	d8000015 	stw	zero,0(sp)
 4002f90:	009017b4 	movhi	r2,16478
 4002f94:	d8800115 	stw	r2,4(sp)
 4002f98:	01000044 	movi	r4,1
 4002f9c:	014000c4 	movi	r5,3
 4002fa0:	01b33374 	movhi	r6,52429
 4002fa4:	31b33344 	addi	r6,r6,-13107
 4002fa8:	01cffb74 	movhi	r7,16365
 4002fac:	39f33304 	addi	r7,r7,-13108
 4002fb0:	4002fc80 	call	4002fc8 <motorGo>
}
 4002fb4:	e037883a 	mov	sp,fp
 4002fb8:	dfc00117 	ldw	ra,4(sp)
 4002fbc:	df000017 	ldw	fp,0(sp)
 4002fc0:	dec00204 	addi	sp,sp,8
 4002fc4:	f800283a 	ret

04002fc8 <motorGo>:

void motorGo(int leftin, int rightin, double duty, double distance){
 4002fc8:	deffea04 	addi	sp,sp,-88
 4002fcc:	dfc01515 	stw	ra,84(sp)
 4002fd0:	df001415 	stw	fp,80(sp)
 4002fd4:	dc401315 	stw	r17,76(sp)
 4002fd8:	dc001215 	stw	r16,72(sp)
 4002fdc:	df001204 	addi	fp,sp,72
 4002fe0:	e13ffc15 	stw	r4,-16(fp)
 4002fe4:	e17ffd15 	stw	r5,-12(fp)
 4002fe8:	e1bffe15 	stw	r6,-8(fp)
 4002fec:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 left, right;
	double motor_0, motor_0_total, temp_0;
	double motor_1, motor_1_total, temp_1;

	left = returnHbridgeIn(leftin);
 4002ff0:	e13ffc17 	ldw	r4,-16(fp)
 4002ff4:	4003e600 	call	4003e60 <returnHbridgeIn>
 4002ff8:	e0bffb15 	stw	r2,-20(fp)
	right = returnHbridgeIn(rightin);
 4002ffc:	e13ffd17 	ldw	r4,-12(fp)
 4003000:	4003e600 	call	4003e60 <returnHbridgeIn>
 4003004:	e0bffa15 	stw	r2,-24(fp)

	IOWR(left, 0, duty * 31250);
 4003008:	e43ffb17 	ldw	r16,-20(fp)
 400300c:	e13ffe17 	ldw	r4,-8(fp)
 4003010:	e17fff17 	ldw	r5,-4(fp)
 4003014:	000d883a 	mov	r6,zero
 4003018:	01d037f4 	movhi	r7,16607
 400301c:	39e12004 	addi	r7,r7,-31616
 4003020:	40083f40 	call	40083f4 <__muldf3>
 4003024:	1009883a 	mov	r4,r2
 4003028:	180b883a 	mov	r5,r3
 400302c:	2005883a 	mov	r2,r4
 4003030:	2807883a 	mov	r3,r5
 4003034:	1009883a 	mov	r4,r2
 4003038:	180b883a 	mov	r5,r3
 400303c:	4008d280 	call	4008d28 <__fixdfsi>
 4003040:	1007883a 	mov	r3,r2
 4003044:	8005883a 	mov	r2,r16
 4003048:	10c00035 	stwio	r3,0(r2)
	IOWR(right, 0, duty * 31250);
 400304c:	e43ffa17 	ldw	r16,-24(fp)
 4003050:	e13ffe17 	ldw	r4,-8(fp)
 4003054:	e17fff17 	ldw	r5,-4(fp)
 4003058:	000d883a 	mov	r6,zero
 400305c:	01d037f4 	movhi	r7,16607
 4003060:	39e12004 	addi	r7,r7,-31616
 4003064:	40083f40 	call	40083f4 <__muldf3>
 4003068:	1009883a 	mov	r4,r2
 400306c:	180b883a 	mov	r5,r3
 4003070:	2005883a 	mov	r2,r4
 4003074:	2807883a 	mov	r3,r5
 4003078:	1009883a 	mov	r4,r2
 400307c:	180b883a 	mov	r5,r3
 4003080:	4008d280 	call	4008d28 <__fixdfsi>
 4003084:	1007883a 	mov	r3,r2
 4003088:	8005883a 	mov	r2,r16
 400308c:	10c00035 	stwio	r3,0(r2)

	motor_0 = IORD(ENCODER_0A_BASE, 0);
 4003090:	00801004 	movi	r2,64
 4003094:	11000037 	ldwio	r4,0(r2)
 4003098:	4008c300 	call	4008c30 <__floatsidf>
 400309c:	1009883a 	mov	r4,r2
 40030a0:	180b883a 	mov	r5,r3
 40030a4:	e13ff815 	stw	r4,-32(fp)
 40030a8:	e17ff915 	stw	r5,-28(fp)
	motor_0_total = 0;
 40030ac:	e03ff615 	stw	zero,-40(fp)
 40030b0:	e03ff715 	stw	zero,-36(fp)

	motor_1 = IORD(ENCODER_1A_BASE, 0);
 40030b4:	00800804 	movi	r2,32
 40030b8:	11000037 	ldwio	r4,0(r2)
 40030bc:	4008c300 	call	4008c30 <__floatsidf>
 40030c0:	1009883a 	mov	r4,r2
 40030c4:	180b883a 	mov	r5,r3
 40030c8:	e13ff215 	stw	r4,-56(fp)
 40030cc:	e17ff315 	stw	r5,-52(fp)
	motor_1_total = 0;
 40030d0:	e03ff015 	stw	zero,-64(fp)
 40030d4:	e03ff115 	stw	zero,-60(fp)

	while (1){
		temp_0 = IORD(ENCODER_0A_BASE, 0);
 40030d8:	00801004 	movi	r2,64
 40030dc:	11000037 	ldwio	r4,0(r2)
 40030e0:	4008c300 	call	4008c30 <__floatsidf>
 40030e4:	1009883a 	mov	r4,r2
 40030e8:	180b883a 	mov	r5,r3
 40030ec:	e13ff415 	stw	r4,-48(fp)
 40030f0:	e17ff515 	stw	r5,-44(fp)
		temp_1 = IORD(ENCODER_1A_BASE, 0);
 40030f4:	00800804 	movi	r2,32
 40030f8:	11000037 	ldwio	r4,0(r2)
 40030fc:	4008c300 	call	4008c30 <__floatsidf>
 4003100:	1009883a 	mov	r4,r2
 4003104:	180b883a 	mov	r5,r3
 4003108:	e13fee15 	stw	r4,-72(fp)
 400310c:	e17fef15 	stw	r5,-68(fp)

		if ( temp_0 >= motor_0 ){
 4003110:	e13ff417 	ldw	r4,-48(fp)
 4003114:	e17ff517 	ldw	r5,-44(fp)
 4003118:	e1bff817 	ldw	r6,-32(fp)
 400311c:	e1fff917 	ldw	r7,-28(fp)
 4003120:	4008a980 	call	4008a98 <__gedf2>
 4003124:	1004403a 	cmpge	r2,r2,zero
 4003128:	1000011e 	bne	r2,zero,4003130 <motorGo+0x168>
 400312c:	00001306 	br	400317c <motorGo+0x1b4>
			motor_0_total += (temp_0 - motor_0);
 4003130:	e13ff417 	ldw	r4,-48(fp)
 4003134:	e17ff517 	ldw	r5,-44(fp)
 4003138:	e1bff817 	ldw	r6,-32(fp)
 400313c:	e1fff917 	ldw	r7,-28(fp)
 4003140:	40083000 	call	4008300 <__subdf3>
 4003144:	1009883a 	mov	r4,r2
 4003148:	180b883a 	mov	r5,r3
 400314c:	2005883a 	mov	r2,r4
 4003150:	2807883a 	mov	r3,r5
 4003154:	e13ff617 	ldw	r4,-40(fp)
 4003158:	e17ff717 	ldw	r5,-36(fp)
 400315c:	100d883a 	mov	r6,r2
 4003160:	180f883a 	mov	r7,r3
 4003164:	40083800 	call	4008380 <__adddf3>
 4003168:	1009883a 	mov	r4,r2
 400316c:	180b883a 	mov	r5,r3
 4003170:	e13ff615 	stw	r4,-40(fp)
 4003174:	e17ff715 	stw	r5,-36(fp)
 4003178:	00000906 	br	40031a0 <motorGo+0x1d8>
		}
		else{ //counter reset
			motor_0_total += temp_0;
 400317c:	e13ff617 	ldw	r4,-40(fp)
 4003180:	e17ff717 	ldw	r5,-36(fp)
 4003184:	e1bff417 	ldw	r6,-48(fp)
 4003188:	e1fff517 	ldw	r7,-44(fp)
 400318c:	40083800 	call	4008380 <__adddf3>
 4003190:	1009883a 	mov	r4,r2
 4003194:	180b883a 	mov	r5,r3
 4003198:	e13ff615 	stw	r4,-40(fp)
 400319c:	e17ff715 	stw	r5,-36(fp)
			//printf("counter reset, temp value is: %f, motor_0 value is : %f \n", temp_0, motor_0);
		}

		if ( temp_1 >= motor_0 ){
 40031a0:	e13fee17 	ldw	r4,-72(fp)
 40031a4:	e17fef17 	ldw	r5,-68(fp)
 40031a8:	e1bff817 	ldw	r6,-32(fp)
 40031ac:	e1fff917 	ldw	r7,-28(fp)
 40031b0:	4008a980 	call	4008a98 <__gedf2>
 40031b4:	1004403a 	cmpge	r2,r2,zero
 40031b8:	1000011e 	bne	r2,zero,40031c0 <motorGo+0x1f8>
 40031bc:	00001306 	br	400320c <motorGo+0x244>
			motor_1_total += (temp_1 - motor_1);
 40031c0:	e13fee17 	ldw	r4,-72(fp)
 40031c4:	e17fef17 	ldw	r5,-68(fp)
 40031c8:	e1bff217 	ldw	r6,-56(fp)
 40031cc:	e1fff317 	ldw	r7,-52(fp)
 40031d0:	40083000 	call	4008300 <__subdf3>
 40031d4:	1009883a 	mov	r4,r2
 40031d8:	180b883a 	mov	r5,r3
 40031dc:	2005883a 	mov	r2,r4
 40031e0:	2807883a 	mov	r3,r5
 40031e4:	e13ff017 	ldw	r4,-64(fp)
 40031e8:	e17ff117 	ldw	r5,-60(fp)
 40031ec:	100d883a 	mov	r6,r2
 40031f0:	180f883a 	mov	r7,r3
 40031f4:	40083800 	call	4008380 <__adddf3>
 40031f8:	1009883a 	mov	r4,r2
 40031fc:	180b883a 	mov	r5,r3
 4003200:	e13ff015 	stw	r4,-64(fp)
 4003204:	e17ff115 	stw	r5,-60(fp)
 4003208:	00000906 	br	4003230 <motorGo+0x268>
		}
		else{ //counter reset
			motor_1_total += temp_1;
 400320c:	e13ff017 	ldw	r4,-64(fp)
 4003210:	e17ff117 	ldw	r5,-60(fp)
 4003214:	e1bfee17 	ldw	r6,-72(fp)
 4003218:	e1ffef17 	ldw	r7,-68(fp)
 400321c:	40083800 	call	4008380 <__adddf3>
 4003220:	1009883a 	mov	r4,r2
 4003224:	180b883a 	mov	r5,r3
 4003228:	e13ff015 	stw	r4,-64(fp)
 400322c:	e17ff115 	stw	r5,-60(fp)
			//printf("counter reset, temp value is: %f, motor_1 value is : %f \n", temp_1, motor_1);
		}

		if ((motor_0_total >= (16 * distance) - (0.05 * 16 * distance)) || (motor_1_total >= (16 * distance) - (0.05 * 16 * distance))){
 4003230:	e1000417 	ldw	r4,16(fp)
 4003234:	e1400517 	ldw	r5,20(fp)
 4003238:	000d883a 	mov	r6,zero
 400323c:	01d00c34 	movhi	r7,16432
 4003240:	40083f40 	call	40083f4 <__muldf3>
 4003244:	1009883a 	mov	r4,r2
 4003248:	180b883a 	mov	r5,r3
 400324c:	2021883a 	mov	r16,r4
 4003250:	2823883a 	mov	r17,r5
 4003254:	e1000417 	ldw	r4,16(fp)
 4003258:	e1400517 	ldw	r5,20(fp)
 400325c:	01a666b4 	movhi	r6,39322
 4003260:	31a66684 	addi	r6,r6,-26214
 4003264:	01effab4 	movhi	r7,49130
 4003268:	39e66644 	addi	r7,r7,-26215
 400326c:	40083f40 	call	40083f4 <__muldf3>
 4003270:	1009883a 	mov	r4,r2
 4003274:	180b883a 	mov	r5,r3
 4003278:	2005883a 	mov	r2,r4
 400327c:	2807883a 	mov	r3,r5
 4003280:	8009883a 	mov	r4,r16
 4003284:	880b883a 	mov	r5,r17
 4003288:	100d883a 	mov	r6,r2
 400328c:	180f883a 	mov	r7,r3
 4003290:	40083800 	call	4008380 <__adddf3>
 4003294:	1009883a 	mov	r4,r2
 4003298:	180b883a 	mov	r5,r3
 400329c:	2005883a 	mov	r2,r4
 40032a0:	2807883a 	mov	r3,r5
 40032a4:	1009883a 	mov	r4,r2
 40032a8:	180b883a 	mov	r5,r3
 40032ac:	e1bff617 	ldw	r6,-40(fp)
 40032b0:	e1fff717 	ldw	r7,-36(fp)
 40032b4:	4008ba80 	call	4008ba8 <__ledf2>
 40032b8:	10800050 	cmplti	r2,r2,1
 40032bc:	1000321e 	bne	r2,zero,4003388 <motorGo+0x3c0>
 40032c0:	e1000417 	ldw	r4,16(fp)
 40032c4:	e1400517 	ldw	r5,20(fp)
 40032c8:	000d883a 	mov	r6,zero
 40032cc:	01d00c34 	movhi	r7,16432
 40032d0:	40083f40 	call	40083f4 <__muldf3>
 40032d4:	1009883a 	mov	r4,r2
 40032d8:	180b883a 	mov	r5,r3
 40032dc:	2021883a 	mov	r16,r4
 40032e0:	2823883a 	mov	r17,r5
 40032e4:	e1000417 	ldw	r4,16(fp)
 40032e8:	e1400517 	ldw	r5,20(fp)
 40032ec:	01a666b4 	movhi	r6,39322
 40032f0:	31a66684 	addi	r6,r6,-26214
 40032f4:	01effab4 	movhi	r7,49130
 40032f8:	39e66644 	addi	r7,r7,-26215
 40032fc:	40083f40 	call	40083f4 <__muldf3>
 4003300:	1009883a 	mov	r4,r2
 4003304:	180b883a 	mov	r5,r3
 4003308:	2005883a 	mov	r2,r4
 400330c:	2807883a 	mov	r3,r5
 4003310:	8009883a 	mov	r4,r16
 4003314:	880b883a 	mov	r5,r17
 4003318:	100d883a 	mov	r6,r2
 400331c:	180f883a 	mov	r7,r3
 4003320:	40083800 	call	4008380 <__adddf3>
 4003324:	1009883a 	mov	r4,r2
 4003328:	180b883a 	mov	r5,r3
 400332c:	2005883a 	mov	r2,r4
 4003330:	2807883a 	mov	r3,r5
 4003334:	1009883a 	mov	r4,r2
 4003338:	180b883a 	mov	r5,r3
 400333c:	e1bff017 	ldw	r6,-64(fp)
 4003340:	e1fff117 	ldw	r7,-60(fp)
 4003344:	4008ba80 	call	4008ba8 <__ledf2>
 4003348:	10800050 	cmplti	r2,r2,1
 400334c:	10000e1e 	bne	r2,zero,4003388 <motorGo+0x3c0>
			//printf("DONE! total is: %f  and temp value is: %f \n", motor_0_total, temp_0);
			break;
		}

		motor_0 = temp_0;
 4003350:	e0bff417 	ldw	r2,-48(fp)
 4003354:	e0bff815 	stw	r2,-32(fp)
 4003358:	e0bff517 	ldw	r2,-44(fp)
 400335c:	e0bff915 	stw	r2,-28(fp)
		motor_1 = temp_1;
 4003360:	e0bfee17 	ldw	r2,-72(fp)
 4003364:	e0bff215 	stw	r2,-56(fp)
 4003368:	e0bfef17 	ldw	r2,-68(fp)
 400336c:	e0bff315 	stw	r2,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 10);
 4003370:	0009883a 	mov	r4,zero
 4003374:	000b883a 	mov	r5,zero
 4003378:	000d883a 	mov	r6,zero
 400337c:	01c00284 	movi	r7,10
 4003380:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	}
 4003384:	003f5406 	br	40030d8 <motorGo+0x110>

	//stop
	IOWR(left, 0, 0);
 4003388:	e0bffb17 	ldw	r2,-20(fp)
 400338c:	10000035 	stwio	zero,0(r2)
	IOWR(right, 0, 0);
 4003390:	e0bffa17 	ldw	r2,-24(fp)
 4003394:	10000035 	stwio	zero,0(r2)
}
 4003398:	e037883a 	mov	sp,fp
 400339c:	dfc00317 	ldw	ra,12(sp)
 40033a0:	df000217 	ldw	fp,8(sp)
 40033a4:	dc400117 	ldw	r17,4(sp)
 40033a8:	dc000017 	ldw	r16,0(sp)
 40033ac:	dec00404 	addi	sp,sp,16
 40033b0:	f800283a 	ret

040033b4 <motorGoForward>:

void motorGoForward(int leftin, int rightin, double leftduty, double rightduty, double distance){
 40033b4:	deffea04 	addi	sp,sp,-88
 40033b8:	dfc01515 	stw	ra,84(sp)
 40033bc:	df001415 	stw	fp,80(sp)
 40033c0:	dc401315 	stw	r17,76(sp)
 40033c4:	dc001215 	stw	r16,72(sp)
 40033c8:	df001204 	addi	fp,sp,72
 40033cc:	e13ffc15 	stw	r4,-16(fp)
 40033d0:	e17ffd15 	stw	r5,-12(fp)
 40033d4:	e1bffe15 	stw	r6,-8(fp)
 40033d8:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 left, right;
	double motor_0, motor_0_total, temp_0;
	double motor_1, motor_1_total, temp_1;

	left = returnHbridgeIn(leftin);
 40033dc:	e13ffc17 	ldw	r4,-16(fp)
 40033e0:	4003e600 	call	4003e60 <returnHbridgeIn>
 40033e4:	e0bffb15 	stw	r2,-20(fp)
	right = returnHbridgeIn(rightin);
 40033e8:	e13ffd17 	ldw	r4,-12(fp)
 40033ec:	4003e600 	call	4003e60 <returnHbridgeIn>
 40033f0:	e0bffa15 	stw	r2,-24(fp)
	IOWR(left, 0, leftduty * 31250);
 40033f4:	e43ffb17 	ldw	r16,-20(fp)
 40033f8:	e13ffe17 	ldw	r4,-8(fp)
 40033fc:	e17fff17 	ldw	r5,-4(fp)
 4003400:	000d883a 	mov	r6,zero
 4003404:	01d037f4 	movhi	r7,16607
 4003408:	39e12004 	addi	r7,r7,-31616
 400340c:	40083f40 	call	40083f4 <__muldf3>
 4003410:	1009883a 	mov	r4,r2
 4003414:	180b883a 	mov	r5,r3
 4003418:	2005883a 	mov	r2,r4
 400341c:	2807883a 	mov	r3,r5
 4003420:	1009883a 	mov	r4,r2
 4003424:	180b883a 	mov	r5,r3
 4003428:	4008d280 	call	4008d28 <__fixdfsi>
 400342c:	1007883a 	mov	r3,r2
 4003430:	8005883a 	mov	r2,r16
 4003434:	10c00035 	stwio	r3,0(r2)
	IOWR(right, 0, rightduty * 31250);
 4003438:	e43ffa17 	ldw	r16,-24(fp)
 400343c:	e1000417 	ldw	r4,16(fp)
 4003440:	e1400517 	ldw	r5,20(fp)
 4003444:	000d883a 	mov	r6,zero
 4003448:	01d037f4 	movhi	r7,16607
 400344c:	39e12004 	addi	r7,r7,-31616
 4003450:	40083f40 	call	40083f4 <__muldf3>
 4003454:	1009883a 	mov	r4,r2
 4003458:	180b883a 	mov	r5,r3
 400345c:	2005883a 	mov	r2,r4
 4003460:	2807883a 	mov	r3,r5
 4003464:	1009883a 	mov	r4,r2
 4003468:	180b883a 	mov	r5,r3
 400346c:	4008d280 	call	4008d28 <__fixdfsi>
 4003470:	1007883a 	mov	r3,r2
 4003474:	8005883a 	mov	r2,r16
 4003478:	10c00035 	stwio	r3,0(r2)

	motor_0 = IORD(ENCODER_0A_BASE, 0);
 400347c:	00801004 	movi	r2,64
 4003480:	11000037 	ldwio	r4,0(r2)
 4003484:	4008c300 	call	4008c30 <__floatsidf>
 4003488:	1009883a 	mov	r4,r2
 400348c:	180b883a 	mov	r5,r3
 4003490:	e13ff815 	stw	r4,-32(fp)
 4003494:	e17ff915 	stw	r5,-28(fp)
	motor_0_total = 0;
 4003498:	e03ff615 	stw	zero,-40(fp)
 400349c:	e03ff715 	stw	zero,-36(fp)

	motor_1 = IORD(ENCODER_1A_BASE, 0);
 40034a0:	00800804 	movi	r2,32
 40034a4:	11000037 	ldwio	r4,0(r2)
 40034a8:	4008c300 	call	4008c30 <__floatsidf>
 40034ac:	1009883a 	mov	r4,r2
 40034b0:	180b883a 	mov	r5,r3
 40034b4:	e13ff215 	stw	r4,-56(fp)
 40034b8:	e17ff315 	stw	r5,-52(fp)
	motor_1_total = 0;
 40034bc:	e03ff015 	stw	zero,-64(fp)
 40034c0:	e03ff115 	stw	zero,-60(fp)

	while (1){
		temp_0 = IORD(ENCODER_0A_BASE, 0);
 40034c4:	00801004 	movi	r2,64
 40034c8:	11000037 	ldwio	r4,0(r2)
 40034cc:	4008c300 	call	4008c30 <__floatsidf>
 40034d0:	1009883a 	mov	r4,r2
 40034d4:	180b883a 	mov	r5,r3
 40034d8:	e13ff415 	stw	r4,-48(fp)
 40034dc:	e17ff515 	stw	r5,-44(fp)
		temp_1 = IORD(ENCODER_1A_BASE, 0);
 40034e0:	00800804 	movi	r2,32
 40034e4:	11000037 	ldwio	r4,0(r2)
 40034e8:	4008c300 	call	4008c30 <__floatsidf>
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	180b883a 	mov	r5,r3
 40034f4:	e13fee15 	stw	r4,-72(fp)
 40034f8:	e17fef15 	stw	r5,-68(fp)

		if ( temp_0 >= motor_0 ){
 40034fc:	e13ff417 	ldw	r4,-48(fp)
 4003500:	e17ff517 	ldw	r5,-44(fp)
 4003504:	e1bff817 	ldw	r6,-32(fp)
 4003508:	e1fff917 	ldw	r7,-28(fp)
 400350c:	4008a980 	call	4008a98 <__gedf2>
 4003510:	1004403a 	cmpge	r2,r2,zero
 4003514:	1000011e 	bne	r2,zero,400351c <motorGoForward+0x168>
 4003518:	00001306 	br	4003568 <motorGoForward+0x1b4>
			motor_0_total += (temp_0 - motor_0);
 400351c:	e13ff417 	ldw	r4,-48(fp)
 4003520:	e17ff517 	ldw	r5,-44(fp)
 4003524:	e1bff817 	ldw	r6,-32(fp)
 4003528:	e1fff917 	ldw	r7,-28(fp)
 400352c:	40083000 	call	4008300 <__subdf3>
 4003530:	1009883a 	mov	r4,r2
 4003534:	180b883a 	mov	r5,r3
 4003538:	2005883a 	mov	r2,r4
 400353c:	2807883a 	mov	r3,r5
 4003540:	e13ff617 	ldw	r4,-40(fp)
 4003544:	e17ff717 	ldw	r5,-36(fp)
 4003548:	100d883a 	mov	r6,r2
 400354c:	180f883a 	mov	r7,r3
 4003550:	40083800 	call	4008380 <__adddf3>
 4003554:	1009883a 	mov	r4,r2
 4003558:	180b883a 	mov	r5,r3
 400355c:	e13ff615 	stw	r4,-40(fp)
 4003560:	e17ff715 	stw	r5,-36(fp)
 4003564:	00000906 	br	400358c <motorGoForward+0x1d8>
		}
		else{ //counter reset
			motor_0_total += temp_0;
 4003568:	e13ff617 	ldw	r4,-40(fp)
 400356c:	e17ff717 	ldw	r5,-36(fp)
 4003570:	e1bff417 	ldw	r6,-48(fp)
 4003574:	e1fff517 	ldw	r7,-44(fp)
 4003578:	40083800 	call	4008380 <__adddf3>
 400357c:	1009883a 	mov	r4,r2
 4003580:	180b883a 	mov	r5,r3
 4003584:	e13ff615 	stw	r4,-40(fp)
 4003588:	e17ff715 	stw	r5,-36(fp)
			//printf("counter reset, temp value is: %f, motor_0 value is : %f \n", temp_0, motor_0);
		}

		if ( temp_1 >= motor_0 ){
 400358c:	e13fee17 	ldw	r4,-72(fp)
 4003590:	e17fef17 	ldw	r5,-68(fp)
 4003594:	e1bff817 	ldw	r6,-32(fp)
 4003598:	e1fff917 	ldw	r7,-28(fp)
 400359c:	4008a980 	call	4008a98 <__gedf2>
 40035a0:	1004403a 	cmpge	r2,r2,zero
 40035a4:	1000011e 	bne	r2,zero,40035ac <motorGoForward+0x1f8>
 40035a8:	00001306 	br	40035f8 <motorGoForward+0x244>
			motor_1_total += (temp_1 - motor_1);
 40035ac:	e13fee17 	ldw	r4,-72(fp)
 40035b0:	e17fef17 	ldw	r5,-68(fp)
 40035b4:	e1bff217 	ldw	r6,-56(fp)
 40035b8:	e1fff317 	ldw	r7,-52(fp)
 40035bc:	40083000 	call	4008300 <__subdf3>
 40035c0:	1009883a 	mov	r4,r2
 40035c4:	180b883a 	mov	r5,r3
 40035c8:	2005883a 	mov	r2,r4
 40035cc:	2807883a 	mov	r3,r5
 40035d0:	e13ff017 	ldw	r4,-64(fp)
 40035d4:	e17ff117 	ldw	r5,-60(fp)
 40035d8:	100d883a 	mov	r6,r2
 40035dc:	180f883a 	mov	r7,r3
 40035e0:	40083800 	call	4008380 <__adddf3>
 40035e4:	1009883a 	mov	r4,r2
 40035e8:	180b883a 	mov	r5,r3
 40035ec:	e13ff015 	stw	r4,-64(fp)
 40035f0:	e17ff115 	stw	r5,-60(fp)
 40035f4:	00000906 	br	400361c <motorGoForward+0x268>
		}
		else{ //counter reset
			motor_1_total += temp_1;
 40035f8:	e13ff017 	ldw	r4,-64(fp)
 40035fc:	e17ff117 	ldw	r5,-60(fp)
 4003600:	e1bfee17 	ldw	r6,-72(fp)
 4003604:	e1ffef17 	ldw	r7,-68(fp)
 4003608:	40083800 	call	4008380 <__adddf3>
 400360c:	1009883a 	mov	r4,r2
 4003610:	180b883a 	mov	r5,r3
 4003614:	e13ff015 	stw	r4,-64(fp)
 4003618:	e17ff115 	stw	r5,-60(fp)
			//printf("counter reset, temp value is: %f, motor_1 value is : %f \n", temp_1, motor_1);
		}

		if ((motor_0_total >= (16 * distance) - (0.05 * 16 * distance)) || (motor_1_total >= (16 * distance) - (0.05 * 16 * distance))){
 400361c:	e1000617 	ldw	r4,24(fp)
 4003620:	e1400717 	ldw	r5,28(fp)
 4003624:	000d883a 	mov	r6,zero
 4003628:	01d00c34 	movhi	r7,16432
 400362c:	40083f40 	call	40083f4 <__muldf3>
 4003630:	1009883a 	mov	r4,r2
 4003634:	180b883a 	mov	r5,r3
 4003638:	2021883a 	mov	r16,r4
 400363c:	2823883a 	mov	r17,r5
 4003640:	e1000617 	ldw	r4,24(fp)
 4003644:	e1400717 	ldw	r5,28(fp)
 4003648:	01a666b4 	movhi	r6,39322
 400364c:	31a66684 	addi	r6,r6,-26214
 4003650:	01effab4 	movhi	r7,49130
 4003654:	39e66644 	addi	r7,r7,-26215
 4003658:	40083f40 	call	40083f4 <__muldf3>
 400365c:	1009883a 	mov	r4,r2
 4003660:	180b883a 	mov	r5,r3
 4003664:	2005883a 	mov	r2,r4
 4003668:	2807883a 	mov	r3,r5
 400366c:	8009883a 	mov	r4,r16
 4003670:	880b883a 	mov	r5,r17
 4003674:	100d883a 	mov	r6,r2
 4003678:	180f883a 	mov	r7,r3
 400367c:	40083800 	call	4008380 <__adddf3>
 4003680:	1009883a 	mov	r4,r2
 4003684:	180b883a 	mov	r5,r3
 4003688:	2005883a 	mov	r2,r4
 400368c:	2807883a 	mov	r3,r5
 4003690:	1009883a 	mov	r4,r2
 4003694:	180b883a 	mov	r5,r3
 4003698:	e1bff617 	ldw	r6,-40(fp)
 400369c:	e1fff717 	ldw	r7,-36(fp)
 40036a0:	4008ba80 	call	4008ba8 <__ledf2>
 40036a4:	10800050 	cmplti	r2,r2,1
 40036a8:	1000321e 	bne	r2,zero,4003774 <motorGoForward+0x3c0>
 40036ac:	e1000617 	ldw	r4,24(fp)
 40036b0:	e1400717 	ldw	r5,28(fp)
 40036b4:	000d883a 	mov	r6,zero
 40036b8:	01d00c34 	movhi	r7,16432
 40036bc:	40083f40 	call	40083f4 <__muldf3>
 40036c0:	1009883a 	mov	r4,r2
 40036c4:	180b883a 	mov	r5,r3
 40036c8:	2021883a 	mov	r16,r4
 40036cc:	2823883a 	mov	r17,r5
 40036d0:	e1000617 	ldw	r4,24(fp)
 40036d4:	e1400717 	ldw	r5,28(fp)
 40036d8:	01a666b4 	movhi	r6,39322
 40036dc:	31a66684 	addi	r6,r6,-26214
 40036e0:	01effab4 	movhi	r7,49130
 40036e4:	39e66644 	addi	r7,r7,-26215
 40036e8:	40083f40 	call	40083f4 <__muldf3>
 40036ec:	1009883a 	mov	r4,r2
 40036f0:	180b883a 	mov	r5,r3
 40036f4:	2005883a 	mov	r2,r4
 40036f8:	2807883a 	mov	r3,r5
 40036fc:	8009883a 	mov	r4,r16
 4003700:	880b883a 	mov	r5,r17
 4003704:	100d883a 	mov	r6,r2
 4003708:	180f883a 	mov	r7,r3
 400370c:	40083800 	call	4008380 <__adddf3>
 4003710:	1009883a 	mov	r4,r2
 4003714:	180b883a 	mov	r5,r3
 4003718:	2005883a 	mov	r2,r4
 400371c:	2807883a 	mov	r3,r5
 4003720:	1009883a 	mov	r4,r2
 4003724:	180b883a 	mov	r5,r3
 4003728:	e1bff017 	ldw	r6,-64(fp)
 400372c:	e1fff117 	ldw	r7,-60(fp)
 4003730:	4008ba80 	call	4008ba8 <__ledf2>
 4003734:	10800050 	cmplti	r2,r2,1
 4003738:	10000e1e 	bne	r2,zero,4003774 <motorGoForward+0x3c0>
			//printf("DONE! total is: %f  and temp value is: %f \n", motor_0_total, temp_0);
			break;
		}

		motor_0 = temp_0;
 400373c:	e0bff417 	ldw	r2,-48(fp)
 4003740:	e0bff815 	stw	r2,-32(fp)
 4003744:	e0bff517 	ldw	r2,-44(fp)
 4003748:	e0bff915 	stw	r2,-28(fp)
		motor_1 = temp_1;
 400374c:	e0bfee17 	ldw	r2,-72(fp)
 4003750:	e0bff215 	stw	r2,-56(fp)
 4003754:	e0bfef17 	ldw	r2,-68(fp)
 4003758:	e0bff315 	stw	r2,-52(fp)
		OSTimeDlyHMSM(0, 0, 0, 10);
 400375c:	0009883a 	mov	r4,zero
 4003760:	000b883a 	mov	r5,zero
 4003764:	000d883a 	mov	r6,zero
 4003768:	01c00284 	movi	r7,10
 400376c:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	}
 4003770:	003f5406 	br	40034c4 <motorGoForward+0x110>

	//stop
	IOWR(left, 0, 0);
 4003774:	e0bffb17 	ldw	r2,-20(fp)
 4003778:	10000035 	stwio	zero,0(r2)
	IOWR(right, 0, 0);
 400377c:	e0bffa17 	ldw	r2,-24(fp)
 4003780:	10000035 	stwio	zero,0(r2)
}
 4003784:	e037883a 	mov	sp,fp
 4003788:	dfc00317 	ldw	ra,12(sp)
 400378c:	df000217 	ldw	fp,8(sp)
 4003790:	dc400117 	ldw	r17,4(sp)
 4003794:	dc000017 	ldw	r16,0(sp)
 4003798:	dec00404 	addi	sp,sp,16
 400379c:	f800283a 	ret

040037a0 <printHistory>:


void printHistory(move_obj *TRVL, int TRVL_INDEX){
 40037a0:	defff304 	addi	sp,sp,-52
 40037a4:	dfc00c15 	stw	ra,48(sp)
 40037a8:	df000b15 	stw	fp,44(sp)
 40037ac:	dcc00a15 	stw	r19,40(sp)
 40037b0:	dc800915 	stw	r18,36(sp)
 40037b4:	dc400815 	stw	r17,32(sp)
 40037b8:	dc000715 	stw	r16,28(sp)
 40037bc:	df000704 	addi	fp,sp,28
 40037c0:	e13ffe15 	stw	r4,-8(fp)
 40037c4:	e17fff15 	stw	r5,-4(fp)
	int i;

	for (i = 0; i < TRVL_INDEX; i++){
 40037c8:	e03ffd15 	stw	zero,-12(fp)
 40037cc:	00003106 	br	4003894 <printHistory+0xf4>
		printf("Step %i : (%c, %c, %f, %f) \n", i, TRVL[i].dir, TRVL[i].move, TRVL[i].count, TRVL[i].angle);
 40037d0:	e13ffd17 	ldw	r4,-12(fp)
 40037d4:	01400504 	movi	r5,20
 40037d8:	4008ff80 	call	4008ff8 <__mulsi3>
 40037dc:	1007883a 	mov	r3,r2
 40037e0:	e0bffe17 	ldw	r2,-8(fp)
 40037e4:	1885883a 	add	r2,r3,r2
 40037e8:	10800043 	ldbu	r2,1(r2)
 40037ec:	14803fcc 	andi	r18,r2,255
 40037f0:	9480201c 	xori	r18,r18,128
 40037f4:	94bfe004 	addi	r18,r18,-128
 40037f8:	e13ffd17 	ldw	r4,-12(fp)
 40037fc:	01400504 	movi	r5,20
 4003800:	4008ff80 	call	4008ff8 <__mulsi3>
 4003804:	1007883a 	mov	r3,r2
 4003808:	e0bffe17 	ldw	r2,-8(fp)
 400380c:	1885883a 	add	r2,r3,r2
 4003810:	10800003 	ldbu	r2,0(r2)
 4003814:	14c03fcc 	andi	r19,r2,255
 4003818:	9cc0201c 	xori	r19,r19,128
 400381c:	9cffe004 	addi	r19,r19,-128
 4003820:	e13ffd17 	ldw	r4,-12(fp)
 4003824:	01400504 	movi	r5,20
 4003828:	4008ff80 	call	4008ff8 <__mulsi3>
 400382c:	1007883a 	mov	r3,r2
 4003830:	e0bffe17 	ldw	r2,-8(fp)
 4003834:	1885883a 	add	r2,r3,r2
 4003838:	14000117 	ldw	r16,4(r2)
 400383c:	14400217 	ldw	r17,8(r2)
 4003840:	e13ffd17 	ldw	r4,-12(fp)
 4003844:	01400504 	movi	r5,20
 4003848:	4008ff80 	call	4008ff8 <__mulsi3>
 400384c:	1007883a 	mov	r3,r2
 4003850:	e0bffe17 	ldw	r2,-8(fp)
 4003854:	1889883a 	add	r4,r3,r2
 4003858:	20800317 	ldw	r2,12(r4)
 400385c:	20c00417 	ldw	r3,16(r4)
 4003860:	dc000015 	stw	r16,0(sp)
 4003864:	dc400115 	stw	r17,4(sp)
 4003868:	d8800215 	stw	r2,8(sp)
 400386c:	d8c00315 	stw	r3,12(sp)
 4003870:	010100b4 	movhi	r4,1026
 4003874:	210fc504 	addi	r4,r4,16148
 4003878:	e17ffd17 	ldw	r5,-12(fp)
 400387c:	900d883a 	mov	r6,r18
 4003880:	980f883a 	mov	r7,r19
 4003884:	400a15c0 	call	400a15c <printf>


void printHistory(move_obj *TRVL, int TRVL_INDEX){
	int i;

	for (i = 0; i < TRVL_INDEX; i++){
 4003888:	e0bffd17 	ldw	r2,-12(fp)
 400388c:	10800044 	addi	r2,r2,1
 4003890:	e0bffd15 	stw	r2,-12(fp)
 4003894:	e0fffd17 	ldw	r3,-12(fp)
 4003898:	e0bfff17 	ldw	r2,-4(fp)
 400389c:	18bfcc16 	blt	r3,r2,40037d0 <printHistory+0x30>
		printf("Step %i : (%c, %c, %f, %f) \n", i, TRVL[i].dir, TRVL[i].move, TRVL[i].count, TRVL[i].angle);
	}

}
 40038a0:	e037883a 	mov	sp,fp
 40038a4:	dfc00517 	ldw	ra,20(sp)
 40038a8:	df000417 	ldw	fp,16(sp)
 40038ac:	dcc00317 	ldw	r19,12(sp)
 40038b0:	dc800217 	ldw	r18,8(sp)
 40038b4:	dc400117 	ldw	r17,4(sp)
 40038b8:	dc000017 	ldw	r16,0(sp)
 40038bc:	dec00604 	addi	sp,sp,24
 40038c0:	f800283a 	ret

040038c4 <evalHistory>:

bool evalHistory(move_obj *TRVL, int TRVL_INDEX, char dir, double distance){
 40038c4:	defff604 	addi	sp,sp,-40
 40038c8:	dfc00815 	stw	ra,32(sp)
 40038cc:	df000715 	stw	fp,28(sp)
 40038d0:	df000704 	addi	fp,sp,28
 40038d4:	e13ffd15 	stw	r4,-12(fp)
 40038d8:	e17ffe15 	stw	r5,-8(fp)
 40038dc:	e1c00215 	stw	r7,8(fp)
 40038e0:	e1bfff05 	stb	r6,-4(fp)
	bool reachedGoal = FALSE;
 40038e4:	e03ffc15 	stw	zero,-16(fp)
	double dist = 0;
 40038e8:	e03ffa15 	stw	zero,-24(fp)
 40038ec:	e03ffb15 	stw	zero,-20(fp)
	int i;

	for (i = 0; i <= TRVL_INDEX; i++){
 40038f0:	e03ff915 	stw	zero,-28(fp)
 40038f4:	00005406 	br	4003a48 <evalHistory+0x184>
		if (TRVL[i].dir == 'N'){
 40038f8:	e13ff917 	ldw	r4,-28(fp)
 40038fc:	01400504 	movi	r5,20
 4003900:	4008ff80 	call	4008ff8 <__mulsi3>
 4003904:	1007883a 	mov	r3,r2
 4003908:	e0bffd17 	ldw	r2,-12(fp)
 400390c:	1885883a 	add	r2,r3,r2
 4003910:	10800043 	ldbu	r2,1(r2)
 4003914:	10803fcc 	andi	r2,r2,255
 4003918:	1080201c 	xori	r2,r2,128
 400391c:	10bfe004 	addi	r2,r2,-128
 4003920:	10801398 	cmpnei	r2,r2,78
 4003924:	1000121e 	bne	r2,zero,4003970 <evalHistory+0xac>
			dist += TRVL[i].count;
 4003928:	e13ff917 	ldw	r4,-28(fp)
 400392c:	01400504 	movi	r5,20
 4003930:	4008ff80 	call	4008ff8 <__mulsi3>
 4003934:	1007883a 	mov	r3,r2
 4003938:	e0bffd17 	ldw	r2,-12(fp)
 400393c:	1889883a 	add	r4,r3,r2
 4003940:	20800117 	ldw	r2,4(r4)
 4003944:	20c00217 	ldw	r3,8(r4)
 4003948:	e13ffa17 	ldw	r4,-24(fp)
 400394c:	e17ffb17 	ldw	r5,-20(fp)
 4003950:	100d883a 	mov	r6,r2
 4003954:	180f883a 	mov	r7,r3
 4003958:	40083800 	call	4008380 <__adddf3>
 400395c:	1009883a 	mov	r4,r2
 4003960:	180b883a 	mov	r5,r3
 4003964:	e13ffa15 	stw	r4,-24(fp)
 4003968:	e17ffb15 	stw	r5,-20(fp)
 400396c:	00001d06 	br	40039e4 <evalHistory+0x120>
		}else if (TRVL[i].dir == 'S'){
 4003970:	e13ff917 	ldw	r4,-28(fp)
 4003974:	01400504 	movi	r5,20
 4003978:	4008ff80 	call	4008ff8 <__mulsi3>
 400397c:	1007883a 	mov	r3,r2
 4003980:	e0bffd17 	ldw	r2,-12(fp)
 4003984:	1885883a 	add	r2,r3,r2
 4003988:	10800043 	ldbu	r2,1(r2)
 400398c:	10803fcc 	andi	r2,r2,255
 4003990:	1080201c 	xori	r2,r2,128
 4003994:	10bfe004 	addi	r2,r2,-128
 4003998:	108014d8 	cmpnei	r2,r2,83
 400399c:	1000111e 	bne	r2,zero,40039e4 <evalHistory+0x120>
			dist -= TRVL[i].count;
 40039a0:	e13ff917 	ldw	r4,-28(fp)
 40039a4:	01400504 	movi	r5,20
 40039a8:	4008ff80 	call	4008ff8 <__mulsi3>
 40039ac:	1007883a 	mov	r3,r2
 40039b0:	e0bffd17 	ldw	r2,-12(fp)
 40039b4:	1889883a 	add	r4,r3,r2
 40039b8:	20800117 	ldw	r2,4(r4)
 40039bc:	20c00217 	ldw	r3,8(r4)
 40039c0:	e13ffa17 	ldw	r4,-24(fp)
 40039c4:	e17ffb17 	ldw	r5,-20(fp)
 40039c8:	100d883a 	mov	r6,r2
 40039cc:	180f883a 	mov	r7,r3
 40039d0:	40083000 	call	4008300 <__subdf3>
 40039d4:	1009883a 	mov	r4,r2
 40039d8:	180b883a 	mov	r5,r3
 40039dc:	e13ffa15 	stw	r4,-24(fp)
 40039e0:	e17ffb15 	stw	r5,-20(fp)
		}

		if (dist >= COURSE_LENGTH - (0.05 * COURSE_LENGTH)){ //do approximation
 40039e4:	e13ffa17 	ldw	r4,-24(fp)
 40039e8:	e17ffb17 	ldw	r5,-20(fp)
 40039ec:	000d883a 	mov	r6,zero
 40039f0:	01d034f4 	movhi	r7,16595
 40039f4:	39e38004 	addi	r7,r7,-29184
 40039f8:	4008a980 	call	4008a98 <__gedf2>
 40039fc:	1004403a 	cmpge	r2,r2,zero
 4003a00:	1000011e 	bne	r2,zero,4003a08 <evalHistory+0x144>
 4003a04:	00000806 	br	4003a28 <evalHistory+0x164>
			reachedGoal = TRUE;
 4003a08:	00800044 	movi	r2,1
 4003a0c:	e0bffc15 	stw	r2,-16(fp)
			printf("Reached end of course! %f \n", dist);
 4003a10:	010100b4 	movhi	r4,1026
 4003a14:	210fcd04 	addi	r4,r4,16180
 4003a18:	e17ffa17 	ldw	r5,-24(fp)
 4003a1c:	e1bffb17 	ldw	r6,-20(fp)
 4003a20:	400a15c0 	call	400a15c <printf>

			break;
 4003a24:	00000b06 	br	4003a54 <evalHistory+0x190>
		}else{
			printf("Current course progress is: %f \n", dist);
 4003a28:	010100b4 	movhi	r4,1026
 4003a2c:	210fd404 	addi	r4,r4,16208
 4003a30:	e17ffa17 	ldw	r5,-24(fp)
 4003a34:	e1bffb17 	ldw	r6,-20(fp)
 4003a38:	400a15c0 	call	400a15c <printf>
bool evalHistory(move_obj *TRVL, int TRVL_INDEX, char dir, double distance){
	bool reachedGoal = FALSE;
	double dist = 0;
	int i;

	for (i = 0; i <= TRVL_INDEX; i++){
 4003a3c:	e0bff917 	ldw	r2,-28(fp)
 4003a40:	10800044 	addi	r2,r2,1
 4003a44:	e0bff915 	stw	r2,-28(fp)
 4003a48:	e0fff917 	ldw	r3,-28(fp)
 4003a4c:	e0bffe17 	ldw	r2,-8(fp)
 4003a50:	10ffa90e 	bge	r2,r3,40038f8 <evalHistory+0x34>
		}else{
			printf("Current course progress is: %f \n", dist);
		}
	}

	return reachedGoal;
 4003a54:	e0bffc17 	ldw	r2,-16(fp)
}
 4003a58:	e037883a 	mov	sp,fp
 4003a5c:	dfc00117 	ldw	ra,4(sp)
 4003a60:	df000017 	ldw	fp,0(sp)
 4003a64:	dec00304 	addi	sp,sp,12
 4003a68:	f800283a 	ret

04003a6c <executeHistory>:

void executeHistory(move_obj *TRVL, int TRVL_INDEX){
 4003a6c:	defff604 	addi	sp,sp,-40
 4003a70:	dfc00915 	stw	ra,36(sp)
 4003a74:	df000815 	stw	fp,32(sp)
 4003a78:	df000804 	addi	fp,sp,32
 4003a7c:	e13ffd15 	stw	r4,-12(fp)
 4003a80:	e17ffe15 	stw	r5,-8(fp)
	int i;

	printf("Go back in history to origin! \n");
 4003a84:	010100b4 	movhi	r4,1026
 4003a88:	210fdd04 	addi	r4,r4,16244
 4003a8c:	400a2740 	call	400a274 <puts>
	M_allStop();
 4003a90:	4002dc40 	call	4002dc4 <M_allStop>
	//motorReverse();
	turn180();
 4003a94:	4002f2c0 	call	4002f2c <turn180>
	OSTimeDlyHMSM(0, 0, 2, 0);
 4003a98:	0009883a 	mov	r4,zero
 4003a9c:	000b883a 	mov	r5,zero
 4003aa0:	01800084 	movi	r6,2
 4003aa4:	000f883a 	mov	r7,zero
 4003aa8:	401fe300 	call	401fe30 <OSTimeDlyHMSM>

	for (i = 0; i < TRVL_INDEX; i++){
 4003aac:	e03ffc15 	stw	zero,-16(fp)
 4003ab0:	00003e06 	br	4003bac <executeHistory+0x140>
		switch (TRVL[i].move){
 4003ab4:	e13ffc17 	ldw	r4,-16(fp)
 4003ab8:	01400504 	movi	r5,20
 4003abc:	4008ff80 	call	4008ff8 <__mulsi3>
 4003ac0:	1007883a 	mov	r3,r2
 4003ac4:	e0bffd17 	ldw	r2,-12(fp)
 4003ac8:	1885883a 	add	r2,r3,r2
 4003acc:	10800003 	ldbu	r2,0(r2)
 4003ad0:	10803fcc 	andi	r2,r2,255
 4003ad4:	1080201c 	xori	r2,r2,128
 4003ad8:	10bfe004 	addi	r2,r2,-128
 4003adc:	e0bfff15 	stw	r2,-4(fp)
 4003ae0:	e0ffff17 	ldw	r3,-4(fp)
 4003ae4:	18801320 	cmpeqi	r2,r3,76
 4003ae8:	10001f1e 	bne	r2,zero,4003b68 <executeHistory+0xfc>
 4003aec:	e0ffff17 	ldw	r3,-4(fp)
 4003af0:	188014a0 	cmpeqi	r2,r3,82
 4003af4:	10001e1e 	bne	r2,zero,4003b70 <executeHistory+0x104>
 4003af8:	e0ffff17 	ldw	r3,-4(fp)
 4003afc:	188011a0 	cmpeqi	r2,r3,70
 4003b00:	1000011e 	bne	r2,zero,4003b08 <executeHistory+0x9c>
 4003b04:	00001b06 	br	4003b74 <executeHistory+0x108>
		case 'F':
			motorGoForward(0, 2, 0.859, 0.9, TRVL[i].count);
 4003b08:	e13ffc17 	ldw	r4,-16(fp)
 4003b0c:	01400504 	movi	r5,20
 4003b10:	4008ff80 	call	4008ff8 <__mulsi3>
 4003b14:	1007883a 	mov	r3,r2
 4003b18:	e0bffd17 	ldw	r2,-12(fp)
 4003b1c:	1889883a 	add	r4,r3,r2
 4003b20:	20800117 	ldw	r2,4(r4)
 4003b24:	20c00217 	ldw	r3,8(r4)
 4003b28:	01333374 	movhi	r4,52429
 4003b2c:	21333344 	addi	r4,r4,-13107
 4003b30:	d9000015 	stw	r4,0(sp)
 4003b34:	010ffb74 	movhi	r4,16365
 4003b38:	21333304 	addi	r4,r4,-13108
 4003b3c:	d9000115 	stw	r4,4(sp)
 4003b40:	d8800215 	stw	r2,8(sp)
 4003b44:	d8c00315 	stw	r3,12(sp)
 4003b48:	0009883a 	mov	r4,zero
 4003b4c:	01400084 	movi	r5,2
 4003b50:	01a45a34 	movhi	r6,37224
 4003b54:	319cac04 	addi	r6,r6,29360
 4003b58:	01cffaf4 	movhi	r7,16363
 4003b5c:	39df3b44 	addi	r7,r7,31981
 4003b60:	40033b40 	call	40033b4 <motorGoForward>
			break;
 4003b64:	00000306 	br	4003b74 <executeHistory+0x108>
		case 'L':
			turnRight();
 4003b68:	4002ee80 	call	4002ee8 <turnRight>
			break;
 4003b6c:	00000106 	br	4003b74 <executeHistory+0x108>
		case 'R':
			turnLeft();
 4003b70:	4002ea00 	call	4002ea0 <turnLeft>
			break;
		default:
			break;
		}
		//printf("Step %i : (%c, %c, %f, %f) \n", i, TRVL[i].dir, TRVL[i].move, TRVL[i].count, TRVL[i].angle);
		OSTimeDlyHMSM(0, 0, 1, 0);
 4003b74:	0009883a 	mov	r4,zero
 4003b78:	000b883a 	mov	r5,zero
 4003b7c:	01800044 	movi	r6,1
 4003b80:	000f883a 	mov	r7,zero
 4003b84:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
		M_allStop();
 4003b88:	4002dc40 	call	4002dc4 <M_allStop>
		OSTimeDlyHMSM(0, 0, 1, 0);
 4003b8c:	0009883a 	mov	r4,zero
 4003b90:	000b883a 	mov	r5,zero
 4003b94:	01800044 	movi	r6,1
 4003b98:	000f883a 	mov	r7,zero
 4003b9c:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	M_allStop();
	//motorReverse();
	turn180();
	OSTimeDlyHMSM(0, 0, 2, 0);

	for (i = 0; i < TRVL_INDEX; i++){
 4003ba0:	e0bffc17 	ldw	r2,-16(fp)
 4003ba4:	10800044 	addi	r2,r2,1
 4003ba8:	e0bffc15 	stw	r2,-16(fp)
 4003bac:	e0fffc17 	ldw	r3,-16(fp)
 4003bb0:	e0bffe17 	ldw	r2,-8(fp)
 4003bb4:	18bfbf16 	blt	r3,r2,4003ab4 <executeHistory+0x48>
		OSTimeDlyHMSM(0, 0, 1, 0);
		M_allStop();
		OSTimeDlyHMSM(0, 0, 1, 0);
	}

	printf("Done! \n");
 4003bb8:	010100b4 	movhi	r4,1026
 4003bbc:	210fe504 	addi	r4,r4,16276
 4003bc0:	400a2740 	call	400a274 <puts>

}
 4003bc4:	e037883a 	mov	sp,fp
 4003bc8:	dfc00117 	ldw	ra,4(sp)
 4003bcc:	df000017 	ldw	fp,0(sp)
 4003bd0:	dec00204 	addi	sp,sp,8
 4003bd4:	f800283a 	ret

04003bd8 <newDir>:

char newDir(char oldDir, char move){
 4003bd8:	defff704 	addi	sp,sp,-36
 4003bdc:	dfc00815 	stw	ra,32(sp)
 4003be0:	df000715 	stw	fp,28(sp)
 4003be4:	df000704 	addi	fp,sp,28
 4003be8:	e13ffa05 	stb	r4,-24(fp)
 4003bec:	e17ffb05 	stb	r5,-20(fp)
	char x = 'N';
 4003bf0:	00801384 	movi	r2,78
 4003bf4:	e0bff905 	stb	r2,-28(fp)

	if (oldDir == 'N'){
 4003bf8:	e0bffa07 	ldb	r2,-24(fp)
 4003bfc:	10801398 	cmpnei	r2,r2,78
 4003c00:	10001f1e 	bne	r2,zero,4003c80 <newDir+0xa8>
		switch (move){
 4003c04:	e0bffb07 	ldb	r2,-20(fp)
 4003c08:	e0bfff15 	stw	r2,-4(fp)
 4003c0c:	e0ffff17 	ldw	r3,-4(fp)
 4003c10:	188011a0 	cmpeqi	r2,r3,70
 4003c14:	10000e1e 	bne	r2,zero,4003c50 <newDir+0x78>
 4003c18:	e0ffff17 	ldw	r3,-4(fp)
 4003c1c:	188011c8 	cmpgei	r2,r3,71
 4003c20:	1000041e 	bne	r2,zero,4003c34 <newDir+0x5c>
 4003c24:	e0ffff17 	ldw	r3,-4(fp)
 4003c28:	188010a0 	cmpeqi	r2,r3,66
 4003c2c:	1000111e 	bne	r2,zero,4003c74 <newDir+0x9c>
 4003c30:	00007c06 	br	4003e24 <newDir+0x24c>
 4003c34:	e0ffff17 	ldw	r3,-4(fp)
 4003c38:	18801320 	cmpeqi	r2,r3,76
 4003c3c:	1000071e 	bne	r2,zero,4003c5c <newDir+0x84>
 4003c40:	e0ffff17 	ldw	r3,-4(fp)
 4003c44:	188014a0 	cmpeqi	r2,r3,82
 4003c48:	1000071e 	bne	r2,zero,4003c68 <newDir+0x90>
 4003c4c:	00007506 	br	4003e24 <newDir+0x24c>
			case 'F':
				x = 'N';
 4003c50:	00801384 	movi	r2,78
 4003c54:	e0bff905 	stb	r2,-28(fp)
				break;
 4003c58:	00007206 	br	4003e24 <newDir+0x24c>
			case 'L':
				x = 'W';
 4003c5c:	008015c4 	movi	r2,87
 4003c60:	e0bff905 	stb	r2,-28(fp)
				break;
 4003c64:	00006f06 	br	4003e24 <newDir+0x24c>
			case 'R':
				x = 'E';
 4003c68:	00801144 	movi	r2,69
 4003c6c:	e0bff905 	stb	r2,-28(fp)
				break;
 4003c70:	00006c06 	br	4003e24 <newDir+0x24c>
			case 'B':
				x = 'S';
 4003c74:	008014c4 	movi	r2,83
 4003c78:	e0bff905 	stb	r2,-28(fp)
 4003c7c:	00006906 	br	4003e24 <newDir+0x24c>
				break;
			default:
				break;
		}
	}else if (oldDir == 'W'){
 4003c80:	e0bffa07 	ldb	r2,-24(fp)
 4003c84:	108015d8 	cmpnei	r2,r2,87
 4003c88:	10001f1e 	bne	r2,zero,4003d08 <newDir+0x130>
		switch (move){
 4003c8c:	e0bffb07 	ldb	r2,-20(fp)
 4003c90:	e0bffe15 	stw	r2,-8(fp)
 4003c94:	e0fffe17 	ldw	r3,-8(fp)
 4003c98:	188011a0 	cmpeqi	r2,r3,70
 4003c9c:	10000e1e 	bne	r2,zero,4003cd8 <newDir+0x100>
 4003ca0:	e0fffe17 	ldw	r3,-8(fp)
 4003ca4:	188011c8 	cmpgei	r2,r3,71
 4003ca8:	1000041e 	bne	r2,zero,4003cbc <newDir+0xe4>
 4003cac:	e0fffe17 	ldw	r3,-8(fp)
 4003cb0:	188010a0 	cmpeqi	r2,r3,66
 4003cb4:	1000111e 	bne	r2,zero,4003cfc <newDir+0x124>
 4003cb8:	00005a06 	br	4003e24 <newDir+0x24c>
 4003cbc:	e0fffe17 	ldw	r3,-8(fp)
 4003cc0:	18801320 	cmpeqi	r2,r3,76
 4003cc4:	1000071e 	bne	r2,zero,4003ce4 <newDir+0x10c>
 4003cc8:	e0fffe17 	ldw	r3,-8(fp)
 4003ccc:	188014a0 	cmpeqi	r2,r3,82
 4003cd0:	1000071e 	bne	r2,zero,4003cf0 <newDir+0x118>
 4003cd4:	00005306 	br	4003e24 <newDir+0x24c>
			case 'F':
				x = 'W';
 4003cd8:	008015c4 	movi	r2,87
 4003cdc:	e0bff905 	stb	r2,-28(fp)
				break;
 4003ce0:	00005006 	br	4003e24 <newDir+0x24c>
			case 'L':
				x = 'S';
 4003ce4:	008014c4 	movi	r2,83
 4003ce8:	e0bff905 	stb	r2,-28(fp)
				break;
 4003cec:	00004d06 	br	4003e24 <newDir+0x24c>
			case 'R':
				x = 'N';
 4003cf0:	00801384 	movi	r2,78
 4003cf4:	e0bff905 	stb	r2,-28(fp)
				break;
 4003cf8:	00004a06 	br	4003e24 <newDir+0x24c>
			case 'B':
				x = 'E';
 4003cfc:	00801144 	movi	r2,69
 4003d00:	e0bff905 	stb	r2,-28(fp)
 4003d04:	00004706 	br	4003e24 <newDir+0x24c>
				break;
			default:
				break;
		}
	}else if (oldDir == 'E'){
 4003d08:	e0bffa07 	ldb	r2,-24(fp)
 4003d0c:	10801158 	cmpnei	r2,r2,69
 4003d10:	10001f1e 	bne	r2,zero,4003d90 <newDir+0x1b8>
		switch (move){
 4003d14:	e0bffb07 	ldb	r2,-20(fp)
 4003d18:	e0bffd15 	stw	r2,-12(fp)
 4003d1c:	e0fffd17 	ldw	r3,-12(fp)
 4003d20:	188011a0 	cmpeqi	r2,r3,70
 4003d24:	10000e1e 	bne	r2,zero,4003d60 <newDir+0x188>
 4003d28:	e0fffd17 	ldw	r3,-12(fp)
 4003d2c:	188011c8 	cmpgei	r2,r3,71
 4003d30:	1000041e 	bne	r2,zero,4003d44 <newDir+0x16c>
 4003d34:	e0fffd17 	ldw	r3,-12(fp)
 4003d38:	188010a0 	cmpeqi	r2,r3,66
 4003d3c:	1000111e 	bne	r2,zero,4003d84 <newDir+0x1ac>
 4003d40:	00003806 	br	4003e24 <newDir+0x24c>
 4003d44:	e0fffd17 	ldw	r3,-12(fp)
 4003d48:	18801320 	cmpeqi	r2,r3,76
 4003d4c:	1000071e 	bne	r2,zero,4003d6c <newDir+0x194>
 4003d50:	e0fffd17 	ldw	r3,-12(fp)
 4003d54:	188014a0 	cmpeqi	r2,r3,82
 4003d58:	1000071e 	bne	r2,zero,4003d78 <newDir+0x1a0>
 4003d5c:	00003106 	br	4003e24 <newDir+0x24c>
			case 'F':
				x = 'E';
 4003d60:	00801144 	movi	r2,69
 4003d64:	e0bff905 	stb	r2,-28(fp)
				break;
 4003d68:	00002e06 	br	4003e24 <newDir+0x24c>
			case 'L':
				x = 'N';
 4003d6c:	00801384 	movi	r2,78
 4003d70:	e0bff905 	stb	r2,-28(fp)
				break;
 4003d74:	00002b06 	br	4003e24 <newDir+0x24c>
			case 'R':
				x = 'S';
 4003d78:	008014c4 	movi	r2,83
 4003d7c:	e0bff905 	stb	r2,-28(fp)
				break;
 4003d80:	00002806 	br	4003e24 <newDir+0x24c>
			case 'B':
				x = 'W';
 4003d84:	008015c4 	movi	r2,87
 4003d88:	e0bff905 	stb	r2,-28(fp)
 4003d8c:	00002506 	br	4003e24 <newDir+0x24c>
				break;
			default:
				break;
		}
	}else if (oldDir == 'S'){
 4003d90:	e0bffa07 	ldb	r2,-24(fp)
 4003d94:	108014d8 	cmpnei	r2,r2,83
 4003d98:	10001f1e 	bne	r2,zero,4003e18 <newDir+0x240>
		switch (move){
 4003d9c:	e0bffb07 	ldb	r2,-20(fp)
 4003da0:	e0bffc15 	stw	r2,-16(fp)
 4003da4:	e0fffc17 	ldw	r3,-16(fp)
 4003da8:	188011a0 	cmpeqi	r2,r3,70
 4003dac:	10000e1e 	bne	r2,zero,4003de8 <newDir+0x210>
 4003db0:	e0fffc17 	ldw	r3,-16(fp)
 4003db4:	188011c8 	cmpgei	r2,r3,71
 4003db8:	1000041e 	bne	r2,zero,4003dcc <newDir+0x1f4>
 4003dbc:	e0fffc17 	ldw	r3,-16(fp)
 4003dc0:	188010a0 	cmpeqi	r2,r3,66
 4003dc4:	1000111e 	bne	r2,zero,4003e0c <newDir+0x234>
 4003dc8:	00001606 	br	4003e24 <newDir+0x24c>
 4003dcc:	e0fffc17 	ldw	r3,-16(fp)
 4003dd0:	18801320 	cmpeqi	r2,r3,76
 4003dd4:	1000071e 	bne	r2,zero,4003df4 <newDir+0x21c>
 4003dd8:	e0fffc17 	ldw	r3,-16(fp)
 4003ddc:	188014a0 	cmpeqi	r2,r3,82
 4003de0:	1000071e 	bne	r2,zero,4003e00 <newDir+0x228>
 4003de4:	00000f06 	br	4003e24 <newDir+0x24c>
			case 'F':
				x = 'S';
 4003de8:	008014c4 	movi	r2,83
 4003dec:	e0bff905 	stb	r2,-28(fp)
				break;
 4003df0:	00000c06 	br	4003e24 <newDir+0x24c>
			case 'L':
				x = 'E';
 4003df4:	00801144 	movi	r2,69
 4003df8:	e0bff905 	stb	r2,-28(fp)
				break;
 4003dfc:	00000906 	br	4003e24 <newDir+0x24c>
			case 'R':
				x = 'W';
 4003e00:	008015c4 	movi	r2,87
 4003e04:	e0bff905 	stb	r2,-28(fp)
				break;
 4003e08:	00000606 	br	4003e24 <newDir+0x24c>
			case 'B':
				x = 'N';
 4003e0c:	00801384 	movi	r2,78
 4003e10:	e0bff905 	stb	r2,-28(fp)
 4003e14:	00000306 	br	4003e24 <newDir+0x24c>
				break;
			default:
				break;
		}
	}else{
		printf("Error!!!! \n");
 4003e18:	010100b4 	movhi	r4,1026
 4003e1c:	210fe704 	addi	r4,r4,16284
 4003e20:	400a2740 	call	400a274 <puts>
	}

	return x;
 4003e24:	e0bff907 	ldb	r2,-28(fp)
}
 4003e28:	e037883a 	mov	sp,fp
 4003e2c:	dfc00117 	ldw	ra,4(sp)
 4003e30:	df000017 	ldw	fp,0(sp)
 4003e34:	dec00204 	addi	sp,sp,8
 4003e38:	f800283a 	ret

04003e3c <oppositeDir>:

char oppositeDir(char dir){
 4003e3c:	defffd04 	addi	sp,sp,-12
 4003e40:	df000215 	stw	fp,8(sp)
 4003e44:	df000204 	addi	fp,sp,8
 4003e48:	e13fff05 	stb	r4,-4(fp)
	char x;

	return x;
 4003e4c:	e0bffe07 	ldb	r2,-8(fp)
}
 4003e50:	e037883a 	mov	sp,fp
 4003e54:	df000017 	ldw	fp,0(sp)
 4003e58:	dec00104 	addi	sp,sp,4
 4003e5c:	f800283a 	ret

04003e60 <returnHbridgeIn>:

alt_u32 returnHbridgeIn(int id){
 4003e60:	defffc04 	addi	sp,sp,-16
 4003e64:	df000315 	stw	fp,12(sp)
 4003e68:	df000304 	addi	fp,sp,12
 4003e6c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 retval = 0;
 4003e70:	e03ffd15 	stw	zero,-12(fp)

	switch(id){
 4003e74:	e0bffe17 	ldw	r2,-8(fp)
 4003e78:	e0bfff15 	stw	r2,-4(fp)
 4003e7c:	e0ffff17 	ldw	r3,-4(fp)
 4003e80:	18800060 	cmpeqi	r2,r3,1
 4003e84:	1000111e 	bne	r2,zero,4003ecc <returnHbridgeIn+0x6c>
 4003e88:	e0ffff17 	ldw	r3,-4(fp)
 4003e8c:	18800088 	cmpgei	r2,r3,2
 4003e90:	1000041e 	bne	r2,zero,4003ea4 <returnHbridgeIn+0x44>
 4003e94:	e0ffff17 	ldw	r3,-4(fp)
 4003e98:	1805003a 	cmpeq	r2,r3,zero
 4003e9c:	1000081e 	bne	r2,zero,4003ec0 <returnHbridgeIn+0x60>
 4003ea0:	00001206 	br	4003eec <returnHbridgeIn+0x8c>
 4003ea4:	e0ffff17 	ldw	r3,-4(fp)
 4003ea8:	188000a0 	cmpeqi	r2,r3,2
 4003eac:	10000a1e 	bne	r2,zero,4003ed8 <returnHbridgeIn+0x78>
 4003eb0:	e0ffff17 	ldw	r3,-4(fp)
 4003eb4:	188000e0 	cmpeqi	r2,r3,3
 4003eb8:	10000a1e 	bne	r2,zero,4003ee4 <returnHbridgeIn+0x84>
 4003ebc:	00000b06 	br	4003eec <returnHbridgeIn+0x8c>
		case 0:
			retval = PWM_0_BASE;
 4003ec0:	00802004 	movi	r2,128
 4003ec4:	e0bffd15 	stw	r2,-12(fp)
			break;
 4003ec8:	00000806 	br	4003eec <returnHbridgeIn+0x8c>
		case 1:
			retval = PWM_1_BASE;
 4003ecc:	00801e04 	movi	r2,120
 4003ed0:	e0bffd15 	stw	r2,-12(fp)
			break;
 4003ed4:	00000506 	br	4003eec <returnHbridgeIn+0x8c>
		case 2:
			retval = PWM_2_BASE;
 4003ed8:	00801c04 	movi	r2,112
 4003edc:	e0bffd15 	stw	r2,-12(fp)
			break;
 4003ee0:	00000206 	br	4003eec <returnHbridgeIn+0x8c>
		case 3:
			retval = PWM_3_BASE;
 4003ee4:	00801a04 	movi	r2,104
 4003ee8:	e0bffd15 	stw	r2,-12(fp)
			break;
		default:
			break;
	}

	return retval;
 4003eec:	e0bffd17 	ldw	r2,-12(fp)
}
 4003ef0:	e037883a 	mov	sp,fp
 4003ef4:	df000017 	ldw	fp,0(sp)
 4003ef8:	dec00104 	addi	sp,sp,4
 4003efc:	f800283a 	ret

04003f00 <SPI_Init>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 4003f00:	defffe04 	addi	sp,sp,-8
 4003f04:	df000115 	stw	fp,4(sp)
 4003f08:	df000104 	addi	fp,sp,4
 4003f0c:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 4003f10:	e0bfff17 	ldw	r2,-4(fp)
 4003f14:	10800104 	addi	r2,r2,4
 4003f18:	10000035 	stwio	zero,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 4003f1c:	e0bfff17 	ldw	r2,-4(fp)
 4003f20:	10800104 	addi	r2,r2,4
 4003f24:	1007883a 	mov	r3,r2
 4003f28:	00800104 	movi	r2,4
 4003f2c:	18800035 	stwio	r2,0(r3)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 4003f30:	e0bfff17 	ldw	r2,-4(fp)
 4003f34:	10800104 	addi	r2,r2,4
 4003f38:	10000035 	stwio	zero,0(r2)
   
}
 4003f3c:	e037883a 	mov	sp,fp
 4003f40:	df000017 	ldw	fp,0(sp)
 4003f44:	dec00104 	addi	sp,sp,4
 4003f48:	f800283a 	ret

04003f4c <SPI_MultipleWrite>:


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 4003f4c:	defff504 	addi	sp,sp,-44
 4003f50:	dfc00a15 	stw	ra,40(sp)
 4003f54:	df000915 	stw	fp,36(sp)
 4003f58:	df000904 	addi	fp,sp,36
 4003f5c:	e13ffb15 	stw	r4,-20(fp)
 4003f60:	e1bffd15 	stw	r6,-12(fp)
 4003f64:	e17ffc05 	stb	r5,-16(fp)
 4003f68:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 4003f6c:	00801904 	movi	r2,100
 4003f70:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 4003f74:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 4003f78:	e0bffb17 	ldw	r2,-20(fp)
 4003f7c:	10800104 	addi	r2,r2,4
 4003f80:	10000035 	stwio	zero,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 4003f84:	e0bffb17 	ldw	r2,-20(fp)
 4003f88:	10800204 	addi	r2,r2,8
 4003f8c:	e0fffc03 	ldbu	r3,-16(fp)
 4003f90:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 4003f94:	e03ff715 	stw	zero,-36(fp)
 4003f98:	00000c06 	br	4003fcc <SPI_MultipleWrite+0x80>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 4003f9c:	e13ffb17 	ldw	r4,-20(fp)
 4003fa0:	e0bff717 	ldw	r2,-36(fp)
 4003fa4:	1007883a 	mov	r3,r2
 4003fa8:	e0bffd17 	ldw	r2,-12(fp)
 4003fac:	1885883a 	add	r2,r3,r2
 4003fb0:	10800003 	ldbu	r2,0(r2)
 4003fb4:	10c03fcc 	andi	r3,r2,255
 4003fb8:	2005883a 	mov	r2,r4
 4003fbc:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 4003fc0:	e0bff717 	ldw	r2,-36(fp)
 4003fc4:	10800044 	addi	r2,r2,1
 4003fc8:	e0bff715 	stw	r2,-36(fp)
 4003fcc:	e0fffe03 	ldbu	r3,-8(fp)
 4003fd0:	e0bff717 	ldw	r2,-36(fp)
 4003fd4:	10fff116 	blt	r2,r3,4003f9c <SPI_MultipleWrite+0x50>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 4003fd8:	e0bffb17 	ldw	r2,-20(fp)
 4003fdc:	10800104 	addi	r2,r2,4
 4003fe0:	1007883a 	mov	r3,r2
 4003fe4:	00800044 	movi	r2,1
 4003fe8:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 4003fec:	01000284 	movi	r4,10
 4003ff0:	4017a280 	call	4017a28 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 4003ff4:	e0bffb17 	ldw	r2,-20(fp)
 4003ff8:	10800104 	addi	r2,r2,4
 4003ffc:	10800037 	ldwio	r2,0(r2)
 4004000:	e0bffa05 	stb	r2,-24(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 4004004:	e0bffa03 	ldbu	r2,-24(fp)
 4004008:	1080004c 	andi	r2,r2,1
 400400c:	1004c03a 	cmpne	r2,r2,zero
 4004010:	10000a1e 	bne	r2,zero,400403c <SPI_MultipleWrite+0xf0>
 4004014:	e0fff817 	ldw	r3,-32(fp)
 4004018:	e0bff917 	ldw	r2,-28(fp)
 400401c:	1884803a 	cmplt	r2,r3,r2
 4004020:	1007883a 	mov	r3,r2
 4004024:	e0bff817 	ldw	r2,-32(fp)
 4004028:	10800044 	addi	r2,r2,1
 400402c:	e0bff815 	stw	r2,-32(fp)
 4004030:	18803fcc 	andi	r2,r3,255
 4004034:	1004c03a 	cmpne	r2,r2,zero
 4004038:	103fee1e 	bne	r2,zero,4003ff4 <SPI_MultipleWrite+0xa8>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 400403c:	e0bffb17 	ldw	r2,-20(fp)
 4004040:	10800104 	addi	r2,r2,4
 4004044:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 4004048:	e0bffa03 	ldbu	r2,-24(fp)
 400404c:	1080004c 	andi	r2,r2,1
 4004050:	10803fcc 	andi	r2,r2,255
 4004054:	1005003a 	cmpeq	r2,r2,zero
 4004058:	1000031e 	bne	r2,zero,4004068 <SPI_MultipleWrite+0x11c>
        return TRUE;
 400405c:	00800044 	movi	r2,1
 4004060:	e0bfff15 	stw	r2,-4(fp)
 4004064:	00000106 	br	400406c <SPI_MultipleWrite+0x120>
    
    return FALSE;
 4004068:	e03fff15 	stw	zero,-4(fp)
 400406c:	e0bfff17 	ldw	r2,-4(fp)
}
 4004070:	e037883a 	mov	sp,fp
 4004074:	dfc00117 	ldw	ra,4(sp)
 4004078:	df000017 	ldw	fp,0(sp)
 400407c:	dec00204 	addi	sp,sp,8
 4004080:	f800283a 	ret

04004084 <SPI_Write>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 4004084:	defffb04 	addi	sp,sp,-20
 4004088:	dfc00415 	stw	ra,16(sp)
 400408c:	df000315 	stw	fp,12(sp)
 4004090:	df000304 	addi	fp,sp,12
 4004094:	e13ffd15 	stw	r4,-12(fp)
 4004098:	e17ffe05 	stb	r5,-8(fp)
 400409c:	e1bfff05 	stb	r6,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 40040a0:	e17ffe03 	ldbu	r5,-8(fp)
 40040a4:	e1bfff04 	addi	r6,fp,-4
 40040a8:	e13ffd17 	ldw	r4,-12(fp)
 40040ac:	01c00044 	movi	r7,1
 40040b0:	4003f4c0 	call	4003f4c <SPI_MultipleWrite>
}    
 40040b4:	e037883a 	mov	sp,fp
 40040b8:	dfc00117 	ldw	ra,4(sp)
 40040bc:	df000017 	ldw	fp,0(sp)
 40040c0:	dec00204 	addi	sp,sp,8
 40040c4:	f800283a 	ret

040040c8 <SPI_MultipleRead>:

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 40040c8:	defff504 	addi	sp,sp,-44
 40040cc:	dfc00a15 	stw	ra,40(sp)
 40040d0:	df000915 	stw	fp,36(sp)
 40040d4:	df000904 	addi	fp,sp,36
 40040d8:	e13ffb15 	stw	r4,-20(fp)
 40040dc:	e1bffd15 	stw	r6,-12(fp)
 40040e0:	e17ffc05 	stb	r5,-16(fp)
 40040e4:	e1fffe05 	stb	r7,-8(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 40040e8:	00801904 	movi	r2,100
 40040ec:	e0bff915 	stw	r2,-28(fp)
    int nTryCnt = 0;
 40040f0:	e03ff815 	stw	zero,-32(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 40040f4:	e0bffb17 	ldw	r2,-20(fp)
 40040f8:	10800104 	addi	r2,r2,4
 40040fc:	1007883a 	mov	r3,r2
 4004100:	00800084 	movi	r2,2
 4004104:	18800035 	stwio	r2,0(r3)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 4004108:	e0bffb17 	ldw	r2,-20(fp)
 400410c:	10800204 	addi	r2,r2,8
 4004110:	e0fffc03 	ldbu	r3,-16(fp)
 4004114:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 4004118:	e0bffb17 	ldw	r2,-20(fp)
 400411c:	11000304 	addi	r4,r2,12
 4004120:	e0bffe03 	ldbu	r2,-8(fp)
 4004124:	10ffffc4 	addi	r3,r2,-1
 4004128:	2005883a 	mov	r2,r4
 400412c:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 4004130:	e0bffb17 	ldw	r2,-20(fp)
 4004134:	10800104 	addi	r2,r2,4
 4004138:	1007883a 	mov	r3,r2
 400413c:	008000c4 	movi	r2,3
 4004140:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 4004144:	01000284 	movi	r4,10
 4004148:	4017a280 	call	4017a28 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 400414c:	e0bffb17 	ldw	r2,-20(fp)
 4004150:	10800104 	addi	r2,r2,4
 4004154:	10800037 	ldwio	r2,0(r2)
 4004158:	e0bffa45 	stb	r2,-23(fp)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
 400415c:	e0bffa43 	ldbu	r2,-23(fp)
 4004160:	1080004c 	andi	r2,r2,1
 4004164:	1004c03a 	cmpne	r2,r2,zero
 4004168:	10000a1e 	bne	r2,zero,4004194 <SPI_MultipleRead+0xcc>
 400416c:	e0fff817 	ldw	r3,-32(fp)
 4004170:	e0bff917 	ldw	r2,-28(fp)
 4004174:	1884803a 	cmplt	r2,r3,r2
 4004178:	1007883a 	mov	r3,r2
 400417c:	e0bff817 	ldw	r2,-32(fp)
 4004180:	10800044 	addi	r2,r2,1
 4004184:	e0bff815 	stw	r2,-32(fp)
 4004188:	18803fcc 	andi	r2,r3,255
 400418c:	1004c03a 	cmpne	r2,r2,zero
 4004190:	103fee1e 	bne	r2,zero,400414c <SPI_MultipleRead+0x84>
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 4004194:	e0bffb17 	ldw	r2,-20(fp)
 4004198:	10800104 	addi	r2,r2,4
 400419c:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 40041a0:	e0bffa43 	ldbu	r2,-23(fp)
 40041a4:	1080004c 	andi	r2,r2,1
 40041a8:	10803fcc 	andi	r2,r2,255
 40041ac:	1005003a 	cmpeq	r2,r2,zero
 40041b0:	1000141e 	bne	r2,zero,4004204 <SPI_MultipleRead+0x13c>
        for(i=0;i<nByteNum;i++){
 40041b4:	e03ff715 	stw	zero,-36(fp)
 40041b8:	00000c06 	br	40041ec <SPI_MultipleRead+0x124>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 40041bc:	e0bffb17 	ldw	r2,-20(fp)
 40041c0:	10800037 	ldwio	r2,0(r2)
 40041c4:	e0bffa05 	stb	r2,-24(fp)
            szBuf[i] = Value8;
 40041c8:	e0bff717 	ldw	r2,-36(fp)
 40041cc:	1007883a 	mov	r3,r2
 40041d0:	e0bffd17 	ldw	r2,-12(fp)
 40041d4:	1887883a 	add	r3,r3,r2
 40041d8:	e0bffa03 	ldbu	r2,-24(fp)
 40041dc:	18800005 	stb	r2,0(r3)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 40041e0:	e0bff717 	ldw	r2,-36(fp)
 40041e4:	10800044 	addi	r2,r2,1
 40041e8:	e0bff715 	stw	r2,-36(fp)
 40041ec:	e0fffe03 	ldbu	r3,-8(fp)
 40041f0:	e0bff717 	ldw	r2,-36(fp)
 40041f4:	10fff116 	blt	r2,r3,40041bc <SPI_MultipleRead+0xf4>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 40041f8:	00800044 	movi	r2,1
 40041fc:	e0bfff15 	stw	r2,-4(fp)
 4004200:	00000106 	br	4004208 <SPI_MultipleRead+0x140>
    }        
    return FALSE;
 4004204:	e03fff15 	stw	zero,-4(fp)
 4004208:	e0bfff17 	ldw	r2,-4(fp)
}
 400420c:	e037883a 	mov	sp,fp
 4004210:	dfc00117 	ldw	ra,4(sp)
 4004214:	df000017 	ldw	fp,0(sp)
 4004218:	dec00204 	addi	sp,sp,8
 400421c:	f800283a 	ret

04004220 <SPI_Read>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 4004220:	defffb04 	addi	sp,sp,-20
 4004224:	dfc00415 	stw	ra,16(sp)
 4004228:	df000315 	stw	fp,12(sp)
 400422c:	df000304 	addi	fp,sp,12
 4004230:	e13ffd15 	stw	r4,-12(fp)
 4004234:	e1bfff15 	stw	r6,-4(fp)
 4004238:	e17ffe05 	stb	r5,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 400423c:	e17ffe03 	ldbu	r5,-8(fp)
 4004240:	e13ffd17 	ldw	r4,-12(fp)
 4004244:	e1bfff17 	ldw	r6,-4(fp)
 4004248:	01c00044 	movi	r7,1
 400424c:	40040c80 	call	40040c8 <SPI_MultipleRead>
}
 4004250:	e037883a 	mov	sp,fp
 4004254:	dfc00117 	ldw	ra,4(sp)
 4004258:	df000017 	ldw	fp,0(sp)
 400425c:	dec00204 	addi	sp,sp,8
 4004260:	f800283a 	ret

04004264 <EnableKeyInterrupt>:
        IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
    }
}
*/

void EnableKeyInterrupt(void){
 4004264:	defffe04 	addi	sp,sp,-8
 4004268:	df000115 	stw	fp,4(sp)
 400426c:	df000104 	addi	fp,sp,4
    int error;

    // enable interrupt, 2-keybutton
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE,0x03);
 4004270:	00818034 	movhi	r2,1536
 4004274:	10801604 	addi	r2,r2,88
 4004278:	00c000c4 	movi	r3,3
 400427c:	10c00035 	stwio	r3,0(r2)

    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 4004280:	00818034 	movhi	r2,1536
 4004284:	10801704 	addi	r2,r2,92
 4004288:	10000035 	stwio	zero,0(r2)
    //

    bKeyPressed = FALSE;
 400428c:	d0203315 	stw	zero,-32564(gp)
    // register interrupt isr
    //error = alt_irq_register (KEY_IRQ, 0, KEY_ISR);
    //if (error)
    //    printf("Failed to register interrupt\r\n");
}
 4004290:	e037883a 	mov	sp,fp
 4004294:	df000017 	ldw	fp,0(sp)
 4004298:	dec00104 	addi	sp,sp,4
 400429c:	f800283a 	ret

040042a0 <ShowMenu>:


void ShowMenu(void){
 40042a0:	defffc04 	addi	sp,sp,-16
 40042a4:	dfc00315 	stw	ra,12(sp)
 40042a8:	df000215 	stw	fp,8(sp)
 40042ac:	df000204 	addi	fp,sp,8
    int i,num;
    printf("---------------------------------\r\n");
 40042b0:	010100b4 	movhi	r4,1026
 40042b4:	210fea04 	addi	r4,r4,16296
 40042b8:	400a2740 	call	400a274 <puts>
    printf("- Selection function:\r\n");
 40042bc:	010100b4 	movhi	r4,1026
 40042c0:	210ff304 	addi	r4,r4,16332
 40042c4:	400a2740 	call	400a274 <puts>
    num = sizeof(szTestList)/sizeof(szTestList[0]);
 40042c8:	008001c4 	movi	r2,7
 40042cc:	e0bffe15 	stw	r2,-8(fp)
    for(i=0;i<num;i++){
 40042d0:	e03fff15 	stw	zero,-4(fp)
 40042d4:	00000e06 	br	4004310 <ShowMenu+0x70>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
 40042d8:	e13fff17 	ldw	r4,-4(fp)
 40042dc:	01401204 	movi	r5,72
 40042e0:	4008ff80 	call	4008ff8 <__mulsi3>
 40042e4:	10c00104 	addi	r3,r2,4
 40042e8:	008100b4 	movhi	r2,1026
 40042ec:	10930404 	addi	r2,r2,19472
 40042f0:	188d883a 	add	r6,r3,r2
 40042f4:	010100b4 	movhi	r4,1026
 40042f8:	210ff904 	addi	r4,r4,16356
 40042fc:	e17fff17 	ldw	r5,-4(fp)
 4004300:	400a15c0 	call	400a15c <printf>
void ShowMenu(void){
    int i,num;
    printf("---------------------------------\r\n");
    printf("- Selection function:\r\n");
    num = sizeof(szTestList)/sizeof(szTestList[0]);
    for(i=0;i<num;i++){
 4004304:	e0bfff17 	ldw	r2,-4(fp)
 4004308:	10800044 	addi	r2,r2,1
 400430c:	e0bfff15 	stw	r2,-4(fp)
 4004310:	e0ffff17 	ldw	r3,-4(fp)
 4004314:	e0bffe17 	ldw	r2,-8(fp)
 4004318:	18bfef16 	blt	r3,r2,40042d8 <ShowMenu+0x38>
        printf("- [%d]%s\r\n", i, szTestList[i].szName);
    }
    printf("---------------------------------\r\n");
 400431c:	010100b4 	movhi	r4,1026
 4004320:	210fea04 	addi	r4,r4,16296
 4004324:	400a2740 	call	400a274 <puts>
}
 4004328:	e037883a 	mov	sp,fp
 400432c:	dfc00117 	ldw	ra,4(sp)
 4004330:	df000017 	ldw	fp,0(sp)
 4004334:	dec00204 	addi	sp,sp,8
 4004338:	f800283a 	ret

0400433c <DEMO_PWM>:


void DEMO_PWM(void){
 400433c:	defffc04 	addi	sp,sp,-16
 4004340:	dfc00315 	stw	ra,12(sp)
 4004344:	df000215 	stw	fp,8(sp)
 4004348:	df000204 	addi	fp,sp,8
	double duty = 0;
 400434c:	e03ffe15 	stw	zero,-8(fp)
 4004350:	e03fff15 	stw	zero,-4(fp)
	duty = 0.75;
 4004354:	e03ffe15 	stw	zero,-8(fp)
 4004358:	008ffa34 	movhi	r2,16360
 400435c:	e0bfff15 	stw	r2,-4(fp)

	//reset PWM pins
	IOWR(PWM_0_BASE, 0, 0);
 4004360:	00802004 	movi	r2,128
 4004364:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_1_BASE, 0, 0);
 4004368:	00801e04 	movi	r2,120
 400436c:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 4004370:	00801c04 	movi	r2,112
 4004374:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_3_BASE, 0, 0);
 4004378:	00801a04 	movi	r2,104
 400437c:	10000035 	stwio	zero,0(r2)

	while (1)
	{
		//IOWR(PWM_0_BASE, 0, 1 * 31250);

		IOWR(PWM_0_BASE, 0, 0.25 * 31250);
 4004380:	00c02004 	movi	r3,128
 4004384:	0087a104 	movi	r2,7812
 4004388:	18800035 	stwio	r2,0(r3)
		usleep(2000000); //sleep 2 seconds
 400438c:	010007f4 	movhi	r4,31
 4004390:	21212004 	addi	r4,r4,-31616
 4004394:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 0.50 * 31250);
 4004398:	00c02004 	movi	r3,128
 400439c:	008f4244 	movi	r2,15625
 40043a0:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 40043a4:	01000bb4 	movhi	r4,46
 40043a8:	2131b004 	addi	r4,r4,-14656
 40043ac:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 40043b0:	00c02004 	movi	r3,128
 40043b4:	0096e344 	movi	r2,23437
 40043b8:	18800035 	stwio	r2,0(r3)
		usleep(4000000);
 40043bc:	01000f74 	movhi	r4,61
 40043c0:	21024004 	addi	r4,r4,2304
 40043c4:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 1 * 31250);
 40043c8:	00c02004 	movi	r3,128
 40043cc:	009e8484 	movi	r2,31250
 40043d0:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 40043d4:	01000bb4 	movhi	r4,46
 40043d8:	2131b004 	addi	r4,r4,-14656
 40043dc:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 40043e0:	00c02004 	movi	r3,128
 40043e4:	0096e344 	movi	r2,23437
 40043e8:	18800035 	stwio	r2,0(r3)
		usleep(4000000);
 40043ec:	01000f74 	movhi	r4,61
 40043f0:	21024004 	addi	r4,r4,2304
 40043f4:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 0.5 * 31250);
 40043f8:	00c02004 	movi	r3,128
 40043fc:	008f4244 	movi	r2,15625
 4004400:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 4004404:	01000bb4 	movhi	r4,46
 4004408:	2131b004 	addi	r4,r4,-14656
 400440c:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_0_BASE, 0, 0); //STOP
 4004410:	00802004 	movi	r2,128
 4004414:	10000035 	stwio	zero,0(r2)
		usleep(3000000);
 4004418:	01000bb4 	movhi	r4,46
 400441c:	2131b004 	addi	r4,r4,-14656
 4004420:	4017a280 	call	4017a28 <usleep>

		//reverse direction
		IOWR(PWM_1_BASE, 0, 0.65 * 31250);
 4004424:	00c01e04 	movi	r3,120
 4004428:	0093d604 	movi	r2,20312
 400442c:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 4004430:	01000bb4 	movhi	r4,46
 4004434:	2131b004 	addi	r4,r4,-14656
 4004438:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_1_BASE, 0, 0.9 * 31250);
 400443c:	00c01e04 	movi	r3,120
 4004440:	009b7744 	movi	r2,28125
 4004444:	18800035 	stwio	r2,0(r3)
		usleep(8000000);
 4004448:	01001eb4 	movhi	r4,122
 400444c:	21048004 	addi	r4,r4,4608
 4004450:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_1_BASE, 0, 0.7 * 31250);
 4004454:	00c01e04 	movi	r3,120
 4004458:	00955cc4 	movi	r2,21875
 400445c:	18800035 	stwio	r2,0(r3)
		usleep(3000000);
 4004460:	01000bb4 	movhi	r4,46
 4004464:	2131b004 	addi	r4,r4,-14656
 4004468:	4017a280 	call	4017a28 <usleep>
		IOWR(PWM_1_BASE, 0, 0);
 400446c:	00801e04 	movi	r2,120
 4004470:	10000035 	stwio	zero,0(r2)
		usleep(2000000);
 4004474:	010007f4 	movhi	r4,31
 4004478:	21212004 	addi	r4,r4,-31616
 400447c:	4017a280 	call	4017a28 <usleep>
		//IOWR(PWM_2_BASE, 0, 0.75 * 31250);
        //usleep(2000000);
	}
 4004480:	003fbf06 	br	4004380 <DEMO_PWM+0x44>

04004484 <DEMO_ENCODERS>:
}


void DEMO_ENCODERS(void){
 4004484:	defff204 	addi	sp,sp,-56
 4004488:	dfc00d15 	stw	ra,52(sp)
 400448c:	df000c15 	stw	fp,48(sp)
 4004490:	df000c04 	addi	fp,sp,48
	//read from pins like for PWM
	double encode_0_a, encode_1_a; //encode_b;
	double counts_0_new, counts_0_old;
	double counts_1_new, counts_1_old;
	counts_0_old = 0;
 4004494:	e03ff815 	stw	zero,-32(fp)
 4004498:	e03ff915 	stw	zero,-28(fp)
	counts_1_old = 0;
 400449c:	e03ff415 	stw	zero,-48(fp)
 40044a0:	e03ff515 	stw	zero,-44(fp)

	/* Init motor */
	IOWR(PWM_0_BASE, 0, 0);
 40044a4:	00802004 	movi	r2,128
 40044a8:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_1_BASE, 0, 0);
 40044ac:	00801e04 	movi	r2,120
 40044b0:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 40044b4:	00801c04 	movi	r2,112
 40044b8:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_3_BASE, 0, 0);
 40044bc:	00801a04 	movi	r2,104
 40044c0:	10000035 	stwio	zero,0(r2)

	IOWR(PWM_0_BASE, 0, 1 * 31250);
 40044c4:	00c02004 	movi	r3,128
 40044c8:	009e8484 	movi	r2,31250
 40044cc:	18800035 	stwio	r2,0(r3)
	So 64 counts => 32 counts per revolution
*/
	while (1)
	{
		//1st motor
		counts_0_new = ((double) IORD(ENCODER_0A_BASE, 0)) / 32;
 40044d0:	00801004 	movi	r2,64
 40044d4:	11000037 	ldwio	r4,0(r2)
 40044d8:	4008c300 	call	4008c30 <__floatsidf>
 40044dc:	100b883a 	mov	r5,r2
 40044e0:	180d883a 	mov	r6,r3
 40044e4:	2809883a 	mov	r4,r5
 40044e8:	300b883a 	mov	r5,r6
 40044ec:	000d883a 	mov	r6,zero
 40044f0:	01d01034 	movhi	r7,16448
 40044f4:	40087b80 	call	40087b8 <__divdf3>
 40044f8:	1009883a 	mov	r4,r2
 40044fc:	180b883a 	mov	r5,r3
 4004500:	e13ffa15 	stw	r4,-24(fp)
 4004504:	e17ffb15 	stw	r5,-20(fp)
		encode_0_a = (counts_0_new-counts_0_old);
 4004508:	e13ffa17 	ldw	r4,-24(fp)
 400450c:	e17ffb17 	ldw	r5,-20(fp)
 4004510:	e1bff817 	ldw	r6,-32(fp)
 4004514:	e1fff917 	ldw	r7,-28(fp)
 4004518:	40083000 	call	4008300 <__subdf3>
 400451c:	1009883a 	mov	r4,r2
 4004520:	180b883a 	mov	r5,r3
 4004524:	e13ffe15 	stw	r4,-8(fp)
 4004528:	e17fff15 	stw	r5,-4(fp)
		//encode_b = (((double) IORD(ENCODER_0B_BASE, 0)) / 32) - encode_b;
		if (encode_0_a < 0){
 400452c:	e13ffe17 	ldw	r4,-8(fp)
 4004530:	e17fff17 	ldw	r5,-4(fp)
 4004534:	000d883a 	mov	r6,zero
 4004538:	000f883a 	mov	r7,zero
 400453c:	4008b200 	call	4008b20 <__ltdf2>
 4004540:	1004803a 	cmplt	r2,r2,zero
 4004544:	1000011e 	bne	r2,zero,400454c <DEMO_ENCODERS+0xc8>
 4004548:	00000406 	br	400455c <DEMO_ENCODERS+0xd8>
			encode_0_a = counts_0_new;
 400454c:	e0bffa17 	ldw	r2,-24(fp)
 4004550:	e0bffe15 	stw	r2,-8(fp)
 4004554:	e0bffb17 	ldw	r2,-20(fp)
 4004558:	e0bfff15 	stw	r2,-4(fp)
		}
		counts_0_old = counts_0_new;
 400455c:	e0bffa17 	ldw	r2,-24(fp)
 4004560:	e0bff815 	stw	r2,-32(fp)
 4004564:	e0bffb17 	ldw	r2,-20(fp)
 4004568:	e0bff915 	stw	r2,-28(fp)

		//2nd motor
		counts_1_new = ((double) IORD(ENCODER_1A_BASE, 0)) / 32;
 400456c:	00800804 	movi	r2,32
 4004570:	11000037 	ldwio	r4,0(r2)
 4004574:	4008c300 	call	4008c30 <__floatsidf>
 4004578:	100b883a 	mov	r5,r2
 400457c:	180d883a 	mov	r6,r3
 4004580:	2809883a 	mov	r4,r5
 4004584:	300b883a 	mov	r5,r6
 4004588:	000d883a 	mov	r6,zero
 400458c:	01d01034 	movhi	r7,16448
 4004590:	40087b80 	call	40087b8 <__divdf3>
 4004594:	1009883a 	mov	r4,r2
 4004598:	180b883a 	mov	r5,r3
 400459c:	e13ff615 	stw	r4,-40(fp)
 40045a0:	e17ff715 	stw	r5,-36(fp)
		encode_1_a = (counts_1_new-counts_1_old);
 40045a4:	e13ff617 	ldw	r4,-40(fp)
 40045a8:	e17ff717 	ldw	r5,-36(fp)
 40045ac:	e1bff417 	ldw	r6,-48(fp)
 40045b0:	e1fff517 	ldw	r7,-44(fp)
 40045b4:	40083000 	call	4008300 <__subdf3>
 40045b8:	1009883a 	mov	r4,r2
 40045bc:	180b883a 	mov	r5,r3
 40045c0:	e13ffc15 	stw	r4,-16(fp)
 40045c4:	e17ffd15 	stw	r5,-12(fp)
		if (encode_1_a < 0){
 40045c8:	e13ffc17 	ldw	r4,-16(fp)
 40045cc:	e17ffd17 	ldw	r5,-12(fp)
 40045d0:	000d883a 	mov	r6,zero
 40045d4:	000f883a 	mov	r7,zero
 40045d8:	4008b200 	call	4008b20 <__ltdf2>
 40045dc:	1004803a 	cmplt	r2,r2,zero
 40045e0:	1000011e 	bne	r2,zero,40045e8 <DEMO_ENCODERS+0x164>
 40045e4:	00000406 	br	40045f8 <DEMO_ENCODERS+0x174>
			encode_1_a = counts_1_new;
 40045e8:	e0bff617 	ldw	r2,-40(fp)
 40045ec:	e0bffc15 	stw	r2,-16(fp)
 40045f0:	e0bff717 	ldw	r2,-36(fp)
 40045f4:	e0bffd15 	stw	r2,-12(fp)
		}
		counts_1_old = counts_1_new;
 40045f8:	e0bff617 	ldw	r2,-40(fp)
 40045fc:	e0bff415 	stw	r2,-48(fp)
 4004600:	e0bff717 	ldw	r2,-36(fp)
 4004604:	e0bff515 	stw	r2,-44(fp)

		printf("Motor 0 encoder A value is :( %f ) \n", encode_0_a);
 4004608:	010100b4 	movhi	r4,1026
 400460c:	210ffc04 	addi	r4,r4,16368
 4004610:	e17ffe17 	ldw	r5,-8(fp)
 4004614:	e1bfff17 	ldw	r6,-4(fp)
 4004618:	400a15c0 	call	400a15c <printf>
		printf("Motor 0 revolutions per second :( %f ) \n", encode_0_a / 64);
 400461c:	e13ffe17 	ldw	r4,-8(fp)
 4004620:	e17fff17 	ldw	r5,-4(fp)
 4004624:	000d883a 	mov	r6,zero
 4004628:	01d01434 	movhi	r7,16464
 400462c:	40087b80 	call	40087b8 <__divdf3>
 4004630:	1009883a 	mov	r4,r2
 4004634:	180b883a 	mov	r5,r3
 4004638:	2005883a 	mov	r2,r4
 400463c:	2807883a 	mov	r3,r5
 4004640:	010100b4 	movhi	r4,1026
 4004644:	21100604 	addi	r4,r4,16408
 4004648:	100b883a 	mov	r5,r2
 400464c:	180d883a 	mov	r6,r3
 4004650:	400a15c0 	call	400a15c <printf>
		printf("Motor 1 encoder A value is :( %f ) \n", encode_1_a);
 4004654:	010100b4 	movhi	r4,1026
 4004658:	21101104 	addi	r4,r4,16452
 400465c:	e17ffc17 	ldw	r5,-16(fp)
 4004660:	e1bffd17 	ldw	r6,-12(fp)
 4004664:	400a15c0 	call	400a15c <printf>
		printf("Motor 1 revolutions per second :( %f ) \n", encode_1_a / 64);
 4004668:	e13ffc17 	ldw	r4,-16(fp)
 400466c:	e17ffd17 	ldw	r5,-12(fp)
 4004670:	000d883a 	mov	r6,zero
 4004674:	01d01434 	movhi	r7,16464
 4004678:	40087b80 	call	40087b8 <__divdf3>
 400467c:	1009883a 	mov	r4,r2
 4004680:	180b883a 	mov	r5,r3
 4004684:	2005883a 	mov	r2,r4
 4004688:	2807883a 	mov	r3,r5
 400468c:	010100b4 	movhi	r4,1026
 4004690:	21101b04 	addi	r4,r4,16492
 4004694:	100b883a 	mov	r5,r2
 4004698:	180d883a 	mov	r6,r3
 400469c:	400a15c0 	call	400a15c <printf>

		//printf("Current encoder B value is :( %f ) \n", encode_b / 32);
		usleep(1000000);
 40046a0:	010003f4 	movhi	r4,15
 40046a4:	21109004 	addi	r4,r4,16960
 40046a8:	4017a280 	call	4017a28 <usleep>
	}
 40046ac:	003f8806 	br	40044d0 <DEMO_ENCODERS+0x4c>

040046b0 <DEMO_COMPASS>:
}

void DEMO_COMPASS(void){
 40046b0:	defffc04 	addi	sp,sp,-16
 40046b4:	dfc00315 	stw	ra,12(sp)
 40046b8:	df000215 	stw	fp,8(sp)
 40046bc:	df000204 	addi	fp,sp,8
	 * 	 = 100 = 15Hz output rate
	 * 	 default is 00010000
	 * */

	//I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, 0x3C, LSM303_CRA_REG_M, 0x00);
	  if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, 0x3C, LSM303_MR_REG_M, 0x00)){
 40046c0:	d8000015 	stw	zero,0(sp)
 40046c4:	01004034 	movhi	r4,256
 40046c8:	01404034 	movhi	r5,256
 40046cc:	29400404 	addi	r5,r5,16
 40046d0:	01800f04 	movi	r6,60
 40046d4:	01c00084 	movi	r7,2
 40046d8:	40001f40 	call	40001f4 <I2C_Write>
 40046dc:	1005003a 	cmpeq	r2,r2,zero
 40046e0:	1000041e 	bne	r2,zero,40046f4 <DEMO_COMPASS+0x44>
		  printf("Initialize success!\n");
 40046e4:	010100b4 	movhi	r4,1026
 40046e8:	21102604 	addi	r4,r4,16536
 40046ec:	400a2740 	call	400a274 <puts>
 40046f0:	00000306 	br	4004700 <DEMO_COMPASS+0x50>
	  }
	  else{
	      printf("Failed to enable magnetometer\r\n");
 40046f4:	010100b4 	movhi	r4,1026
 40046f8:	21102b04 	addi	r4,r4,16556
 40046fc:	400a2740 	call	400a274 <puts>
	  }

	  alt_u8 *data;
	  if (I2C_Read(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, 0x3C, LSM303_OUT_X_H_M - 1, data)){
 4004700:	e0bfff17 	ldw	r2,-4(fp)
 4004704:	d8800015 	stw	r2,0(sp)
 4004708:	01004034 	movhi	r4,256
 400470c:	01404034 	movhi	r5,256
 4004710:	29400404 	addi	r5,r5,16
 4004714:	01800f04 	movi	r6,60
 4004718:	01c00084 	movi	r7,2
 400471c:	40002f00 	call	40002f0 <I2C_Read>
 4004720:	1005003a 	cmpeq	r2,r2,zero
 4004724:	1000051e 	bne	r2,zero,400473c <DEMO_COMPASS+0x8c>
	  	 printf("Success! %02x \n", (int) &data);
 4004728:	e17fff04 	addi	r5,fp,-4
 400472c:	010100b4 	movhi	r4,1026
 4004730:	21103304 	addi	r4,r4,16588
 4004734:	400a15c0 	call	400a15c <printf>
 4004738:	00000306 	br	4004748 <DEMO_COMPASS+0x98>
	  }else{
	     printf("Failed to read magnetometer register\r\n");
 400473c:	010100b4 	movhi	r4,1026
 4004740:	21103704 	addi	r4,r4,16604
 4004744:	400a2740 	call	400a274 <puts>
	  }
}
 4004748:	e037883a 	mov	sp,fp
 400474c:	dfc00117 	ldw	ra,4(sp)
 4004750:	df000017 	ldw	fp,0(sp)
 4004754:	dec00204 	addi	sp,sp,8
 4004758:	f800283a 	ret

0400475c <DEMO_ACCELEROMETER>:

void DEMO_ACCELEROMETER(void){
 400475c:	deffff04 	addi	sp,sp,-4
 4004760:	df000015 	stw	fp,0(sp)
 4004764:	d839883a 	mov	fp,sp
    }

    if (!bSuccess)
        printf("Failed to access accelerometer\r\n");
*/
}
 4004768:	e037883a 	mov	sp,fp
 400476c:	df000017 	ldw	fp,0(sp)
 4004770:	dec00104 	addi	sp,sp,4
 4004774:	f800283a 	ret

04004778 <DEMO_ADC>:

void DEMO_ADC(void){
 4004778:	defffa04 	addi	sp,sp,-24
 400477c:	dfc00515 	stw	ra,20(sp)
 4004780:	df000415 	stw	fp,16(sp)
 4004784:	df000404 	addi	fp,sp,16
    int ch = 0, next_ch=0;
 4004788:	e03fff15 	stw	zero,-4(fp)
 400478c:	e03ffe15 	stw	zero,-8(fp)
    alt_u16 data16;
    float volt = 0;
 4004790:	e03ffc15 	stw	zero,-16(fp)

    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
 4004794:	010100b4 	movhi	r4,1026
 4004798:	21104104 	addi	r4,r4,16644
 400479c:	400a2740 	call	400a274 <puts>
    ADC_Read(next_ch);
 40047a0:	e0bffe17 	ldw	r2,-8(fp)
 40047a4:	11003fcc 	andi	r4,r2,255
 40047a8:	4001bd80 	call	4001bd8 <ADC_Read>
    while(!bKeyPressed){
 40047ac:	00003006 	br	4004870 <DEMO_ADC+0xf8>
        //next_ch++;
        //if (next_ch >= 8)
        //    next_ch = 0;
        data16 = ADC_Read(next_ch); // 12-bits resolution
 40047b0:	e0bffe17 	ldw	r2,-8(fp)
 40047b4:	11003fcc 	andi	r4,r2,255
 40047b8:	4001bd80 	call	4001bd8 <ADC_Read>
 40047bc:	e0bffd0d 	sth	r2,-12(fp)
        volt = (float)data16 * 3.3 / 4095.0;
 40047c0:	e13ffd0b 	ldhu	r4,-12(fp)
 40047c4:	4007e300 	call	4007e30 <__floatunsisf>
 40047c8:	1009883a 	mov	r4,r2
 40047cc:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40047d0:	100b883a 	mov	r5,r2
 40047d4:	180d883a 	mov	r6,r3
 40047d8:	2809883a 	mov	r4,r5
 40047dc:	300b883a 	mov	r5,r6
 40047e0:	019999b4 	movhi	r6,26214
 40047e4:	31999984 	addi	r6,r6,26214
 40047e8:	01d002b4 	movhi	r7,16394
 40047ec:	39d99984 	addi	r7,r7,26214
 40047f0:	40083f40 	call	40083f4 <__muldf3>
 40047f4:	1009883a 	mov	r4,r2
 40047f8:	180b883a 	mov	r5,r3
 40047fc:	2005883a 	mov	r2,r4
 4004800:	2807883a 	mov	r3,r5
 4004804:	1009883a 	mov	r4,r2
 4004808:	180b883a 	mov	r5,r3
 400480c:	000d883a 	mov	r6,zero
 4004810:	01d02c34 	movhi	r7,16560
 4004814:	39ff8004 	addi	r7,r7,-512
 4004818:	40087b80 	call	40087b8 <__divdf3>
 400481c:	1009883a 	mov	r4,r2
 4004820:	180b883a 	mov	r5,r3
 4004824:	2005883a 	mov	r2,r4
 4004828:	2807883a 	mov	r3,r5
 400482c:	1009883a 	mov	r4,r2
 4004830:	180b883a 	mov	r5,r3
 4004834:	4008e380 	call	4008e38 <__truncdfsf2>
 4004838:	e0bffc15 	stw	r2,-16(fp)
	    printf("CH%d=%.2f V\r\n", ch, volt);
 400483c:	e13ffc17 	ldw	r4,-16(fp)
 4004840:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4004844:	100f883a 	mov	r7,r2
 4004848:	1811883a 	mov	r8,r3
 400484c:	010100b4 	movhi	r4,1026
 4004850:	21105304 	addi	r4,r4,16716
 4004854:	e17fff17 	ldw	r5,-4(fp)
 4004858:	380d883a 	mov	r6,r7
 400485c:	400f883a 	mov	r7,r8
 4004860:	400a15c0 	call	400a15c <printf>
	    usleep(1000000);
 4004864:	010003f4 	movhi	r4,15
 4004868:	21109004 	addi	r4,r4,16960
 400486c:	4017a280 	call	4017a28 <usleep>
    alt_u16 data16;
    float volt = 0;

    printf("Monitor ADC Value. Press KEY0 or KEY1 to terminal the monitor process.\r\n");
    ADC_Read(next_ch);
    while(!bKeyPressed){
 4004870:	d0a03317 	ldw	r2,-32564(gp)
 4004874:	1005003a 	cmpeq	r2,r2,zero
 4004878:	103fcd1e 	bne	r2,zero,40047b0 <DEMO_ADC+0x38>
        volt = (float)data16 * 3.3 / 4095.0;
	    printf("CH%d=%.2f V\r\n", ch, volt);
	    usleep(1000000);
	    //ch = next_ch;
    }
}
 400487c:	e037883a 	mov	sp,fp
 4004880:	dfc00117 	ldw	ra,4(sp)
 4004884:	df000017 	ldw	fp,0(sp)
 4004888:	dec00204 	addi	sp,sp,8
 400488c:	f800283a 	ret

04004890 <mainalt2>:

int mainalt2(void)
{
 4004890:	defffb04 	addi	sp,sp,-20
 4004894:	dfc00415 	stw	ra,16(sp)
 4004898:	df000315 	stw	fp,12(sp)
 400489c:	dc000215 	stw	r16,8(sp)
 40048a0:	df000204 	addi	fp,sp,8
    int sel;
    int nNum;

    nNum = sizeof(szTestList)/sizeof(szTestList[0]);
 40048a4:	008001c4 	movi	r2,7
 40048a8:	e0bffe15 	stw	r2,-8(fp)
    printf("DE-Nano Demo\r\n");
 40048ac:	010100b4 	movhi	r4,1026
 40048b0:	21105704 	addi	r4,r4,16732
 40048b4:	400a2740 	call	400a274 <puts>

    while(1){
        ShowMenu();
 40048b8:	40042a00 	call	40042a0 <ShowMenu>
        printf("Select:");
 40048bc:	010100b4 	movhi	r4,1026
 40048c0:	21105b04 	addi	r4,r4,16748
 40048c4:	400a15c0 	call	400a15c <printf>
        scanf("%d", &sel);
 40048c8:	e17fff04 	addi	r5,fp,-4
 40048cc:	010100b4 	movhi	r4,1026
 40048d0:	21105d04 	addi	r4,r4,16756
 40048d4:	400a32c0 	call	400a32c <scanf>
        if (sel >= 0 && sel < nNum){
 40048d8:	e0bfff17 	ldw	r2,-4(fp)
 40048dc:	1004803a 	cmplt	r2,r2,zero
 40048e0:	1000181e 	bne	r2,zero,4004944 <mainalt2+0xb4>
 40048e4:	e0ffff17 	ldw	r3,-4(fp)
 40048e8:	e0bffe17 	ldw	r2,-8(fp)
 40048ec:	1880150e 	bge	r3,r2,4004944 <mainalt2+0xb4>
            bKeyPressed = FALSE;
 40048f0:	d0203315 	stw	zero,-32564(gp)
            printf("Demo %s\r\n",szTestList[sel].szName);
 40048f4:	e13fff17 	ldw	r4,-4(fp)
 40048f8:	01401204 	movi	r5,72
 40048fc:	4008ff80 	call	4008ff8 <__mulsi3>
 4004900:	10c00104 	addi	r3,r2,4
 4004904:	008100b4 	movhi	r2,1026
 4004908:	10930404 	addi	r2,r2,19472
 400490c:	188b883a 	add	r5,r3,r2
 4004910:	010100b4 	movhi	r4,1026
 4004914:	21105e04 	addi	r4,r4,16760
 4004918:	400a15c0 	call	400a15c <printf>
            szTestList[sel].Func();
 400491c:	e13fff17 	ldw	r4,-4(fp)
 4004920:	040100b4 	movhi	r16,1026
 4004924:	84130404 	addi	r16,r16,19472
 4004928:	01401204 	movi	r5,72
 400492c:	4008ff80 	call	4008ff8 <__mulsi3>
 4004930:	1405883a 	add	r2,r2,r16
 4004934:	10801104 	addi	r2,r2,68
 4004938:	10800017 	ldw	r2,0(r2)
 400493c:	103ee83a 	callr	r2

    while(1){
        ShowMenu();
        printf("Select:");
        scanf("%d", &sel);
        if (sel >= 0 && sel < nNum){
 4004940:	00000306 	br	4004950 <mainalt2+0xc0>
            bKeyPressed = FALSE;
            printf("Demo %s\r\n",szTestList[sel].szName);
            szTestList[sel].Func();
        }else{
            printf("Invalid Selection\r\n");
 4004944:	010100b4 	movhi	r4,1026
 4004948:	21106104 	addi	r4,r4,16772
 400494c:	400a2740 	call	400a274 <puts>
        }

        sel++;
 4004950:	e0bfff17 	ldw	r2,-4(fp)
 4004954:	10800044 	addi	r2,r2,1
 4004958:	e0bfff15 	stw	r2,-4(fp)
    }
 400495c:	003fd606 	br	40048b8 <mainalt2+0x28>

04004960 <DEMO_EEPROM>:

    return 0;
}


void DEMO_EEPROM(void){
 4004960:	defff504 	addi	sp,sp,-44
 4004964:	dfc00a15 	stw	ra,40(sp)
 4004968:	df000915 	stw	fp,36(sp)
 400496c:	df000904 	addi	fp,sp,36
    alt_u8 szBuf[16];
    int i,Num;
    const alt_u8 DeviceAddr = 0xA0;
 4004970:	00bfe804 	movi	r2,-96
 4004974:	e0bff945 	stb	r2,-27(fp)
    const alt_u8 ControlAddr = 00;
 4004978:	e03ff905 	stb	zero,-28(fp)

    // set clock as output
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);
 400497c:	00c18034 	movhi	r3,1536
 4004980:	18c00804 	addi	r3,r3,32
 4004984:	00800044 	movi	r2,1
 4004988:	18800035 	stwio	r2,0(r3)

    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
 400498c:	e0bff943 	ldbu	r2,-27(fp)
 4004990:	11803fcc 	andi	r6,r2,255
 4004994:	3180201c 	xori	r6,r6,128
 4004998:	31bfe004 	addi	r6,r6,-128
 400499c:	e1fff903 	ldbu	r7,-28(fp)
 40049a0:	e0bffc04 	addi	r2,fp,-16
 40049a4:	d8800015 	stw	r2,0(sp)
 40049a8:	00800404 	movi	r2,16
 40049ac:	d8800115 	stw	r2,4(sp)
 40049b0:	01004034 	movhi	r4,256
 40049b4:	21000804 	addi	r4,r4,32
 40049b8:	01404034 	movhi	r5,256
 40049bc:	29400c04 	addi	r5,r5,48
 40049c0:	40005040 	call	4000504 <I2C_MultipleRead>
 40049c4:	1005003a 	cmpeq	r2,r2,zero
 40049c8:	1000141e 	bne	r2,zero,4004a1c <DEMO_EEPROM+0xbc>
        Num = sizeof(szBuf)/sizeof(szBuf[0]);
 40049cc:	00800404 	movi	r2,16
 40049d0:	e0bffa15 	stw	r2,-24(fp)
        for(i=0;i<Num;i++){
 40049d4:	e03ffb15 	stw	zero,-20(fp)
 40049d8:	00000c06 	br	4004a0c <DEMO_EEPROM+0xac>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
 40049dc:	e0fffb17 	ldw	r3,-20(fp)
 40049e0:	e0bffc04 	addi	r2,fp,-16
 40049e4:	10c5883a 	add	r2,r2,r3
 40049e8:	10800003 	ldbu	r2,0(r2)
 40049ec:	11803fcc 	andi	r6,r2,255
 40049f0:	010100b4 	movhi	r4,1026
 40049f4:	21106604 	addi	r4,r4,16792
 40049f8:	e17ffb17 	ldw	r5,-20(fp)
 40049fc:	400a15c0 	call	400a15c <printf>
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    IOWR(SELECT_I2C_CLK_BASE, 0, 0x01);

    if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){
        Num = sizeof(szBuf)/sizeof(szBuf[0]);
        for(i=0;i<Num;i++){
 4004a00:	e0bffb17 	ldw	r2,-20(fp)
 4004a04:	10800044 	addi	r2,r2,1
 4004a08:	e0bffb15 	stw	r2,-20(fp)
 4004a0c:	e0fffb17 	ldw	r3,-20(fp)
 4004a10:	e0bffa17 	ldw	r2,-24(fp)
 4004a14:	18bff116 	blt	r3,r2,40049dc <DEMO_EEPROM+0x7c>
 4004a18:	00000306 	br	4004a28 <DEMO_EEPROM+0xc8>
            printf("Addr[%02d] = %02xh\r\n", i, szBuf[i]);
        }
    }else{
        printf("Failed to access EEPROM\r\n");
 4004a1c:	010100b4 	movhi	r4,1026
 4004a20:	21106c04 	addi	r4,r4,16816
 4004a24:	400a2740 	call	400a274 <puts>
    }
}
 4004a28:	e037883a 	mov	sp,fp
 4004a2c:	dfc00117 	ldw	ra,4(sp)
 4004a30:	df000017 	ldw	fp,0(sp)
 4004a34:	dec00204 	addi	sp,sp,8
 4004a38:	f800283a 	ret

04004a3c <DEMO_EPCS>:

void DEMO_EPCS(void){
 4004a3c:	defffb04 	addi	sp,sp,-20
 4004a40:	dfc00415 	stw	ra,16(sp)
 4004a44:	df000315 	stw	fp,12(sp)
 4004a48:	df000304 	addi	fp,sp,12
    alt_u32 MemSize;
    MemSize = Flash_Size(EPCS_NAME);
 4004a4c:	010100b4 	movhi	r4,1026
 4004a50:	21107304 	addi	r4,r4,16844
 4004a54:	400247c0 	call	400247c <Flash_Size>
 4004a58:	e0bffd15 	stw	r2,-12(fp)
    printf("EPCS Size:%d Bytes (%d MB)\r\n", (int)MemSize, (int)MemSize/1024/1024);
 4004a5c:	e0bffd17 	ldw	r2,-12(fp)
 4004a60:	e0bffe15 	stw	r2,-8(fp)
 4004a64:	e0bffd17 	ldw	r2,-12(fp)
 4004a68:	e0bfff15 	stw	r2,-4(fp)
 4004a6c:	e0ffff17 	ldw	r3,-4(fp)
 4004a70:	1804403a 	cmpge	r2,r3,zero
 4004a74:	1000051e 	bne	r2,zero,4004a8c <DEMO_EPCS+0x50>
 4004a78:	00800434 	movhi	r2,16
 4004a7c:	10bfffc4 	addi	r2,r2,-1
 4004a80:	e0ffff17 	ldw	r3,-4(fp)
 4004a84:	1887883a 	add	r3,r3,r2
 4004a88:	e0ffff15 	stw	r3,-4(fp)
 4004a8c:	e0ffff17 	ldw	r3,-4(fp)
 4004a90:	1805d53a 	srai	r2,r3,20
 4004a94:	100d883a 	mov	r6,r2
 4004a98:	010100b4 	movhi	r4,1026
 4004a9c:	21107604 	addi	r4,r4,16856
 4004aa0:	e17ffe17 	ldw	r5,-8(fp)
 4004aa4:	400a15c0 	call	400a15c <printf>

}
 4004aa8:	e037883a 	mov	sp,fp
 4004aac:	dfc00117 	ldw	ra,4(sp)
 4004ab0:	df000017 	ldw	fp,0(sp)
 4004ab4:	dec00204 	addi	sp,sp,8
 4004ab8:	f800283a 	ret

04004abc <GenerateTest>:
int oldRightOpening;



void GenerateTest()
{
 4004abc:	deffef04 	addi	sp,sp,-68
 4004ac0:	dfc01015 	stw	ra,64(sp)
 4004ac4:	df000f15 	stw	fp,60(sp)
 4004ac8:	df000f04 	addi	fp,sp,60
	double front, left, right;
	int angles, test;
	bug = 0;
 4004acc:	d0203815 	stw	zero,-32544(gp)
	counter = 0;
 4004ad0:	d0203915 	stw	zero,-32540(gp)
	int length = 200;
 4004ad4:	00803204 	movi	r2,200
 4004ad8:	e0bff315 	stw	r2,-52(fp)
	int a;
	int commandList[] = {LEFT,LEFT,RIGHT,RIGHT};
 4004adc:	00800044 	movi	r2,1
 4004ae0:	e0bffc15 	stw	r2,-16(fp)
 4004ae4:	00800044 	movi	r2,1
 4004ae8:	e0bffd15 	stw	r2,-12(fp)
 4004aec:	00800084 	movi	r2,2
 4004af0:	e0bffe15 	stw	r2,-8(fp)
 4004af4:	00800084 	movi	r2,2
 4004af8:	e0bfff15 	stw	r2,-4(fp)

	oldLeftOpening=CLOSED;
 4004afc:	d0203715 	stw	zero,-32548(gp)
	oldRightOpening=CLOSED;
 4004b00:	d0203415 	stw	zero,-32560(gp)
	for (a=0;a<sizeof(commandList)/sizeof(commandList[0]);a++)
 4004b04:	e03ff215 	stw	zero,-56(fp)
 4004b08:	00004506 	br	4004c20 <GenerateTest+0x164>
	{
	//GenerateForward(front,left,right,angles,test,100);

		if (a != 0) {
 4004b0c:	e0bff217 	ldw	r2,-56(fp)
 4004b10:	1005003a 	cmpeq	r2,r2,zero
 4004b14:	1000111e 	bne	r2,zero,4004b5c <GenerateTest+0xa0>
			if ( commandList[a - 1] == LEFT) {
 4004b18:	e0bff217 	ldw	r2,-56(fp)
 4004b1c:	10bfffc4 	addi	r2,r2,-1
 4004b20:	1085883a 	add	r2,r2,r2
 4004b24:	1085883a 	add	r2,r2,r2
 4004b28:	e0fff204 	addi	r3,fp,-56
 4004b2c:	10c5883a 	add	r2,r2,r3
 4004b30:	10800a04 	addi	r2,r2,40
 4004b34:	10800017 	ldw	r2,0(r2)
 4004b38:	10800058 	cmpnei	r2,r2,1
 4004b3c:	1000041e 	bne	r2,zero,4004b50 <GenerateTest+0x94>
				oldLeftOpening = OPEN;
 4004b40:	00800c84 	movi	r2,50
 4004b44:	d0a03715 	stw	r2,-32548(gp)
				oldRightOpening = CLOSED;
 4004b48:	d0203415 	stw	zero,-32560(gp)
 4004b4c:	00000306 	br	4004b5c <GenerateTest+0xa0>
			}  else{
				oldLeftOpening = CLOSED;
 4004b50:	d0203715 	stw	zero,-32548(gp)
				oldRightOpening = OPEN;
 4004b54:	00800c84 	movi	r2,50
 4004b58:	d0a03415 	stw	r2,-32560(gp)
			}
		}

		if(a+1!=sizeof(commandList)/sizeof(commandList[0])){
 4004b5c:	e0bff217 	ldw	r2,-56(fp)
 4004b60:	108000e0 	cmpeqi	r2,r2,3
 4004b64:	1000111e 	bne	r2,zero,4004bac <GenerateTest+0xf0>
			if(commandList[a+1]==LEFT)
 4004b68:	e0bff217 	ldw	r2,-56(fp)
 4004b6c:	10800044 	addi	r2,r2,1
 4004b70:	1085883a 	add	r2,r2,r2
 4004b74:	1085883a 	add	r2,r2,r2
 4004b78:	e0fff204 	addi	r3,fp,-56
 4004b7c:	10c5883a 	add	r2,r2,r3
 4004b80:	10800a04 	addi	r2,r2,40
 4004b84:	10800017 	ldw	r2,0(r2)
 4004b88:	10800058 	cmpnei	r2,r2,1
 4004b8c:	1000041e 	bne	r2,zero,4004ba0 <GenerateTest+0xe4>
			{

				newLeftOpening=OPEN;
 4004b90:	00800c84 	movi	r2,50
 4004b94:	d0a03515 	stw	r2,-32556(gp)
				newRightOpening=CLOSED;
 4004b98:	d0203615 	stw	zero,-32552(gp)
 4004b9c:	00000306 	br	4004bac <GenerateTest+0xf0>

			}
			else
			{

				newLeftOpening=CLOSED;
 4004ba0:	d0203515 	stw	zero,-32556(gp)
				newRightOpening=OPEN;
 4004ba4:	00800c84 	movi	r2,50
 4004ba8:	d0a03615 	stw	r2,-32552(gp)

			}
		}

	    if(commandList[a]==LEFT)
 4004bac:	e0bff217 	ldw	r2,-56(fp)
 4004bb0:	1085883a 	add	r2,r2,r2
 4004bb4:	1085883a 	add	r2,r2,r2
 4004bb8:	e0fff204 	addi	r3,fp,-56
 4004bbc:	10c5883a 	add	r2,r2,r3
 4004bc0:	10800a04 	addi	r2,r2,40
 4004bc4:	10800017 	ldw	r2,0(r2)
 4004bc8:	10800058 	cmpnei	r2,r2,1
 4004bcc:	1000091e 	bne	r2,zero,4004bf4 <GenerateTest+0x138>
	    {
	        printf("%d %d %d %d LEFT\n",oldLeftOpening,oldRightOpening,newLeftOpening,newRightOpening);
 4004bd0:	d1603717 	ldw	r5,-32548(gp)
 4004bd4:	d1a03417 	ldw	r6,-32560(gp)
 4004bd8:	d1e03517 	ldw	r7,-32556(gp)
 4004bdc:	d0a03617 	ldw	r2,-32552(gp)
 4004be0:	d8800015 	stw	r2,0(sp)
 4004be4:	010100b4 	movhi	r4,1026
 4004be8:	21107e04 	addi	r4,r4,16888
 4004bec:	400a15c0 	call	400a15c <printf>
 4004bf0:	00000806 	br	4004c14 <GenerateTest+0x158>
	        //GenerateLeft(front,left,right,angles,test,length,length);
	    }
	    else
	    {
	        printf("%d %d %d %d RIGHT\n",oldLeftOpening,oldRightOpening,newLeftOpening,newRightOpening);
 4004bf4:	d1603717 	ldw	r5,-32548(gp)
 4004bf8:	d1a03417 	ldw	r6,-32560(gp)
 4004bfc:	d1e03517 	ldw	r7,-32556(gp)
 4004c00:	d0a03617 	ldw	r2,-32552(gp)
 4004c04:	d8800015 	stw	r2,0(sp)
 4004c08:	010100b4 	movhi	r4,1026
 4004c0c:	21108304 	addi	r4,r4,16908
 4004c10:	400a15c0 	call	400a15c <printf>
	int a;
	int commandList[] = {LEFT,LEFT,RIGHT,RIGHT};

	oldLeftOpening=CLOSED;
	oldRightOpening=CLOSED;
	for (a=0;a<sizeof(commandList)/sizeof(commandList[0]);a++)
 4004c14:	e0bff217 	ldw	r2,-56(fp)
 4004c18:	10800044 	addi	r2,r2,1
 4004c1c:	e0bff215 	stw	r2,-56(fp)
 4004c20:	e0bff217 	ldw	r2,-56(fp)
 4004c24:	10800130 	cmpltui	r2,r2,4
 4004c28:	103fb81e 	bne	r2,zero,4004b0c <GenerateTest+0x50>
	        //GenerateRight(front,left,right,angles,test,length,length);
	    }
	}


}
 4004c2c:	e037883a 	mov	sp,fp
 4004c30:	dfc00117 	ldw	ra,4(sp)
 4004c34:	df000017 	ldw	fp,0(sp)
 4004c38:	dec00204 	addi	sp,sp,8
 4004c3c:	f800283a 	ret

04004c40 <GenerateForward>:


void GenerateForward(double *front,double *left, double *right, int *angles, int *test,int length)
{
 4004c40:	defff804 	addi	sp,sp,-32
 4004c44:	dfc00715 	stw	ra,28(sp)
 4004c48:	df000615 	stw	fp,24(sp)
 4004c4c:	dc000515 	stw	r16,20(sp)
 4004c50:	df000504 	addi	fp,sp,20
 4004c54:	e13ffc15 	stw	r4,-16(fp)
 4004c58:	e17ffd15 	stw	r5,-12(fp)
 4004c5c:	e1bffe15 	stw	r6,-8(fp)
 4004c60:	e1ffff15 	stw	r7,-4(fp)

	int a = 0;
 4004c64:	e03ffb15 	stw	zero,-20(fp)
	bug=counter;
 4004c68:	d0a03917 	ldw	r2,-32540(gp)
 4004c6c:	d0a03815 	stw	r2,-32544(gp)
	for (a = 0; a <= length; a++) {
 4004c70:	e03ffb15 	stw	zero,-20(fp)
 4004c74:	00003a06 	br	4004d60 <GenerateForward+0x120>
		angles[ bug+a] = angles;
 4004c78:	d0e03817 	ldw	r3,-32544(gp)
 4004c7c:	e0bffb17 	ldw	r2,-20(fp)
 4004c80:	1885883a 	add	r2,r3,r2
 4004c84:	1085883a 	add	r2,r2,r2
 4004c88:	1085883a 	add	r2,r2,r2
 4004c8c:	1007883a 	mov	r3,r2
 4004c90:	e0bfff17 	ldw	r2,-4(fp)
 4004c94:	1887883a 	add	r3,r3,r2
 4004c98:	e0bfff17 	ldw	r2,-4(fp)
 4004c9c:	18800015 	stw	r2,0(r3)
		front[ bug+a] = length+50 - a;
 4004ca0:	d0e03817 	ldw	r3,-32544(gp)
 4004ca4:	e0bffb17 	ldw	r2,-20(fp)
 4004ca8:	1885883a 	add	r2,r3,r2
 4004cac:	100490fa 	slli	r2,r2,3
 4004cb0:	1007883a 	mov	r3,r2
 4004cb4:	e0bffc17 	ldw	r2,-16(fp)
 4004cb8:	18a1883a 	add	r16,r3,r2
 4004cbc:	e0c00417 	ldw	r3,16(fp)
 4004cc0:	e0bffb17 	ldw	r2,-20(fp)
 4004cc4:	1885c83a 	sub	r2,r3,r2
 4004cc8:	11000c84 	addi	r4,r2,50
 4004ccc:	4008c300 	call	4008c30 <__floatsidf>
 4004cd0:	1009883a 	mov	r4,r2
 4004cd4:	180b883a 	mov	r5,r3
 4004cd8:	81000015 	stw	r4,0(r16)
 4004cdc:	81400115 	stw	r5,4(r16)
		right[bug + a] = 25;
 4004ce0:	d0e03817 	ldw	r3,-32544(gp)
 4004ce4:	e0bffb17 	ldw	r2,-20(fp)
 4004ce8:	1885883a 	add	r2,r3,r2
 4004cec:	100490fa 	slli	r2,r2,3
 4004cf0:	1007883a 	mov	r3,r2
 4004cf4:	e0bffe17 	ldw	r2,-8(fp)
 4004cf8:	1887883a 	add	r3,r3,r2
 4004cfc:	18000015 	stw	zero,0(r3)
 4004d00:	00900e74 	movhi	r2,16441
 4004d04:	18800115 	stw	r2,4(r3)
		left[bug + a] = 25;
 4004d08:	d0e03817 	ldw	r3,-32544(gp)
 4004d0c:	e0bffb17 	ldw	r2,-20(fp)
 4004d10:	1885883a 	add	r2,r3,r2
 4004d14:	100490fa 	slli	r2,r2,3
 4004d18:	1007883a 	mov	r3,r2
 4004d1c:	e0bffd17 	ldw	r2,-12(fp)
 4004d20:	1887883a 	add	r3,r3,r2
 4004d24:	18000015 	stw	zero,0(r3)
 4004d28:	00900e74 	movhi	r2,16441
 4004d2c:	18800115 	stw	r2,4(r3)
		test[bug + a] = FORWARD;
 4004d30:	d0e03817 	ldw	r3,-32544(gp)
 4004d34:	e0bffb17 	ldw	r2,-20(fp)
 4004d38:	1885883a 	add	r2,r3,r2
 4004d3c:	1085883a 	add	r2,r2,r2
 4004d40:	1085883a 	add	r2,r2,r2
 4004d44:	1007883a 	mov	r3,r2
 4004d48:	e0800317 	ldw	r2,12(fp)
 4004d4c:	1885883a 	add	r2,r3,r2
 4004d50:	10000015 	stw	zero,0(r2)
void GenerateForward(double *front,double *left, double *right, int *angles, int *test,int length)
{

	int a = 0;
	bug=counter;
	for (a = 0; a <= length; a++) {
 4004d54:	e0bffb17 	ldw	r2,-20(fp)
 4004d58:	10800044 	addi	r2,r2,1
 4004d5c:	e0bffb15 	stw	r2,-20(fp)
 4004d60:	e0fffb17 	ldw	r3,-20(fp)
 4004d64:	e0800417 	ldw	r2,16(fp)
 4004d68:	10ffc30e 	bge	r2,r3,4004c78 <GenerateForward+0x38>
		front[ bug+a] = length+50 - a;
		right[bug + a] = 25;
		left[bug + a] = 25;
		test[bug + a] = FORWARD;
	}
	counter+=length;
 4004d6c:	d0e03917 	ldw	r3,-32540(gp)
 4004d70:	e0800417 	ldw	r2,16(fp)
 4004d74:	1885883a 	add	r2,r3,r2
 4004d78:	d0a03915 	stw	r2,-32540(gp)
	bug=counter;
 4004d7c:	d0a03917 	ldw	r2,-32540(gp)
 4004d80:	d0a03815 	stw	r2,-32544(gp)
}
 4004d84:	e037883a 	mov	sp,fp
 4004d88:	dfc00217 	ldw	ra,8(sp)
 4004d8c:	df000117 	ldw	fp,4(sp)
 4004d90:	dc000017 	ldw	r16,0(sp)
 4004d94:	dec00304 	addi	sp,sp,12
 4004d98:	f800283a 	ret

04004d9c <Navigation_Task>:

float LEFT_VOLT, RIGHT_VOLT, FRONT_VOLT;
double ENCODER_0A, ENCODER_1A;

/* Navigation task */
void Navigation_Task(void *pData){
 4004d9c:	defff204 	addi	sp,sp,-56
 4004da0:	dfc00d15 	stw	ra,52(sp)
 4004da4:	df000c15 	stw	fp,48(sp)
 4004da8:	dcc00b15 	stw	r19,44(sp)
 4004dac:	dc800a15 	stw	r18,40(sp)
 4004db0:	dc400915 	stw	r17,36(sp)
 4004db4:	dc000815 	stw	r16,32(sp)
 4004db8:	df000804 	addi	fp,sp,32
 4004dbc:	e13ffe15 	stw	r4,-8(fp)
    int status = 0;
 4004dc0:	e03ffc15 	stw	zero,-16(fp)
 4004dc4:	00000006 	br	4004dc8 <Navigation_Task+0x2c>
    INT8U err;
    //char * msg = malloc(sizeof(char) * MAX_BUFFER_SIZE);

    while (1)
    {
    	status = (int) OSQPend(MainQueue, 0, &err); //wait on messages from queue and act accordingly
 4004dc8:	d1204317 	ldw	r4,-32500(gp)
 4004dcc:	e1bffd04 	addi	r6,fp,-12
 4004dd0:	000b883a 	mov	r5,zero
 4004dd4:	401cad80 	call	401cad8 <OSQPend>
 4004dd8:	e0bffc15 	stw	r2,-16(fp)

    	switch (status){
 4004ddc:	e0bffc17 	ldw	r2,-16(fp)
 4004de0:	e0bfff15 	stw	r2,-4(fp)
 4004de4:	e0ffff17 	ldw	r3,-4(fp)
 4004de8:	18800060 	cmpeqi	r2,r3,1
 4004dec:	1001431e 	bne	r2,zero,40052fc <Navigation_Task+0x560>
 4004df0:	e0ffff17 	ldw	r3,-4(fp)
 4004df4:	188016a0 	cmpeqi	r2,r3,90
 4004df8:	1001711e 	bne	r2,zero,40053c0 <Navigation_Task+0x624>
 4004dfc:	e0ffff17 	ldw	r3,-4(fp)
 4004e00:	1805003a 	cmpeq	r2,r3,zero
 4004e04:	1000011e 	bne	r2,zero,4004e0c <Navigation_Task+0x70>
 4004e08:	003fef06 	br	4004dc8 <Navigation_Task+0x2c>
    		case FRONT_IS_BLOCKED:
    			printf("Stop motors! System Status: %i \n", SYSTEM_STATUS);
 4004e0c:	d1603a17 	ldw	r5,-32536(gp)
 4004e10:	010100b4 	movhi	r4,1026
 4004e14:	21108804 	addi	r4,r4,16928
 4004e18:	400a15c0 	call	400a15c <printf>
    			M_allStop();
 4004e1c:	4002dc40 	call	4002dc4 <M_allStop>

    			if (TRVL[TRVL_INDEX].move == 'F'){
 4004e20:	d1204617 	ldw	r4,-32488(gp)
 4004e24:	040100f4 	movhi	r16,1027
 4004e28:	843ad204 	addi	r16,r16,-5304
 4004e2c:	01400504 	movi	r5,20
 4004e30:	4008ff80 	call	4008ff8 <__mulsi3>
 4004e34:	1405883a 	add	r2,r2,r16
 4004e38:	10800003 	ldbu	r2,0(r2)
 4004e3c:	10803fcc 	andi	r2,r2,255
 4004e40:	1080201c 	xori	r2,r2,128
 4004e44:	10bfe004 	addi	r2,r2,-128
 4004e48:	10801198 	cmpnei	r2,r2,70
 4004e4c:	10003d1e 	bne	r2,zero,4004f44 <Navigation_Task+0x1a8>
    				TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'F');
 4004e50:	d4a04617 	ldw	r18,-32488(gp)
 4004e54:	d0a04617 	ldw	r2,-32488(gp)
 4004e58:	113fffc4 	addi	r4,r2,-1
 4004e5c:	040100f4 	movhi	r16,1027
 4004e60:	843ad204 	addi	r16,r16,-5304
 4004e64:	01400504 	movi	r5,20
 4004e68:	4008ff80 	call	4008ff8 <__mulsi3>
 4004e6c:	1405883a 	add	r2,r2,r16
 4004e70:	10800043 	ldbu	r2,1(r2)
 4004e74:	11003fcc 	andi	r4,r2,255
 4004e78:	2100201c 	xori	r4,r4,128
 4004e7c:	213fe004 	addi	r4,r4,-128
 4004e80:	01401184 	movi	r5,70
 4004e84:	4003bd80 	call	4003bd8 <newDir>
 4004e88:	1023883a 	mov	r17,r2
 4004e8c:	040100f4 	movhi	r16,1027
 4004e90:	843ad204 	addi	r16,r16,-5304
 4004e94:	9009883a 	mov	r4,r18
 4004e98:	01400504 	movi	r5,20
 4004e9c:	4008ff80 	call	4008ff8 <__mulsi3>
 4004ea0:	1405883a 	add	r2,r2,r16
 4004ea4:	14400045 	stb	r17,1(r2)
    				TRVL[TRVL_INDEX].count = ENCODER_0A - ENCODER_INIT;
 4004ea8:	d4e04617 	ldw	r19,-32488(gp)
 4004eac:	d1604117 	ldw	r5,-32508(gp)
 4004eb0:	008100b4 	movhi	r2,1026
 4004eb4:	109a8a04 	addi	r2,r2,27176
 4004eb8:	11800017 	ldw	r6,0(r2)
 4004ebc:	d0a03f17 	ldw	r2,-32516(gp)
 4004ec0:	010100b4 	movhi	r4,1026
 4004ec4:	211a8804 	addi	r4,r4,27168
 4004ec8:	20c00017 	ldw	r3,0(r4)
 4004ecc:	2809883a 	mov	r4,r5
 4004ed0:	300b883a 	mov	r5,r6
 4004ed4:	100d883a 	mov	r6,r2
 4004ed8:	180f883a 	mov	r7,r3
 4004edc:	40083000 	call	4008300 <__subdf3>
 4004ee0:	1009883a 	mov	r4,r2
 4004ee4:	180b883a 	mov	r5,r3
 4004ee8:	2021883a 	mov	r16,r4
 4004eec:	2823883a 	mov	r17,r5
 4004ef0:	048100f4 	movhi	r18,1027
 4004ef4:	94bad204 	addi	r18,r18,-5304
 4004ef8:	9809883a 	mov	r4,r19
 4004efc:	01400504 	movi	r5,20
 4004f00:	4008ff80 	call	4008ff8 <__mulsi3>
 4004f04:	1485883a 	add	r2,r2,r18
 4004f08:	10800104 	addi	r2,r2,4
 4004f0c:	14000015 	stw	r16,0(r2)
 4004f10:	14400115 	stw	r17,4(r2)
    				TRVL[TRVL_INDEX].angle = 0;
 4004f14:	d1204617 	ldw	r4,-32488(gp)
 4004f18:	040100f4 	movhi	r16,1027
 4004f1c:	843ad204 	addi	r16,r16,-5304
 4004f20:	01400504 	movi	r5,20
 4004f24:	4008ff80 	call	4008ff8 <__mulsi3>
 4004f28:	1405883a 	add	r2,r2,r16
 4004f2c:	10800304 	addi	r2,r2,12
 4004f30:	10000015 	stw	zero,0(r2)
 4004f34:	10000115 	stw	zero,4(r2)
    				TRVL_INDEX++;
 4004f38:	d0a04617 	ldw	r2,-32488(gp)
 4004f3c:	10800044 	addi	r2,r2,1
 4004f40:	d0a04615 	stw	r2,-32488(gp)
    			}

    			if (SYSTEM_STATUS == SYS_BUSY){
 4004f44:	d0a03a17 	ldw	r2,-32536(gp)
 4004f48:	10800058 	cmpnei	r2,r2,1
 4004f4c:	1000101e 	bne	r2,zero,4004f90 <Navigation_Task+0x1f4>
					/* suspend servo task */
					err = OSTaskSuspend(TASK_SERVO_PRIORITY);
 4004f50:	010000c4 	movi	r4,3
 4004f54:	401f8f80 	call	401f8f8 <OSTaskSuspend>
 4004f58:	e0bffd05 	stb	r2,-12(fp)
					if (err == OS_NO_ERR){
 4004f5c:	e0bffd03 	ldbu	r2,-12(fp)
 4004f60:	10803fcc 	andi	r2,r2,255
 4004f64:	1004c03a 	cmpne	r2,r2,zero
 4004f68:	1000091e 	bne	r2,zero,4004f90 <Navigation_Task+0x1f4>
						//printf("Servo task suspended \n");
						OSTimeDlyHMSM(0, 0, 0, 100);
 4004f6c:	0009883a 	mov	r4,zero
 4004f70:	000b883a 	mov	r5,zero
 4004f74:	000d883a 	mov	r6,zero
 4004f78:	01c01904 	movi	r7,100
 4004f7c:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
						IOWR(SERVO_BASE, 0, 0.1 * SERVO_MAX);
 4004f80:	0007883a 	mov	r3,zero
 4004f84:	008000b4 	movhi	r2,2
 4004f88:	10a1a804 	addi	r2,r2,-31072
 4004f8c:	18800035 	stwio	r2,0(r3)
					}else{
						//printf("Error! Could not suspend servo task \n");
					}
    			}

    			OSTimeDlyHMSM(0, 0, 0, 1500);
 4004f90:	0009883a 	mov	r4,zero
 4004f94:	000b883a 	mov	r5,zero
 4004f98:	000d883a 	mov	r6,zero
 4004f9c:	01c17704 	movi	r7,1500
 4004fa0:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
    			checkLeftRight();
 4004fa4:	40056700 	call	4005670 <checkLeftRight>
    			printf("Front status: %i & Left Volt and Status: %.2fV, %i & Right Volt and Status:  %.2fV, %i \n", FRONT_CLEAR, LEFT_VOLT, LEFT_CLEAR, RIGHT_VOLT, RIGHT_CLEAR);
 4004fa8:	d4e04717 	ldw	r19,-32484(gp)
 4004fac:	d0a04417 	ldw	r2,-32496(gp)
 4004fb0:	1009883a 	mov	r4,r2
 4004fb4:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4004fb8:	1021883a 	mov	r16,r2
 4004fbc:	1823883a 	mov	r17,r3
 4004fc0:	d4a04817 	ldw	r18,-32480(gp)
 4004fc4:	d0a04a17 	ldw	r2,-32472(gp)
 4004fc8:	1009883a 	mov	r4,r2
 4004fcc:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4004fd0:	1009883a 	mov	r4,r2
 4004fd4:	180b883a 	mov	r5,r3
 4004fd8:	d0a03b17 	ldw	r2,-32532(gp)
 4004fdc:	dc800015 	stw	r18,0(sp)
 4004fe0:	d9000115 	stw	r4,4(sp)
 4004fe4:	d9400215 	stw	r5,8(sp)
 4004fe8:	d8800315 	stw	r2,12(sp)
 4004fec:	010100b4 	movhi	r4,1026
 4004ff0:	21109104 	addi	r4,r4,16964
 4004ff4:	980b883a 	mov	r5,r19
 4004ff8:	800d883a 	mov	r6,r16
 4004ffc:	880f883a 	mov	r7,r17
 4005000:	400a15c0 	call	400a15c <printf>
						LAST_TURN = "right";
						turnRight();
    				}
    			}
    			*/
    			if (!FRONT_CLEAR){
 4005004:	d0a04717 	ldw	r2,-32484(gp)
 4005008:	1004c03a 	cmpne	r2,r2,zero
 400500c:	1000a91e 	bne	r2,zero,40052b4 <Navigation_Task+0x518>
					if (RIGHT_CLEAR || LEFT_CLEAR){
 4005010:	d0a03b17 	ldw	r2,-32532(gp)
 4005014:	1004c03a 	cmpne	r2,r2,zero
 4005018:	1000031e 	bne	r2,zero,4005028 <Navigation_Task+0x28c>
 400501c:	d0a04817 	ldw	r2,-32480(gp)
 4005020:	1005003a 	cmpeq	r2,r2,zero
 4005024:	10006d1e 	bne	r2,zero,40051dc <Navigation_Task+0x440>
						if (RIGHT_VOLT > LEFT_VOLT){ //left side is farther away
 4005028:	d0a04a17 	ldw	r2,-32472(gp)
 400502c:	d0e04417 	ldw	r3,-32496(gp)
 4005030:	1009883a 	mov	r4,r2
 4005034:	180b883a 	mov	r5,r3
 4005038:	4007cd00 	call	4007cd0 <__gtsf2>
 400503c:	10800048 	cmpgei	r2,r2,1
 4005040:	1000011e 	bne	r2,zero,4005048 <Navigation_Task+0x2ac>
 4005044:	00003406 	br	4005118 <Navigation_Task+0x37c>
							if (LEFT_CLEAR){
 4005048:	d0a04817 	ldw	r2,-32480(gp)
 400504c:	1005003a 	cmpeq	r2,r2,zero
 4005050:	1000981e 	bne	r2,zero,40052b4 <Navigation_Task+0x518>
								printf("Turn left \n");
 4005054:	010100b4 	movhi	r4,1026
 4005058:	2110a804 	addi	r4,r4,17056
 400505c:	400a2740 	call	400a274 <puts>
								turnLeft();
 4005060:	4002ea00 	call	4002ea0 <turnLeft>
								TRVL[TRVL_INDEX].move = 'L';
 4005064:	d1204617 	ldw	r4,-32488(gp)
 4005068:	040100f4 	movhi	r16,1027
 400506c:	843ad204 	addi	r16,r16,-5304
 4005070:	01400504 	movi	r5,20
 4005074:	4008ff80 	call	4008ff8 <__mulsi3>
 4005078:	1407883a 	add	r3,r2,r16
 400507c:	00801304 	movi	r2,76
 4005080:	18800005 	stb	r2,0(r3)
								TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'L');
 4005084:	d4a04617 	ldw	r18,-32488(gp)
 4005088:	d0a04617 	ldw	r2,-32488(gp)
 400508c:	113fffc4 	addi	r4,r2,-1
 4005090:	040100f4 	movhi	r16,1027
 4005094:	843ad204 	addi	r16,r16,-5304
 4005098:	01400504 	movi	r5,20
 400509c:	4008ff80 	call	4008ff8 <__mulsi3>
 40050a0:	1405883a 	add	r2,r2,r16
 40050a4:	10800043 	ldbu	r2,1(r2)
 40050a8:	11003fcc 	andi	r4,r2,255
 40050ac:	2100201c 	xori	r4,r4,128
 40050b0:	213fe004 	addi	r4,r4,-128
 40050b4:	01401304 	movi	r5,76
 40050b8:	4003bd80 	call	4003bd8 <newDir>
 40050bc:	1023883a 	mov	r17,r2
 40050c0:	040100f4 	movhi	r16,1027
 40050c4:	843ad204 	addi	r16,r16,-5304
 40050c8:	9009883a 	mov	r4,r18
 40050cc:	01400504 	movi	r5,20
 40050d0:	4008ff80 	call	4008ff8 <__mulsi3>
 40050d4:	1405883a 	add	r2,r2,r16
 40050d8:	14400045 	stb	r17,1(r2)
								TRVL[TRVL_INDEX].angle = 90;
 40050dc:	d1204617 	ldw	r4,-32488(gp)
 40050e0:	040100f4 	movhi	r16,1027
 40050e4:	843ad204 	addi	r16,r16,-5304
 40050e8:	01400504 	movi	r5,20
 40050ec:	4008ff80 	call	4008ff8 <__mulsi3>
 40050f0:	1405883a 	add	r2,r2,r16
 40050f4:	10c00304 	addi	r3,r2,12
 40050f8:	18000015 	stw	zero,0(r3)
 40050fc:	009015f4 	movhi	r2,16471
 4005100:	10a00004 	addi	r2,r2,-32768
 4005104:	18800115 	stw	r2,4(r3)
								TRVL_INDEX++;
 4005108:	d0a04617 	ldw	r2,-32488(gp)
 400510c:	10800044 	addi	r2,r2,1
 4005110:	d0a04615 	stw	r2,-32488(gp)
 4005114:	00006706 	br	40052b4 <Navigation_Task+0x518>
							}
						}else{
							printf("Turn right \n");
 4005118:	010100b4 	movhi	r4,1026
 400511c:	2110ab04 	addi	r4,r4,17068
 4005120:	400a2740 	call	400a274 <puts>
							turnRight();
 4005124:	4002ee80 	call	4002ee8 <turnRight>
							TRVL[TRVL_INDEX].move = 'R';
 4005128:	d1204617 	ldw	r4,-32488(gp)
 400512c:	040100f4 	movhi	r16,1027
 4005130:	843ad204 	addi	r16,r16,-5304
 4005134:	01400504 	movi	r5,20
 4005138:	4008ff80 	call	4008ff8 <__mulsi3>
 400513c:	1407883a 	add	r3,r2,r16
 4005140:	00801484 	movi	r2,82
 4005144:	18800005 	stb	r2,0(r3)
							TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'R');
 4005148:	d4a04617 	ldw	r18,-32488(gp)
 400514c:	d0a04617 	ldw	r2,-32488(gp)
 4005150:	113fffc4 	addi	r4,r2,-1
 4005154:	040100f4 	movhi	r16,1027
 4005158:	843ad204 	addi	r16,r16,-5304
 400515c:	01400504 	movi	r5,20
 4005160:	4008ff80 	call	4008ff8 <__mulsi3>
 4005164:	1405883a 	add	r2,r2,r16
 4005168:	10800043 	ldbu	r2,1(r2)
 400516c:	11003fcc 	andi	r4,r2,255
 4005170:	2100201c 	xori	r4,r4,128
 4005174:	213fe004 	addi	r4,r4,-128
 4005178:	01401484 	movi	r5,82
 400517c:	4003bd80 	call	4003bd8 <newDir>
 4005180:	1023883a 	mov	r17,r2
 4005184:	040100f4 	movhi	r16,1027
 4005188:	843ad204 	addi	r16,r16,-5304
 400518c:	9009883a 	mov	r4,r18
 4005190:	01400504 	movi	r5,20
 4005194:	4008ff80 	call	4008ff8 <__mulsi3>
 4005198:	1405883a 	add	r2,r2,r16
 400519c:	14400045 	stb	r17,1(r2)
							TRVL[TRVL_INDEX].angle = 90;
 40051a0:	d1204617 	ldw	r4,-32488(gp)
 40051a4:	040100f4 	movhi	r16,1027
 40051a8:	843ad204 	addi	r16,r16,-5304
 40051ac:	01400504 	movi	r5,20
 40051b0:	4008ff80 	call	4008ff8 <__mulsi3>
 40051b4:	1405883a 	add	r2,r2,r16
 40051b8:	10c00304 	addi	r3,r2,12
 40051bc:	18000015 	stw	zero,0(r3)
 40051c0:	009015f4 	movhi	r2,16471
 40051c4:	10a00004 	addi	r2,r2,-32768
 40051c8:	18800115 	stw	r2,4(r3)
							TRVL_INDEX++;
 40051cc:	d0a04617 	ldw	r2,-32488(gp)
 40051d0:	10800044 	addi	r2,r2,1
 40051d4:	d0a04615 	stw	r2,-32488(gp)
						turnRight();
    				}
    			}
    			*/
    			if (!FRONT_CLEAR){
					if (RIGHT_CLEAR || LEFT_CLEAR){
 40051d8:	00003606 	br	40052b4 <Navigation_Task+0x518>
							TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'R');
							TRVL[TRVL_INDEX].angle = 90;
							TRVL_INDEX++;
						}
					}else{ //no where to go
						printf("Reverse! \n");
 40051dc:	010100b4 	movhi	r4,1026
 40051e0:	2110ae04 	addi	r4,r4,17080
 40051e4:	400a2740 	call	400a274 <puts>
						motorReverse();
 40051e8:	4002f7c0 	call	4002f7c <motorReverse>
						OSTimeDlyHMSM(0, 0, 2, 0);
 40051ec:	0009883a 	mov	r4,zero
 40051f0:	000b883a 	mov	r5,zero
 40051f4:	01800084 	movi	r6,2
 40051f8:	000f883a 	mov	r7,zero
 40051fc:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
						turn180();
 4005200:	4002f2c0 	call	4002f2c <turn180>
						TRVL[TRVL_INDEX].move = 'B';
 4005204:	d1204617 	ldw	r4,-32488(gp)
 4005208:	040100f4 	movhi	r16,1027
 400520c:	843ad204 	addi	r16,r16,-5304
 4005210:	01400504 	movi	r5,20
 4005214:	4008ff80 	call	4008ff8 <__mulsi3>
 4005218:	1407883a 	add	r3,r2,r16
 400521c:	00801084 	movi	r2,66
 4005220:	18800005 	stb	r2,0(r3)
						TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'B');
 4005224:	d4a04617 	ldw	r18,-32488(gp)
 4005228:	d0a04617 	ldw	r2,-32488(gp)
 400522c:	113fffc4 	addi	r4,r2,-1
 4005230:	040100f4 	movhi	r16,1027
 4005234:	843ad204 	addi	r16,r16,-5304
 4005238:	01400504 	movi	r5,20
 400523c:	4008ff80 	call	4008ff8 <__mulsi3>
 4005240:	1405883a 	add	r2,r2,r16
 4005244:	10800043 	ldbu	r2,1(r2)
 4005248:	11003fcc 	andi	r4,r2,255
 400524c:	2100201c 	xori	r4,r4,128
 4005250:	213fe004 	addi	r4,r4,-128
 4005254:	01401084 	movi	r5,66
 4005258:	4003bd80 	call	4003bd8 <newDir>
 400525c:	1023883a 	mov	r17,r2
 4005260:	040100f4 	movhi	r16,1027
 4005264:	843ad204 	addi	r16,r16,-5304
 4005268:	9009883a 	mov	r4,r18
 400526c:	01400504 	movi	r5,20
 4005270:	4008ff80 	call	4008ff8 <__mulsi3>
 4005274:	1405883a 	add	r2,r2,r16
 4005278:	14400045 	stb	r17,1(r2)
						TRVL[TRVL_INDEX].angle = 180;
 400527c:	d1204617 	ldw	r4,-32488(gp)
 4005280:	040100f4 	movhi	r16,1027
 4005284:	843ad204 	addi	r16,r16,-5304
 4005288:	01400504 	movi	r5,20
 400528c:	4008ff80 	call	4008ff8 <__mulsi3>
 4005290:	1405883a 	add	r2,r2,r16
 4005294:	10c00304 	addi	r3,r2,12
 4005298:	18000015 	stw	zero,0(r3)
 400529c:	009019f4 	movhi	r2,16487
 40052a0:	10a00004 	addi	r2,r2,-32768
 40052a4:	18800115 	stw	r2,4(r3)
						TRVL_INDEX++;
 40052a8:	d0a04617 	ldw	r2,-32488(gp)
 40052ac:	10800044 	addi	r2,r2,1
 40052b0:	d0a04615 	stw	r2,-32488(gp)
						//follow mapping...
					}
    			}

    			servoRotate(FRONT_SERVO);
 40052b4:	010100f4 	movhi	r4,1027
 40052b8:	212ac304 	addi	r4,r4,-21748
 40052bc:	40058840 	call	4005884 <servoRotate>
    			navigateFront(FRONT_SERVO); //since SYSTEM_STATUS is busy, will only update FRONT_CLEAR
 40052c0:	010100f4 	movhi	r4,1027
 40052c4:	212ac304 	addi	r4,r4,-21748
 40052c8:	4005be00 	call	4005be0 <navigateFront>
    			//usleep(1 * SECOND_DELAY);

    			if (FRONT_CLEAR){
 40052cc:	d0a04717 	ldw	r2,-32484(gp)
 40052d0:	1005003a 	cmpeq	r2,r2,zero
 40052d4:	1000051e 	bne	r2,zero,40052ec <Navigation_Task+0x550>
    				SYSTEM_STATUS = SYS_FREE;
 40052d8:	d0203a15 	stw	zero,-32536(gp)

    	   			/* resume servo task */
					err = OSTaskResume(TASK_SERVO_PRIORITY);
 40052dc:	010000c4 	movi	r4,3
 40052e0:	401f4e40 	call	401f4e4 <OSTaskResume>
 40052e4:	e0bffd05 	stb	r2,-12(fp)
					if (err == OS_NO_ERR){
 40052e8:	003eb706 	br	4004dc8 <Navigation_Task+0x2c>
						//printf("Servo task resumed \n");
					}
    			}
    			else{
    				OSQPost(MainQueue, (void *) FRONT_IS_BLOCKED);
 40052ec:	d1204317 	ldw	r4,-32500(gp)
 40052f0:	000b883a 	mov	r5,zero
 40052f4:	401cf740 	call	401cf74 <OSQPost>
    			}

    			break;
 40052f8:	003eb306 	br	4004dc8 <Navigation_Task+0x2c>
    		case FRONT_IS_CLEAR:
    			printf("Start motors! \n");
 40052fc:	010100b4 	movhi	r4,1026
 4005300:	2110b104 	addi	r4,r4,17092
 4005304:	400a2740 	call	400a274 <puts>

    			TRVL[TRVL_INDEX].move = 'F';
 4005308:	d1204617 	ldw	r4,-32488(gp)
 400530c:	040100f4 	movhi	r16,1027
 4005310:	843ad204 	addi	r16,r16,-5304
 4005314:	01400504 	movi	r5,20
 4005318:	4008ff80 	call	4008ff8 <__mulsi3>
 400531c:	1407883a 	add	r3,r2,r16
 4005320:	00801184 	movi	r2,70
 4005324:	18800005 	stb	r2,0(r3)
    			ENCODER_INIT = ENCODER_0A;
 4005328:	d0a04117 	ldw	r2,-32508(gp)
 400532c:	010100b4 	movhi	r4,1026
 4005330:	211a8a04 	addi	r4,r4,27176
 4005334:	20c00017 	ldw	r3,0(r4)
 4005338:	d0a03f15 	stw	r2,-32516(gp)
 400533c:	010100b4 	movhi	r4,1026
 4005340:	211a8804 	addi	r4,r4,27168
 4005344:	20c00015 	stw	r3,0(r4)

    			stoptopartial();
 4005348:	4002bd80 	call	4002bd8 <stoptopartial>
    			OSTimeDlyHMSM(0, 0, 0, 500);
 400534c:	0009883a 	mov	r4,zero
 4005350:	000b883a 	mov	r5,zero
 4005354:	000d883a 	mov	r6,zero
 4005358:	01c07d04 	movi	r7,500
 400535c:	401fe300 	call	401fe30 <OSTimeDlyHMSM>

    			if ((MOTOR_0_STATUS & MOTOR_1_STATUS) == MOTOR_FULL){
 4005360:	d0e04517 	ldw	r3,-32492(gp)
 4005364:	d0a04917 	ldw	r2,-32476(gp)
 4005368:	1884703a 	and	r2,r3,r2
 400536c:	10800058 	cmpnei	r2,r2,1
 4005370:	1000051e 	bne	r2,zero,4005388 <Navigation_Task+0x5ec>
					SYSTEM_STATUS = SYS_FREE;
 4005374:	d0203a15 	stw	zero,-32536(gp)

					/* resume servo task */
					err = OSTaskResume(TASK_SERVO_PRIORITY);
 4005378:	010000c4 	movi	r4,3
 400537c:	401f4e40 	call	401f4e4 <OSTaskResume>
 4005380:	e0bffd05 	stb	r2,-12(fp)
					if (err == OS_NO_ERR){
 4005384:	003e9006 	br	4004dc8 <Navigation_Task+0x2c>
						//printf("Servo task resumed \n");
					}
    			}else{
    			    M_allStop();
 4005388:	4002dc40 	call	4002dc4 <M_allStop>
    				printf("Error! Front should be clear but can't go forward \n");
 400538c:	010100b4 	movhi	r4,1026
 4005390:	2110b504 	addi	r4,r4,17108
 4005394:	400a2740 	call	400a274 <puts>
    				//usleep(1 * SECOND_DELAY);
    				servoRotate(FRONT_SERVO);
 4005398:	010100f4 	movhi	r4,1027
 400539c:	212ac304 	addi	r4,r4,-21748
 40053a0:	40058840 	call	4005884 <servoRotate>
    				navigateFront(FRONT_SERVO);
 40053a4:	010100f4 	movhi	r4,1027
 40053a8:	212ac304 	addi	r4,r4,-21748
 40053ac:	4005be00 	call	4005be0 <navigateFront>
    				OSQPost(MainQueue, (void *) FRONT_IS_CLEAR);
 40053b0:	d1204317 	ldw	r4,-32500(gp)
 40053b4:	01400044 	movi	r5,1
 40053b8:	401cf740 	call	401cf74 <OSQPost>
    			}

				break;
 40053bc:	003e8206 	br	4004dc8 <Navigation_Task+0x2c>
    		case UNKNOWN: //check front, sides to decide what to do next
    			servoRotate(FRONT_SERVO);
 40053c0:	010100f4 	movhi	r4,1027
 40053c4:	212ac304 	addi	r4,r4,-21748
 40053c8:	40058840 	call	4005884 <servoRotate>
    			navigateFront(FRONT_SERVO); //since SYSTEM_STATUS is busy, will only update FRONT_CLEAR
 40053cc:	010100f4 	movhi	r4,1027
 40053d0:	212ac304 	addi	r4,r4,-21748
 40053d4:	4005be00 	call	4005be0 <navigateFront>
    			checkLeftRight();
 40053d8:	40056700 	call	4005670 <checkLeftRight>
    			break;
    		default:
    			break;
    	}
    }
 40053dc:	003e7a06 	br	4004dc8 <Navigation_Task+0x2c>

040053e0 <LSM303_Task>:
}

void LSM303_Task(void *pData){
 40053e0:	defffb04 	addi	sp,sp,-20
 40053e4:	dfc00415 	stw	ra,16(sp)
 40053e8:	df000315 	stw	fp,12(sp)
 40053ec:	df000304 	addi	fp,sp,12
 40053f0:	e13fff15 	stw	r4,-4(fp)
	// set clock as output
    //IOWR_ALTERA_AVALON_PIO_DIRECTION(COMPASS_I2C_SCL_BASE, ALTERA_AVALON_PIO_DIRECTION_OUTPUT);
    //IOWR(COMPASS_I2C_SCL_BASE, 0, 0x01);
    //if (I2C_MultipleRead(I2C_SCL_BASE, I2C_SDA_BASE, DeviceAddr, ControlAddr, szBuf, sizeof(szBuf))){

	usleep(2 * SECOND_DELAY);
 40053f4:	010007f4 	movhi	r4,31
 40053f8:	21212004 	addi	r4,r4,-31616
 40053fc:	4017a280 	call	4017a28 <usleep>
	 * 	DO2, DO1, DO0 = 000 = 0.75 Hz output rate
	 * 	= 100 = 15Hz output rate
	 * 	default is 00010000
	 * */

     if (I2C_Write(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, 0x3C, LSM303_MR_REG_M, 0x00)){
 4005400:	d8000015 	stw	zero,0(sp)
 4005404:	01004034 	movhi	r4,256
 4005408:	01404034 	movhi	r5,256
 400540c:	29400404 	addi	r5,r5,16
 4005410:	01800f04 	movi	r6,60
 4005414:	01c00084 	movi	r7,2
 4005418:	40001f40 	call	40001f4 <I2C_Write>
 400541c:	1005003a 	cmpeq	r2,r2,zero
 4005420:	1000041e 	bne	r2,zero,4005434 <LSM303_Task+0x54>
		  printf("Initialize success!\n");
 4005424:	010100b4 	movhi	r4,1026
 4005428:	2110c204 	addi	r4,r4,17160
 400542c:	400a2740 	call	400a274 <puts>
 4005430:	00000306 	br	4005440 <LSM303_Task+0x60>
	  }
	  else{
	        printf("Failed to enable magnetometer\r\n");
 4005434:	010100b4 	movhi	r4,1026
 4005438:	2110c704 	addi	r4,r4,17180
 400543c:	400a2740 	call	400a274 <puts>
	  }

	  if (I2C_Read(COMPASS_I2C_SCL_BASE, COMPASS_I2C_SDA_BASE, 0x3C, LSM303_OUT_X_H_M, data)){
 4005440:	e0bffe17 	ldw	r2,-8(fp)
 4005444:	d8800015 	stw	r2,0(sp)
 4005448:	01004034 	movhi	r4,256
 400544c:	01404034 	movhi	r5,256
 4005450:	29400404 	addi	r5,r5,16
 4005454:	01800f04 	movi	r6,60
 4005458:	01c000c4 	movi	r7,3
 400545c:	40002f00 	call	40002f0 <I2C_Read>
 4005460:	1005003a 	cmpeq	r2,r2,zero
 4005464:	1000051e 	bne	r2,zero,400547c <LSM303_Task+0x9c>
	  	 printf("Success! %02x \n", (int) &data);
 4005468:	e17ffe04 	addi	r5,fp,-8
 400546c:	010100b4 	movhi	r4,1026
 4005470:	2110cf04 	addi	r4,r4,17212
 4005474:	400a15c0 	call	400a15c <printf>
 4005478:	00000306 	br	4005488 <LSM303_Task+0xa8>
	  }else{
	     printf("Failed to read magnetometer register\r\n");
 400547c:	010100b4 	movhi	r4,1026
 4005480:	2110d304 	addi	r4,r4,17228
 4005484:	400a2740 	call	400a274 <puts>
	  }

}
 4005488:	e037883a 	mov	sp,fp
 400548c:	dfc00117 	ldw	ra,4(sp)
 4005490:	df000017 	ldw	fp,0(sp)
 4005494:	dec00204 	addi	sp,sp,8
 4005498:	f800283a 	ret

0400549c <History_Task>:

void History_Task(void* pData){
 400549c:	defff604 	addi	sp,sp,-40
 40054a0:	dfc00915 	stw	ra,36(sp)
 40054a4:	df000815 	stw	fp,32(sp)
 40054a8:	dcc00715 	stw	r19,28(sp)
 40054ac:	dc800615 	stw	r18,24(sp)
 40054b0:	dc400515 	stw	r17,20(sp)
 40054b4:	dc000415 	stw	r16,16(sp)
 40054b8:	df000404 	addi	fp,sp,16
 40054bc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
    bool retval = FALSE;
 40054c0:	e03ffd15 	stw	zero,-12(fp)
	OSTimeDlyHMSM(0, 0, 1, 0);
 40054c4:	0009883a 	mov	r4,zero
 40054c8:	000b883a 	mov	r5,zero
 40054cc:	01800044 	movi	r6,1
 40054d0:	000f883a 	mov	r7,zero
 40054d4:	401fe300 	call	401fe30 <OSTimeDlyHMSM>

 while(1){

    retval = evalHistory(TRVL, TRVL_INDEX, 'N', COURSE_LENGTH);
 40054d8:	d1604617 	ldw	r5,-32488(gp)
 40054dc:	00903534 	movhi	r2,16596
 40054e0:	10a20004 	addi	r2,r2,-30720
 40054e4:	d8800015 	stw	r2,0(sp)
 40054e8:	000f883a 	mov	r7,zero
 40054ec:	010100f4 	movhi	r4,1027
 40054f0:	213ad204 	addi	r4,r4,-5304
 40054f4:	01801384 	movi	r6,78
 40054f8:	40038c40 	call	40038c4 <evalHistory>
 40054fc:	e0bffd15 	stw	r2,-12(fp)

    if (retval){
 4005500:	e0bffd17 	ldw	r2,-12(fp)
 4005504:	1005003a 	cmpeq	r2,r2,zero
 4005508:	1000531e 	bne	r2,zero,4005658 <History_Task+0x1bc>
		 if (TRVL[TRVL_INDEX].move == 'F'){
 400550c:	d1204617 	ldw	r4,-32488(gp)
 4005510:	040100f4 	movhi	r16,1027
 4005514:	843ad204 	addi	r16,r16,-5304
 4005518:	01400504 	movi	r5,20
 400551c:	4008ff80 	call	4008ff8 <__mulsi3>
 4005520:	1405883a 	add	r2,r2,r16
 4005524:	10800003 	ldbu	r2,0(r2)
 4005528:	10803fcc 	andi	r2,r2,255
 400552c:	1080201c 	xori	r2,r2,128
 4005530:	10bfe004 	addi	r2,r2,-128
 4005534:	10801198 	cmpnei	r2,r2,70
 4005538:	10003a1e 	bne	r2,zero,4005624 <History_Task+0x188>
			TRVL[TRVL_INDEX].dir = newDir(TRVL[TRVL_INDEX-1].dir, 'F');
 400553c:	d4a04617 	ldw	r18,-32488(gp)
 4005540:	d0a04617 	ldw	r2,-32488(gp)
 4005544:	113fffc4 	addi	r4,r2,-1
 4005548:	040100f4 	movhi	r16,1027
 400554c:	843ad204 	addi	r16,r16,-5304
 4005550:	01400504 	movi	r5,20
 4005554:	4008ff80 	call	4008ff8 <__mulsi3>
 4005558:	1405883a 	add	r2,r2,r16
 400555c:	10800043 	ldbu	r2,1(r2)
 4005560:	11003fcc 	andi	r4,r2,255
 4005564:	2100201c 	xori	r4,r4,128
 4005568:	213fe004 	addi	r4,r4,-128
 400556c:	01401184 	movi	r5,70
 4005570:	4003bd80 	call	4003bd8 <newDir>
 4005574:	1023883a 	mov	r17,r2
 4005578:	040100f4 	movhi	r16,1027
 400557c:	843ad204 	addi	r16,r16,-5304
 4005580:	9009883a 	mov	r4,r18
 4005584:	01400504 	movi	r5,20
 4005588:	4008ff80 	call	4008ff8 <__mulsi3>
 400558c:	1405883a 	add	r2,r2,r16
 4005590:	14400045 	stb	r17,1(r2)
			TRVL[TRVL_INDEX].count = ENCODER_0A - ENCODER_INIT;
 4005594:	d4e04617 	ldw	r19,-32488(gp)
 4005598:	d1604117 	ldw	r5,-32508(gp)
 400559c:	008100b4 	movhi	r2,1026
 40055a0:	109a8a04 	addi	r2,r2,27176
 40055a4:	11800017 	ldw	r6,0(r2)
 40055a8:	d0a03f17 	ldw	r2,-32516(gp)
 40055ac:	010100b4 	movhi	r4,1026
 40055b0:	211a8804 	addi	r4,r4,27168
 40055b4:	20c00017 	ldw	r3,0(r4)
 40055b8:	2809883a 	mov	r4,r5
 40055bc:	300b883a 	mov	r5,r6
 40055c0:	100d883a 	mov	r6,r2
 40055c4:	180f883a 	mov	r7,r3
 40055c8:	40083000 	call	4008300 <__subdf3>
 40055cc:	1009883a 	mov	r4,r2
 40055d0:	180b883a 	mov	r5,r3
 40055d4:	2021883a 	mov	r16,r4
 40055d8:	2823883a 	mov	r17,r5
 40055dc:	048100f4 	movhi	r18,1027
 40055e0:	94bad204 	addi	r18,r18,-5304
 40055e4:	9809883a 	mov	r4,r19
 40055e8:	01400504 	movi	r5,20
 40055ec:	4008ff80 	call	4008ff8 <__mulsi3>
 40055f0:	1485883a 	add	r2,r2,r18
 40055f4:	10800104 	addi	r2,r2,4
 40055f8:	14000015 	stw	r16,0(r2)
 40055fc:	14400115 	stw	r17,4(r2)
			TRVL[TRVL_INDEX].angle = 0;
 4005600:	d1204617 	ldw	r4,-32488(gp)
 4005604:	040100f4 	movhi	r16,1027
 4005608:	843ad204 	addi	r16,r16,-5304
 400560c:	01400504 	movi	r5,20
 4005610:	4008ff80 	call	4008ff8 <__mulsi3>
 4005614:	1405883a 	add	r2,r2,r16
 4005618:	10800304 	addi	r2,r2,12
 400561c:	10000015 	stw	zero,0(r2)
 4005620:	10000115 	stw	zero,4(r2)
		  }

		 SYSTEM_STATUS = SYS_BUSY;
 4005624:	00800044 	movi	r2,1
 4005628:	d0a03a15 	stw	r2,-32536(gp)

		 executeHistory(TRVL, TRVL_INDEX);
 400562c:	d1604617 	ldw	r5,-32488(gp)
 4005630:	010100f4 	movhi	r4,1027
 4005634:	213ad204 	addi	r4,r4,-5304
 4005638:	4003a6c0 	call	4003a6c <executeHistory>
		 err = OSTaskSuspend(TASK_NAVI_PRIORITY);
 400563c:	01000084 	movi	r4,2
 4005640:	401f8f80 	call	401f8f8 <OSTaskSuspend>
 4005644:	e0bffe05 	stb	r2,-8(fp)
		 err = OSTaskSuspend(TASK_SERVO_PRIORITY);
 4005648:	010000c4 	movi	r4,3
 400564c:	401f8f80 	call	401f8f8 <OSTaskSuspend>
 4005650:	e0bffe05 	stb	r2,-8(fp)
		 M_allStop();
 4005654:	4002dc40 	call	4002dc4 <M_allStop>
        } else{
        	IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);
        	LED_on = 1;
        }
        */
        OSTimeDlyHMSM(0, 0, 10, 0);
 4005658:	0009883a 	mov	r4,zero
 400565c:	000b883a 	mov	r5,zero
 4005660:	01800284 	movi	r6,10
 4005664:	000f883a 	mov	r7,zero
 4005668:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
    }
 400566c:	003f9a06 	br	40054d8 <History_Task+0x3c>

04005670 <checkLeftRight>:
}

void checkLeftRight(){
 4005670:	defffb04 	addi	sp,sp,-20
 4005674:	dfc00415 	stw	ra,16(sp)
 4005678:	df000315 	stw	fp,12(sp)
 400567c:	df000304 	addi	fp,sp,12
	alt_u16 data16;
	float volt = 0;
 4005680:	e03ffe15 	stw	zero,-8(fp)
	int ch = 0;
 4005684:	e03ffd15 	stw	zero,-12(fp)

	for (ch = 0; ch < 8; ch++){
 4005688:	e03ffd15 	stw	zero,-12(fp)
 400568c:	00003106 	br	4005754 <checkLeftRight+0xe4>
		data16 = ADC_Read(ch); // 12-bits resolution
 4005690:	e0bffd17 	ldw	r2,-12(fp)
 4005694:	11003fcc 	andi	r4,r2,255
 4005698:	4001bd80 	call	4001bd8 <ADC_Read>
 400569c:	e0bfff0d 	sth	r2,-4(fp)
		volt = (float)data16 * 3.3 / 4095.0;
 40056a0:	e13fff0b 	ldhu	r4,-4(fp)
 40056a4:	4007e300 	call	4007e30 <__floatunsisf>
 40056a8:	1009883a 	mov	r4,r2
 40056ac:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40056b0:	100b883a 	mov	r5,r2
 40056b4:	180d883a 	mov	r6,r3
 40056b8:	2809883a 	mov	r4,r5
 40056bc:	300b883a 	mov	r5,r6
 40056c0:	019999b4 	movhi	r6,26214
 40056c4:	31999984 	addi	r6,r6,26214
 40056c8:	01d002b4 	movhi	r7,16394
 40056cc:	39d99984 	addi	r7,r7,26214
 40056d0:	40083f40 	call	40083f4 <__muldf3>
 40056d4:	1009883a 	mov	r4,r2
 40056d8:	180b883a 	mov	r5,r3
 40056dc:	2005883a 	mov	r2,r4
 40056e0:	2807883a 	mov	r3,r5
 40056e4:	1009883a 	mov	r4,r2
 40056e8:	180b883a 	mov	r5,r3
 40056ec:	000d883a 	mov	r6,zero
 40056f0:	01d02c34 	movhi	r7,16560
 40056f4:	39ff8004 	addi	r7,r7,-512
 40056f8:	40087b80 	call	40087b8 <__divdf3>
 40056fc:	1009883a 	mov	r4,r2
 4005700:	180b883a 	mov	r5,r3
 4005704:	2005883a 	mov	r2,r4
 4005708:	2807883a 	mov	r3,r5
 400570c:	1009883a 	mov	r4,r2
 4005710:	180b883a 	mov	r5,r3
 4005714:	4008e380 	call	4008e38 <__truncdfsf2>
 4005718:	e0bffe15 	stw	r2,-8(fp)

		if (ch == CH_LEFT)
 400571c:	e0bffd17 	ldw	r2,-12(fp)
 4005720:	10800118 	cmpnei	r2,r2,4
 4005724:	1000031e 	bne	r2,zero,4005734 <checkLeftRight+0xc4>
			LEFT_VOLT = volt;
 4005728:	e0bffe17 	ldw	r2,-8(fp)
 400572c:	d0a04415 	stw	r2,-32496(gp)
 4005730:	00000506 	br	4005748 <checkLeftRight+0xd8>
		else if (ch == CH_RIGHT)
 4005734:	e0bffd17 	ldw	r2,-12(fp)
 4005738:	10800198 	cmpnei	r2,r2,6
 400573c:	1000021e 	bne	r2,zero,4005748 <checkLeftRight+0xd8>
			RIGHT_VOLT = volt;
 4005740:	e0bffe17 	ldw	r2,-8(fp)
 4005744:	d0a04a15 	stw	r2,-32472(gp)
void checkLeftRight(){
	alt_u16 data16;
	float volt = 0;
	int ch = 0;

	for (ch = 0; ch < 8; ch++){
 4005748:	e0bffd17 	ldw	r2,-12(fp)
 400574c:	10800044 	addi	r2,r2,1
 4005750:	e0bffd15 	stw	r2,-12(fp)
 4005754:	e0bffd17 	ldw	r2,-12(fp)
 4005758:	10800210 	cmplti	r2,r2,8
 400575c:	103fcc1e 	bne	r2,zero,4005690 <checkLeftRight+0x20>
		else if (ch == CH_RIGHT)
			RIGHT_VOLT = volt;
		//printf("CH%i ADC is = %.2f V\r\n", ch, volt);
	}

	if (isSensorClear(LEFT_VOLT)){
 4005760:	d0a04417 	ldw	r2,-32496(gp)
 4005764:	1009883a 	mov	r4,r2
 4005768:	4005e240 	call	4005e24 <isSensorClear>
 400576c:	1005003a 	cmpeq	r2,r2,zero
 4005770:	1000031e 	bne	r2,zero,4005780 <checkLeftRight+0x110>
		LEFT_CLEAR = TRUE;
 4005774:	00800044 	movi	r2,1
 4005778:	d0a04815 	stw	r2,-32480(gp)
 400577c:	00000106 	br	4005784 <checkLeftRight+0x114>
	}else{
		LEFT_CLEAR = FALSE;
 4005780:	d0204815 	stw	zero,-32480(gp)
	}

	if (isSensorClear(RIGHT_VOLT)){
 4005784:	d0a04a17 	ldw	r2,-32472(gp)
 4005788:	1009883a 	mov	r4,r2
 400578c:	4005e240 	call	4005e24 <isSensorClear>
 4005790:	1005003a 	cmpeq	r2,r2,zero
 4005794:	1000031e 	bne	r2,zero,40057a4 <checkLeftRight+0x134>
		RIGHT_CLEAR = TRUE;
 4005798:	00800044 	movi	r2,1
 400579c:	d0a03b15 	stw	r2,-32532(gp)
 40057a0:	00000106 	br	40057a8 <checkLeftRight+0x138>
	}else{
		RIGHT_CLEAR = FALSE;
 40057a4:	d0203b15 	stw	zero,-32532(gp)
	}
}
 40057a8:	e037883a 	mov	sp,fp
 40057ac:	dfc00117 	ldw	ra,4(sp)
 40057b0:	df000017 	ldw	fp,0(sp)
 40057b4:	dec00204 	addi	sp,sp,8
 40057b8:	f800283a 	ret

040057bc <Servo_Task>:

void Servo_Task(void* pData){
 40057bc:	defffd04 	addi	sp,sp,-12
 40057c0:	dfc00215 	stw	ra,8(sp)
 40057c4:	df000115 	stw	fp,4(sp)
 40057c8:	df000104 	addi	fp,sp,4
 40057cc:	e13fff15 	stw	r4,-4(fp)
//send PWM signals to Servo for continuous rotation +/- 20 degrees
	//printf("Testing Servo! \n");

	FRONT_SERVO[0].quadrant = "left";
 40057d0:	00c100f4 	movhi	r3,1027
 40057d4:	18eac304 	addi	r3,r3,-21748
 40057d8:	008100b4 	movhi	r2,1026
 40057dc:	1090dd04 	addi	r2,r2,17268
 40057e0:	18800015 	stw	r2,0(r3)
	FRONT_SERVO[0].angle = -15;
 40057e4:	00c100f4 	movhi	r3,1027
 40057e8:	18eac304 	addi	r3,r3,-21748
 40057ec:	18000115 	stw	zero,4(r3)
 40057f0:	00b00bb4 	movhi	r2,49198
 40057f4:	18800215 	stw	r2,8(r3)
	FRONT_SERVO[1].quadrant = "center";
 40057f8:	00c100f4 	movhi	r3,1027
 40057fc:	18eac304 	addi	r3,r3,-21748
 4005800:	008100b4 	movhi	r2,1026
 4005804:	1090df04 	addi	r2,r2,17276
 4005808:	18800515 	stw	r2,20(r3)
	FRONT_SERVO[1].angle = 0;
 400580c:	008100f4 	movhi	r2,1027
 4005810:	10aac304 	addi	r2,r2,-21748
 4005814:	10000615 	stw	zero,24(r2)
 4005818:	10000715 	stw	zero,28(r2)
	FRONT_SERVO[2].quadrant = "right";
 400581c:	00c100f4 	movhi	r3,1027
 4005820:	18eac304 	addi	r3,r3,-21748
 4005824:	008100b4 	movhi	r2,1026
 4005828:	1090e104 	addi	r2,r2,17284
 400582c:	18800a15 	stw	r2,40(r3)
	FRONT_SERVO[2].angle = 15;
 4005830:	00c100f4 	movhi	r3,1027
 4005834:	18eac304 	addi	r3,r3,-21748
 4005838:	18000b15 	stw	zero,44(r3)
 400583c:	00900bb4 	movhi	r2,16430
 4005840:	18800c15 	stw	r2,48(r3)
	IOWR(SERVO_BASE, 0, 0.1 * SERVO_MAX);
 4005844:	0007883a 	mov	r3,zero
 4005848:	008000b4 	movhi	r2,2
 400584c:	10a1a804 	addi	r2,r2,-31072
 4005850:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 1, 0);
 4005854:	0009883a 	mov	r4,zero
 4005858:	000b883a 	mov	r5,zero
 400585c:	01800044 	movi	r6,1
 4005860:	000f883a 	mov	r7,zero
 4005864:	401fe300 	call	401fe30 <OSTimeDlyHMSM>

	while(1){
		servoRotate(FRONT_SERVO);
 4005868:	010100f4 	movhi	r4,1027
 400586c:	212ac304 	addi	r4,r4,-21748
 4005870:	40058840 	call	4005884 <servoRotate>
		navigateFront(FRONT_SERVO);
 4005874:	010100f4 	movhi	r4,1027
 4005878:	212ac304 	addi	r4,r4,-21748
 400587c:	4005be00 	call	4005be0 <navigateFront>
	}
 4005880:	003ff906 	br	4005868 <Servo_Task+0xac>

04005884 <servoRotate>:
}

void servoRotate(angle_obj *FRONT_SERVO){
 4005884:	defffc04 	addi	sp,sp,-16
 4005888:	dfc00315 	stw	ra,12(sp)
 400588c:	df000215 	stw	fp,8(sp)
 4005890:	dc000115 	stw	r16,4(sp)
 4005894:	df000104 	addi	fp,sp,4
 4005898:	e13fff15 	stw	r4,-4(fp)
	//return if any of these return a too close object
	IOWR(SERVO_BASE, 0, SERVO_LEFT * SERVO_MAX);
 400589c:	0007883a 	mov	r3,zero
 40058a0:	008000b4 	movhi	r2,2
 40058a4:	10b24204 	addi	r2,r2,-14072
 40058a8:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 250);
 40058ac:	0009883a 	mov	r4,zero
 40058b0:	000b883a 	mov	r5,zero
 40058b4:	000d883a 	mov	r6,zero
 40058b8:	01c03e84 	movi	r7,250
 40058bc:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	FRONT_SERVO[0].distance = (float) ADC_Read(CH_FRONT) * 3.3 / 4095.0;
 40058c0:	01000044 	movi	r4,1
 40058c4:	4001bd80 	call	4001bd8 <ADC_Read>
 40058c8:	113fffcc 	andi	r4,r2,65535
 40058cc:	4007e300 	call	4007e30 <__floatunsisf>
 40058d0:	1009883a 	mov	r4,r2
 40058d4:	4007ddc0 	call	4007ddc <__extendsfdf2>
 40058d8:	100b883a 	mov	r5,r2
 40058dc:	180d883a 	mov	r6,r3
 40058e0:	2809883a 	mov	r4,r5
 40058e4:	300b883a 	mov	r5,r6
 40058e8:	019999b4 	movhi	r6,26214
 40058ec:	31999984 	addi	r6,r6,26214
 40058f0:	01d002b4 	movhi	r7,16394
 40058f4:	39d99984 	addi	r7,r7,26214
 40058f8:	40083f40 	call	40083f4 <__muldf3>
 40058fc:	1009883a 	mov	r4,r2
 4005900:	180b883a 	mov	r5,r3
 4005904:	2005883a 	mov	r2,r4
 4005908:	2807883a 	mov	r3,r5
 400590c:	1009883a 	mov	r4,r2
 4005910:	180b883a 	mov	r5,r3
 4005914:	000d883a 	mov	r6,zero
 4005918:	01d02c34 	movhi	r7,16560
 400591c:	39ff8004 	addi	r7,r7,-512
 4005920:	40087b80 	call	40087b8 <__divdf3>
 4005924:	1009883a 	mov	r4,r2
 4005928:	180b883a 	mov	r5,r3
 400592c:	2005883a 	mov	r2,r4
 4005930:	2807883a 	mov	r3,r5
 4005934:	e13fff17 	ldw	r4,-4(fp)
 4005938:	20800315 	stw	r2,12(r4)
 400593c:	20c00415 	stw	r3,16(r4)

	IOWR(SERVO_BASE, 0, SERVO_CENTER * SERVO_MAX);
 4005940:	0007883a 	mov	r3,zero
 4005944:	008000b4 	movhi	r2,2
 4005948:	10a1a804 	addi	r2,r2,-31072
 400594c:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 250);
 4005950:	0009883a 	mov	r4,zero
 4005954:	000b883a 	mov	r5,zero
 4005958:	000d883a 	mov	r6,zero
 400595c:	01c03e84 	movi	r7,250
 4005960:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	FRONT_SERVO[1].distance = (float) ADC_Read(CH_FRONT) * 3.3 / 4095.0;
 4005964:	e0bfff17 	ldw	r2,-4(fp)
 4005968:	14000504 	addi	r16,r2,20
 400596c:	01000044 	movi	r4,1
 4005970:	4001bd80 	call	4001bd8 <ADC_Read>
 4005974:	113fffcc 	andi	r4,r2,65535
 4005978:	4007e300 	call	4007e30 <__floatunsisf>
 400597c:	1009883a 	mov	r4,r2
 4005980:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4005984:	100b883a 	mov	r5,r2
 4005988:	180d883a 	mov	r6,r3
 400598c:	2809883a 	mov	r4,r5
 4005990:	300b883a 	mov	r5,r6
 4005994:	019999b4 	movhi	r6,26214
 4005998:	31999984 	addi	r6,r6,26214
 400599c:	01d002b4 	movhi	r7,16394
 40059a0:	39d99984 	addi	r7,r7,26214
 40059a4:	40083f40 	call	40083f4 <__muldf3>
 40059a8:	1009883a 	mov	r4,r2
 40059ac:	180b883a 	mov	r5,r3
 40059b0:	2005883a 	mov	r2,r4
 40059b4:	2807883a 	mov	r3,r5
 40059b8:	1009883a 	mov	r4,r2
 40059bc:	180b883a 	mov	r5,r3
 40059c0:	000d883a 	mov	r6,zero
 40059c4:	01d02c34 	movhi	r7,16560
 40059c8:	39ff8004 	addi	r7,r7,-512
 40059cc:	40087b80 	call	40087b8 <__divdf3>
 40059d0:	1009883a 	mov	r4,r2
 40059d4:	180b883a 	mov	r5,r3
 40059d8:	2005883a 	mov	r2,r4
 40059dc:	2807883a 	mov	r3,r5
 40059e0:	80800315 	stw	r2,12(r16)
 40059e4:	80c00415 	stw	r3,16(r16)

	if (!isSensorClear(FRONT_SERVO[1].distance)){
 40059e8:	e0bfff17 	ldw	r2,-4(fp)
 40059ec:	11000504 	addi	r4,r2,20
 40059f0:	20800317 	ldw	r2,12(r4)
 40059f4:	20c00417 	ldw	r3,16(r4)
 40059f8:	1009883a 	mov	r4,r2
 40059fc:	180b883a 	mov	r5,r3
 4005a00:	4008e380 	call	4008e38 <__truncdfsf2>
 4005a04:	1009883a 	mov	r4,r2
 4005a08:	4005e240 	call	4005e24 <isSensorClear>
 4005a0c:	1004c03a 	cmpne	r2,r2,zero
 4005a10:	1000091e 	bne	r2,zero,4005a38 <servoRotate+0x1b4>
		FRONT_SERVO[2].distance = 2.1;
 4005a14:	e0bfff17 	ldw	r2,-4(fp)
 4005a18:	10c00a04 	addi	r3,r2,40
 4005a1c:	00b33374 	movhi	r2,52429
 4005a20:	10b33344 	addi	r2,r2,-13107
 4005a24:	18800315 	stw	r2,12(r3)
 4005a28:	00900074 	movhi	r2,16385
 4005a2c:	10b33304 	addi	r2,r2,-13108
 4005a30:	18800415 	stw	r2,16(r3)
		return;
 4005a34:	00006406 	br	4005bc8 <servoRotate+0x344>
	}

	IOWR(SERVO_BASE, 0, SERVO_RIGHT * SERVO_MAX);
 4005a38:	0007883a 	mov	r3,zero
 4005a3c:	00800074 	movhi	r2,1
 4005a40:	1097e404 	addi	r2,r2,24464
 4005a44:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 250);
 4005a48:	0009883a 	mov	r4,zero
 4005a4c:	000b883a 	mov	r5,zero
 4005a50:	000d883a 	mov	r6,zero
 4005a54:	01c03e84 	movi	r7,250
 4005a58:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	FRONT_SERVO[2].distance = (float) ADC_Read(CH_FRONT) * 3.3 / 4095.0;
 4005a5c:	e0bfff17 	ldw	r2,-4(fp)
 4005a60:	14000a04 	addi	r16,r2,40
 4005a64:	01000044 	movi	r4,1
 4005a68:	4001bd80 	call	4001bd8 <ADC_Read>
 4005a6c:	113fffcc 	andi	r4,r2,65535
 4005a70:	4007e300 	call	4007e30 <__floatunsisf>
 4005a74:	1009883a 	mov	r4,r2
 4005a78:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4005a7c:	100b883a 	mov	r5,r2
 4005a80:	180d883a 	mov	r6,r3
 4005a84:	2809883a 	mov	r4,r5
 4005a88:	300b883a 	mov	r5,r6
 4005a8c:	019999b4 	movhi	r6,26214
 4005a90:	31999984 	addi	r6,r6,26214
 4005a94:	01d002b4 	movhi	r7,16394
 4005a98:	39d99984 	addi	r7,r7,26214
 4005a9c:	40083f40 	call	40083f4 <__muldf3>
 4005aa0:	1009883a 	mov	r4,r2
 4005aa4:	180b883a 	mov	r5,r3
 4005aa8:	2005883a 	mov	r2,r4
 4005aac:	2807883a 	mov	r3,r5
 4005ab0:	1009883a 	mov	r4,r2
 4005ab4:	180b883a 	mov	r5,r3
 4005ab8:	000d883a 	mov	r6,zero
 4005abc:	01d02c34 	movhi	r7,16560
 4005ac0:	39ff8004 	addi	r7,r7,-512
 4005ac4:	40087b80 	call	40087b8 <__divdf3>
 4005ac8:	1009883a 	mov	r4,r2
 4005acc:	180b883a 	mov	r5,r3
 4005ad0:	2005883a 	mov	r2,r4
 4005ad4:	2807883a 	mov	r3,r5
 4005ad8:	80800315 	stw	r2,12(r16)
 4005adc:	80c00415 	stw	r3,16(r16)
	if (!isSensorClear(FRONT_SERVO[2].distance)){
 4005ae0:	e0bfff17 	ldw	r2,-4(fp)
 4005ae4:	11000a04 	addi	r4,r2,40
 4005ae8:	20800317 	ldw	r2,12(r4)
 4005aec:	20c00417 	ldw	r3,16(r4)
 4005af0:	1009883a 	mov	r4,r2
 4005af4:	180b883a 	mov	r5,r3
 4005af8:	4008e380 	call	4008e38 <__truncdfsf2>
 4005afc:	1009883a 	mov	r4,r2
 4005b00:	4005e240 	call	4005e24 <isSensorClear>
 4005b04:	1005003a 	cmpeq	r2,r2,zero
 4005b08:	10002f1e 	bne	r2,zero,4005bc8 <servoRotate+0x344>
		return;
	}

	IOWR(SERVO_BASE, 0, SERVO_CENTER * SERVO_MAX);
 4005b0c:	0007883a 	mov	r3,zero
 4005b10:	008000b4 	movhi	r2,2
 4005b14:	10a1a804 	addi	r2,r2,-31072
 4005b18:	18800035 	stwio	r2,0(r3)
	OSTimeDlyHMSM(0, 0, 0, 250);
 4005b1c:	0009883a 	mov	r4,zero
 4005b20:	000b883a 	mov	r5,zero
 4005b24:	000d883a 	mov	r6,zero
 4005b28:	01c03e84 	movi	r7,250
 4005b2c:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	FRONT_SERVO[1].distance = (float) ADC_Read(CH_FRONT) * 3.3 / 4095.0;
 4005b30:	e0bfff17 	ldw	r2,-4(fp)
 4005b34:	14000504 	addi	r16,r2,20
 4005b38:	01000044 	movi	r4,1
 4005b3c:	4001bd80 	call	4001bd8 <ADC_Read>
 4005b40:	113fffcc 	andi	r4,r2,65535
 4005b44:	4007e300 	call	4007e30 <__floatunsisf>
 4005b48:	1009883a 	mov	r4,r2
 4005b4c:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4005b50:	100b883a 	mov	r5,r2
 4005b54:	180d883a 	mov	r6,r3
 4005b58:	2809883a 	mov	r4,r5
 4005b5c:	300b883a 	mov	r5,r6
 4005b60:	019999b4 	movhi	r6,26214
 4005b64:	31999984 	addi	r6,r6,26214
 4005b68:	01d002b4 	movhi	r7,16394
 4005b6c:	39d99984 	addi	r7,r7,26214
 4005b70:	40083f40 	call	40083f4 <__muldf3>
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	180b883a 	mov	r5,r3
 4005b7c:	2005883a 	mov	r2,r4
 4005b80:	2807883a 	mov	r3,r5
 4005b84:	1009883a 	mov	r4,r2
 4005b88:	180b883a 	mov	r5,r3
 4005b8c:	000d883a 	mov	r6,zero
 4005b90:	01d02c34 	movhi	r7,16560
 4005b94:	39ff8004 	addi	r7,r7,-512
 4005b98:	40087b80 	call	40087b8 <__divdf3>
 4005b9c:	1009883a 	mov	r4,r2
 4005ba0:	180b883a 	mov	r5,r3
 4005ba4:	2005883a 	mov	r2,r4
 4005ba8:	2807883a 	mov	r3,r5
 4005bac:	80800315 	stw	r2,12(r16)
 4005bb0:	80c00415 	stw	r3,16(r16)

	OSTimeDlyHMSM(0, 0, 0, 200);
 4005bb4:	0009883a 	mov	r4,zero
 4005bb8:	000b883a 	mov	r5,zero
 4005bbc:	000d883a 	mov	r6,zero
 4005bc0:	01c03204 	movi	r7,200
 4005bc4:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
}
 4005bc8:	e037883a 	mov	sp,fp
 4005bcc:	dfc00217 	ldw	ra,8(sp)
 4005bd0:	df000117 	ldw	fp,4(sp)
 4005bd4:	dc000017 	ldw	r16,0(sp)
 4005bd8:	dec00304 	addi	sp,sp,12
 4005bdc:	f800283a 	ret

04005be0 <navigateFront>:

void navigateFront(angle_obj FRONT[]){
 4005be0:	defffa04 	addi	sp,sp,-24
 4005be4:	dfc00515 	stw	ra,20(sp)
 4005be8:	df000415 	stw	fp,16(sp)
 4005bec:	df000404 	addi	fp,sp,16
 4005bf0:	e13fff15 	stw	r4,-4(fp)

	if ((MOTOR_0_STATUS & MOTOR_1_STATUS) == MOTOR_STOP){
 4005bf4:	d0e04517 	ldw	r3,-32492(gp)
 4005bf8:	d0a04917 	ldw	r2,-32476(gp)
 4005bfc:	1884703a 	and	r2,r3,r2
 4005c00:	1004c03a 	cmpne	r2,r2,zero
 4005c04:	10003f1e 	bne	r2,zero,4005d04 <navigateFront+0x124>
		if (isSensorClear(FRONT[0].distance) && isSensorClear(FRONT[1].distance)  && isSensorClear(FRONT[2].distance))
 4005c08:	e13fff17 	ldw	r4,-4(fp)
 4005c0c:	20800317 	ldw	r2,12(r4)
 4005c10:	20c00417 	ldw	r3,16(r4)
 4005c14:	1009883a 	mov	r4,r2
 4005c18:	180b883a 	mov	r5,r3
 4005c1c:	4008e380 	call	4008e38 <__truncdfsf2>
 4005c20:	1009883a 	mov	r4,r2
 4005c24:	4005e240 	call	4005e24 <isSensorClear>
 4005c28:	1005003a 	cmpeq	r2,r2,zero
 4005c2c:	1000781e 	bne	r2,zero,4005e10 <navigateFront+0x230>
 4005c30:	e0bfff17 	ldw	r2,-4(fp)
 4005c34:	11000504 	addi	r4,r2,20
 4005c38:	20800317 	ldw	r2,12(r4)
 4005c3c:	20c00417 	ldw	r3,16(r4)
 4005c40:	1009883a 	mov	r4,r2
 4005c44:	180b883a 	mov	r5,r3
 4005c48:	4008e380 	call	4008e38 <__truncdfsf2>
 4005c4c:	1009883a 	mov	r4,r2
 4005c50:	4005e240 	call	4005e24 <isSensorClear>
 4005c54:	1005003a 	cmpeq	r2,r2,zero
 4005c58:	10006d1e 	bne	r2,zero,4005e10 <navigateFront+0x230>
 4005c5c:	e0bfff17 	ldw	r2,-4(fp)
 4005c60:	11000a04 	addi	r4,r2,40
 4005c64:	20800317 	ldw	r2,12(r4)
 4005c68:	20c00417 	ldw	r3,16(r4)
 4005c6c:	1009883a 	mov	r4,r2
 4005c70:	180b883a 	mov	r5,r3
 4005c74:	4008e380 	call	4008e38 <__truncdfsf2>
 4005c78:	1009883a 	mov	r4,r2
 4005c7c:	4005e240 	call	4005e24 <isSensorClear>
 4005c80:	1005003a 	cmpeq	r2,r2,zero
 4005c84:	1000621e 	bne	r2,zero,4005e10 <navigateFront+0x230>
		{
			FRONT_CLEAR = TRUE;
 4005c88:	00800044 	movi	r2,1
 4005c8c:	d0a04715 	stw	r2,-32484(gp)

			if (SYSTEM_STATUS == SYS_FREE){
 4005c90:	d0a03a17 	ldw	r2,-32536(gp)
 4005c94:	1004c03a 	cmpne	r2,r2,zero
 4005c98:	10005d1e 	bne	r2,zero,4005e10 <navigateFront+0x230>
				SYSTEM_STATUS = SYS_BUSY;
 4005c9c:	00800044 	movi	r2,1
 4005ca0:	d0a03a15 	stw	r2,-32536(gp)
				printf("Clear! Front Sensor detects %f, %f, %f \n", FRONT[0].distance, FRONT[1].distance, FRONT[2].distance);
 4005ca4:	e0bfff17 	ldw	r2,-4(fp)
 4005ca8:	12000317 	ldw	r8,12(r2)
 4005cac:	12400417 	ldw	r9,16(r2)
 4005cb0:	e0bfff17 	ldw	r2,-4(fp)
 4005cb4:	10800504 	addi	r2,r2,20
 4005cb8:	11000317 	ldw	r4,12(r2)
 4005cbc:	11400417 	ldw	r5,16(r2)
 4005cc0:	e0bfff17 	ldw	r2,-4(fp)
 4005cc4:	11800a04 	addi	r6,r2,40
 4005cc8:	30800317 	ldw	r2,12(r6)
 4005ccc:	30c00417 	ldw	r3,16(r6)
 4005cd0:	d8800115 	stw	r2,4(sp)
 4005cd4:	d8c00215 	stw	r3,8(sp)
 4005cd8:	d9400015 	stw	r5,0(sp)
 4005cdc:	200f883a 	mov	r7,r4
 4005ce0:	010100b4 	movhi	r4,1026
 4005ce4:	2110e304 	addi	r4,r4,17292
 4005ce8:	400b883a 	mov	r5,r8
 4005cec:	480d883a 	mov	r6,r9
 4005cf0:	400a15c0 	call	400a15c <printf>
				OSQPost(MainQueue, (void *) FRONT_IS_CLEAR);
 4005cf4:	d1204317 	ldw	r4,-32500(gp)
 4005cf8:	01400044 	movi	r5,1
 4005cfc:	401cf740 	call	401cf74 <OSQPost>
 4005d00:	00004306 	br	4005e10 <navigateFront+0x230>
			}
		}
	}else if ((MOTOR_0_STATUS & MOTOR_1_STATUS) == MOTOR_FULL) //close to an object and moving
 4005d04:	d0e04517 	ldw	r3,-32492(gp)
 4005d08:	d0a04917 	ldw	r2,-32476(gp)
 4005d0c:	1884703a 	and	r2,r3,r2
 4005d10:	10800058 	cmpnei	r2,r2,1
 4005d14:	10003e1e 	bne	r2,zero,4005e10 <navigateFront+0x230>
	{
		if (!isSensorClear(FRONT[0].distance) || !isSensorClear(FRONT[1].distance)  || !isSensorClear(FRONT[2].distance)){
 4005d18:	e13fff17 	ldw	r4,-4(fp)
 4005d1c:	20800317 	ldw	r2,12(r4)
 4005d20:	20c00417 	ldw	r3,16(r4)
 4005d24:	1009883a 	mov	r4,r2
 4005d28:	180b883a 	mov	r5,r3
 4005d2c:	4008e380 	call	4008e38 <__truncdfsf2>
 4005d30:	1009883a 	mov	r4,r2
 4005d34:	4005e240 	call	4005e24 <isSensorClear>
 4005d38:	1005003a 	cmpeq	r2,r2,zero
 4005d3c:	1000161e 	bne	r2,zero,4005d98 <navigateFront+0x1b8>
 4005d40:	e0bfff17 	ldw	r2,-4(fp)
 4005d44:	11000504 	addi	r4,r2,20
 4005d48:	20800317 	ldw	r2,12(r4)
 4005d4c:	20c00417 	ldw	r3,16(r4)
 4005d50:	1009883a 	mov	r4,r2
 4005d54:	180b883a 	mov	r5,r3
 4005d58:	4008e380 	call	4008e38 <__truncdfsf2>
 4005d5c:	1009883a 	mov	r4,r2
 4005d60:	4005e240 	call	4005e24 <isSensorClear>
 4005d64:	1005003a 	cmpeq	r2,r2,zero
 4005d68:	10000b1e 	bne	r2,zero,4005d98 <navigateFront+0x1b8>
 4005d6c:	e0bfff17 	ldw	r2,-4(fp)
 4005d70:	11000a04 	addi	r4,r2,40
 4005d74:	20800317 	ldw	r2,12(r4)
 4005d78:	20c00417 	ldw	r3,16(r4)
 4005d7c:	1009883a 	mov	r4,r2
 4005d80:	180b883a 	mov	r5,r3
 4005d84:	4008e380 	call	4008e38 <__truncdfsf2>
 4005d88:	1009883a 	mov	r4,r2
 4005d8c:	4005e240 	call	4005e24 <isSensorClear>
 4005d90:	1004c03a 	cmpne	r2,r2,zero
 4005d94:	10001e1e 	bne	r2,zero,4005e10 <navigateFront+0x230>
			FRONT_CLEAR = FALSE;
 4005d98:	d0204715 	stw	zero,-32484(gp)

			if (SYSTEM_STATUS == SYS_FREE){
 4005d9c:	d0a03a17 	ldw	r2,-32536(gp)
 4005da0:	1004c03a 	cmpne	r2,r2,zero
 4005da4:	10001a1e 	bne	r2,zero,4005e10 <navigateFront+0x230>
				printf("Blocked! Front Sensor detects %f, %f, %f \n", FRONT[0].distance, FRONT[1].distance, FRONT[2].distance);
 4005da8:	e0bfff17 	ldw	r2,-4(fp)
 4005dac:	12000317 	ldw	r8,12(r2)
 4005db0:	12400417 	ldw	r9,16(r2)
 4005db4:	e0bfff17 	ldw	r2,-4(fp)
 4005db8:	10800504 	addi	r2,r2,20
 4005dbc:	11000317 	ldw	r4,12(r2)
 4005dc0:	11400417 	ldw	r5,16(r2)
 4005dc4:	e0bfff17 	ldw	r2,-4(fp)
 4005dc8:	11800a04 	addi	r6,r2,40
 4005dcc:	30800317 	ldw	r2,12(r6)
 4005dd0:	30c00417 	ldw	r3,16(r6)
 4005dd4:	d8800115 	stw	r2,4(sp)
 4005dd8:	d8c00215 	stw	r3,8(sp)
 4005ddc:	d9400015 	stw	r5,0(sp)
 4005de0:	200f883a 	mov	r7,r4
 4005de4:	010100b4 	movhi	r4,1026
 4005de8:	2110ee04 	addi	r4,r4,17336
 4005dec:	400b883a 	mov	r5,r8
 4005df0:	480d883a 	mov	r6,r9
 4005df4:	400a15c0 	call	400a15c <printf>
				M_allStop();
 4005df8:	4002dc40 	call	4002dc4 <M_allStop>
				SYSTEM_STATUS = SYS_BUSY;
 4005dfc:	00800044 	movi	r2,1
 4005e00:	d0a03a15 	stw	r2,-32536(gp)
				OSQPost(MainQueue, (void *) FRONT_IS_BLOCKED);
 4005e04:	d1204317 	ldw	r4,-32500(gp)
 4005e08:	000b883a 	mov	r5,zero
 4005e0c:	401cf740 	call	401cf74 <OSQPost>
				SYSTEM_STATUS = SYS_BUSY;
				OSQPost(MainQueue, (void *) FRONT_RIGHT_IS_BLOCKED);
				FRONT_CLEAR = FALSE;
			}
	*/
}
 4005e10:	e037883a 	mov	sp,fp
 4005e14:	dfc00117 	ldw	ra,4(sp)
 4005e18:	df000017 	ldw	fp,0(sp)
 4005e1c:	dec00204 	addi	sp,sp,8
 4005e20:	f800283a 	ret

04005e24 <isSensorClear>:

bool isSensorClear(float volt){
 4005e24:	defffc04 	addi	sp,sp,-16
 4005e28:	dfc00315 	stw	ra,12(sp)
 4005e2c:	df000215 	stw	fp,8(sp)
 4005e30:	df000204 	addi	fp,sp,8
 4005e34:	e13fff15 	stw	r4,-4(fp)
	bool retval = TRUE;
 4005e38:	00800044 	movi	r2,1
 4005e3c:	e0bffe15 	stw	r2,-8(fp)

	if (volt > 1.9){
 4005e40:	e13fff17 	ldw	r4,-4(fp)
 4005e44:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4005e48:	100b883a 	mov	r5,r2
 4005e4c:	180d883a 	mov	r6,r3
 4005e50:	2809883a 	mov	r4,r5
 4005e54:	300b883a 	mov	r5,r6
 4005e58:	019999b4 	movhi	r6,26214
 4005e5c:	31999984 	addi	r6,r6,26214
 4005e60:	01cfffb4 	movhi	r7,16382
 4005e64:	39d99984 	addi	r7,r7,26214
 4005e68:	4008a100 	call	4008a10 <__gtdf2>
 4005e6c:	10800048 	cmpgei	r2,r2,1
 4005e70:	1000011e 	bne	r2,zero,4005e78 <isSensorClear+0x54>
 4005e74:	00000206 	br	4005e80 <isSensorClear+0x5c>
		retval = FALSE;
 4005e78:	e03ffe15 	stw	zero,-8(fp)
 4005e7c:	00000006 	br	4005e80 <isSensorClear+0x5c>
	}
	else if (volt <= 1.9 && volt > 0){
		//
	}

	return retval;
 4005e80:	e0bffe17 	ldw	r2,-8(fp)
}
 4005e84:	e037883a 	mov	sp,fp
 4005e88:	dfc00117 	ldw	ra,4(sp)
 4005e8c:	df000017 	ldw	fp,0(sp)
 4005e90:	dec00204 	addi	sp,sp,8
 4005e94:	f800283a 	ret

04005e98 <Encoder_Task>:

void Encoder_Task(void* pData){
 4005e98:	defff504 	addi	sp,sp,-44
 4005e9c:	dfc00a15 	stw	ra,40(sp)
 4005ea0:	df000915 	stw	fp,36(sp)
 4005ea4:	df000904 	addi	fp,sp,36
 4005ea8:	e13fff15 	stw	r4,-4(fp)
	//read from pins like for PWM
	//double encode_0_a, encode_1_a; //encode_b;
	double counts_0_new, counts_0_old, counts_1_new, counts_1_old;
	counts_0_old = 0;
 4005eac:	e03ffb15 	stw	zero,-20(fp)
 4005eb0:	e03ffc15 	stw	zero,-16(fp)
	counts_1_old = 0;
 4005eb4:	e03ff715 	stw	zero,-36(fp)
 4005eb8:	e03ff815 	stw	zero,-32(fp)

	//ENCODER_0A, ENCODER_1A increment forever... but slowly. Reset values after a specific amount of time

	OSTimeDlyHMSM(0, 0, 1, 0);
 4005ebc:	0009883a 	mov	r4,zero
 4005ec0:	000b883a 	mov	r5,zero
 4005ec4:	01800044 	movi	r6,1
 4005ec8:	000f883a 	mov	r7,zero
 4005ecc:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	16 counts/rev * 131 rev/rev * 1 rev/ ( 2 * pi * 4cm) = 2096 counts / 25.13cm
*/
	while (1)
	{
		//1st motor
		counts_0_new = (double) IORD(ENCODER_0A_BASE, 0);
 4005ed0:	00801004 	movi	r2,64
 4005ed4:	11000037 	ldwio	r4,0(r2)
 4005ed8:	4008c300 	call	4008c30 <__floatsidf>
 4005edc:	1009883a 	mov	r4,r2
 4005ee0:	180b883a 	mov	r5,r3
 4005ee4:	e13ffd15 	stw	r4,-12(fp)
 4005ee8:	e17ffe15 	stw	r5,-8(fp)

		if ( counts_0_new >= counts_0_old ){
 4005eec:	e13ffd17 	ldw	r4,-12(fp)
 4005ef0:	e17ffe17 	ldw	r5,-8(fp)
 4005ef4:	e1bffb17 	ldw	r6,-20(fp)
 4005ef8:	e1fffc17 	ldw	r7,-16(fp)
 4005efc:	4008a980 	call	4008a98 <__gedf2>
 4005f00:	1004403a 	cmpge	r2,r2,zero
 4005f04:	1000011e 	bne	r2,zero,4005f0c <Encoder_Task+0x74>
 4005f08:	00001b06 	br	4005f78 <Encoder_Task+0xe0>
			ENCODER_0A += (counts_0_new - counts_0_old);
 4005f0c:	e13ffd17 	ldw	r4,-12(fp)
 4005f10:	e17ffe17 	ldw	r5,-8(fp)
 4005f14:	e1bffb17 	ldw	r6,-20(fp)
 4005f18:	e1fffc17 	ldw	r7,-16(fp)
 4005f1c:	40083000 	call	4008300 <__subdf3>
 4005f20:	1009883a 	mov	r4,r2
 4005f24:	180b883a 	mov	r5,r3
 4005f28:	200d883a 	mov	r6,r4
 4005f2c:	280f883a 	mov	r7,r5
 4005f30:	d0a04117 	ldw	r2,-32508(gp)
 4005f34:	010100b4 	movhi	r4,1026
 4005f38:	211a8a04 	addi	r4,r4,27176
 4005f3c:	20c00017 	ldw	r3,0(r4)
 4005f40:	3009883a 	mov	r4,r6
 4005f44:	380b883a 	mov	r5,r7
 4005f48:	100d883a 	mov	r6,r2
 4005f4c:	180f883a 	mov	r7,r3
 4005f50:	40083800 	call	4008380 <__adddf3>
 4005f54:	1009883a 	mov	r4,r2
 4005f58:	180b883a 	mov	r5,r3
 4005f5c:	2005883a 	mov	r2,r4
 4005f60:	2807883a 	mov	r3,r5
 4005f64:	d0a04115 	stw	r2,-32508(gp)
 4005f68:	010100b4 	movhi	r4,1026
 4005f6c:	211a8a04 	addi	r4,r4,27176
 4005f70:	20c00015 	stw	r3,0(r4)
 4005f74:	00001106 	br	4005fbc <Encoder_Task+0x124>
		}
		else{ //counter reset
			ENCODER_0A += counts_0_new;
 4005f78:	d0a04117 	ldw	r2,-32508(gp)
 4005f7c:	010100b4 	movhi	r4,1026
 4005f80:	211a8a04 	addi	r4,r4,27176
 4005f84:	20c00017 	ldw	r3,0(r4)
 4005f88:	1009883a 	mov	r4,r2
 4005f8c:	180b883a 	mov	r5,r3
 4005f90:	e1bffd17 	ldw	r6,-12(fp)
 4005f94:	e1fffe17 	ldw	r7,-8(fp)
 4005f98:	40083800 	call	4008380 <__adddf3>
 4005f9c:	1009883a 	mov	r4,r2
 4005fa0:	180b883a 	mov	r5,r3
 4005fa4:	2005883a 	mov	r2,r4
 4005fa8:	2807883a 	mov	r3,r5
 4005fac:	d0a04115 	stw	r2,-32508(gp)
 4005fb0:	010100b4 	movhi	r4,1026
 4005fb4:	211a8a04 	addi	r4,r4,27176
 4005fb8:	20c00015 	stw	r3,0(r4)
		}

		if ((counts_0_new - counts_0_old) < 1){
 4005fbc:	e13ffd17 	ldw	r4,-12(fp)
 4005fc0:	e17ffe17 	ldw	r5,-8(fp)
 4005fc4:	e1bffb17 	ldw	r6,-20(fp)
 4005fc8:	e1fffc17 	ldw	r7,-16(fp)
 4005fcc:	40083000 	call	4008300 <__subdf3>
 4005fd0:	1009883a 	mov	r4,r2
 4005fd4:	180b883a 	mov	r5,r3
 4005fd8:	2005883a 	mov	r2,r4
 4005fdc:	2807883a 	mov	r3,r5
 4005fe0:	1009883a 	mov	r4,r2
 4005fe4:	180b883a 	mov	r5,r3
 4005fe8:	000d883a 	mov	r6,zero
 4005fec:	01cffc34 	movhi	r7,16368
 4005ff0:	4008b200 	call	4008b20 <__ltdf2>
 4005ff4:	1004803a 	cmplt	r2,r2,zero
 4005ff8:	1000011e 	bne	r2,zero,4006000 <Encoder_Task+0x168>
 4005ffc:	00000206 	br	4006008 <Encoder_Task+0x170>
			MOTOR_0_STATUS = MOTOR_STOP;
 4006000:	d0204515 	stw	zero,-32492(gp)
 4006004:	00000206 	br	4006010 <Encoder_Task+0x178>
		}
		else{
			MOTOR_0_STATUS = MOTOR_FULL;
 4006008:	00800044 	movi	r2,1
 400600c:	d0a04515 	stw	r2,-32492(gp)
		}

		//printf("ENCODER: old value is: %f, new value is : %f \n", counts_0_old, counts_0_new);
		counts_0_old = counts_0_new;
 4006010:	e0bffd17 	ldw	r2,-12(fp)
 4006014:	e0bffb15 	stw	r2,-20(fp)
 4006018:	e0bffe17 	ldw	r2,-8(fp)
 400601c:	e0bffc15 	stw	r2,-16(fp)

		//2nd motor
		counts_1_new = (double) IORD(ENCODER_1A_BASE, 0);
 4006020:	00800804 	movi	r2,32
 4006024:	11000037 	ldwio	r4,0(r2)
 4006028:	4008c300 	call	4008c30 <__floatsidf>
 400602c:	1009883a 	mov	r4,r2
 4006030:	180b883a 	mov	r5,r3
 4006034:	e13ff915 	stw	r4,-28(fp)
 4006038:	e17ffa15 	stw	r5,-24(fp)
		if ( counts_1_new >= counts_1_old ){
 400603c:	e13ff917 	ldw	r4,-28(fp)
 4006040:	e17ffa17 	ldw	r5,-24(fp)
 4006044:	e1bff717 	ldw	r6,-36(fp)
 4006048:	e1fff817 	ldw	r7,-32(fp)
 400604c:	4008a980 	call	4008a98 <__gedf2>
 4006050:	1004403a 	cmpge	r2,r2,zero
 4006054:	1000011e 	bne	r2,zero,400605c <Encoder_Task+0x1c4>
 4006058:	00001b06 	br	40060c8 <Encoder_Task+0x230>
			ENCODER_1A += (counts_1_new - counts_1_old);
 400605c:	e13ff917 	ldw	r4,-28(fp)
 4006060:	e17ffa17 	ldw	r5,-24(fp)
 4006064:	e1bff717 	ldw	r6,-36(fp)
 4006068:	e1fff817 	ldw	r7,-32(fp)
 400606c:	40083000 	call	4008300 <__subdf3>
 4006070:	1009883a 	mov	r4,r2
 4006074:	180b883a 	mov	r5,r3
 4006078:	200d883a 	mov	r6,r4
 400607c:	280f883a 	mov	r7,r5
 4006080:	d0a03d17 	ldw	r2,-32524(gp)
 4006084:	010100b4 	movhi	r4,1026
 4006088:	211a8604 	addi	r4,r4,27160
 400608c:	20c00017 	ldw	r3,0(r4)
 4006090:	3009883a 	mov	r4,r6
 4006094:	380b883a 	mov	r5,r7
 4006098:	100d883a 	mov	r6,r2
 400609c:	180f883a 	mov	r7,r3
 40060a0:	40083800 	call	4008380 <__adddf3>
 40060a4:	1009883a 	mov	r4,r2
 40060a8:	180b883a 	mov	r5,r3
 40060ac:	2005883a 	mov	r2,r4
 40060b0:	2807883a 	mov	r3,r5
 40060b4:	d0a03d15 	stw	r2,-32524(gp)
 40060b8:	010100b4 	movhi	r4,1026
 40060bc:	211a8604 	addi	r4,r4,27160
 40060c0:	20c00015 	stw	r3,0(r4)
 40060c4:	00001106 	br	400610c <Encoder_Task+0x274>
		}
		else{ //counter reset
			ENCODER_1A += counts_1_new;
 40060c8:	d0a03d17 	ldw	r2,-32524(gp)
 40060cc:	010100b4 	movhi	r4,1026
 40060d0:	211a8604 	addi	r4,r4,27160
 40060d4:	20c00017 	ldw	r3,0(r4)
 40060d8:	1009883a 	mov	r4,r2
 40060dc:	180b883a 	mov	r5,r3
 40060e0:	e1bff917 	ldw	r6,-28(fp)
 40060e4:	e1fffa17 	ldw	r7,-24(fp)
 40060e8:	40083800 	call	4008380 <__adddf3>
 40060ec:	1009883a 	mov	r4,r2
 40060f0:	180b883a 	mov	r5,r3
 40060f4:	2005883a 	mov	r2,r4
 40060f8:	2807883a 	mov	r3,r5
 40060fc:	d0a03d15 	stw	r2,-32524(gp)
 4006100:	010100b4 	movhi	r4,1026
 4006104:	211a8604 	addi	r4,r4,27160
 4006108:	20c00015 	stw	r3,0(r4)
			//printf("counter reset, temp value is: %f, motor 1 value is : %f \n", temp, motor_1);
		}

		if ((counts_1_new - counts_1_old) < 2){
 400610c:	e13ff917 	ldw	r4,-28(fp)
 4006110:	e17ffa17 	ldw	r5,-24(fp)
 4006114:	e1bff717 	ldw	r6,-36(fp)
 4006118:	e1fff817 	ldw	r7,-32(fp)
 400611c:	40083000 	call	4008300 <__subdf3>
 4006120:	1009883a 	mov	r4,r2
 4006124:	180b883a 	mov	r5,r3
 4006128:	2005883a 	mov	r2,r4
 400612c:	2807883a 	mov	r3,r5
 4006130:	1009883a 	mov	r4,r2
 4006134:	180b883a 	mov	r5,r3
 4006138:	000d883a 	mov	r6,zero
 400613c:	01d00034 	movhi	r7,16384
 4006140:	4008b200 	call	4008b20 <__ltdf2>
 4006144:	1004803a 	cmplt	r2,r2,zero
 4006148:	1000011e 	bne	r2,zero,4006150 <Encoder_Task+0x2b8>
 400614c:	00000206 	br	4006158 <Encoder_Task+0x2c0>
			MOTOR_1_STATUS = MOTOR_STOP;
 4006150:	d0204915 	stw	zero,-32476(gp)
 4006154:	00000206 	br	4006160 <Encoder_Task+0x2c8>
		}
		else{
			MOTOR_1_STATUS = MOTOR_FULL;
 4006158:	00800044 	movi	r2,1
 400615c:	d0a04915 	stw	r2,-32476(gp)
		}

		counts_1_old = counts_1_new;
 4006160:	e0bff917 	ldw	r2,-28(fp)
 4006164:	e0bff715 	stw	r2,-36(fp)
 4006168:	e0bffa17 	ldw	r2,-24(fp)
 400616c:	e0bff815 	stw	r2,-32(fp)

		//printf("Motor 0 encoder A value is :( %f ) Revolutions : (%f) \n", encode_0_a,  encode_0_a / 16);
		//printf("Motor 1 encoder A value is :( %f ) Revolutions : (%f) \n", encode_1_a,  encode_1_a / 16);
		//printf("Current encoder B value is :( %f ) \n", encode_b / 32);
		//printf("Counts 0 new :( %f ) Counts 0 old : (%f) \n", counts_0_new,  counts_0_old);
		OSTimeDlyHMSM(0, 0, 0, 100);
 4006170:	0009883a 	mov	r4,zero
 4006174:	000b883a 	mov	r5,zero
 4006178:	000d883a 	mov	r6,zero
 400617c:	01c01904 	movi	r7,100
 4006180:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	}
 4006184:	003f5206 	br	4005ed0 <Encoder_Task+0x38>

04006188 <EncoderCalibrate>:
}


void EncoderCalibrate(){
 4006188:	defff604 	addi	sp,sp,-40
 400618c:	dfc00915 	stw	ra,36(sp)
 4006190:	df000815 	stw	fp,32(sp)
 4006194:	df000804 	addi	fp,sp,32
	double encode_0_a, encode_1_a;
	double counts_1_old, counts_0_old;

	IOWR(PWM_0_BASE, 0, 0.75 * 31250);
 4006198:	00c02004 	movi	r3,128
 400619c:	0096e344 	movi	r2,23437
 40061a0:	18800035 	stwio	r2,0(r3)
	IOWR(PWM_2_BASE, 0, 0.75 * 31250);
 40061a4:	00c01c04 	movi	r3,112
 40061a8:	0096e344 	movi	r2,23437
 40061ac:	18800035 	stwio	r2,0(r3)

	counts_0_old = IORD(ENCODER_0A_BASE, 0);
 40061b0:	00801004 	movi	r2,64
 40061b4:	11000037 	ldwio	r4,0(r2)
 40061b8:	4008c300 	call	4008c30 <__floatsidf>
 40061bc:	1009883a 	mov	r4,r2
 40061c0:	180b883a 	mov	r5,r3
 40061c4:	e13ff815 	stw	r4,-32(fp)
 40061c8:	e17ff915 	stw	r5,-28(fp)
	counts_1_old = IORD(ENCODER_1A_BASE, 0);
 40061cc:	00800804 	movi	r2,32
 40061d0:	11000037 	ldwio	r4,0(r2)
 40061d4:	4008c300 	call	4008c30 <__floatsidf>
 40061d8:	1009883a 	mov	r4,r2
 40061dc:	180b883a 	mov	r5,r3
 40061e0:	e13ffa15 	stw	r4,-24(fp)
 40061e4:	e17ffb15 	stw	r5,-20(fp)

	OSTimeDlyHMSM(0, 0, 2, 0);
 40061e8:	0009883a 	mov	r4,zero
 40061ec:	000b883a 	mov	r5,zero
 40061f0:	01800084 	movi	r6,2
 40061f4:	000f883a 	mov	r7,zero
 40061f8:	401fe300 	call	401fe30 <OSTimeDlyHMSM>

	IOWR(PWM_0_BASE, 0, 0);
 40061fc:	00802004 	movi	r2,128
 4006200:	10000035 	stwio	zero,0(r2)
	IOWR(PWM_2_BASE, 0, 0);
 4006204:	00801c04 	movi	r2,112
 4006208:	10000035 	stwio	zero,0(r2)
	encode_0_a = ( IORD(ENCODER_0A_BASE, 0) - counts_0_old);
 400620c:	00801004 	movi	r2,64
 4006210:	11000037 	ldwio	r4,0(r2)
 4006214:	4008c300 	call	4008c30 <__floatsidf>
 4006218:	100b883a 	mov	r5,r2
 400621c:	180d883a 	mov	r6,r3
 4006220:	2809883a 	mov	r4,r5
 4006224:	300b883a 	mov	r5,r6
 4006228:	e1bff817 	ldw	r6,-32(fp)
 400622c:	e1fff917 	ldw	r7,-28(fp)
 4006230:	40083000 	call	4008300 <__subdf3>
 4006234:	1009883a 	mov	r4,r2
 4006238:	180b883a 	mov	r5,r3
 400623c:	e13ffe15 	stw	r4,-8(fp)
 4006240:	e17fff15 	stw	r5,-4(fp)
	encode_1_a = ( IORD(ENCODER_1A_BASE, 0) - counts_1_old);
 4006244:	00800804 	movi	r2,32
 4006248:	11000037 	ldwio	r4,0(r2)
 400624c:	4008c300 	call	4008c30 <__floatsidf>
 4006250:	100b883a 	mov	r5,r2
 4006254:	180d883a 	mov	r6,r3
 4006258:	2809883a 	mov	r4,r5
 400625c:	300b883a 	mov	r5,r6
 4006260:	e1bffa17 	ldw	r6,-24(fp)
 4006264:	e1fffb17 	ldw	r7,-20(fp)
 4006268:	40083000 	call	4008300 <__subdf3>
 400626c:	1009883a 	mov	r4,r2
 4006270:	180b883a 	mov	r5,r3
 4006274:	e13ffc15 	stw	r4,-16(fp)
 4006278:	e17ffd15 	stw	r5,-12(fp)

	printf("Motor 0 encoder A value is :( %f ) \n", encode_0_a);
 400627c:	010100b4 	movhi	r4,1026
 4006280:	2110f904 	addi	r4,r4,17380
 4006284:	e17ffe17 	ldw	r5,-8(fp)
 4006288:	e1bfff17 	ldw	r6,-4(fp)
 400628c:	400a15c0 	call	400a15c <printf>
	printf("Motor 1 encoder A value is :( %f ) \n", encode_1_a);
 4006290:	010100b4 	movhi	r4,1026
 4006294:	21110304 	addi	r4,r4,17420
 4006298:	e17ffc17 	ldw	r5,-16(fp)
 400629c:	e1bffd17 	ldw	r6,-12(fp)
 40062a0:	400a15c0 	call	400a15c <printf>
}
 40062a4:	e037883a 	mov	sp,fp
 40062a8:	dfc00117 	ldw	ra,4(sp)
 40062ac:	df000017 	ldw	fp,0(sp)
 40062b0:	dec00204 	addi	sp,sp,8
 40062b4:	f800283a 	ret

040062b8 <SensorsCalibrate>:

void SensorsCalibrate(){
 40062b8:	defffb04 	addi	sp,sp,-20
 40062bc:	dfc00415 	stw	ra,16(sp)
 40062c0:	df000315 	stw	fp,12(sp)
 40062c4:	df000304 	addi	fp,sp,12
	alt_u16 data16;
	float volt = 0;
 40062c8:	e03ffe15 	stw	zero,-8(fp)
	int ch = 0;
 40062cc:	e03ffd15 	stw	zero,-12(fp)

	while(1){
		if (ch > 7)
 40062d0:	e0bffd17 	ldw	r2,-12(fp)
 40062d4:	10800210 	cmplti	r2,r2,8
 40062d8:	1000011e 	bne	r2,zero,40062e0 <SensorsCalibrate+0x28>
			ch = 0;
 40062dc:	e03ffd15 	stw	zero,-12(fp)

		data16 = ADC_Read(ch); // 12-bits resolution
 40062e0:	e0bffd17 	ldw	r2,-12(fp)
 40062e4:	11003fcc 	andi	r4,r2,255
 40062e8:	4001bd80 	call	4001bd8 <ADC_Read>
 40062ec:	e0bfff0d 	sth	r2,-4(fp)
		volt = (float)data16 * 3.3 / 4095.0;
 40062f0:	e13fff0b 	ldhu	r4,-4(fp)
 40062f4:	4007e300 	call	4007e30 <__floatunsisf>
 40062f8:	1009883a 	mov	r4,r2
 40062fc:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4006300:	100b883a 	mov	r5,r2
 4006304:	180d883a 	mov	r6,r3
 4006308:	2809883a 	mov	r4,r5
 400630c:	300b883a 	mov	r5,r6
 4006310:	019999b4 	movhi	r6,26214
 4006314:	31999984 	addi	r6,r6,26214
 4006318:	01d002b4 	movhi	r7,16394
 400631c:	39d99984 	addi	r7,r7,26214
 4006320:	40083f40 	call	40083f4 <__muldf3>
 4006324:	1009883a 	mov	r4,r2
 4006328:	180b883a 	mov	r5,r3
 400632c:	2005883a 	mov	r2,r4
 4006330:	2807883a 	mov	r3,r5
 4006334:	1009883a 	mov	r4,r2
 4006338:	180b883a 	mov	r5,r3
 400633c:	000d883a 	mov	r6,zero
 4006340:	01d02c34 	movhi	r7,16560
 4006344:	39ff8004 	addi	r7,r7,-512
 4006348:	40087b80 	call	40087b8 <__divdf3>
 400634c:	1009883a 	mov	r4,r2
 4006350:	180b883a 	mov	r5,r3
 4006354:	2005883a 	mov	r2,r4
 4006358:	2807883a 	mov	r3,r5
 400635c:	1009883a 	mov	r4,r2
 4006360:	180b883a 	mov	r5,r3
 4006364:	4008e380 	call	4008e38 <__truncdfsf2>
 4006368:	e0bffe15 	stw	r2,-8(fp)
		printf("CH%i ADC is = %.2f V\r\n", ch, volt);
 400636c:	e13ffe17 	ldw	r4,-8(fp)
 4006370:	4007ddc0 	call	4007ddc <__extendsfdf2>
 4006374:	100f883a 	mov	r7,r2
 4006378:	1811883a 	mov	r8,r3
 400637c:	010100b4 	movhi	r4,1026
 4006380:	21110d04 	addi	r4,r4,17460
 4006384:	e17ffd17 	ldw	r5,-12(fp)
 4006388:	380d883a 	mov	r6,r7
 400638c:	400f883a 	mov	r7,r8
 4006390:	400a15c0 	call	400a15c <printf>
		ch++;
 4006394:	e0bffd17 	ldw	r2,-12(fp)
 4006398:	10800044 	addi	r2,r2,1
 400639c:	e0bffd15 	stw	r2,-12(fp)
		OSTimeDlyHMSM(0, 0, 0, 500);
 40063a0:	0009883a 	mov	r4,zero
 40063a4:	000b883a 	mov	r5,zero
 40063a8:	000d883a 	mov	r6,zero
 40063ac:	01c07d04 	movi	r7,500
 40063b0:	401fe300 	call	401fe30 <OSTimeDlyHMSM>
	}
 40063b4:	003fc606 	br	40062d0 <SensorsCalibrate+0x18>

040063b8 <main>:
}

int main(void){
 40063b8:	defff904 	addi	sp,sp,-28
 40063bc:	dfc00615 	stw	ra,24(sp)
 40063c0:	df000515 	stw	fp,20(sp)
 40063c4:	df000504 	addi	fp,sp,20
	//Initialize queues
	MainQueue = OSQCreate(&MainQueueBaseAddress[0], QUEUE_SIZE);
 40063c8:	010100f4 	movhi	r4,1027
 40063cc:	210aa204 	addi	r4,r4,10888
 40063d0:	01400284 	movi	r5,10
 40063d4:	401c4fc0 	call	401c4fc <OSQCreate>
 40063d8:	d0a04315 	stw	r2,-32500(gp)

	//Initialize tasks
	OSTaskCreateExt(Encoder_Task,
 40063dc:	018100f4 	movhi	r6,1027
 40063e0:	31a2c204 	addi	r6,r6,-29944
 40063e4:	00800044 	movi	r2,1
 40063e8:	d8800015 	stw	r2,0(sp)
 40063ec:	008100b4 	movhi	r2,1026
 40063f0:	109ac304 	addi	r2,r2,27404
 40063f4:	d8800115 	stw	r2,4(sp)
 40063f8:	00820004 	movi	r2,2048
 40063fc:	d8800215 	stw	r2,8(sp)
 4006400:	d8000315 	stw	zero,12(sp)
 4006404:	d8000415 	stw	zero,16(sp)
 4006408:	01010034 	movhi	r4,1024
 400640c:	2117a604 	addi	r4,r4,24216
 4006410:	000b883a 	mov	r5,zero
 4006414:	01c00044 	movi	r7,1
 4006418:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
					  TASK_ENCODER_PRIORITY,
					  task1_stk,
					  TASK_STACKSIZE,
					  NULL,
					  0);
	OSTaskCreateExt(LSM303_Task,
 400641c:	018100f4 	movhi	r6,1027
 4006420:	31aac204 	addi	r6,r6,-21752
 4006424:	00800144 	movi	r2,5
 4006428:	d8800015 	stw	r2,0(sp)
 400642c:	008100f4 	movhi	r2,1027
 4006430:	10a2c304 	addi	r2,r2,-29940
 4006434:	d8800115 	stw	r2,4(sp)
 4006438:	00820004 	movi	r2,2048
 400643c:	d8800215 	stw	r2,8(sp)
 4006440:	d8000315 	stw	zero,12(sp)
 4006444:	d8000415 	stw	zero,16(sp)
 4006448:	01010034 	movhi	r4,1024
 400644c:	2114f804 	addi	r4,r4,21472
 4006450:	000b883a 	mov	r5,zero
 4006454:	01c00144 	movi	r7,5
 4006458:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
					   task4_stk,
					   TASK_STACKSIZE,
					   NULL,
					   0);

	OSTaskCreateExt(Navigation_Task,
 400645c:	018100f4 	movhi	r6,1027
 4006460:	318aa104 	addi	r6,r6,10884
 4006464:	00800084 	movi	r2,2
 4006468:	d8800015 	stw	r2,0(sp)
 400646c:	008100f4 	movhi	r2,1027
 4006470:	1082a204 	addi	r2,r2,2696
 4006474:	d8800115 	stw	r2,4(sp)
 4006478:	00820004 	movi	r2,2048
 400647c:	d8800215 	stw	r2,8(sp)
 4006480:	d8000315 	stw	zero,12(sp)
 4006484:	d8000415 	stw	zero,16(sp)
 4006488:	01010034 	movhi	r4,1024
 400648c:	21136704 	addi	r4,r4,19868
 4006490:	000b883a 	mov	r5,zero
 4006494:	01c00084 	movi	r7,2
 4006498:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
				   TASK_NAVI_PRIORITY,
				   task5_stk,
				   TASK_STACKSIZE,
				   NULL,
				   0);
	OSTaskCreateExt(Servo_Task,
 400649c:	018100f4 	movhi	r6,1027
 40064a0:	31b2d104 	addi	r6,r6,-13500
 40064a4:	008000c4 	movi	r2,3
 40064a8:	d8800015 	stw	r2,0(sp)
 40064ac:	008100f4 	movhi	r2,1027
 40064b0:	10aad204 	addi	r2,r2,-21688
 40064b4:	d8800115 	stw	r2,4(sp)
 40064b8:	00820004 	movi	r2,2048
 40064bc:	d8800215 	stw	r2,8(sp)
 40064c0:	d8000315 	stw	zero,12(sp)
 40064c4:	d8000415 	stw	zero,16(sp)
 40064c8:	01010034 	movhi	r4,1024
 40064cc:	2115ef04 	addi	r4,r4,22460
 40064d0:	000b883a 	mov	r5,zero
 40064d4:	01c000c4 	movi	r7,3
 40064d8:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
				   task6_stk,
				   TASK_STACKSIZE,
				   NULL,
				   0);

	OSTaskCreateExt(History_Task,
 40064dc:	018100f4 	movhi	r6,1027
 40064e0:	31bad104 	addi	r6,r6,-5308
 40064e4:	00800104 	movi	r2,4
 40064e8:	d8800015 	stw	r2,0(sp)
 40064ec:	008100f4 	movhi	r2,1027
 40064f0:	10b2d204 	addi	r2,r2,-13496
 40064f4:	d8800115 	stw	r2,4(sp)
 40064f8:	00820004 	movi	r2,2048
 40064fc:	d8800215 	stw	r2,8(sp)
 4006500:	d8000315 	stw	zero,12(sp)
 4006504:	d8000415 	stw	zero,16(sp)
 4006508:	01010034 	movhi	r4,1024
 400650c:	21152704 	addi	r4,r4,21660
 4006510:	000b883a 	mov	r5,zero
 4006514:	01c00104 	movi	r7,4
 4006518:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
					  task3_stk,
					  TASK_STACKSIZE,
					  NULL,
					  0);

	M_allStop();
 400651c:	4002dc40 	call	4002dc4 <M_allStop>
	LEFT_CLEAR = RIGHT_CLEAR = FRONT_CLEAR = TRUE;
 4006520:	00800044 	movi	r2,1
 4006524:	d0a04715 	stw	r2,-32484(gp)
 4006528:	d0a04717 	ldw	r2,-32484(gp)
 400652c:	d0a03b15 	stw	r2,-32532(gp)
 4006530:	d0a03b17 	ldw	r2,-32532(gp)
 4006534:	d0a04815 	stw	r2,-32480(gp)
	ENCODER_0A = ENCODER_1A = 0;
 4006538:	d0203d15 	stw	zero,-32524(gp)
 400653c:	008100b4 	movhi	r2,1026
 4006540:	109a8604 	addi	r2,r2,27160
 4006544:	10000015 	stw	zero,0(r2)
 4006548:	d0a03d17 	ldw	r2,-32524(gp)
 400654c:	010100b4 	movhi	r4,1026
 4006550:	211a8604 	addi	r4,r4,27160
 4006554:	20c00017 	ldw	r3,0(r4)
 4006558:	d0a04115 	stw	r2,-32508(gp)
 400655c:	010100b4 	movhi	r4,1026
 4006560:	211a8a04 	addi	r4,r4,27176
 4006564:	20c00015 	stw	r3,0(r4)

	//assume starting position is 'North'
	ENCODER_INIT = ENCODER_0A;
 4006568:	d0a04117 	ldw	r2,-32508(gp)
 400656c:	010100b4 	movhi	r4,1026
 4006570:	211a8a04 	addi	r4,r4,27176
 4006574:	20c00017 	ldw	r3,0(r4)
 4006578:	d0a03f15 	stw	r2,-32516(gp)
 400657c:	010100b4 	movhi	r4,1026
 4006580:	211a8804 	addi	r4,r4,27168
 4006584:	20c00015 	stw	r3,0(r4)
	TRVL[0].dir = 'N';
 4006588:	00c100f4 	movhi	r3,1027
 400658c:	18fad204 	addi	r3,r3,-5304
 4006590:	00801384 	movi	r2,78
 4006594:	18800045 	stb	r2,1(r3)
	TRVL[0].move = 'F';
 4006598:	00c100f4 	movhi	r3,1027
 400659c:	18fad204 	addi	r3,r3,-5304
 40065a0:	00801184 	movi	r2,70
 40065a4:	18800005 	stb	r2,0(r3)
	TRVL[0].angle = 0;
 40065a8:	008100f4 	movhi	r2,1027
 40065ac:	10bad204 	addi	r2,r2,-5304
 40065b0:	10000315 	stw	zero,12(r2)
 40065b4:	10000415 	stw	zero,16(r2)
	TRVL[0].count = 1;
 40065b8:	00c100f4 	movhi	r3,1027
 40065bc:	18fad204 	addi	r3,r3,-5304
 40065c0:	18000115 	stw	zero,4(r3)
 40065c4:	008ffc34 	movhi	r2,16368
 40065c8:	18800215 	stw	r2,8(r3)
	TRVL_INDEX = 1;
 40065cc:	00800044 	movi	r2,1
 40065d0:	d0a04615 	stw	r2,-32488(gp)

	SYSTEM_STATUS = SYS_FREE; //system is free to receive new commands
 40065d4:	d0203a15 	stw	zero,-32536(gp)
	OSStart();
 40065d8:	4018c140 	call	4018c14 <OSStart>

	return 0;
 40065dc:	0005883a 	mov	r2,zero
}
 40065e0:	e037883a 	mov	sp,fp
 40065e4:	dfc00117 	ldw	ra,4(sp)
 40065e8:	df000017 	ldw	fp,0(sp)
 40065ec:	dec00204 	addi	sp,sp,8
 40065f0:	f800283a 	ret

040065f4 <fmax>:
 40065f4:	defffb04 	addi	sp,sp,-20
 40065f8:	dcc00315 	stw	r19,12(sp)
 40065fc:	dc800215 	stw	r18,8(sp)
 4006600:	dc400115 	stw	r17,4(sp)
 4006604:	dc000015 	stw	r16,0(sp)
 4006608:	2025883a 	mov	r18,r4
 400660c:	2827883a 	mov	r19,r5
 4006610:	3021883a 	mov	r16,r6
 4006614:	3823883a 	mov	r17,r7
 4006618:	dfc00415 	stw	ra,16(sp)
 400661c:	40067040 	call	4006704 <__fpclassifyd>
 4006620:	8009883a 	mov	r4,r16
 4006624:	880b883a 	mov	r5,r17
 4006628:	1000091e 	bne	r2,zero,4006650 <fmax+0x5c>
 400662c:	8807883a 	mov	r3,r17
 4006630:	8005883a 	mov	r2,r16
 4006634:	dfc00417 	ldw	ra,16(sp)
 4006638:	dcc00317 	ldw	r19,12(sp)
 400663c:	dc800217 	ldw	r18,8(sp)
 4006640:	dc400117 	ldw	r17,4(sp)
 4006644:	dc000017 	ldw	r16,0(sp)
 4006648:	dec00504 	addi	sp,sp,20
 400664c:	f800283a 	ret
 4006650:	40067040 	call	4006704 <__fpclassifyd>
 4006654:	800d883a 	mov	r6,r16
 4006658:	880f883a 	mov	r7,r17
 400665c:	9009883a 	mov	r4,r18
 4006660:	980b883a 	mov	r5,r19
 4006664:	10000226 	beq	r2,zero,4006670 <fmax+0x7c>
 4006668:	4008a100 	call	4008a10 <__gtdf2>
 400666c:	00bfef0e 	bge	zero,r2,400662c <fmax+0x38>
 4006670:	9021883a 	mov	r16,r18
 4006674:	9823883a 	mov	r17,r19
 4006678:	003fec06 	br	400662c <fmax+0x38>

0400667c <fmin>:
 400667c:	defffb04 	addi	sp,sp,-20
 4006680:	dcc00315 	stw	r19,12(sp)
 4006684:	dc800215 	stw	r18,8(sp)
 4006688:	dc400115 	stw	r17,4(sp)
 400668c:	dc000015 	stw	r16,0(sp)
 4006690:	2025883a 	mov	r18,r4
 4006694:	2827883a 	mov	r19,r5
 4006698:	3021883a 	mov	r16,r6
 400669c:	3823883a 	mov	r17,r7
 40066a0:	dfc00415 	stw	ra,16(sp)
 40066a4:	40067040 	call	4006704 <__fpclassifyd>
 40066a8:	8009883a 	mov	r4,r16
 40066ac:	880b883a 	mov	r5,r17
 40066b0:	1000091e 	bne	r2,zero,40066d8 <fmin+0x5c>
 40066b4:	8807883a 	mov	r3,r17
 40066b8:	8005883a 	mov	r2,r16
 40066bc:	dfc00417 	ldw	ra,16(sp)
 40066c0:	dcc00317 	ldw	r19,12(sp)
 40066c4:	dc800217 	ldw	r18,8(sp)
 40066c8:	dc400117 	ldw	r17,4(sp)
 40066cc:	dc000017 	ldw	r16,0(sp)
 40066d0:	dec00504 	addi	sp,sp,20
 40066d4:	f800283a 	ret
 40066d8:	40067040 	call	4006704 <__fpclassifyd>
 40066dc:	800d883a 	mov	r6,r16
 40066e0:	880f883a 	mov	r7,r17
 40066e4:	9009883a 	mov	r4,r18
 40066e8:	980b883a 	mov	r5,r19
 40066ec:	10000226 	beq	r2,zero,40066f8 <fmin+0x7c>
 40066f0:	4008b200 	call	4008b20 <__ltdf2>
 40066f4:	103fef0e 	bge	r2,zero,40066b4 <fmin+0x38>
 40066f8:	9021883a 	mov	r16,r18
 40066fc:	9823883a 	mov	r17,r19
 4006700:	003fec06 	br	40066b4 <fmin+0x38>

04006704 <__fpclassifyd>:
 4006704:	280d883a 	mov	r6,r5
 4006708:	28001b1e 	bne	r5,zero,4006778 <__fpclassifyd+0x74>
 400670c:	20001626 	beq	r4,zero,4006768 <__fpclassifyd+0x64>
 4006710:	01fffc34 	movhi	r7,65520
 4006714:	31c5883a 	add	r2,r6,r7
 4006718:	00dff834 	movhi	r3,32736
 400671c:	18ffffc4 	addi	r3,r3,-1
 4006720:	1880132e 	bgeu	r3,r2,4006770 <__fpclassifyd+0x6c>
 4006724:	015ffc34 	movhi	r5,32752
 4006728:	3145883a 	add	r2,r6,r5
 400672c:	1880102e 	bgeu	r3,r2,4006770 <__fpclassifyd+0x6c>
 4006730:	00c00434 	movhi	r3,16
 4006734:	18ffffc4 	addi	r3,r3,-1
 4006738:	1980072e 	bgeu	r3,r6,4006758 <__fpclassifyd+0x54>
 400673c:	00a00034 	movhi	r2,32768
 4006740:	3085883a 	add	r2,r6,r2
 4006744:	1880042e 	bgeu	r3,r2,4006758 <__fpclassifyd+0x54>
 4006748:	31400526 	beq	r6,r5,4006760 <__fpclassifyd+0x5c>
 400674c:	31c00426 	beq	r6,r7,4006760 <__fpclassifyd+0x5c>
 4006750:	0005883a 	mov	r2,zero
 4006754:	f800283a 	ret
 4006758:	008000c4 	movi	r2,3
 400675c:	f800283a 	ret
 4006760:	2005003a 	cmpeq	r2,r4,zero
 4006764:	f800283a 	ret
 4006768:	00800084 	movi	r2,2
 400676c:	f800283a 	ret
 4006770:	00800104 	movi	r2,4
 4006774:	f800283a 	ret
 4006778:	00a00034 	movhi	r2,32768
 400677c:	28bfe41e 	bne	r5,r2,4006710 <__fpclassifyd+0xc>
 4006780:	003fe206 	br	400670c <__fpclassifyd+0x8>

04006784 <round>:
 4006784:	289ffc2c 	andhi	r2,r5,32752
 4006788:	101bd53a 	srai	r13,r2,20
 400678c:	deffff04 	addi	sp,sp,-4
 4006790:	008004c4 	movi	r2,19
 4006794:	6abf0044 	addi	r10,r13,-1023
 4006798:	dfc00015 	stw	ra,0(sp)
 400679c:	2011883a 	mov	r8,r4
 40067a0:	2813883a 	mov	r9,r5
 40067a4:	2817883a 	mov	r11,r5
 40067a8:	12801316 	blt	r2,r10,40067f8 <round+0x74>
 40067ac:	50003016 	blt	r10,zero,4006870 <round+0xec>
 40067b0:	00800434 	movhi	r2,16
 40067b4:	10bfffc4 	addi	r2,r2,-1
 40067b8:	1289d83a 	sra	r4,r2,r10
 40067bc:	2146703a 	and	r3,r4,r5
 40067c0:	18002926 	beq	r3,zero,4006868 <round+0xe4>
 40067c4:	00800234 	movhi	r2,8
 40067c8:	1285d83a 	sra	r2,r2,r10
 40067cc:	0106303a 	nor	r3,zero,r4
 40067d0:	0009883a 	mov	r4,zero
 40067d4:	5885883a 	add	r2,r11,r2
 40067d8:	1896703a 	and	r11,r3,r2
 40067dc:	2011883a 	mov	r8,r4
 40067e0:	5813883a 	mov	r9,r11
 40067e4:	4005883a 	mov	r2,r8
 40067e8:	4807883a 	mov	r3,r9
 40067ec:	dfc00017 	ldw	ra,0(sp)
 40067f0:	dec00104 	addi	sp,sp,4
 40067f4:	f800283a 	ret
 40067f8:	03800cc4 	movi	r14,51
 40067fc:	72800e16 	blt	r14,r10,4006838 <round+0xb4>
 4006800:	68befb44 	addi	r2,r13,-1043
 4006804:	00ffffc4 	movi	r3,-1
 4006808:	188ad83a 	srl	r5,r3,r2
 400680c:	2148703a 	and	r4,r4,r5
 4006810:	203ff426 	beq	r4,zero,40067e4 <round+0x60>
 4006814:	7287c83a 	sub	r3,r14,r10
 4006818:	00800044 	movi	r2,1
 400681c:	10c4983a 	sll	r2,r2,r3
 4006820:	4087883a 	add	r3,r8,r2
 4006824:	1a00012e 	bgeu	r3,r8,400682c <round+0xa8>
 4006828:	4ac00044 	addi	r11,r9,1
 400682c:	0144303a 	nor	r2,zero,r5
 4006830:	1888703a 	and	r4,r3,r2
 4006834:	003fe906 	br	40067dc <round+0x58>
 4006838:	00810004 	movi	r2,1024
 400683c:	50bfe91e 	bne	r10,r2,40067e4 <round+0x60>
 4006840:	400d883a 	mov	r6,r8
 4006844:	280f883a 	mov	r7,r5
 4006848:	40083800 	call	4008380 <__adddf3>
 400684c:	1011883a 	mov	r8,r2
 4006850:	1813883a 	mov	r9,r3
 4006854:	4005883a 	mov	r2,r8
 4006858:	4807883a 	mov	r3,r9
 400685c:	dfc00017 	ldw	ra,0(sp)
 4006860:	dec00104 	addi	sp,sp,4
 4006864:	f800283a 	ret
 4006868:	403fd61e 	bne	r8,zero,40067c4 <round+0x40>
 400686c:	003fdd06 	br	40067e4 <round+0x60>
 4006870:	00bfffc4 	movi	r2,-1
 4006874:	2ae0002c 	andhi	r11,r5,32768
 4006878:	50800226 	beq	r10,r2,4006884 <round+0x100>
 400687c:	0009883a 	mov	r4,zero
 4006880:	003fd606 	br	40067dc <round+0x58>
 4006884:	5acffc34 	orhi	r11,r11,16368
 4006888:	0009883a 	mov	r4,zero
 400688c:	003fd306 	br	40067dc <round+0x58>

04006890 <atan2>:
 4006890:	40069c41 	jmpi	40069c4 <__ieee754_atan2>

04006894 <sqrt>:
 4006894:	defff104 	addi	sp,sp,-60
 4006898:	dd000d15 	stw	r20,52(sp)
 400689c:	050100b4 	movhi	r20,1026
 40068a0:	a51a4804 	addi	r20,r20,26912
 40068a4:	dcc00c15 	stw	r19,48(sp)
 40068a8:	dc800b15 	stw	r18,44(sp)
 40068ac:	dc400a15 	stw	r17,40(sp)
 40068b0:	dc000915 	stw	r16,36(sp)
 40068b4:	2025883a 	mov	r18,r4
 40068b8:	dfc00e15 	stw	ra,56(sp)
 40068bc:	2827883a 	mov	r19,r5
 40068c0:	4006d140 	call	4006d14 <__ieee754_sqrt>
 40068c4:	a1000017 	ldw	r4,0(r20)
 40068c8:	1021883a 	mov	r16,r2
 40068cc:	00bfffc4 	movi	r2,-1
 40068d0:	1823883a 	mov	r17,r3
 40068d4:	20800a26 	beq	r4,r2,4006900 <sqrt+0x6c>
 40068d8:	9009883a 	mov	r4,r18
 40068dc:	980b883a 	mov	r5,r19
 40068e0:	400768c0 	call	400768c <__isnand>
 40068e4:	1000061e 	bne	r2,zero,4006900 <sqrt+0x6c>
 40068e8:	000d883a 	mov	r6,zero
 40068ec:	000f883a 	mov	r7,zero
 40068f0:	9009883a 	mov	r4,r18
 40068f4:	980b883a 	mov	r5,r19
 40068f8:	4008b200 	call	4008b20 <__ltdf2>
 40068fc:	10000a16 	blt	r2,zero,4006928 <sqrt+0x94>
 4006900:	8005883a 	mov	r2,r16
 4006904:	8807883a 	mov	r3,r17
 4006908:	dfc00e17 	ldw	ra,56(sp)
 400690c:	dd000d17 	ldw	r20,52(sp)
 4006910:	dcc00c17 	ldw	r19,48(sp)
 4006914:	dc800b17 	ldw	r18,44(sp)
 4006918:	dc400a17 	ldw	r17,40(sp)
 400691c:	dc000917 	ldw	r16,36(sp)
 4006920:	dec00f04 	addi	sp,sp,60
 4006924:	f800283a 	ret
 4006928:	a4000017 	ldw	r16,0(r20)
 400692c:	00800044 	movi	r2,1
 4006930:	00c100b4 	movhi	r3,1026
 4006934:	18d11304 	addi	r3,r3,17484
 4006938:	d8800015 	stw	r2,0(sp)
 400693c:	d8c00115 	stw	r3,4(sp)
 4006940:	dcc00315 	stw	r19,12(sp)
 4006944:	d8000815 	stw	zero,32(sp)
 4006948:	dc800415 	stw	r18,16(sp)
 400694c:	dcc00515 	stw	r19,20(sp)
 4006950:	dc800215 	stw	r18,8(sp)
 4006954:	80000a1e 	bne	r16,zero,4006980 <sqrt+0xec>
 4006958:	d8000615 	stw	zero,24(sp)
 400695c:	d8000715 	stw	zero,28(sp)
 4006960:	d809883a 	mov	r4,sp
 4006964:	40076bc0 	call	40076bc <matherr>
 4006968:	10000e26 	beq	r2,zero,40069a4 <sqrt+0x110>
 400696c:	d8800817 	ldw	r2,32(sp)
 4006970:	1000101e 	bne	r2,zero,40069b4 <sqrt+0x120>
 4006974:	dc000617 	ldw	r16,24(sp)
 4006978:	dc400717 	ldw	r17,28(sp)
 400697c:	003fe006 	br	4006900 <sqrt+0x6c>
 4006980:	0009883a 	mov	r4,zero
 4006984:	000d883a 	mov	r6,zero
 4006988:	000b883a 	mov	r5,zero
 400698c:	000f883a 	mov	r7,zero
 4006990:	40087b80 	call	40087b8 <__divdf3>
 4006994:	d8800615 	stw	r2,24(sp)
 4006998:	00800084 	movi	r2,2
 400699c:	d8c00715 	stw	r3,28(sp)
 40069a0:	80bfef1e 	bne	r16,r2,4006960 <sqrt+0xcc>
 40069a4:	40099e40 	call	40099e4 <__errno>
 40069a8:	00c00844 	movi	r3,33
 40069ac:	10c00015 	stw	r3,0(r2)
 40069b0:	003fee06 	br	400696c <sqrt+0xd8>
 40069b4:	40099e40 	call	40099e4 <__errno>
 40069b8:	d8c00817 	ldw	r3,32(sp)
 40069bc:	10c00015 	stw	r3,0(r2)
 40069c0:	003fec06 	br	4006974 <sqrt+0xe0>

040069c4 <__ieee754_atan2>:
 40069c4:	3015883a 	mov	r10,r6
 40069c8:	3019883a 	mov	r12,r6
 40069cc:	018dc83a 	sub	r6,zero,r6
 40069d0:	518cb03a 	or	r6,r10,r6
 40069d4:	300cd7fa 	srli	r6,r6,31
 40069d8:	03a00034 	movhi	r14,32768
 40069dc:	73bfffc4 	addi	r14,r14,-1
 40069e0:	3b9e703a 	and	r15,r7,r14
 40069e4:	defffc04 	addi	sp,sp,-16
 40069e8:	33ccb03a 	or	r6,r6,r15
 40069ec:	035ffc34 	movhi	r13,32752
 40069f0:	dc000015 	stw	r16,0(sp)
 40069f4:	dfc00315 	stw	ra,12(sp)
 40069f8:	dc800215 	stw	r18,8(sp)
 40069fc:	dc400115 	stw	r17,4(sp)
 4006a00:	3817883a 	mov	r11,r7
 4006a04:	2011883a 	mov	r8,r4
 4006a08:	2813883a 	mov	r9,r5
 4006a0c:	3821883a 	mov	r16,r7
 4006a10:	69800736 	bltu	r13,r6,4006a30 <__ieee754_atan2+0x6c>
 4006a14:	0105c83a 	sub	r2,zero,r4
 4006a18:	2084b03a 	or	r2,r4,r2
 4006a1c:	1004d7fa 	srli	r2,r2,31
 4006a20:	2b8c703a 	and	r6,r5,r14
 4006a24:	2823883a 	mov	r17,r5
 4006a28:	1184b03a 	or	r2,r2,r6
 4006a2c:	68800d2e 	bgeu	r13,r2,4006a64 <__ieee754_atan2+0xa0>
 4006a30:	4009883a 	mov	r4,r8
 4006a34:	500d883a 	mov	r6,r10
 4006a38:	40083800 	call	4008380 <__adddf3>
 4006a3c:	1011883a 	mov	r8,r2
 4006a40:	1813883a 	mov	r9,r3
 4006a44:	4005883a 	mov	r2,r8
 4006a48:	4807883a 	mov	r3,r9
 4006a4c:	dfc00317 	ldw	ra,12(sp)
 4006a50:	dc800217 	ldw	r18,8(sp)
 4006a54:	dc400117 	ldw	r17,4(sp)
 4006a58:	dc000017 	ldw	r16,0(sp)
 4006a5c:	dec00404 	addi	sp,sp,16
 4006a60:	f800283a 	ret
 4006a64:	00b00434 	movhi	r2,49168
 4006a68:	3885883a 	add	r2,r7,r2
 4006a6c:	5084b03a 	or	r2,r10,r2
 4006a70:	10001026 	beq	r2,zero,4006ab4 <__ieee754_atan2+0xf0>
 4006a74:	3805d7ba 	srai	r2,r7,30
 4006a78:	2806d7fa 	srli	r3,r5,31
 4006a7c:	2188b03a 	or	r4,r4,r6
 4006a80:	1080008c 	andi	r2,r2,2
 4006a84:	18a4b03a 	or	r18,r3,r2
 4006a88:	00800084 	movi	r2,2
 4006a8c:	2000101e 	bne	r4,zero,4006ad0 <__ieee754_atan2+0x10c>
 4006a90:	90803826 	beq	r18,r2,4006b74 <__ieee754_atan2+0x1b0>
 4006a94:	14bfeb0e 	bge	r2,r18,4006a44 <__ieee754_atan2+0x80>
 4006a98:	008000c4 	movi	r2,3
 4006a9c:	90800c1e 	bne	r18,r2,4006ad0 <__ieee754_atan2+0x10c>
 4006aa0:	02151134 	movhi	r8,21572
 4006aa4:	420b4604 	addi	r8,r8,11544
 4006aa8:	02700274 	movhi	r9,49161
 4006aac:	4a487ec4 	addi	r9,r9,8699
 4006ab0:	003fe406 	br	4006a44 <__ieee754_atan2+0x80>
 4006ab4:	4009883a 	mov	r4,r8
 4006ab8:	dfc00317 	ldw	ra,12(sp)
 4006abc:	dc800217 	ldw	r18,8(sp)
 4006ac0:	dc400117 	ldw	r17,4(sp)
 4006ac4:	dc000017 	ldw	r16,0(sp)
 4006ac8:	dec00404 	addi	sp,sp,16
 4006acc:	4006fdc1 	jmpi	4006fdc <atan>
 4006ad0:	63c4b03a 	or	r2,r12,r15
 4006ad4:	10001426 	beq	r2,zero,4006b28 <__ieee754_atan2+0x164>
 4006ad8:	009ffc34 	movhi	r2,32752
 4006adc:	78801d26 	beq	r15,r2,4006b54 <__ieee754_atan2+0x190>
 4006ae0:	009ffc34 	movhi	r2,32752
 4006ae4:	30801026 	beq	r6,r2,4006b28 <__ieee754_atan2+0x164>
 4006ae8:	33c5c83a 	sub	r2,r6,r15
 4006aec:	1009d53a 	srai	r4,r2,20
 4006af0:	00c00f04 	movi	r3,60
 4006af4:	1900240e 	bge	r3,r4,4006b88 <__ieee754_atan2+0x1c4>
 4006af8:	02951134 	movhi	r10,21572
 4006afc:	528b4604 	addi	r10,r10,11544
 4006b00:	02cffe74 	movhi	r11,16377
 4006b04:	5ac87ec4 	addi	r11,r11,8699
 4006b08:	00800044 	movi	r2,1
 4006b0c:	90802d26 	beq	r18,r2,4006bc4 <__ieee754_atan2+0x200>
 4006b10:	00800084 	movi	r2,2
 4006b14:	90804426 	beq	r18,r2,4006c28 <__ieee754_atan2+0x264>
 4006b18:	90002e1e 	bne	r18,zero,4006bd4 <__ieee754_atan2+0x210>
 4006b1c:	5011883a 	mov	r8,r10
 4006b20:	5813883a 	mov	r9,r11
 4006b24:	003fc706 	br	4006a44 <__ieee754_atan2+0x80>
 4006b28:	88000516 	blt	r17,zero,4006b40 <__ieee754_atan2+0x17c>
 4006b2c:	02151134 	movhi	r8,21572
 4006b30:	420b4604 	addi	r8,r8,11544
 4006b34:	024ffe74 	movhi	r9,16377
 4006b38:	4a487ec4 	addi	r9,r9,8699
 4006b3c:	003fc106 	br	4006a44 <__ieee754_atan2+0x80>
 4006b40:	02151134 	movhi	r8,21572
 4006b44:	420b4604 	addi	r8,r8,11544
 4006b48:	026ffe74 	movhi	r9,49145
 4006b4c:	4a487ec4 	addi	r9,r9,8699
 4006b50:	003fbc06 	br	4006a44 <__ieee754_atan2+0x80>
 4006b54:	33c04b26 	beq	r6,r15,4006c84 <__ieee754_atan2+0x2c0>
 4006b58:	00800044 	movi	r2,1
 4006b5c:	90805726 	beq	r18,r2,4006cbc <__ieee754_atan2+0x2f8>
 4006b60:	14805116 	blt	r2,r18,4006ca8 <__ieee754_atan2+0x2e4>
 4006b64:	903fde1e 	bne	r18,zero,4006ae0 <__ieee754_atan2+0x11c>
 4006b68:	0011883a 	mov	r8,zero
 4006b6c:	0013883a 	mov	r9,zero
 4006b70:	003fb406 	br	4006a44 <__ieee754_atan2+0x80>
 4006b74:	02151134 	movhi	r8,21572
 4006b78:	420b4604 	addi	r8,r8,11544
 4006b7c:	02500274 	movhi	r9,16393
 4006b80:	4a487ec4 	addi	r9,r9,8699
 4006b84:	003faf06 	br	4006a44 <__ieee754_atan2+0x80>
 4006b88:	80003916 	blt	r16,zero,4006c70 <__ieee754_atan2+0x2ac>
 4006b8c:	580f883a 	mov	r7,r11
 4006b90:	480b883a 	mov	r5,r9
 4006b94:	500d883a 	mov	r6,r10
 4006b98:	4009883a 	mov	r4,r8
 4006b9c:	40087b80 	call	40087b8 <__divdf3>
 4006ba0:	180b883a 	mov	r5,r3
 4006ba4:	1009883a 	mov	r4,r2
 4006ba8:	40076740 	call	4007674 <fabs>
 4006bac:	180b883a 	mov	r5,r3
 4006bb0:	1009883a 	mov	r4,r2
 4006bb4:	4006fdc0 	call	4006fdc <atan>
 4006bb8:	1015883a 	mov	r10,r2
 4006bbc:	1817883a 	mov	r11,r3
 4006bc0:	003fd106 	br	4006b08 <__ieee754_atan2+0x144>
 4006bc4:	59a0003c 	xorhi	r6,r11,32768
 4006bc8:	5011883a 	mov	r8,r10
 4006bcc:	3013883a 	mov	r9,r6
 4006bd0:	003f9c06 	br	4006a44 <__ieee754_atan2+0x80>
 4006bd4:	008cc534 	movhi	r2,13076
 4006bd8:	109701c4 	addi	r2,r2,23559
 4006bdc:	00cf28b4 	movhi	r3,15522
 4006be0:	18e98984 	addi	r3,r3,-23002
 4006be4:	580b883a 	mov	r5,r11
 4006be8:	180f883a 	mov	r7,r3
 4006bec:	5009883a 	mov	r4,r10
 4006bf0:	100d883a 	mov	r6,r2
 4006bf4:	40083000 	call	4008300 <__subdf3>
 4006bf8:	02151134 	movhi	r8,21572
 4006bfc:	420b4604 	addi	r8,r8,11544
 4006c00:	02500274 	movhi	r9,16393
 4006c04:	4a487ec4 	addi	r9,r9,8699
 4006c08:	180b883a 	mov	r5,r3
 4006c0c:	480f883a 	mov	r7,r9
 4006c10:	1009883a 	mov	r4,r2
 4006c14:	400d883a 	mov	r6,r8
 4006c18:	40083000 	call	4008300 <__subdf3>
 4006c1c:	1011883a 	mov	r8,r2
 4006c20:	1813883a 	mov	r9,r3
 4006c24:	003f8706 	br	4006a44 <__ieee754_atan2+0x80>
 4006c28:	008cc534 	movhi	r2,13076
 4006c2c:	109701c4 	addi	r2,r2,23559
 4006c30:	00cf28b4 	movhi	r3,15522
 4006c34:	18e98984 	addi	r3,r3,-23002
 4006c38:	580b883a 	mov	r5,r11
 4006c3c:	180f883a 	mov	r7,r3
 4006c40:	5009883a 	mov	r4,r10
 4006c44:	100d883a 	mov	r6,r2
 4006c48:	40083000 	call	4008300 <__subdf3>
 4006c4c:	02151134 	movhi	r8,21572
 4006c50:	420b4604 	addi	r8,r8,11544
 4006c54:	02500274 	movhi	r9,16393
 4006c58:	4a487ec4 	addi	r9,r9,8699
 4006c5c:	480b883a 	mov	r5,r9
 4006c60:	180f883a 	mov	r7,r3
 4006c64:	4009883a 	mov	r4,r8
 4006c68:	100d883a 	mov	r6,r2
 4006c6c:	003fea06 	br	4006c18 <__ieee754_atan2+0x254>
 4006c70:	00bff104 	movi	r2,-60
 4006c74:	20bfc50e 	bge	r4,r2,4006b8c <__ieee754_atan2+0x1c8>
 4006c78:	0015883a 	mov	r10,zero
 4006c7c:	0017883a 	mov	r11,zero
 4006c80:	003fa106 	br	4006b08 <__ieee754_atan2+0x144>
 4006c84:	00800044 	movi	r2,1
 4006c88:	90801826 	beq	r18,r2,4006cec <__ieee754_atan2+0x328>
 4006c8c:	14800e16 	blt	r2,r18,4006cc8 <__ieee754_atan2+0x304>
 4006c90:	903f931e 	bne	r18,zero,4006ae0 <__ieee754_atan2+0x11c>
 4006c94:	02151134 	movhi	r8,21572
 4006c98:	420b4604 	addi	r8,r8,11544
 4006c9c:	024ffa74 	movhi	r9,16361
 4006ca0:	4a487ec4 	addi	r9,r9,8699
 4006ca4:	003f6706 	br	4006a44 <__ieee754_atan2+0x80>
 4006ca8:	00800084 	movi	r2,2
 4006cac:	90bfb126 	beq	r18,r2,4006b74 <__ieee754_atan2+0x1b0>
 4006cb0:	008000c4 	movi	r2,3
 4006cb4:	90bf8a1e 	bne	r18,r2,4006ae0 <__ieee754_atan2+0x11c>
 4006cb8:	003f7906 	br	4006aa0 <__ieee754_atan2+0xdc>
 4006cbc:	0011883a 	mov	r8,zero
 4006cc0:	02600034 	movhi	r9,32768
 4006cc4:	003f5f06 	br	4006a44 <__ieee754_atan2+0x80>
 4006cc8:	00800084 	movi	r2,2
 4006ccc:	90800c26 	beq	r18,r2,4006d00 <__ieee754_atan2+0x33c>
 4006cd0:	008000c4 	movi	r2,3
 4006cd4:	90bf821e 	bne	r18,r2,4006ae0 <__ieee754_atan2+0x11c>
 4006cd8:	021fccf4 	movhi	r8,32563
 4006cdc:	42087484 	addi	r8,r8,8658
 4006ce0:	027000f4 	movhi	r9,49155
 4006ce4:	4a765f04 	addi	r9,r9,-9860
 4006ce8:	003f5606 	br	4006a44 <__ieee754_atan2+0x80>
 4006cec:	02151134 	movhi	r8,21572
 4006cf0:	420b4604 	addi	r8,r8,11544
 4006cf4:	026ffa74 	movhi	r9,49129
 4006cf8:	4a487ec4 	addi	r9,r9,8699
 4006cfc:	003f5106 	br	4006a44 <__ieee754_atan2+0x80>
 4006d00:	021fccf4 	movhi	r8,32563
 4006d04:	42087484 	addi	r8,r8,8658
 4006d08:	025000f4 	movhi	r9,16387
 4006d0c:	4a765f04 	addi	r9,r9,-9860
 4006d10:	003f4c06 	br	4006a44 <__ieee754_atan2+0x80>

04006d14 <__ieee754_sqrt>:
 4006d14:	defffd04 	addi	sp,sp,-12
 4006d18:	dc000015 	stw	r16,0(sp)
 4006d1c:	009ffc34 	movhi	r2,32752
 4006d20:	2021883a 	mov	r16,r4
 4006d24:	291ffc2c 	andhi	r4,r5,32752
 4006d28:	dc400115 	stw	r17,4(sp)
 4006d2c:	dfc00215 	stw	ra,8(sp)
 4006d30:	2823883a 	mov	r17,r5
 4006d34:	280f883a 	mov	r7,r5
 4006d38:	2807883a 	mov	r3,r5
 4006d3c:	8011883a 	mov	r8,r16
 4006d40:	20807d26 	beq	r4,r2,4006f38 <__ieee754_sqrt+0x224>
 4006d44:	01408d0e 	bge	zero,r5,4006f7c <__ieee754_sqrt+0x268>
 4006d48:	380dd53a 	srai	r6,r7,20
 4006d4c:	3000131e 	bne	r6,zero,4006d9c <__ieee754_sqrt+0x88>
 4006d50:	1800041e 	bne	r3,zero,4006d64 <__ieee754_sqrt+0x50>
 4006d54:	400ed2fa 	srli	r7,r8,11
 4006d58:	31bffac4 	addi	r6,r6,-21
 4006d5c:	4010957a 	slli	r8,r8,21
 4006d60:	383ffc26 	beq	r7,zero,4006d54 <__ieee754_sqrt+0x40>
 4006d64:	3880042c 	andhi	r2,r7,16
 4006d68:	1000991e 	bne	r2,zero,4006fd0 <__ieee754_sqrt+0x2bc>
 4006d6c:	0009883a 	mov	r4,zero
 4006d70:	39cf883a 	add	r7,r7,r7
 4006d74:	3880042c 	andhi	r2,r7,16
 4006d78:	21000044 	addi	r4,r4,1
 4006d7c:	103ffc26 	beq	r2,zero,4006d70 <__ieee754_sqrt+0x5c>
 4006d80:	00800804 	movi	r2,32
 4006d84:	1105c83a 	sub	r2,r2,r4
 4006d88:	4086d83a 	srl	r3,r8,r2
 4006d8c:	4110983a 	sll	r8,r8,r4
 4006d90:	3105c83a 	sub	r2,r6,r4
 4006d94:	38ceb03a 	or	r7,r7,r3
 4006d98:	11800044 	addi	r6,r2,1
 4006d9c:	31bf0044 	addi	r6,r6,-1023
 4006da0:	30c0004c 	andi	r3,r6,1
 4006da4:	00800434 	movhi	r2,16
 4006da8:	10bfffc4 	addi	r2,r2,-1
 4006dac:	3884703a 	and	r2,r7,r2
 4006db0:	1807003a 	cmpeq	r3,r3,zero
 4006db4:	11000434 	orhi	r4,r2,16
 4006db8:	18005426 	beq	r3,zero,4006f0c <__ieee754_sqrt+0x1f8>
 4006dbc:	4004d7fa 	srli	r2,r8,31
 4006dc0:	4207883a 	add	r3,r8,r8
 4006dc4:	02800834 	movhi	r10,32
 4006dc8:	1105883a 	add	r2,r2,r4
 4006dcc:	2089883a 	add	r4,r4,r2
 4006dd0:	0011883a 	mov	r8,zero
 4006dd4:	000b883a 	mov	r5,zero
 4006dd8:	0013883a 	mov	r9,zero
 4006ddc:	02c00584 	movi	r11,22
 4006de0:	520f883a 	add	r7,r10,r8
 4006de4:	1804d7fa 	srli	r2,r3,31
 4006de8:	4a400044 	addi	r9,r9,1
 4006dec:	18c7883a 	add	r3,r3,r3
 4006df0:	21c00316 	blt	r4,r7,4006e00 <__ieee754_sqrt+0xec>
 4006df4:	21c9c83a 	sub	r4,r4,r7
 4006df8:	2a8b883a 	add	r5,r5,r10
 4006dfc:	51d1883a 	add	r8,r10,r7
 4006e00:	1105883a 	add	r2,r2,r4
 4006e04:	5014d07a 	srli	r10,r10,1
 4006e08:	2089883a 	add	r4,r4,r2
 4006e0c:	4afff41e 	bne	r9,r11,4006de0 <__ieee754_sqrt+0xcc>
 4006e10:	02600034 	movhi	r9,32768
 4006e14:	0017883a 	mov	r11,zero
 4006e18:	0019883a 	mov	r12,zero
 4006e1c:	0015883a 	mov	r10,zero
 4006e20:	4821883a 	mov	r16,r9
 4006e24:	03c00804 	movi	r15,32
 4006e28:	00000806 	br	4006e4c <__ieee754_sqrt+0x138>
 4006e2c:	22003426 	beq	r4,r8,4006f00 <__ieee754_sqrt+0x1ec>
 4006e30:	1804d7fa 	srli	r2,r3,31
 4006e34:	52800044 	addi	r10,r10,1
 4006e38:	18c7883a 	add	r3,r3,r3
 4006e3c:	1105883a 	add	r2,r2,r4
 4006e40:	2089883a 	add	r4,r4,r2
 4006e44:	4812d07a 	srli	r9,r9,1
 4006e48:	53c01326 	beq	r10,r15,4006e98 <__ieee754_sqrt+0x184>
 4006e4c:	4acf883a 	add	r7,r9,r11
 4006e50:	413ff60e 	bge	r8,r4,4006e2c <__ieee754_sqrt+0x118>
 4006e54:	38a0002c 	andhi	r2,r7,32768
 4006e58:	3a57883a 	add	r11,r7,r9
 4006e5c:	14002426 	beq	r2,r16,4006ef0 <__ieee754_sqrt+0x1dc>
 4006e60:	4005883a 	mov	r2,r8
 4006e64:	2209c83a 	sub	r4,r4,r8
 4006e68:	19c0012e 	bgeu	r3,r7,4006e70 <__ieee754_sqrt+0x15c>
 4006e6c:	213fffc4 	addi	r4,r4,-1
 4006e70:	19c7c83a 	sub	r3,r3,r7
 4006e74:	1011883a 	mov	r8,r2
 4006e78:	1804d7fa 	srli	r2,r3,31
 4006e7c:	52800044 	addi	r10,r10,1
 4006e80:	6259883a 	add	r12,r12,r9
 4006e84:	1105883a 	add	r2,r2,r4
 4006e88:	18c7883a 	add	r3,r3,r3
 4006e8c:	2089883a 	add	r4,r4,r2
 4006e90:	4812d07a 	srli	r9,r9,1
 4006e94:	53ffed1e 	bne	r10,r15,4006e4c <__ieee754_sqrt+0x138>
 4006e98:	20c4b03a 	or	r2,r4,r3
 4006e9c:	1000201e 	bne	r2,zero,4006f20 <__ieee754_sqrt+0x20c>
 4006ea0:	600ed07a 	srli	r7,r12,1
 4006ea4:	2880004c 	andi	r2,r5,1
 4006ea8:	1005003a 	cmpeq	r2,r2,zero
 4006eac:	1000011e 	bne	r2,zero,4006eb4 <__ieee754_sqrt+0x1a0>
 4006eb0:	39e00034 	orhi	r7,r7,32768
 4006eb4:	300dd07a 	srai	r6,r6,1
 4006eb8:	280bd07a 	srai	r5,r5,1
 4006ebc:	010ff834 	movhi	r4,16352
 4006ec0:	300c953a 	slli	r6,r6,20
 4006ec4:	290b883a 	add	r5,r5,r4
 4006ec8:	3821883a 	mov	r16,r7
 4006ecc:	299d883a 	add	r14,r5,r6
 4006ed0:	7023883a 	mov	r17,r14
 4006ed4:	8005883a 	mov	r2,r16
 4006ed8:	8807883a 	mov	r3,r17
 4006edc:	dfc00217 	ldw	ra,8(sp)
 4006ee0:	dc400117 	ldw	r17,4(sp)
 4006ee4:	dc000017 	ldw	r16,0(sp)
 4006ee8:	dec00304 	addi	sp,sp,12
 4006eec:	f800283a 	ret
 4006ef0:	5884703a 	and	r2,r11,r2
 4006ef4:	103fda1e 	bne	r2,zero,4006e60 <__ieee754_sqrt+0x14c>
 4006ef8:	40800044 	addi	r2,r8,1
 4006efc:	003fd906 	br	4006e64 <__ieee754_sqrt+0x150>
 4006f00:	19ffd42e 	bgeu	r3,r7,4006e54 <__ieee754_sqrt+0x140>
 4006f04:	2011883a 	mov	r8,r4
 4006f08:	003fc906 	br	4006e30 <__ieee754_sqrt+0x11c>
 4006f0c:	4004d7fa 	srli	r2,r8,31
 4006f10:	4211883a 	add	r8,r8,r8
 4006f14:	1105883a 	add	r2,r2,r4
 4006f18:	2089883a 	add	r4,r4,r2
 4006f1c:	003fa706 	br	4006dbc <__ieee754_sqrt+0xa8>
 4006f20:	00bfffc4 	movi	r2,-1
 4006f24:	60802726 	beq	r12,r2,4006fc4 <__ieee754_sqrt+0x2b0>
 4006f28:	6080004c 	andi	r2,r12,1
 4006f2c:	6085883a 	add	r2,r12,r2
 4006f30:	100ed07a 	srli	r7,r2,1
 4006f34:	003fdb06 	br	4006ea4 <__ieee754_sqrt+0x190>
 4006f38:	8009883a 	mov	r4,r16
 4006f3c:	800d883a 	mov	r6,r16
 4006f40:	40083f40 	call	40083f4 <__muldf3>
 4006f44:	180f883a 	mov	r7,r3
 4006f48:	880b883a 	mov	r5,r17
 4006f4c:	8009883a 	mov	r4,r16
 4006f50:	100d883a 	mov	r6,r2
 4006f54:	40083800 	call	4008380 <__adddf3>
 4006f58:	1021883a 	mov	r16,r2
 4006f5c:	1823883a 	mov	r17,r3
 4006f60:	8005883a 	mov	r2,r16
 4006f64:	8807883a 	mov	r3,r17
 4006f68:	dfc00217 	ldw	ra,8(sp)
 4006f6c:	dc400117 	ldw	r17,4(sp)
 4006f70:	dc000017 	ldw	r16,0(sp)
 4006f74:	dec00304 	addi	sp,sp,12
 4006f78:	f800283a 	ret
 4006f7c:	00a00034 	movhi	r2,32768
 4006f80:	10bfffc4 	addi	r2,r2,-1
 4006f84:	2884703a 	and	r2,r5,r2
 4006f88:	8084b03a 	or	r2,r16,r2
 4006f8c:	103fd126 	beq	r2,zero,4006ed4 <__ieee754_sqrt+0x1c0>
 4006f90:	283f6d26 	beq	r5,zero,4006d48 <__ieee754_sqrt+0x34>
 4006f94:	280f883a 	mov	r7,r5
 4006f98:	8009883a 	mov	r4,r16
 4006f9c:	800d883a 	mov	r6,r16
 4006fa0:	40083000 	call	4008300 <__subdf3>
 4006fa4:	1009883a 	mov	r4,r2
 4006fa8:	180b883a 	mov	r5,r3
 4006fac:	100d883a 	mov	r6,r2
 4006fb0:	180f883a 	mov	r7,r3
 4006fb4:	40087b80 	call	40087b8 <__divdf3>
 4006fb8:	1021883a 	mov	r16,r2
 4006fbc:	1823883a 	mov	r17,r3
 4006fc0:	003fc406 	br	4006ed4 <__ieee754_sqrt+0x1c0>
 4006fc4:	29400044 	addi	r5,r5,1
 4006fc8:	000f883a 	mov	r7,zero
 4006fcc:	003fb506 	br	4006ea4 <__ieee754_sqrt+0x190>
 4006fd0:	0009883a 	mov	r4,zero
 4006fd4:	00800804 	movi	r2,32
 4006fd8:	003f6b06 	br	4006d88 <__ieee754_sqrt+0x74>

04006fdc <atan>:
 4006fdc:	defff304 	addi	sp,sp,-52
 4006fe0:	00a00034 	movhi	r2,32768
 4006fe4:	10bfffc4 	addi	r2,r2,-1
 4006fe8:	dc000315 	stw	r16,12(sp)
 4006fec:	28a0703a 	and	r16,r5,r2
 4006ff0:	00910434 	movhi	r2,17424
 4006ff4:	10bfffc4 	addi	r2,r2,-1
 4006ff8:	df000b15 	stw	fp,44(sp)
 4006ffc:	dfc00c15 	stw	ra,48(sp)
 4007000:	ddc00a15 	stw	r23,40(sp)
 4007004:	dd800915 	stw	r22,36(sp)
 4007008:	dd400815 	stw	r21,32(sp)
 400700c:	dd000715 	stw	r20,28(sp)
 4007010:	dcc00615 	stw	r19,24(sp)
 4007014:	dc800515 	stw	r18,20(sp)
 4007018:	dc400415 	stw	r17,16(sp)
 400701c:	d9000115 	stw	r4,4(sp)
 4007020:	d9400215 	stw	r5,8(sp)
 4007024:	2839883a 	mov	fp,r5
 4007028:	1400190e 	bge	r2,r16,4007090 <atan+0xb4>
 400702c:	2005883a 	mov	r2,r4
 4007030:	011ffc34 	movhi	r4,32752
 4007034:	2400eb0e 	bge	r4,r16,40073e4 <atan+0x408>
 4007038:	d9000117 	ldw	r4,4(sp)
 400703c:	d9c00217 	ldw	r7,8(sp)
 4007040:	200d883a 	mov	r6,r4
 4007044:	40083800 	call	4008380 <__adddf3>
 4007048:	d8800115 	stw	r2,4(sp)
 400704c:	d8c00215 	stw	r3,8(sp)
 4007050:	d9000117 	ldw	r4,4(sp)
 4007054:	2005883a 	mov	r2,r4
 4007058:	d9000217 	ldw	r4,8(sp)
 400705c:	2007883a 	mov	r3,r4
 4007060:	dfc00c17 	ldw	ra,48(sp)
 4007064:	df000b17 	ldw	fp,44(sp)
 4007068:	ddc00a17 	ldw	r23,40(sp)
 400706c:	dd800917 	ldw	r22,36(sp)
 4007070:	dd400817 	ldw	r21,32(sp)
 4007074:	dd000717 	ldw	r20,28(sp)
 4007078:	dcc00617 	ldw	r19,24(sp)
 400707c:	dc800517 	ldw	r18,20(sp)
 4007080:	dc400417 	ldw	r17,16(sp)
 4007084:	dc000317 	ldw	r16,12(sp)
 4007088:	dec00d04 	addi	sp,sp,52
 400708c:	f800283a 	ret
 4007090:	008ff734 	movhi	r2,16348
 4007094:	10bfffc4 	addi	r2,r2,-1
 4007098:	1400ec16 	blt	r2,r16,400744c <atan+0x470>
 400709c:	008f8834 	movhi	r2,15904
 40070a0:	10bfffc4 	addi	r2,r2,-1
 40070a4:	1400d80e 	bge	r2,r16,4007408 <atan+0x42c>
 40070a8:	00bfffc4 	movi	r2,-1
 40070ac:	d8800015 	stw	r2,0(sp)
 40070b0:	d9000117 	ldw	r4,4(sp)
 40070b4:	d9400217 	ldw	r5,8(sp)
 40070b8:	200d883a 	mov	r6,r4
 40070bc:	280f883a 	mov	r7,r5
 40070c0:	40083f40 	call	40083f4 <__muldf3>
 40070c4:	1009883a 	mov	r4,r2
 40070c8:	180b883a 	mov	r5,r3
 40070cc:	100d883a 	mov	r6,r2
 40070d0:	180f883a 	mov	r7,r3
 40070d4:	1025883a 	mov	r18,r2
 40070d8:	1827883a 	mov	r19,r3
 40070dc:	40083f40 	call	40083f4 <__muldf3>
 40070e0:	1021883a 	mov	r16,r2
 40070e4:	1823883a 	mov	r17,r3
 40070e8:	00b8c8f4 	movhi	r2,58147
 40070ec:	10b68444 	addi	r2,r2,-9711
 40070f0:	00cfe474 	movhi	r3,16273
 40070f4:	18eb4e84 	addi	r3,r3,-21190
 40070f8:	180f883a 	mov	r7,r3
 40070fc:	8009883a 	mov	r4,r16
 4007100:	880b883a 	mov	r5,r17
 4007104:	100d883a 	mov	r6,r2
 4007108:	40083f40 	call	40083f4 <__muldf3>
 400710c:	02091db4 	movhi	r8,9334
 4007110:	42037ac4 	addi	r8,r8,3563
 4007114:	024fea74 	movhi	r9,16297
 4007118:	4a5ed2c4 	addi	r9,r9,31563
 400711c:	480f883a 	mov	r7,r9
 4007120:	400d883a 	mov	r6,r8
 4007124:	180b883a 	mov	r5,r3
 4007128:	1009883a 	mov	r4,r2
 400712c:	40083800 	call	4008380 <__adddf3>
 4007130:	180f883a 	mov	r7,r3
 4007134:	8009883a 	mov	r4,r16
 4007138:	880b883a 	mov	r5,r17
 400713c:	100d883a 	mov	r6,r2
 4007140:	40083f40 	call	40083f4 <__muldf3>
 4007144:	02283434 	movhi	r8,41168
 4007148:	420f5444 	addi	r8,r8,15697
 400714c:	024fec74 	movhi	r9,16305
 4007150:	4a435984 	addi	r9,r9,3430
 4007154:	480f883a 	mov	r7,r9
 4007158:	400d883a 	mov	r6,r8
 400715c:	180b883a 	mov	r5,r3
 4007160:	1009883a 	mov	r4,r2
 4007164:	40083800 	call	4008380 <__adddf3>
 4007168:	180f883a 	mov	r7,r3
 400716c:	8009883a 	mov	r4,r16
 4007170:	880b883a 	mov	r5,r17
 4007174:	100d883a 	mov	r6,r2
 4007178:	40083f40 	call	40083f4 <__muldf3>
 400717c:	02315334 	movhi	r8,50508
 4007180:	42081b84 	addi	r8,r8,8302
 4007184:	024fedf4 	movhi	r9,16311
 4007188:	4a517344 	addi	r9,r9,17869
 400718c:	480f883a 	mov	r7,r9
 4007190:	400d883a 	mov	r6,r8
 4007194:	180b883a 	mov	r5,r3
 4007198:	1009883a 	mov	r4,r2
 400719c:	40083800 	call	4008380 <__adddf3>
 40071a0:	180f883a 	mov	r7,r3
 40071a4:	8009883a 	mov	r4,r16
 40071a8:	880b883a 	mov	r5,r17
 40071ac:	100d883a 	mov	r6,r2
 40071b0:	40083f40 	call	40083f4 <__muldf3>
 40071b4:	02248074 	movhi	r8,37377
 40071b8:	4220ffc4 	addi	r8,r8,-31745
 40071bc:	024ff0b4 	movhi	r9,16322
 40071c0:	4a524904 	addi	r9,r9,18724
 40071c4:	480f883a 	mov	r7,r9
 40071c8:	400d883a 	mov	r6,r8
 40071cc:	180b883a 	mov	r5,r3
 40071d0:	1009883a 	mov	r4,r2
 40071d4:	40083800 	call	4008380 <__adddf3>
 40071d8:	180f883a 	mov	r7,r3
 40071dc:	8009883a 	mov	r4,r16
 40071e0:	880b883a 	mov	r5,r17
 40071e4:	100d883a 	mov	r6,r2
 40071e8:	40083f40 	call	40083f4 <__muldf3>
 40071ec:	02155574 	movhi	r8,21845
 40071f0:	42154344 	addi	r8,r8,21773
 40071f4:	024ff574 	movhi	r9,16341
 40071f8:	4a555544 	addi	r9,r9,21845
 40071fc:	480f883a 	mov	r7,r9
 4007200:	400d883a 	mov	r6,r8
 4007204:	180b883a 	mov	r5,r3
 4007208:	1009883a 	mov	r4,r2
 400720c:	40083800 	call	4008380 <__adddf3>
 4007210:	180f883a 	mov	r7,r3
 4007214:	9009883a 	mov	r4,r18
 4007218:	980b883a 	mov	r5,r19
 400721c:	100d883a 	mov	r6,r2
 4007220:	40083f40 	call	40083f4 <__muldf3>
 4007224:	020b1ab4 	movhi	r8,11370
 4007228:	421b0bc4 	addi	r8,r8,27695
 400722c:	026fe8f4 	movhi	r9,49059
 4007230:	4a6d1104 	addi	r9,r9,-19388
 4007234:	480f883a 	mov	r7,r9
 4007238:	400d883a 	mov	r6,r8
 400723c:	8009883a 	mov	r4,r16
 4007240:	880b883a 	mov	r5,r17
 4007244:	102d883a 	mov	r22,r2
 4007248:	182f883a 	mov	r23,r3
 400724c:	40083f40 	call	40083f4 <__muldf3>
 4007250:	0214b7f4 	movhi	r8,21215
 4007254:	423f6684 	addi	r8,r8,-614
 4007258:	024febb4 	movhi	r9,16302
 400725c:	4a778b44 	addi	r9,r9,-8659
 4007260:	480f883a 	mov	r7,r9
 4007264:	400d883a 	mov	r6,r8
 4007268:	180b883a 	mov	r5,r3
 400726c:	1009883a 	mov	r4,r2
 4007270:	40083000 	call	4008300 <__subdf3>
 4007274:	180f883a 	mov	r7,r3
 4007278:	8009883a 	mov	r4,r16
 400727c:	880b883a 	mov	r5,r17
 4007280:	100d883a 	mov	r6,r2
 4007284:	40083f40 	call	40083f4 <__muldf3>
 4007288:	022bdd74 	movhi	r8,44917
 400728c:	42269b44 	addi	r8,r8,-26003
 4007290:	024fed34 	movhi	r9,16308
 4007294:	4a6c3c84 	addi	r9,r9,-20238
 4007298:	480f883a 	mov	r7,r9
 400729c:	400d883a 	mov	r6,r8
 40072a0:	180b883a 	mov	r5,r3
 40072a4:	1009883a 	mov	r4,r2
 40072a8:	40083000 	call	4008300 <__subdf3>
 40072ac:	180f883a 	mov	r7,r3
 40072b0:	8009883a 	mov	r4,r16
 40072b4:	880b883a 	mov	r5,r17
 40072b8:	100d883a 	mov	r6,r2
 40072bc:	40083f40 	call	40083f4 <__muldf3>
 40072c0:	023f88f4 	movhi	r8,65059
 40072c4:	42059c44 	addi	r8,r8,5745
 40072c8:	024fef34 	movhi	r9,16316
 40072cc:	4a5c7184 	addi	r9,r9,29126
 40072d0:	480f883a 	mov	r7,r9
 40072d4:	400d883a 	mov	r6,r8
 40072d8:	180b883a 	mov	r5,r3
 40072dc:	1009883a 	mov	r4,r2
 40072e0:	40083000 	call	4008300 <__subdf3>
 40072e4:	180f883a 	mov	r7,r3
 40072e8:	8009883a 	mov	r4,r16
 40072ec:	880b883a 	mov	r5,r17
 40072f0:	100d883a 	mov	r6,r2
 40072f4:	40083f40 	call	40083f4 <__muldf3>
 40072f8:	02266674 	movhi	r8,39321
 40072fc:	423af104 	addi	r8,r8,-5180
 4007300:	024ff2b4 	movhi	r9,16330
 4007304:	4a666644 	addi	r9,r9,-26215
 4007308:	480f883a 	mov	r7,r9
 400730c:	400d883a 	mov	r6,r8
 4007310:	180b883a 	mov	r5,r3
 4007314:	1009883a 	mov	r4,r2
 4007318:	40083000 	call	4008300 <__subdf3>
 400731c:	180f883a 	mov	r7,r3
 4007320:	8009883a 	mov	r4,r16
 4007324:	880b883a 	mov	r5,r17
 4007328:	100d883a 	mov	r6,r2
 400732c:	40083f40 	call	40083f4 <__muldf3>
 4007330:	100f883a 	mov	r7,r2
 4007334:	d8800017 	ldw	r2,0(sp)
 4007338:	b009883a 	mov	r4,r22
 400733c:	b80b883a 	mov	r5,r23
 4007340:	10006b16 	blt	r2,zero,40074f0 <atan+0x514>
 4007344:	d8800017 	ldw	r2,0(sp)
 4007348:	380d883a 	mov	r6,r7
 400734c:	b80b883a 	mov	r5,r23
 4007350:	102490fa 	slli	r18,r2,3
 4007354:	008100b4 	movhi	r2,1026
 4007358:	10911504 	addi	r2,r2,17492
 400735c:	180f883a 	mov	r7,r3
 4007360:	9085883a 	add	r2,r18,r2
 4007364:	14000017 	ldw	r16,0(r2)
 4007368:	14400117 	ldw	r17,4(r2)
 400736c:	40083800 	call	4008380 <__adddf3>
 4007370:	d9000117 	ldw	r4,4(sp)
 4007374:	d9400217 	ldw	r5,8(sp)
 4007378:	180f883a 	mov	r7,r3
 400737c:	100d883a 	mov	r6,r2
 4007380:	40083f40 	call	40083f4 <__muldf3>
 4007384:	010100b4 	movhi	r4,1026
 4007388:	21111d04 	addi	r4,r4,17524
 400738c:	9125883a 	add	r18,r18,r4
 4007390:	92000017 	ldw	r8,0(r18)
 4007394:	92400117 	ldw	r9,4(r18)
 4007398:	180b883a 	mov	r5,r3
 400739c:	400d883a 	mov	r6,r8
 40073a0:	480f883a 	mov	r7,r9
 40073a4:	1009883a 	mov	r4,r2
 40073a8:	40083000 	call	4008300 <__subdf3>
 40073ac:	d9c00217 	ldw	r7,8(sp)
 40073b0:	d9800117 	ldw	r6,4(sp)
 40073b4:	180b883a 	mov	r5,r3
 40073b8:	1009883a 	mov	r4,r2
 40073bc:	40083000 	call	4008300 <__subdf3>
 40073c0:	180f883a 	mov	r7,r3
 40073c4:	880b883a 	mov	r5,r17
 40073c8:	8009883a 	mov	r4,r16
 40073cc:	100d883a 	mov	r6,r2
 40073d0:	40083000 	call	4008300 <__subdf3>
 40073d4:	e0003f16 	blt	fp,zero,40074d4 <atan+0x4f8>
 40073d8:	d8800115 	stw	r2,4(sp)
 40073dc:	d8c00215 	stw	r3,8(sp)
 40073e0:	003f1b06 	br	4007050 <atan+0x74>
 40073e4:	81003f26 	beq	r16,r4,40074e4 <atan+0x508>
 40073e8:	07005e0e 	bge	zero,fp,4007564 <atan+0x588>
 40073ec:	01151134 	movhi	r4,21572
 40073f0:	210b4604 	addi	r4,r4,11544
 40073f4:	008ffe74 	movhi	r2,16377
 40073f8:	10887ec4 	addi	r2,r2,8699
 40073fc:	d9000115 	stw	r4,4(sp)
 4007400:	d8800215 	stw	r2,8(sp)
 4007404:	003f1206 	br	4007050 <atan+0x74>
 4007408:	d9000117 	ldw	r4,4(sp)
 400740c:	00a20034 	movhi	r2,34816
 4007410:	109d6704 	addi	r2,r2,30108
 4007414:	00df8e34 	movhi	r3,32312
 4007418:	18f90f04 	addi	r3,r3,-7108
 400741c:	180f883a 	mov	r7,r3
 4007420:	100d883a 	mov	r6,r2
 4007424:	40083800 	call	4008380 <__adddf3>
 4007428:	0011883a 	mov	r8,zero
 400742c:	024ffc34 	movhi	r9,16368
 4007430:	180b883a 	mov	r5,r3
 4007434:	480f883a 	mov	r7,r9
 4007438:	1009883a 	mov	r4,r2
 400743c:	400d883a 	mov	r6,r8
 4007440:	4008a100 	call	4008a10 <__gtdf2>
 4007444:	00bf0216 	blt	zero,r2,4007050 <atan+0x74>
 4007448:	003f1706 	br	40070a8 <atan+0xcc>
 400744c:	d9000117 	ldw	r4,4(sp)
 4007450:	40076740 	call	4007674 <fabs>
 4007454:	102d883a 	mov	r22,r2
 4007458:	008ffcf4 	movhi	r2,16371
 400745c:	10bfffc4 	addi	r2,r2,-1
 4007460:	182f883a 	mov	r23,r3
 4007464:	14003016 	blt	r2,r16,4007528 <atan+0x54c>
 4007468:	008ff9b4 	movhi	r2,16358
 400746c:	10bfffc4 	addi	r2,r2,-1
 4007470:	1400430e 	bge	r2,r16,4007580 <atan+0x5a4>
 4007474:	044ffc34 	movhi	r17,16368
 4007478:	0021883a 	mov	r16,zero
 400747c:	800d883a 	mov	r6,r16
 4007480:	880f883a 	mov	r7,r17
 4007484:	b009883a 	mov	r4,r22
 4007488:	180b883a 	mov	r5,r3
 400748c:	40083000 	call	4008300 <__subdf3>
 4007490:	880f883a 	mov	r7,r17
 4007494:	000d883a 	mov	r6,zero
 4007498:	b80b883a 	mov	r5,r23
 400749c:	b009883a 	mov	r4,r22
 40074a0:	1021883a 	mov	r16,r2
 40074a4:	1823883a 	mov	r17,r3
 40074a8:	40083800 	call	4008380 <__adddf3>
 40074ac:	180f883a 	mov	r7,r3
 40074b0:	8009883a 	mov	r4,r16
 40074b4:	880b883a 	mov	r5,r17
 40074b8:	100d883a 	mov	r6,r2
 40074bc:	40087b80 	call	40087b8 <__divdf3>
 40074c0:	01000044 	movi	r4,1
 40074c4:	d8800115 	stw	r2,4(sp)
 40074c8:	d8c00215 	stw	r3,8(sp)
 40074cc:	d9000015 	stw	r4,0(sp)
 40074d0:	003ef706 	br	40070b0 <atan+0xd4>
 40074d4:	18e0003c 	xorhi	r3,r3,32768
 40074d8:	d8800115 	stw	r2,4(sp)
 40074dc:	d8c00215 	stw	r3,8(sp)
 40074e0:	003edb06 	br	4007050 <atan+0x74>
 40074e4:	103ed41e 	bne	r2,zero,4007038 <atan+0x5c>
 40074e8:	073fc016 	blt	zero,fp,40073ec <atan+0x410>
 40074ec:	00001d06 	br	4007564 <atan+0x588>
 40074f0:	380d883a 	mov	r6,r7
 40074f4:	180f883a 	mov	r7,r3
 40074f8:	40083800 	call	4008380 <__adddf3>
 40074fc:	d9000117 	ldw	r4,4(sp)
 4007500:	d9400217 	ldw	r5,8(sp)
 4007504:	180f883a 	mov	r7,r3
 4007508:	100d883a 	mov	r6,r2
 400750c:	40083f40 	call	40083f4 <__muldf3>
 4007510:	d9400217 	ldw	r5,8(sp)
 4007514:	d9000117 	ldw	r4,4(sp)
 4007518:	180f883a 	mov	r7,r3
 400751c:	100d883a 	mov	r6,r2
 4007520:	40083000 	call	4008300 <__subdf3>
 4007524:	003ec806 	br	4007048 <atan+0x6c>
 4007528:	009000f4 	movhi	r2,16387
 400752c:	109fffc4 	addi	r2,r2,32767
 4007530:	1400310e 	bge	r2,r16,40075f8 <atan+0x61c>
 4007534:	0005883a 	mov	r2,zero
 4007538:	00effc34 	movhi	r3,49136
 400753c:	1009883a 	mov	r4,r2
 4007540:	180b883a 	mov	r5,r3
 4007544:	b80f883a 	mov	r7,r23
 4007548:	b00d883a 	mov	r6,r22
 400754c:	40087b80 	call	40087b8 <__divdf3>
 4007550:	010000c4 	movi	r4,3
 4007554:	d8800115 	stw	r2,4(sp)
 4007558:	d8c00215 	stw	r3,8(sp)
 400755c:	d9000015 	stw	r4,0(sp)
 4007560:	003ed306 	br	40070b0 <atan+0xd4>
 4007564:	01151134 	movhi	r4,21572
 4007568:	210b4604 	addi	r4,r4,11544
 400756c:	00affe74 	movhi	r2,49145
 4007570:	10887ec4 	addi	r2,r2,8699
 4007574:	d9000115 	stw	r4,4(sp)
 4007578:	d8800215 	stw	r2,8(sp)
 400757c:	003eb406 	br	4007050 <atan+0x74>
 4007580:	b009883a 	mov	r4,r22
 4007584:	180b883a 	mov	r5,r3
 4007588:	b00d883a 	mov	r6,r22
 400758c:	180f883a 	mov	r7,r3
 4007590:	40083800 	call	4008380 <__adddf3>
 4007594:	0011883a 	mov	r8,zero
 4007598:	024ffc34 	movhi	r9,16368
 400759c:	480f883a 	mov	r7,r9
 40075a0:	400d883a 	mov	r6,r8
 40075a4:	180b883a 	mov	r5,r3
 40075a8:	1009883a 	mov	r4,r2
 40075ac:	40083000 	call	4008300 <__subdf3>
 40075b0:	0011883a 	mov	r8,zero
 40075b4:	02500034 	movhi	r9,16384
 40075b8:	480f883a 	mov	r7,r9
 40075bc:	400d883a 	mov	r6,r8
 40075c0:	b80b883a 	mov	r5,r23
 40075c4:	b009883a 	mov	r4,r22
 40075c8:	1021883a 	mov	r16,r2
 40075cc:	1823883a 	mov	r17,r3
 40075d0:	40083800 	call	4008380 <__adddf3>
 40075d4:	180f883a 	mov	r7,r3
 40075d8:	880b883a 	mov	r5,r17
 40075dc:	8009883a 	mov	r4,r16
 40075e0:	100d883a 	mov	r6,r2
 40075e4:	40087b80 	call	40087b8 <__divdf3>
 40075e8:	d8800115 	stw	r2,4(sp)
 40075ec:	d8c00215 	stw	r3,8(sp)
 40075f0:	d8000015 	stw	zero,0(sp)
 40075f4:	003eae06 	br	40070b0 <atan+0xd4>
 40075f8:	044ffe34 	movhi	r17,16376
 40075fc:	0021883a 	mov	r16,zero
 4007600:	800d883a 	mov	r6,r16
 4007604:	880f883a 	mov	r7,r17
 4007608:	b009883a 	mov	r4,r22
 400760c:	180b883a 	mov	r5,r3
 4007610:	40083000 	call	4008300 <__subdf3>
 4007614:	880f883a 	mov	r7,r17
 4007618:	000d883a 	mov	r6,zero
 400761c:	b80b883a 	mov	r5,r23
 4007620:	b009883a 	mov	r4,r22
 4007624:	1021883a 	mov	r16,r2
 4007628:	1823883a 	mov	r17,r3
 400762c:	40083f40 	call	40083f4 <__muldf3>
 4007630:	0011883a 	mov	r8,zero
 4007634:	024ffc34 	movhi	r9,16368
 4007638:	480f883a 	mov	r7,r9
 400763c:	400d883a 	mov	r6,r8
 4007640:	180b883a 	mov	r5,r3
 4007644:	1009883a 	mov	r4,r2
 4007648:	40083800 	call	4008380 <__adddf3>
 400764c:	180f883a 	mov	r7,r3
 4007650:	8009883a 	mov	r4,r16
 4007654:	880b883a 	mov	r5,r17
 4007658:	100d883a 	mov	r6,r2
 400765c:	40087b80 	call	40087b8 <__divdf3>
 4007660:	01000084 	movi	r4,2
 4007664:	d8800115 	stw	r2,4(sp)
 4007668:	d8c00215 	stw	r3,8(sp)
 400766c:	d9000015 	stw	r4,0(sp)
 4007670:	003e8f06 	br	40070b0 <atan+0xd4>

04007674 <fabs>:
 4007674:	01e00034 	movhi	r7,32768
 4007678:	39ffffc4 	addi	r7,r7,-1
 400767c:	394e703a 	and	r7,r7,r5
 4007680:	2005883a 	mov	r2,r4
 4007684:	3807883a 	mov	r3,r7
 4007688:	f800283a 	ret

0400768c <__isnand>:
 400768c:	200d883a 	mov	r6,r4
 4007690:	0109c83a 	sub	r4,zero,r4
 4007694:	2188b03a 	or	r4,r4,r6
 4007698:	2008d7fa 	srli	r4,r4,31
 400769c:	00a00034 	movhi	r2,32768
 40076a0:	10bfffc4 	addi	r2,r2,-1
 40076a4:	1144703a 	and	r2,r2,r5
 40076a8:	2088b03a 	or	r4,r4,r2
 40076ac:	009ffc34 	movhi	r2,32752
 40076b0:	1105c83a 	sub	r2,r2,r4
 40076b4:	1004d7fa 	srli	r2,r2,31
 40076b8:	f800283a 	ret

040076bc <matherr>:
 40076bc:	0005883a 	mov	r2,zero
 40076c0:	f800283a 	ret

040076c4 <_fpadd_parts>:
 40076c4:	21c00017 	ldw	r7,0(r4)
 40076c8:	02000044 	movi	r8,1
 40076cc:	41c0332e 	bgeu	r8,r7,400779c <_fpadd_parts+0xd8>
 40076d0:	28800017 	ldw	r2,0(r5)
 40076d4:	4080462e 	bgeu	r8,r2,40077f0 <_fpadd_parts+0x12c>
 40076d8:	00c00104 	movi	r3,4
 40076dc:	38c06b26 	beq	r7,r3,400788c <_fpadd_parts+0x1c8>
 40076e0:	10c04326 	beq	r2,r3,40077f0 <_fpadd_parts+0x12c>
 40076e4:	00c00084 	movi	r3,2
 40076e8:	10c02e26 	beq	r2,r3,40077a4 <_fpadd_parts+0xe0>
 40076ec:	38c04026 	beq	r7,r3,40077f0 <_fpadd_parts+0x12c>
 40076f0:	22800217 	ldw	r10,8(r4)
 40076f4:	28c00217 	ldw	r3,8(r5)
 40076f8:	23000317 	ldw	r12,12(r4)
 40076fc:	2a400317 	ldw	r9,12(r5)
 4007700:	50cfc83a 	sub	r7,r10,r3
 4007704:	3817883a 	mov	r11,r7
 4007708:	38004f16 	blt	r7,zero,4007848 <_fpadd_parts+0x184>
 400770c:	008007c4 	movi	r2,31
 4007710:	11c03316 	blt	r2,r7,40077e0 <_fpadd_parts+0x11c>
 4007714:	02c0540e 	bge	zero,r11,4007868 <_fpadd_parts+0x1a4>
 4007718:	41c4983a 	sll	r2,r8,r7
 400771c:	49c6d83a 	srl	r3,r9,r7
 4007720:	10bfffc4 	addi	r2,r2,-1
 4007724:	4884703a 	and	r2,r9,r2
 4007728:	1004c03a 	cmpne	r2,r2,zero
 400772c:	1892b03a 	or	r9,r3,r2
 4007730:	20c00117 	ldw	r3,4(r4)
 4007734:	28800117 	ldw	r2,4(r5)
 4007738:	18803c26 	beq	r3,r2,400782c <_fpadd_parts+0x168>
 400773c:	18002f26 	beq	r3,zero,40077fc <_fpadd_parts+0x138>
 4007740:	4b05c83a 	sub	r2,r9,r12
 4007744:	10004216 	blt	r2,zero,4007850 <_fpadd_parts+0x18c>
 4007748:	32800215 	stw	r10,8(r6)
 400774c:	30800315 	stw	r2,12(r6)
 4007750:	30000115 	stw	zero,4(r6)
 4007754:	31000317 	ldw	r4,12(r6)
 4007758:	01d00034 	movhi	r7,16384
 400775c:	39ffff84 	addi	r7,r7,-2
 4007760:	20bfffc4 	addi	r2,r4,-1
 4007764:	2007883a 	mov	r3,r4
 4007768:	38800836 	bltu	r7,r2,400778c <_fpadd_parts+0xc8>
 400776c:	31400217 	ldw	r5,8(r6)
 4007770:	18c9883a 	add	r4,r3,r3
 4007774:	20bfffc4 	addi	r2,r4,-1
 4007778:	297fffc4 	addi	r5,r5,-1
 400777c:	2007883a 	mov	r3,r4
 4007780:	38bffb2e 	bgeu	r7,r2,4007770 <_fpadd_parts+0xac>
 4007784:	31400215 	stw	r5,8(r6)
 4007788:	31000315 	stw	r4,12(r6)
 400778c:	008000c4 	movi	r2,3
 4007790:	30800015 	stw	r2,0(r6)
 4007794:	20001b16 	blt	r4,zero,4007804 <_fpadd_parts+0x140>
 4007798:	3009883a 	mov	r4,r6
 400779c:	2005883a 	mov	r2,r4
 40077a0:	f800283a 	ret
 40077a4:	38fffd1e 	bne	r7,r3,400779c <_fpadd_parts+0xd8>
 40077a8:	31c00015 	stw	r7,0(r6)
 40077ac:	20800117 	ldw	r2,4(r4)
 40077b0:	30800115 	stw	r2,4(r6)
 40077b4:	20c00217 	ldw	r3,8(r4)
 40077b8:	30c00215 	stw	r3,8(r6)
 40077bc:	20800317 	ldw	r2,12(r4)
 40077c0:	30800315 	stw	r2,12(r6)
 40077c4:	20c00117 	ldw	r3,4(r4)
 40077c8:	28800117 	ldw	r2,4(r5)
 40077cc:	3009883a 	mov	r4,r6
 40077d0:	1886703a 	and	r3,r3,r2
 40077d4:	2005883a 	mov	r2,r4
 40077d8:	30c00115 	stw	r3,4(r6)
 40077dc:	f800283a 	ret
 40077e0:	1a801716 	blt	r3,r10,4007840 <_fpadd_parts+0x17c>
 40077e4:	1815883a 	mov	r10,r3
 40077e8:	0019883a 	mov	r12,zero
 40077ec:	003fd006 	br	4007730 <_fpadd_parts+0x6c>
 40077f0:	2809883a 	mov	r4,r5
 40077f4:	2005883a 	mov	r2,r4
 40077f8:	f800283a 	ret
 40077fc:	6245c83a 	sub	r2,r12,r9
 4007800:	003fd006 	br	4007744 <_fpadd_parts+0x80>
 4007804:	30800217 	ldw	r2,8(r6)
 4007808:	2006d07a 	srli	r3,r4,1
 400780c:	2100004c 	andi	r4,r4,1
 4007810:	10800044 	addi	r2,r2,1
 4007814:	1906b03a 	or	r3,r3,r4
 4007818:	3009883a 	mov	r4,r6
 400781c:	30800215 	stw	r2,8(r6)
 4007820:	2005883a 	mov	r2,r4
 4007824:	30c00315 	stw	r3,12(r6)
 4007828:	f800283a 	ret
 400782c:	4b09883a 	add	r4,r9,r12
 4007830:	30c00115 	stw	r3,4(r6)
 4007834:	32800215 	stw	r10,8(r6)
 4007838:	31000315 	stw	r4,12(r6)
 400783c:	003fd306 	br	400778c <_fpadd_parts+0xc8>
 4007840:	0013883a 	mov	r9,zero
 4007844:	003fba06 	br	4007730 <_fpadd_parts+0x6c>
 4007848:	01cfc83a 	sub	r7,zero,r7
 400784c:	003faf06 	br	400770c <_fpadd_parts+0x48>
 4007850:	0089c83a 	sub	r4,zero,r2
 4007854:	00800044 	movi	r2,1
 4007858:	30800115 	stw	r2,4(r6)
 400785c:	32800215 	stw	r10,8(r6)
 4007860:	31000315 	stw	r4,12(r6)
 4007864:	003fbb06 	br	4007754 <_fpadd_parts+0x90>
 4007868:	583fb126 	beq	r11,zero,4007730 <_fpadd_parts+0x6c>
 400786c:	41c4983a 	sll	r2,r8,r7
 4007870:	61c6d83a 	srl	r3,r12,r7
 4007874:	51d5883a 	add	r10,r10,r7
 4007878:	10bfffc4 	addi	r2,r2,-1
 400787c:	6084703a 	and	r2,r12,r2
 4007880:	1004c03a 	cmpne	r2,r2,zero
 4007884:	1898b03a 	or	r12,r3,r2
 4007888:	003fa906 	br	4007730 <_fpadd_parts+0x6c>
 400788c:	11ffc31e 	bne	r2,r7,400779c <_fpadd_parts+0xd8>
 4007890:	28c00117 	ldw	r3,4(r5)
 4007894:	20800117 	ldw	r2,4(r4)
 4007898:	10ffc026 	beq	r2,r3,400779c <_fpadd_parts+0xd8>
 400789c:	010100b4 	movhi	r4,1026
 40078a0:	21112504 	addi	r4,r4,17556
 40078a4:	003fbd06 	br	400779c <_fpadd_parts+0xd8>

040078a8 <__subsf3>:
 40078a8:	deffef04 	addi	sp,sp,-68
 40078ac:	dcc00f15 	stw	r19,60(sp)
 40078b0:	dcc00204 	addi	r19,sp,8
 40078b4:	dc400e15 	stw	r17,56(sp)
 40078b8:	d9000015 	stw	r4,0(sp)
 40078bc:	d9400115 	stw	r5,4(sp)
 40078c0:	d809883a 	mov	r4,sp
 40078c4:	980b883a 	mov	r5,r19
 40078c8:	dc400604 	addi	r17,sp,24
 40078cc:	dfc01015 	stw	ra,64(sp)
 40078d0:	40093340 	call	4009334 <__unpack_f>
 40078d4:	d9000104 	addi	r4,sp,4
 40078d8:	880b883a 	mov	r5,r17
 40078dc:	40093340 	call	4009334 <__unpack_f>
 40078e0:	d8800717 	ldw	r2,28(sp)
 40078e4:	9809883a 	mov	r4,r19
 40078e8:	880b883a 	mov	r5,r17
 40078ec:	d9800a04 	addi	r6,sp,40
 40078f0:	1080005c 	xori	r2,r2,1
 40078f4:	d8800715 	stw	r2,28(sp)
 40078f8:	40076c40 	call	40076c4 <_fpadd_parts>
 40078fc:	1009883a 	mov	r4,r2
 4007900:	40091d40 	call	40091d4 <__pack_f>
 4007904:	dfc01017 	ldw	ra,64(sp)
 4007908:	dcc00f17 	ldw	r19,60(sp)
 400790c:	dc400e17 	ldw	r17,56(sp)
 4007910:	dec01104 	addi	sp,sp,68
 4007914:	f800283a 	ret

04007918 <__addsf3>:
 4007918:	deffef04 	addi	sp,sp,-68
 400791c:	dcc00f15 	stw	r19,60(sp)
 4007920:	dcc00204 	addi	r19,sp,8
 4007924:	dc400e15 	stw	r17,56(sp)
 4007928:	d9000015 	stw	r4,0(sp)
 400792c:	d9400115 	stw	r5,4(sp)
 4007930:	d809883a 	mov	r4,sp
 4007934:	980b883a 	mov	r5,r19
 4007938:	dc400604 	addi	r17,sp,24
 400793c:	dfc01015 	stw	ra,64(sp)
 4007940:	40093340 	call	4009334 <__unpack_f>
 4007944:	d9000104 	addi	r4,sp,4
 4007948:	880b883a 	mov	r5,r17
 400794c:	40093340 	call	4009334 <__unpack_f>
 4007950:	d9800a04 	addi	r6,sp,40
 4007954:	9809883a 	mov	r4,r19
 4007958:	880b883a 	mov	r5,r17
 400795c:	40076c40 	call	40076c4 <_fpadd_parts>
 4007960:	1009883a 	mov	r4,r2
 4007964:	40091d40 	call	40091d4 <__pack_f>
 4007968:	dfc01017 	ldw	ra,64(sp)
 400796c:	dcc00f17 	ldw	r19,60(sp)
 4007970:	dc400e17 	ldw	r17,56(sp)
 4007974:	dec01104 	addi	sp,sp,68
 4007978:	f800283a 	ret

0400797c <__mulsf3>:
 400797c:	deffef04 	addi	sp,sp,-68
 4007980:	dc400f15 	stw	r17,60(sp)
 4007984:	dc400204 	addi	r17,sp,8
 4007988:	dc000e15 	stw	r16,56(sp)
 400798c:	d9000015 	stw	r4,0(sp)
 4007990:	d9400115 	stw	r5,4(sp)
 4007994:	d809883a 	mov	r4,sp
 4007998:	880b883a 	mov	r5,r17
 400799c:	dc000604 	addi	r16,sp,24
 40079a0:	dfc01015 	stw	ra,64(sp)
 40079a4:	40093340 	call	4009334 <__unpack_f>
 40079a8:	d9000104 	addi	r4,sp,4
 40079ac:	800b883a 	mov	r5,r16
 40079b0:	40093340 	call	4009334 <__unpack_f>
 40079b4:	d9000217 	ldw	r4,8(sp)
 40079b8:	00800044 	movi	r2,1
 40079bc:	01400104 	movi	r5,4
 40079c0:	1100142e 	bgeu	r2,r4,4007a14 <__mulsf3+0x98>
 40079c4:	d8c00617 	ldw	r3,24(sp)
 40079c8:	10c0052e 	bgeu	r2,r3,40079e0 <__mulsf3+0x64>
 40079cc:	21400f26 	beq	r4,r5,4007a0c <__mulsf3+0x90>
 40079d0:	19405d26 	beq	r3,r5,4007b48 <__mulsf3+0x1cc>
 40079d4:	00800084 	movi	r2,2
 40079d8:	20800e26 	beq	r4,r2,4007a14 <__mulsf3+0x98>
 40079dc:	1880181e 	bne	r3,r2,4007a40 <__mulsf3+0xc4>
 40079e0:	d8c00717 	ldw	r3,28(sp)
 40079e4:	d8800317 	ldw	r2,12(sp)
 40079e8:	8009883a 	mov	r4,r16
 40079ec:	10c4c03a 	cmpne	r2,r2,r3
 40079f0:	d8800715 	stw	r2,28(sp)
 40079f4:	40091d40 	call	40091d4 <__pack_f>
 40079f8:	dfc01017 	ldw	ra,64(sp)
 40079fc:	dc400f17 	ldw	r17,60(sp)
 4007a00:	dc000e17 	ldw	r16,56(sp)
 4007a04:	dec01104 	addi	sp,sp,68
 4007a08:	f800283a 	ret
 4007a0c:	00800084 	movi	r2,2
 4007a10:	18804f26 	beq	r3,r2,4007b50 <__mulsf3+0x1d4>
 4007a14:	d8800317 	ldw	r2,12(sp)
 4007a18:	d8c00717 	ldw	r3,28(sp)
 4007a1c:	8809883a 	mov	r4,r17
 4007a20:	10c4c03a 	cmpne	r2,r2,r3
 4007a24:	d8800315 	stw	r2,12(sp)
 4007a28:	40091d40 	call	40091d4 <__pack_f>
 4007a2c:	dfc01017 	ldw	ra,64(sp)
 4007a30:	dc400f17 	ldw	r17,60(sp)
 4007a34:	dc000e17 	ldw	r16,56(sp)
 4007a38:	dec01104 	addi	sp,sp,68
 4007a3c:	f800283a 	ret
 4007a40:	d8800517 	ldw	r2,20(sp)
 4007a44:	da000917 	ldw	r8,36(sp)
 4007a48:	0013883a 	mov	r9,zero
 4007a4c:	0007883a 	mov	r3,zero
 4007a50:	480f883a 	mov	r7,r9
 4007a54:	180b883a 	mov	r5,r3
 4007a58:	400d883a 	mov	r6,r8
 4007a5c:	1009883a 	mov	r4,r2
 4007a60:	40090300 	call	4009030 <__muldi3>
 4007a64:	da800417 	ldw	r10,16(sp)
 4007a68:	d9800817 	ldw	r6,32(sp)
 4007a6c:	da400317 	ldw	r9,12(sp)
 4007a70:	52800084 	addi	r10,r10,2
 4007a74:	3295883a 	add	r10,r6,r10
 4007a78:	d9800717 	ldw	r6,28(sp)
 4007a7c:	180b883a 	mov	r5,r3
 4007a80:	180f883a 	mov	r7,r3
 4007a84:	4992c03a 	cmpne	r9,r9,r6
 4007a88:	da400b15 	stw	r9,44(sp)
 4007a8c:	1007883a 	mov	r3,r2
 4007a90:	da800c15 	stw	r10,48(sp)
 4007a94:	2800070e 	bge	r5,zero,4007ab4 <__mulsf3+0x138>
 4007a98:	2880004c 	andi	r2,r5,1
 4007a9c:	1005003a 	cmpeq	r2,r2,zero
 4007aa0:	500d883a 	mov	r6,r10
 4007aa4:	10001e26 	beq	r2,zero,4007b20 <__mulsf3+0x1a4>
 4007aa8:	380ed07a 	srli	r7,r7,1
 4007aac:	31800044 	addi	r6,r6,1
 4007ab0:	d9800c15 	stw	r6,48(sp)
 4007ab4:	01100034 	movhi	r4,16384
 4007ab8:	213fffc4 	addi	r4,r4,-1
 4007abc:	21c00b36 	bltu	r4,r7,4007aec <__mulsf3+0x170>
 4007ac0:	d8800c17 	ldw	r2,48(sp)
 4007ac4:	00000206 	br	4007ad0 <__mulsf3+0x154>
 4007ac8:	18c7883a 	add	r3,r3,r3
 4007acc:	21c00636 	bltu	r4,r7,4007ae8 <__mulsf3+0x16c>
 4007ad0:	10bfffc4 	addi	r2,r2,-1
 4007ad4:	39cf883a 	add	r7,r7,r7
 4007ad8:	183ffb0e 	bge	r3,zero,4007ac8 <__mulsf3+0x14c>
 4007adc:	39c00054 	ori	r7,r7,1
 4007ae0:	18c7883a 	add	r3,r3,r3
 4007ae4:	21fffa2e 	bgeu	r4,r7,4007ad0 <__mulsf3+0x154>
 4007ae8:	d8800c15 	stw	r2,48(sp)
 4007aec:	39001fcc 	andi	r4,r7,127
 4007af0:	00801004 	movi	r2,64
 4007af4:	20800d26 	beq	r4,r2,4007b2c <__mulsf3+0x1b0>
 4007af8:	008000c4 	movi	r2,3
 4007afc:	d9000a04 	addi	r4,sp,40
 4007b00:	d9c00d15 	stw	r7,52(sp)
 4007b04:	d8800a15 	stw	r2,40(sp)
 4007b08:	40091d40 	call	40091d4 <__pack_f>
 4007b0c:	dfc01017 	ldw	ra,64(sp)
 4007b10:	dc400f17 	ldw	r17,60(sp)
 4007b14:	dc000e17 	ldw	r16,56(sp)
 4007b18:	dec01104 	addi	sp,sp,68
 4007b1c:	f800283a 	ret
 4007b20:	1804d07a 	srli	r2,r3,1
 4007b24:	10e00034 	orhi	r3,r2,32768
 4007b28:	003fdf06 	br	4007aa8 <__mulsf3+0x12c>
 4007b2c:	3880200c 	andi	r2,r7,128
 4007b30:	103ff11e 	bne	r2,zero,4007af8 <__mulsf3+0x17c>
 4007b34:	183ff026 	beq	r3,zero,4007af8 <__mulsf3+0x17c>
 4007b38:	3907883a 	add	r3,r7,r4
 4007b3c:	00bfe004 	movi	r2,-128
 4007b40:	188e703a 	and	r7,r3,r2
 4007b44:	003fec06 	br	4007af8 <__mulsf3+0x17c>
 4007b48:	00800084 	movi	r2,2
 4007b4c:	20bfa41e 	bne	r4,r2,40079e0 <__mulsf3+0x64>
 4007b50:	010100b4 	movhi	r4,1026
 4007b54:	21112504 	addi	r4,r4,17556
 4007b58:	003fb306 	br	4007a28 <__mulsf3+0xac>

04007b5c <__divsf3>:
 4007b5c:	defff304 	addi	sp,sp,-52
 4007b60:	dc400b15 	stw	r17,44(sp)
 4007b64:	dc400204 	addi	r17,sp,8
 4007b68:	dc000a15 	stw	r16,40(sp)
 4007b6c:	d9000015 	stw	r4,0(sp)
 4007b70:	d9400115 	stw	r5,4(sp)
 4007b74:	d809883a 	mov	r4,sp
 4007b78:	880b883a 	mov	r5,r17
 4007b7c:	dc000604 	addi	r16,sp,24
 4007b80:	dfc00c15 	stw	ra,48(sp)
 4007b84:	40093340 	call	4009334 <__unpack_f>
 4007b88:	d9000104 	addi	r4,sp,4
 4007b8c:	800b883a 	mov	r5,r16
 4007b90:	40093340 	call	4009334 <__unpack_f>
 4007b94:	d9000217 	ldw	r4,8(sp)
 4007b98:	00800044 	movi	r2,1
 4007b9c:	01800104 	movi	r6,4
 4007ba0:	11000a2e 	bgeu	r2,r4,4007bcc <__divsf3+0x70>
 4007ba4:	d9400617 	ldw	r5,24(sp)
 4007ba8:	1140432e 	bgeu	r2,r5,4007cb8 <__divsf3+0x15c>
 4007bac:	d8800317 	ldw	r2,12(sp)
 4007bb0:	d8c00717 	ldw	r3,28(sp)
 4007bb4:	10c4f03a 	xor	r2,r2,r3
 4007bb8:	d8800315 	stw	r2,12(sp)
 4007bbc:	21800226 	beq	r4,r6,4007bc8 <__divsf3+0x6c>
 4007bc0:	00800084 	movi	r2,2
 4007bc4:	2080101e 	bne	r4,r2,4007c08 <__divsf3+0xac>
 4007bc8:	29000726 	beq	r5,r4,4007be8 <__divsf3+0x8c>
 4007bcc:	8809883a 	mov	r4,r17
 4007bd0:	40091d40 	call	40091d4 <__pack_f>
 4007bd4:	dfc00c17 	ldw	ra,48(sp)
 4007bd8:	dc400b17 	ldw	r17,44(sp)
 4007bdc:	dc000a17 	ldw	r16,40(sp)
 4007be0:	dec00d04 	addi	sp,sp,52
 4007be4:	f800283a 	ret
 4007be8:	010100b4 	movhi	r4,1026
 4007bec:	21112504 	addi	r4,r4,17556
 4007bf0:	40091d40 	call	40091d4 <__pack_f>
 4007bf4:	dfc00c17 	ldw	ra,48(sp)
 4007bf8:	dc400b17 	ldw	r17,44(sp)
 4007bfc:	dc000a17 	ldw	r16,40(sp)
 4007c00:	dec00d04 	addi	sp,sp,52
 4007c04:	f800283a 	ret
 4007c08:	29802d26 	beq	r5,r6,4007cc0 <__divsf3+0x164>
 4007c0c:	28801a26 	beq	r5,r2,4007c78 <__divsf3+0x11c>
 4007c10:	d8c00417 	ldw	r3,16(sp)
 4007c14:	d8800817 	ldw	r2,32(sp)
 4007c18:	d9000517 	ldw	r4,20(sp)
 4007c1c:	d9800917 	ldw	r6,36(sp)
 4007c20:	1885c83a 	sub	r2,r3,r2
 4007c24:	d8800415 	stw	r2,16(sp)
 4007c28:	2180032e 	bgeu	r4,r6,4007c38 <__divsf3+0xdc>
 4007c2c:	10bfffc4 	addi	r2,r2,-1
 4007c30:	d8800415 	stw	r2,16(sp)
 4007c34:	2109883a 	add	r4,r4,r4
 4007c38:	01500034 	movhi	r5,16384
 4007c3c:	0007883a 	mov	r3,zero
 4007c40:	0005883a 	mov	r2,zero
 4007c44:	01c007c4 	movi	r7,31
 4007c48:	10800044 	addi	r2,r2,1
 4007c4c:	21800236 	bltu	r4,r6,4007c58 <__divsf3+0xfc>
 4007c50:	1946b03a 	or	r3,r3,r5
 4007c54:	2189c83a 	sub	r4,r4,r6
 4007c58:	280ad07a 	srli	r5,r5,1
 4007c5c:	2109883a 	add	r4,r4,r4
 4007c60:	11fff91e 	bne	r2,r7,4007c48 <__divsf3+0xec>
 4007c64:	19401fcc 	andi	r5,r3,127
 4007c68:	00801004 	movi	r2,64
 4007c6c:	28800a26 	beq	r5,r2,4007c98 <__divsf3+0x13c>
 4007c70:	d8c00515 	stw	r3,20(sp)
 4007c74:	003fd506 	br	4007bcc <__divsf3+0x70>
 4007c78:	8809883a 	mov	r4,r17
 4007c7c:	d9800215 	stw	r6,8(sp)
 4007c80:	40091d40 	call	40091d4 <__pack_f>
 4007c84:	dfc00c17 	ldw	ra,48(sp)
 4007c88:	dc400b17 	ldw	r17,44(sp)
 4007c8c:	dc000a17 	ldw	r16,40(sp)
 4007c90:	dec00d04 	addi	sp,sp,52
 4007c94:	f800283a 	ret
 4007c98:	1880200c 	andi	r2,r3,128
 4007c9c:	103ff41e 	bne	r2,zero,4007c70 <__divsf3+0x114>
 4007ca0:	203ff326 	beq	r4,zero,4007c70 <__divsf3+0x114>
 4007ca4:	1947883a 	add	r3,r3,r5
 4007ca8:	00bfe004 	movi	r2,-128
 4007cac:	1886703a 	and	r3,r3,r2
 4007cb0:	d8c00515 	stw	r3,20(sp)
 4007cb4:	003fc506 	br	4007bcc <__divsf3+0x70>
 4007cb8:	8009883a 	mov	r4,r16
 4007cbc:	003fc406 	br	4007bd0 <__divsf3+0x74>
 4007cc0:	8809883a 	mov	r4,r17
 4007cc4:	d8000515 	stw	zero,20(sp)
 4007cc8:	d8000415 	stw	zero,16(sp)
 4007ccc:	003fc006 	br	4007bd0 <__divsf3+0x74>

04007cd0 <__gtsf2>:
 4007cd0:	defff304 	addi	sp,sp,-52
 4007cd4:	dc400b15 	stw	r17,44(sp)
 4007cd8:	dc400204 	addi	r17,sp,8
 4007cdc:	dc000a15 	stw	r16,40(sp)
 4007ce0:	d9000015 	stw	r4,0(sp)
 4007ce4:	d9400115 	stw	r5,4(sp)
 4007ce8:	d809883a 	mov	r4,sp
 4007cec:	880b883a 	mov	r5,r17
 4007cf0:	dc000604 	addi	r16,sp,24
 4007cf4:	dfc00c15 	stw	ra,48(sp)
 4007cf8:	40093340 	call	4009334 <__unpack_f>
 4007cfc:	d9000104 	addi	r4,sp,4
 4007d00:	800b883a 	mov	r5,r16
 4007d04:	40093340 	call	4009334 <__unpack_f>
 4007d08:	d8800217 	ldw	r2,8(sp)
 4007d0c:	00c00044 	movi	r3,1
 4007d10:	01bfffc4 	movi	r6,-1
 4007d14:	1880062e 	bgeu	r3,r2,4007d30 <__gtsf2+0x60>
 4007d18:	d8800617 	ldw	r2,24(sp)
 4007d1c:	8809883a 	mov	r4,r17
 4007d20:	800b883a 	mov	r5,r16
 4007d24:	1880022e 	bgeu	r3,r2,4007d30 <__gtsf2+0x60>
 4007d28:	40093fc0 	call	40093fc <__fpcmp_parts_f>
 4007d2c:	100d883a 	mov	r6,r2
 4007d30:	3005883a 	mov	r2,r6
 4007d34:	dfc00c17 	ldw	ra,48(sp)
 4007d38:	dc400b17 	ldw	r17,44(sp)
 4007d3c:	dc000a17 	ldw	r16,40(sp)
 4007d40:	dec00d04 	addi	sp,sp,52
 4007d44:	f800283a 	ret

04007d48 <__fixsfsi>:
 4007d48:	defffa04 	addi	sp,sp,-24
 4007d4c:	d9000015 	stw	r4,0(sp)
 4007d50:	d9400104 	addi	r5,sp,4
 4007d54:	d809883a 	mov	r4,sp
 4007d58:	dfc00515 	stw	ra,20(sp)
 4007d5c:	40093340 	call	4009334 <__unpack_f>
 4007d60:	d8c00117 	ldw	r3,4(sp)
 4007d64:	00800084 	movi	r2,2
 4007d68:	1880041e 	bne	r3,r2,4007d7c <__fixsfsi+0x34>
 4007d6c:	0005883a 	mov	r2,zero
 4007d70:	dfc00517 	ldw	ra,20(sp)
 4007d74:	dec00604 	addi	sp,sp,24
 4007d78:	f800283a 	ret
 4007d7c:	00800044 	movi	r2,1
 4007d80:	10fffa2e 	bgeu	r2,r3,4007d6c <__fixsfsi+0x24>
 4007d84:	00800104 	movi	r2,4
 4007d88:	18800426 	beq	r3,r2,4007d9c <__fixsfsi+0x54>
 4007d8c:	d8800317 	ldw	r2,12(sp)
 4007d90:	103ff616 	blt	r2,zero,4007d6c <__fixsfsi+0x24>
 4007d94:	00c00784 	movi	r3,30
 4007d98:	1880070e 	bge	r3,r2,4007db8 <__fixsfsi+0x70>
 4007d9c:	d8800217 	ldw	r2,8(sp)
 4007da0:	10000c1e 	bne	r2,zero,4007dd4 <__fixsfsi+0x8c>
 4007da4:	00a00034 	movhi	r2,32768
 4007da8:	10bfffc4 	addi	r2,r2,-1
 4007dac:	dfc00517 	ldw	ra,20(sp)
 4007db0:	dec00604 	addi	sp,sp,24
 4007db4:	f800283a 	ret
 4007db8:	1885c83a 	sub	r2,r3,r2
 4007dbc:	d9000217 	ldw	r4,8(sp)
 4007dc0:	d8c00417 	ldw	r3,16(sp)
 4007dc4:	1884d83a 	srl	r2,r3,r2
 4007dc8:	203fe926 	beq	r4,zero,4007d70 <__fixsfsi+0x28>
 4007dcc:	0085c83a 	sub	r2,zero,r2
 4007dd0:	003fe706 	br	4007d70 <__fixsfsi+0x28>
 4007dd4:	00a00034 	movhi	r2,32768
 4007dd8:	003fe506 	br	4007d70 <__fixsfsi+0x28>

04007ddc <__extendsfdf2>:
 4007ddc:	defff904 	addi	sp,sp,-28
 4007de0:	d9000115 	stw	r4,4(sp)
 4007de4:	d9400204 	addi	r5,sp,8
 4007de8:	d9000104 	addi	r4,sp,4
 4007dec:	dfc00615 	stw	ra,24(sp)
 4007df0:	40093340 	call	4009334 <__unpack_f>
 4007df4:	d9c00517 	ldw	r7,20(sp)
 4007df8:	0011883a 	mov	r8,zero
 4007dfc:	400697ba 	slli	r3,r8,30
 4007e00:	3812d0ba 	srli	r9,r7,2
 4007e04:	380497ba 	slli	r2,r7,30
 4007e08:	d9000217 	ldw	r4,8(sp)
 4007e0c:	d9400317 	ldw	r5,12(sp)
 4007e10:	d9800417 	ldw	r6,16(sp)
 4007e14:	48c6b03a 	or	r3,r9,r3
 4007e18:	100f883a 	mov	r7,r2
 4007e1c:	d8c00015 	stw	r3,0(sp)
 4007e20:	4008e000 	call	4008e00 <__make_dp>
 4007e24:	dfc00617 	ldw	ra,24(sp)
 4007e28:	dec00704 	addi	sp,sp,28
 4007e2c:	f800283a 	ret

04007e30 <__floatunsisf>:
 4007e30:	defff904 	addi	sp,sp,-28
 4007e34:	dc400515 	stw	r17,20(sp)
 4007e38:	dc000415 	stw	r16,16(sp)
 4007e3c:	dfc00615 	stw	ra,24(sp)
 4007e40:	04400784 	movi	r17,30
 4007e44:	2021883a 	mov	r16,r4
 4007e48:	d8000115 	stw	zero,4(sp)
 4007e4c:	2000091e 	bne	r4,zero,4007e74 <__floatunsisf+0x44>
 4007e50:	00800084 	movi	r2,2
 4007e54:	d8800015 	stw	r2,0(sp)
 4007e58:	d809883a 	mov	r4,sp
 4007e5c:	40091d40 	call	40091d4 <__pack_f>
 4007e60:	dfc00617 	ldw	ra,24(sp)
 4007e64:	dc400517 	ldw	r17,20(sp)
 4007e68:	dc000417 	ldw	r16,16(sp)
 4007e6c:	dec00704 	addi	sp,sp,28
 4007e70:	f800283a 	ret
 4007e74:	008000c4 	movi	r2,3
 4007e78:	d9000315 	stw	r4,12(sp)
 4007e7c:	d8800015 	stw	r2,0(sp)
 4007e80:	dc400215 	stw	r17,8(sp)
 4007e84:	40091540 	call	4009154 <__clzsi2>
 4007e88:	117fffc4 	addi	r5,r2,-1
 4007e8c:	0147c83a 	sub	r3,zero,r5
 4007e90:	00800044 	movi	r2,1
 4007e94:	10c4983a 	sll	r2,r2,r3
 4007e98:	80c6d83a 	srl	r3,r16,r3
 4007e9c:	8949c83a 	sub	r4,r17,r5
 4007ea0:	10bfffc4 	addi	r2,r2,-1
 4007ea4:	8084703a 	and	r2,r16,r2
 4007ea8:	1004c03a 	cmpne	r2,r2,zero
 4007eac:	1886b03a 	or	r3,r3,r2
 4007eb0:	28000c16 	blt	r5,zero,4007ee4 <__floatunsisf+0xb4>
 4007eb4:	8144983a 	sll	r2,r16,r5
 4007eb8:	8947c83a 	sub	r3,r17,r5
 4007ebc:	283fe626 	beq	r5,zero,4007e58 <__floatunsisf+0x28>
 4007ec0:	d809883a 	mov	r4,sp
 4007ec4:	d8800315 	stw	r2,12(sp)
 4007ec8:	d8c00215 	stw	r3,8(sp)
 4007ecc:	40091d40 	call	40091d4 <__pack_f>
 4007ed0:	dfc00617 	ldw	ra,24(sp)
 4007ed4:	dc400517 	ldw	r17,20(sp)
 4007ed8:	dc000417 	ldw	r16,16(sp)
 4007edc:	dec00704 	addi	sp,sp,28
 4007ee0:	f800283a 	ret
 4007ee4:	d8c00315 	stw	r3,12(sp)
 4007ee8:	d9000215 	stw	r4,8(sp)
 4007eec:	003fda06 	br	4007e58 <__floatunsisf+0x28>

04007ef0 <_fpadd_parts>:
 4007ef0:	defff804 	addi	sp,sp,-32
 4007ef4:	dcc00315 	stw	r19,12(sp)
 4007ef8:	2027883a 	mov	r19,r4
 4007efc:	21000017 	ldw	r4,0(r4)
 4007f00:	00c00044 	movi	r3,1
 4007f04:	dd400515 	stw	r21,20(sp)
 4007f08:	dd000415 	stw	r20,16(sp)
 4007f0c:	ddc00715 	stw	r23,28(sp)
 4007f10:	dd800615 	stw	r22,24(sp)
 4007f14:	dc800215 	stw	r18,8(sp)
 4007f18:	dc400115 	stw	r17,4(sp)
 4007f1c:	dc000015 	stw	r16,0(sp)
 4007f20:	282b883a 	mov	r21,r5
 4007f24:	3029883a 	mov	r20,r6
 4007f28:	1900632e 	bgeu	r3,r4,40080b8 <_fpadd_parts+0x1c8>
 4007f2c:	28800017 	ldw	r2,0(r5)
 4007f30:	1880812e 	bgeu	r3,r2,4008138 <_fpadd_parts+0x248>
 4007f34:	00c00104 	movi	r3,4
 4007f38:	20c0dc26 	beq	r4,r3,40082ac <_fpadd_parts+0x3bc>
 4007f3c:	10c07e26 	beq	r2,r3,4008138 <_fpadd_parts+0x248>
 4007f40:	00c00084 	movi	r3,2
 4007f44:	10c06726 	beq	r2,r3,40080e4 <_fpadd_parts+0x1f4>
 4007f48:	20c07b26 	beq	r4,r3,4008138 <_fpadd_parts+0x248>
 4007f4c:	9dc00217 	ldw	r23,8(r19)
 4007f50:	28c00217 	ldw	r3,8(r5)
 4007f54:	9c400317 	ldw	r17,12(r19)
 4007f58:	2bc00317 	ldw	r15,12(r5)
 4007f5c:	b8cdc83a 	sub	r6,r23,r3
 4007f60:	9c800417 	ldw	r18,16(r19)
 4007f64:	2c000417 	ldw	r16,16(r5)
 4007f68:	3009883a 	mov	r4,r6
 4007f6c:	30009716 	blt	r6,zero,40081cc <_fpadd_parts+0x2dc>
 4007f70:	00800fc4 	movi	r2,63
 4007f74:	11806b16 	blt	r2,r6,4008124 <_fpadd_parts+0x234>
 4007f78:	0100a40e 	bge	zero,r4,400820c <_fpadd_parts+0x31c>
 4007f7c:	35bff804 	addi	r22,r6,-32
 4007f80:	b000bc16 	blt	r22,zero,4008274 <_fpadd_parts+0x384>
 4007f84:	8596d83a 	srl	r11,r16,r22
 4007f88:	0019883a 	mov	r12,zero
 4007f8c:	0013883a 	mov	r9,zero
 4007f90:	01000044 	movi	r4,1
 4007f94:	0015883a 	mov	r10,zero
 4007f98:	b000be16 	blt	r22,zero,4008294 <_fpadd_parts+0x3a4>
 4007f9c:	2590983a 	sll	r8,r4,r22
 4007fa0:	000f883a 	mov	r7,zero
 4007fa4:	00bfffc4 	movi	r2,-1
 4007fa8:	3889883a 	add	r4,r7,r2
 4007fac:	408b883a 	add	r5,r8,r2
 4007fb0:	21cd803a 	cmpltu	r6,r4,r7
 4007fb4:	314b883a 	add	r5,r6,r5
 4007fb8:	7904703a 	and	r2,r15,r4
 4007fbc:	8146703a 	and	r3,r16,r5
 4007fc0:	10c4b03a 	or	r2,r2,r3
 4007fc4:	10000226 	beq	r2,zero,4007fd0 <_fpadd_parts+0xe0>
 4007fc8:	02400044 	movi	r9,1
 4007fcc:	0015883a 	mov	r10,zero
 4007fd0:	5a5eb03a 	or	r15,r11,r9
 4007fd4:	62a0b03a 	or	r16,r12,r10
 4007fd8:	99400117 	ldw	r5,4(r19)
 4007fdc:	a8800117 	ldw	r2,4(r21)
 4007fe0:	28806e26 	beq	r5,r2,400819c <_fpadd_parts+0x2ac>
 4007fe4:	28006626 	beq	r5,zero,4008180 <_fpadd_parts+0x290>
 4007fe8:	7c45c83a 	sub	r2,r15,r17
 4007fec:	7889803a 	cmpltu	r4,r15,r2
 4007ff0:	8487c83a 	sub	r3,r16,r18
 4007ff4:	1909c83a 	sub	r4,r3,r4
 4007ff8:	100d883a 	mov	r6,r2
 4007ffc:	200f883a 	mov	r7,r4
 4008000:	38007716 	blt	r7,zero,40081e0 <_fpadd_parts+0x2f0>
 4008004:	a5c00215 	stw	r23,8(r20)
 4008008:	a1c00415 	stw	r7,16(r20)
 400800c:	a0000115 	stw	zero,4(r20)
 4008010:	a1800315 	stw	r6,12(r20)
 4008014:	a2000317 	ldw	r8,12(r20)
 4008018:	a2400417 	ldw	r9,16(r20)
 400801c:	00bfffc4 	movi	r2,-1
 4008020:	408b883a 	add	r5,r8,r2
 4008024:	2a09803a 	cmpltu	r4,r5,r8
 4008028:	488d883a 	add	r6,r9,r2
 400802c:	01c40034 	movhi	r7,4096
 4008030:	39ffffc4 	addi	r7,r7,-1
 4008034:	218d883a 	add	r6,r4,r6
 4008038:	39801736 	bltu	r7,r6,4008098 <_fpadd_parts+0x1a8>
 400803c:	31c06526 	beq	r6,r7,40081d4 <_fpadd_parts+0x2e4>
 4008040:	a3000217 	ldw	r12,8(r20)
 4008044:	4209883a 	add	r4,r8,r8
 4008048:	00bfffc4 	movi	r2,-1
 400804c:	220f803a 	cmpltu	r7,r4,r8
 4008050:	4a4b883a 	add	r5,r9,r9
 4008054:	394f883a 	add	r7,r7,r5
 4008058:	2095883a 	add	r10,r4,r2
 400805c:	3897883a 	add	r11,r7,r2
 4008060:	510d803a 	cmpltu	r6,r10,r4
 4008064:	6099883a 	add	r12,r12,r2
 4008068:	32d7883a 	add	r11,r6,r11
 400806c:	00840034 	movhi	r2,4096
 4008070:	10bfffc4 	addi	r2,r2,-1
 4008074:	2011883a 	mov	r8,r4
 4008078:	3813883a 	mov	r9,r7
 400807c:	a1000315 	stw	r4,12(r20)
 4008080:	a1c00415 	stw	r7,16(r20)
 4008084:	a3000215 	stw	r12,8(r20)
 4008088:	12c00336 	bltu	r2,r11,4008098 <_fpadd_parts+0x1a8>
 400808c:	58bfed1e 	bne	r11,r2,4008044 <_fpadd_parts+0x154>
 4008090:	00bfff84 	movi	r2,-2
 4008094:	12bfeb2e 	bgeu	r2,r10,4008044 <_fpadd_parts+0x154>
 4008098:	a2800417 	ldw	r10,16(r20)
 400809c:	008000c4 	movi	r2,3
 40080a0:	00c80034 	movhi	r3,8192
 40080a4:	18ffffc4 	addi	r3,r3,-1
 40080a8:	a2400317 	ldw	r9,12(r20)
 40080ac:	a0800015 	stw	r2,0(r20)
 40080b0:	1a802336 	bltu	r3,r10,4008140 <_fpadd_parts+0x250>
 40080b4:	a027883a 	mov	r19,r20
 40080b8:	9805883a 	mov	r2,r19
 40080bc:	ddc00717 	ldw	r23,28(sp)
 40080c0:	dd800617 	ldw	r22,24(sp)
 40080c4:	dd400517 	ldw	r21,20(sp)
 40080c8:	dd000417 	ldw	r20,16(sp)
 40080cc:	dcc00317 	ldw	r19,12(sp)
 40080d0:	dc800217 	ldw	r18,8(sp)
 40080d4:	dc400117 	ldw	r17,4(sp)
 40080d8:	dc000017 	ldw	r16,0(sp)
 40080dc:	dec00804 	addi	sp,sp,32
 40080e0:	f800283a 	ret
 40080e4:	20fff41e 	bne	r4,r3,40080b8 <_fpadd_parts+0x1c8>
 40080e8:	31000015 	stw	r4,0(r6)
 40080ec:	98800117 	ldw	r2,4(r19)
 40080f0:	30800115 	stw	r2,4(r6)
 40080f4:	98c00217 	ldw	r3,8(r19)
 40080f8:	30c00215 	stw	r3,8(r6)
 40080fc:	98800317 	ldw	r2,12(r19)
 4008100:	30800315 	stw	r2,12(r6)
 4008104:	98c00417 	ldw	r3,16(r19)
 4008108:	30c00415 	stw	r3,16(r6)
 400810c:	98800117 	ldw	r2,4(r19)
 4008110:	28c00117 	ldw	r3,4(r5)
 4008114:	3027883a 	mov	r19,r6
 4008118:	10c4703a 	and	r2,r2,r3
 400811c:	30800115 	stw	r2,4(r6)
 4008120:	003fe506 	br	40080b8 <_fpadd_parts+0x1c8>
 4008124:	1dc02616 	blt	r3,r23,40081c0 <_fpadd_parts+0x2d0>
 4008128:	0023883a 	mov	r17,zero
 400812c:	182f883a 	mov	r23,r3
 4008130:	0025883a 	mov	r18,zero
 4008134:	003fa806 	br	4007fd8 <_fpadd_parts+0xe8>
 4008138:	a827883a 	mov	r19,r21
 400813c:	003fde06 	br	40080b8 <_fpadd_parts+0x1c8>
 4008140:	01800044 	movi	r6,1
 4008144:	500497fa 	slli	r2,r10,31
 4008148:	4808d07a 	srli	r4,r9,1
 400814c:	518ad83a 	srl	r5,r10,r6
 4008150:	a2000217 	ldw	r8,8(r20)
 4008154:	1108b03a 	or	r4,r2,r4
 4008158:	0007883a 	mov	r3,zero
 400815c:	4984703a 	and	r2,r9,r6
 4008160:	208cb03a 	or	r6,r4,r2
 4008164:	28ceb03a 	or	r7,r5,r3
 4008168:	42000044 	addi	r8,r8,1
 400816c:	a027883a 	mov	r19,r20
 4008170:	a1c00415 	stw	r7,16(r20)
 4008174:	a2000215 	stw	r8,8(r20)
 4008178:	a1800315 	stw	r6,12(r20)
 400817c:	003fce06 	br	40080b8 <_fpadd_parts+0x1c8>
 4008180:	8bc5c83a 	sub	r2,r17,r15
 4008184:	8889803a 	cmpltu	r4,r17,r2
 4008188:	9407c83a 	sub	r3,r18,r16
 400818c:	1909c83a 	sub	r4,r3,r4
 4008190:	100d883a 	mov	r6,r2
 4008194:	200f883a 	mov	r7,r4
 4008198:	003f9906 	br	4008000 <_fpadd_parts+0x110>
 400819c:	7c45883a 	add	r2,r15,r17
 40081a0:	13c9803a 	cmpltu	r4,r2,r15
 40081a4:	8487883a 	add	r3,r16,r18
 40081a8:	20c9883a 	add	r4,r4,r3
 40081ac:	a1400115 	stw	r5,4(r20)
 40081b0:	a5c00215 	stw	r23,8(r20)
 40081b4:	a0800315 	stw	r2,12(r20)
 40081b8:	a1000415 	stw	r4,16(r20)
 40081bc:	003fb606 	br	4008098 <_fpadd_parts+0x1a8>
 40081c0:	001f883a 	mov	r15,zero
 40081c4:	0021883a 	mov	r16,zero
 40081c8:	003f8306 	br	4007fd8 <_fpadd_parts+0xe8>
 40081cc:	018dc83a 	sub	r6,zero,r6
 40081d0:	003f6706 	br	4007f70 <_fpadd_parts+0x80>
 40081d4:	00bfff84 	movi	r2,-2
 40081d8:	117faf36 	bltu	r2,r5,4008098 <_fpadd_parts+0x1a8>
 40081dc:	003f9806 	br	4008040 <_fpadd_parts+0x150>
 40081e0:	0005883a 	mov	r2,zero
 40081e4:	1189c83a 	sub	r4,r2,r6
 40081e8:	1105803a 	cmpltu	r2,r2,r4
 40081ec:	01cbc83a 	sub	r5,zero,r7
 40081f0:	2885c83a 	sub	r2,r5,r2
 40081f4:	01800044 	movi	r6,1
 40081f8:	a1800115 	stw	r6,4(r20)
 40081fc:	a5c00215 	stw	r23,8(r20)
 4008200:	a1000315 	stw	r4,12(r20)
 4008204:	a0800415 	stw	r2,16(r20)
 4008208:	003f8206 	br	4008014 <_fpadd_parts+0x124>
 400820c:	203f7226 	beq	r4,zero,4007fd8 <_fpadd_parts+0xe8>
 4008210:	35bff804 	addi	r22,r6,-32
 4008214:	b9af883a 	add	r23,r23,r6
 4008218:	b0003116 	blt	r22,zero,40082e0 <_fpadd_parts+0x3f0>
 400821c:	959ad83a 	srl	r13,r18,r22
 4008220:	001d883a 	mov	r14,zero
 4008224:	000f883a 	mov	r7,zero
 4008228:	01000044 	movi	r4,1
 400822c:	0011883a 	mov	r8,zero
 4008230:	b0002516 	blt	r22,zero,40082c8 <_fpadd_parts+0x3d8>
 4008234:	2594983a 	sll	r10,r4,r22
 4008238:	0013883a 	mov	r9,zero
 400823c:	00bfffc4 	movi	r2,-1
 4008240:	4889883a 	add	r4,r9,r2
 4008244:	508b883a 	add	r5,r10,r2
 4008248:	224d803a 	cmpltu	r6,r4,r9
 400824c:	314b883a 	add	r5,r6,r5
 4008250:	8904703a 	and	r2,r17,r4
 4008254:	9146703a 	and	r3,r18,r5
 4008258:	10c4b03a 	or	r2,r2,r3
 400825c:	10000226 	beq	r2,zero,4008268 <_fpadd_parts+0x378>
 4008260:	01c00044 	movi	r7,1
 4008264:	0011883a 	mov	r8,zero
 4008268:	69e2b03a 	or	r17,r13,r7
 400826c:	7224b03a 	or	r18,r14,r8
 4008270:	003f5906 	br	4007fd8 <_fpadd_parts+0xe8>
 4008274:	8407883a 	add	r3,r16,r16
 4008278:	008007c4 	movi	r2,31
 400827c:	1185c83a 	sub	r2,r2,r6
 4008280:	1886983a 	sll	r3,r3,r2
 4008284:	7996d83a 	srl	r11,r15,r6
 4008288:	8198d83a 	srl	r12,r16,r6
 400828c:	1ad6b03a 	or	r11,r3,r11
 4008290:	003f3e06 	br	4007f8c <_fpadd_parts+0x9c>
 4008294:	2006d07a 	srli	r3,r4,1
 4008298:	008007c4 	movi	r2,31
 400829c:	1185c83a 	sub	r2,r2,r6
 40082a0:	1890d83a 	srl	r8,r3,r2
 40082a4:	218e983a 	sll	r7,r4,r6
 40082a8:	003f3e06 	br	4007fa4 <_fpadd_parts+0xb4>
 40082ac:	113f821e 	bne	r2,r4,40080b8 <_fpadd_parts+0x1c8>
 40082b0:	28c00117 	ldw	r3,4(r5)
 40082b4:	98800117 	ldw	r2,4(r19)
 40082b8:	10ff7f26 	beq	r2,r3,40080b8 <_fpadd_parts+0x1c8>
 40082bc:	04c100b4 	movhi	r19,1026
 40082c0:	9cd12904 	addi	r19,r19,17572
 40082c4:	003f7c06 	br	40080b8 <_fpadd_parts+0x1c8>
 40082c8:	2006d07a 	srli	r3,r4,1
 40082cc:	008007c4 	movi	r2,31
 40082d0:	1185c83a 	sub	r2,r2,r6
 40082d4:	1894d83a 	srl	r10,r3,r2
 40082d8:	2192983a 	sll	r9,r4,r6
 40082dc:	003fd706 	br	400823c <_fpadd_parts+0x34c>
 40082e0:	9487883a 	add	r3,r18,r18
 40082e4:	008007c4 	movi	r2,31
 40082e8:	1185c83a 	sub	r2,r2,r6
 40082ec:	1886983a 	sll	r3,r3,r2
 40082f0:	899ad83a 	srl	r13,r17,r6
 40082f4:	919cd83a 	srl	r14,r18,r6
 40082f8:	1b5ab03a 	or	r13,r3,r13
 40082fc:	003fc906 	br	4008224 <_fpadd_parts+0x334>

04008300 <__subdf3>:
 4008300:	deffea04 	addi	sp,sp,-88
 4008304:	dcc01415 	stw	r19,80(sp)
 4008308:	dcc00404 	addi	r19,sp,16
 400830c:	2011883a 	mov	r8,r4
 4008310:	2813883a 	mov	r9,r5
 4008314:	dc401315 	stw	r17,76(sp)
 4008318:	d809883a 	mov	r4,sp
 400831c:	980b883a 	mov	r5,r19
 4008320:	dc400904 	addi	r17,sp,36
 4008324:	dfc01515 	stw	ra,84(sp)
 4008328:	da400115 	stw	r9,4(sp)
 400832c:	d9c00315 	stw	r7,12(sp)
 4008330:	da000015 	stw	r8,0(sp)
 4008334:	d9800215 	stw	r6,8(sp)
 4008338:	40097e40 	call	40097e4 <__unpack_d>
 400833c:	d9000204 	addi	r4,sp,8
 4008340:	880b883a 	mov	r5,r17
 4008344:	40097e40 	call	40097e4 <__unpack_d>
 4008348:	d8800a17 	ldw	r2,40(sp)
 400834c:	880b883a 	mov	r5,r17
 4008350:	9809883a 	mov	r4,r19
 4008354:	d9800e04 	addi	r6,sp,56
 4008358:	1080005c 	xori	r2,r2,1
 400835c:	d8800a15 	stw	r2,40(sp)
 4008360:	4007ef00 	call	4007ef0 <_fpadd_parts>
 4008364:	1009883a 	mov	r4,r2
 4008368:	40094d00 	call	40094d0 <__pack_d>
 400836c:	dfc01517 	ldw	ra,84(sp)
 4008370:	dcc01417 	ldw	r19,80(sp)
 4008374:	dc401317 	ldw	r17,76(sp)
 4008378:	dec01604 	addi	sp,sp,88
 400837c:	f800283a 	ret

04008380 <__adddf3>:
 4008380:	deffea04 	addi	sp,sp,-88
 4008384:	dcc01415 	stw	r19,80(sp)
 4008388:	dcc00404 	addi	r19,sp,16
 400838c:	2011883a 	mov	r8,r4
 4008390:	2813883a 	mov	r9,r5
 4008394:	dc401315 	stw	r17,76(sp)
 4008398:	d809883a 	mov	r4,sp
 400839c:	980b883a 	mov	r5,r19
 40083a0:	dc400904 	addi	r17,sp,36
 40083a4:	dfc01515 	stw	ra,84(sp)
 40083a8:	da400115 	stw	r9,4(sp)
 40083ac:	d9c00315 	stw	r7,12(sp)
 40083b0:	da000015 	stw	r8,0(sp)
 40083b4:	d9800215 	stw	r6,8(sp)
 40083b8:	40097e40 	call	40097e4 <__unpack_d>
 40083bc:	d9000204 	addi	r4,sp,8
 40083c0:	880b883a 	mov	r5,r17
 40083c4:	40097e40 	call	40097e4 <__unpack_d>
 40083c8:	d9800e04 	addi	r6,sp,56
 40083cc:	9809883a 	mov	r4,r19
 40083d0:	880b883a 	mov	r5,r17
 40083d4:	4007ef00 	call	4007ef0 <_fpadd_parts>
 40083d8:	1009883a 	mov	r4,r2
 40083dc:	40094d00 	call	40094d0 <__pack_d>
 40083e0:	dfc01517 	ldw	ra,84(sp)
 40083e4:	dcc01417 	ldw	r19,80(sp)
 40083e8:	dc401317 	ldw	r17,76(sp)
 40083ec:	dec01604 	addi	sp,sp,88
 40083f0:	f800283a 	ret

040083f4 <__muldf3>:
 40083f4:	deffe004 	addi	sp,sp,-128
 40083f8:	dc401815 	stw	r17,96(sp)
 40083fc:	dc400404 	addi	r17,sp,16
 4008400:	2011883a 	mov	r8,r4
 4008404:	2813883a 	mov	r9,r5
 4008408:	dc001715 	stw	r16,92(sp)
 400840c:	d809883a 	mov	r4,sp
 4008410:	880b883a 	mov	r5,r17
 4008414:	dc000904 	addi	r16,sp,36
 4008418:	dfc01f15 	stw	ra,124(sp)
 400841c:	da400115 	stw	r9,4(sp)
 4008420:	d9c00315 	stw	r7,12(sp)
 4008424:	da000015 	stw	r8,0(sp)
 4008428:	d9800215 	stw	r6,8(sp)
 400842c:	ddc01e15 	stw	r23,120(sp)
 4008430:	dd801d15 	stw	r22,116(sp)
 4008434:	dd401c15 	stw	r21,112(sp)
 4008438:	dd001b15 	stw	r20,108(sp)
 400843c:	dcc01a15 	stw	r19,104(sp)
 4008440:	dc801915 	stw	r18,100(sp)
 4008444:	40097e40 	call	40097e4 <__unpack_d>
 4008448:	d9000204 	addi	r4,sp,8
 400844c:	800b883a 	mov	r5,r16
 4008450:	40097e40 	call	40097e4 <__unpack_d>
 4008454:	d9000417 	ldw	r4,16(sp)
 4008458:	00800044 	movi	r2,1
 400845c:	1100102e 	bgeu	r2,r4,40084a0 <__muldf3+0xac>
 4008460:	d8c00917 	ldw	r3,36(sp)
 4008464:	10c0062e 	bgeu	r2,r3,4008480 <__muldf3+0x8c>
 4008468:	00800104 	movi	r2,4
 400846c:	20800a26 	beq	r4,r2,4008498 <__muldf3+0xa4>
 4008470:	1880cc26 	beq	r3,r2,40087a4 <__muldf3+0x3b0>
 4008474:	00800084 	movi	r2,2
 4008478:	20800926 	beq	r4,r2,40084a0 <__muldf3+0xac>
 400847c:	1880191e 	bne	r3,r2,40084e4 <__muldf3+0xf0>
 4008480:	d8c00a17 	ldw	r3,40(sp)
 4008484:	d8800517 	ldw	r2,20(sp)
 4008488:	8009883a 	mov	r4,r16
 400848c:	10c4c03a 	cmpne	r2,r2,r3
 4008490:	d8800a15 	stw	r2,40(sp)
 4008494:	00000706 	br	40084b4 <__muldf3+0xc0>
 4008498:	00800084 	movi	r2,2
 400849c:	1880c326 	beq	r3,r2,40087ac <__muldf3+0x3b8>
 40084a0:	d8800517 	ldw	r2,20(sp)
 40084a4:	d8c00a17 	ldw	r3,40(sp)
 40084a8:	8809883a 	mov	r4,r17
 40084ac:	10c4c03a 	cmpne	r2,r2,r3
 40084b0:	d8800515 	stw	r2,20(sp)
 40084b4:	40094d00 	call	40094d0 <__pack_d>
 40084b8:	dfc01f17 	ldw	ra,124(sp)
 40084bc:	ddc01e17 	ldw	r23,120(sp)
 40084c0:	dd801d17 	ldw	r22,116(sp)
 40084c4:	dd401c17 	ldw	r21,112(sp)
 40084c8:	dd001b17 	ldw	r20,108(sp)
 40084cc:	dcc01a17 	ldw	r19,104(sp)
 40084d0:	dc801917 	ldw	r18,100(sp)
 40084d4:	dc401817 	ldw	r17,96(sp)
 40084d8:	dc001717 	ldw	r16,92(sp)
 40084dc:	dec02004 	addi	sp,sp,128
 40084e0:	f800283a 	ret
 40084e4:	dd800717 	ldw	r22,28(sp)
 40084e8:	dc800c17 	ldw	r18,48(sp)
 40084ec:	002b883a 	mov	r21,zero
 40084f0:	0023883a 	mov	r17,zero
 40084f4:	a80b883a 	mov	r5,r21
 40084f8:	b00d883a 	mov	r6,r22
 40084fc:	880f883a 	mov	r7,r17
 4008500:	ddc00817 	ldw	r23,32(sp)
 4008504:	dcc00d17 	ldw	r19,52(sp)
 4008508:	9009883a 	mov	r4,r18
 400850c:	40090300 	call	4009030 <__muldi3>
 4008510:	001b883a 	mov	r13,zero
 4008514:	680f883a 	mov	r7,r13
 4008518:	b009883a 	mov	r4,r22
 400851c:	000b883a 	mov	r5,zero
 4008520:	980d883a 	mov	r6,r19
 4008524:	b82d883a 	mov	r22,r23
 4008528:	002f883a 	mov	r23,zero
 400852c:	db401615 	stw	r13,88(sp)
 4008530:	d8801315 	stw	r2,76(sp)
 4008534:	d8c01415 	stw	r3,80(sp)
 4008538:	dcc01515 	stw	r19,84(sp)
 400853c:	40090300 	call	4009030 <__muldi3>
 4008540:	b00d883a 	mov	r6,r22
 4008544:	000b883a 	mov	r5,zero
 4008548:	9009883a 	mov	r4,r18
 400854c:	b80f883a 	mov	r7,r23
 4008550:	1021883a 	mov	r16,r2
 4008554:	1823883a 	mov	r17,r3
 4008558:	40090300 	call	4009030 <__muldi3>
 400855c:	8085883a 	add	r2,r16,r2
 4008560:	140d803a 	cmpltu	r6,r2,r16
 4008564:	88c7883a 	add	r3,r17,r3
 4008568:	30cd883a 	add	r6,r6,r3
 400856c:	1029883a 	mov	r20,r2
 4008570:	302b883a 	mov	r21,r6
 4008574:	da801317 	ldw	r10,76(sp)
 4008578:	dac01417 	ldw	r11,80(sp)
 400857c:	db001517 	ldw	r12,84(sp)
 4008580:	db401617 	ldw	r13,88(sp)
 4008584:	3440612e 	bgeu	r6,r17,400870c <__muldf3+0x318>
 4008588:	0009883a 	mov	r4,zero
 400858c:	5105883a 	add	r2,r10,r4
 4008590:	128d803a 	cmpltu	r6,r2,r10
 4008594:	5d07883a 	add	r3,r11,r20
 4008598:	30cd883a 	add	r6,r6,r3
 400859c:	0021883a 	mov	r16,zero
 40085a0:	04400044 	movi	r17,1
 40085a4:	1025883a 	mov	r18,r2
 40085a8:	3027883a 	mov	r19,r6
 40085ac:	32c06236 	bltu	r6,r11,4008738 <__muldf3+0x344>
 40085b0:	59807a26 	beq	r11,r6,400879c <__muldf3+0x3a8>
 40085b4:	680b883a 	mov	r5,r13
 40085b8:	b80f883a 	mov	r7,r23
 40085bc:	6009883a 	mov	r4,r12
 40085c0:	b00d883a 	mov	r6,r22
 40085c4:	40090300 	call	4009030 <__muldi3>
 40085c8:	1009883a 	mov	r4,r2
 40085cc:	000f883a 	mov	r7,zero
 40085d0:	1545883a 	add	r2,r2,r21
 40085d4:	1111803a 	cmpltu	r8,r2,r4
 40085d8:	19c7883a 	add	r3,r3,r7
 40085dc:	40c7883a 	add	r3,r8,r3
 40085e0:	88cb883a 	add	r5,r17,r3
 40085e4:	d8c00617 	ldw	r3,24(sp)
 40085e8:	8089883a 	add	r4,r16,r2
 40085ec:	d8800b17 	ldw	r2,44(sp)
 40085f0:	18c00104 	addi	r3,r3,4
 40085f4:	240d803a 	cmpltu	r6,r4,r16
 40085f8:	10c7883a 	add	r3,r2,r3
 40085fc:	2013883a 	mov	r9,r4
 4008600:	d8800a17 	ldw	r2,40(sp)
 4008604:	d9000517 	ldw	r4,20(sp)
 4008608:	314d883a 	add	r6,r6,r5
 400860c:	3015883a 	mov	r10,r6
 4008610:	2088c03a 	cmpne	r4,r4,r2
 4008614:	00880034 	movhi	r2,8192
 4008618:	10bfffc4 	addi	r2,r2,-1
 400861c:	d9000f15 	stw	r4,60(sp)
 4008620:	d8c01015 	stw	r3,64(sp)
 4008624:	1180162e 	bgeu	r2,r6,4008680 <__muldf3+0x28c>
 4008628:	1811883a 	mov	r8,r3
 400862c:	101f883a 	mov	r15,r2
 4008630:	980497fa 	slli	r2,r19,31
 4008634:	9016d07a 	srli	r11,r18,1
 4008638:	500697fa 	slli	r3,r10,31
 400863c:	480cd07a 	srli	r6,r9,1
 4008640:	500ed07a 	srli	r7,r10,1
 4008644:	12d6b03a 	or	r11,r2,r11
 4008648:	00800044 	movi	r2,1
 400864c:	198cb03a 	or	r6,r3,r6
 4008650:	4888703a 	and	r4,r9,r2
 4008654:	9818d07a 	srli	r12,r19,1
 4008658:	001b883a 	mov	r13,zero
 400865c:	03a00034 	movhi	r14,32768
 4008660:	3013883a 	mov	r9,r6
 4008664:	3815883a 	mov	r10,r7
 4008668:	4091883a 	add	r8,r8,r2
 400866c:	20000226 	beq	r4,zero,4008678 <__muldf3+0x284>
 4008670:	5b64b03a 	or	r18,r11,r13
 4008674:	63a6b03a 	or	r19,r12,r14
 4008678:	7abfed36 	bltu	r15,r10,4008630 <__muldf3+0x23c>
 400867c:	da001015 	stw	r8,64(sp)
 4008680:	00840034 	movhi	r2,4096
 4008684:	10bfffc4 	addi	r2,r2,-1
 4008688:	12801436 	bltu	r2,r10,40086dc <__muldf3+0x2e8>
 400868c:	da001017 	ldw	r8,64(sp)
 4008690:	101f883a 	mov	r15,r2
 4008694:	4a45883a 	add	r2,r9,r9
 4008698:	124d803a 	cmpltu	r6,r2,r9
 400869c:	5287883a 	add	r3,r10,r10
 40086a0:	9497883a 	add	r11,r18,r18
 40086a4:	5c8f803a 	cmpltu	r7,r11,r18
 40086a8:	9cd9883a 	add	r12,r19,r19
 40086ac:	01000044 	movi	r4,1
 40086b0:	30cd883a 	add	r6,r6,r3
 40086b4:	3b0f883a 	add	r7,r7,r12
 40086b8:	423fffc4 	addi	r8,r8,-1
 40086bc:	1013883a 	mov	r9,r2
 40086c0:	3015883a 	mov	r10,r6
 40086c4:	111ab03a 	or	r13,r2,r4
 40086c8:	98003016 	blt	r19,zero,400878c <__muldf3+0x398>
 40086cc:	5825883a 	mov	r18,r11
 40086d0:	3827883a 	mov	r19,r7
 40086d4:	7abfef2e 	bgeu	r15,r10,4008694 <__muldf3+0x2a0>
 40086d8:	da001015 	stw	r8,64(sp)
 40086dc:	00803fc4 	movi	r2,255
 40086e0:	488e703a 	and	r7,r9,r2
 40086e4:	00802004 	movi	r2,128
 40086e8:	0007883a 	mov	r3,zero
 40086ec:	0011883a 	mov	r8,zero
 40086f0:	38801826 	beq	r7,r2,4008754 <__muldf3+0x360>
 40086f4:	008000c4 	movi	r2,3
 40086f8:	d9000e04 	addi	r4,sp,56
 40086fc:	da801215 	stw	r10,72(sp)
 4008700:	d8800e15 	stw	r2,56(sp)
 4008704:	da401115 	stw	r9,68(sp)
 4008708:	003f6a06 	br	40084b4 <__muldf3+0xc0>
 400870c:	89802126 	beq	r17,r6,4008794 <__muldf3+0x3a0>
 4008710:	0009883a 	mov	r4,zero
 4008714:	5105883a 	add	r2,r10,r4
 4008718:	128d803a 	cmpltu	r6,r2,r10
 400871c:	5d07883a 	add	r3,r11,r20
 4008720:	30cd883a 	add	r6,r6,r3
 4008724:	0021883a 	mov	r16,zero
 4008728:	0023883a 	mov	r17,zero
 400872c:	1025883a 	mov	r18,r2
 4008730:	3027883a 	mov	r19,r6
 4008734:	32ff9e2e 	bgeu	r6,r11,40085b0 <__muldf3+0x1bc>
 4008738:	00800044 	movi	r2,1
 400873c:	8089883a 	add	r4,r16,r2
 4008740:	240d803a 	cmpltu	r6,r4,r16
 4008744:	344d883a 	add	r6,r6,r17
 4008748:	2021883a 	mov	r16,r4
 400874c:	3023883a 	mov	r17,r6
 4008750:	003f9806 	br	40085b4 <__muldf3+0x1c0>
 4008754:	403fe71e 	bne	r8,zero,40086f4 <__muldf3+0x300>
 4008758:	01004004 	movi	r4,256
 400875c:	4904703a 	and	r2,r9,r4
 4008760:	10c4b03a 	or	r2,r2,r3
 4008764:	103fe31e 	bne	r2,zero,40086f4 <__muldf3+0x300>
 4008768:	94c4b03a 	or	r2,r18,r19
 400876c:	103fe126 	beq	r2,zero,40086f4 <__muldf3+0x300>
 4008770:	49c5883a 	add	r2,r9,r7
 4008774:	1251803a 	cmpltu	r8,r2,r9
 4008778:	4291883a 	add	r8,r8,r10
 400877c:	013fc004 	movi	r4,-256
 4008780:	1112703a 	and	r9,r2,r4
 4008784:	4015883a 	mov	r10,r8
 4008788:	003fda06 	br	40086f4 <__muldf3+0x300>
 400878c:	6813883a 	mov	r9,r13
 4008790:	003fce06 	br	40086cc <__muldf3+0x2d8>
 4008794:	143f7c36 	bltu	r2,r16,4008588 <__muldf3+0x194>
 4008798:	003fdd06 	br	4008710 <__muldf3+0x31c>
 400879c:	12bf852e 	bgeu	r2,r10,40085b4 <__muldf3+0x1c0>
 40087a0:	003fe506 	br	4008738 <__muldf3+0x344>
 40087a4:	00800084 	movi	r2,2
 40087a8:	20bf351e 	bne	r4,r2,4008480 <__muldf3+0x8c>
 40087ac:	010100b4 	movhi	r4,1026
 40087b0:	21112904 	addi	r4,r4,17572
 40087b4:	003f3f06 	br	40084b4 <__muldf3+0xc0>

040087b8 <__divdf3>:
 40087b8:	deffed04 	addi	sp,sp,-76
 40087bc:	dcc01115 	stw	r19,68(sp)
 40087c0:	dcc00404 	addi	r19,sp,16
 40087c4:	2011883a 	mov	r8,r4
 40087c8:	2813883a 	mov	r9,r5
 40087cc:	dc000e15 	stw	r16,56(sp)
 40087d0:	d809883a 	mov	r4,sp
 40087d4:	980b883a 	mov	r5,r19
 40087d8:	dc000904 	addi	r16,sp,36
 40087dc:	dfc01215 	stw	ra,72(sp)
 40087e0:	da400115 	stw	r9,4(sp)
 40087e4:	d9c00315 	stw	r7,12(sp)
 40087e8:	da000015 	stw	r8,0(sp)
 40087ec:	d9800215 	stw	r6,8(sp)
 40087f0:	dc801015 	stw	r18,64(sp)
 40087f4:	dc400f15 	stw	r17,60(sp)
 40087f8:	40097e40 	call	40097e4 <__unpack_d>
 40087fc:	d9000204 	addi	r4,sp,8
 4008800:	800b883a 	mov	r5,r16
 4008804:	40097e40 	call	40097e4 <__unpack_d>
 4008808:	d9000417 	ldw	r4,16(sp)
 400880c:	00800044 	movi	r2,1
 4008810:	11000b2e 	bgeu	r2,r4,4008840 <__divdf3+0x88>
 4008814:	d9400917 	ldw	r5,36(sp)
 4008818:	1140762e 	bgeu	r2,r5,40089f4 <__divdf3+0x23c>
 400881c:	d8800517 	ldw	r2,20(sp)
 4008820:	d8c00a17 	ldw	r3,40(sp)
 4008824:	01800104 	movi	r6,4
 4008828:	10c4f03a 	xor	r2,r2,r3
 400882c:	d8800515 	stw	r2,20(sp)
 4008830:	21800226 	beq	r4,r6,400883c <__divdf3+0x84>
 4008834:	00800084 	movi	r2,2
 4008838:	2080141e 	bne	r4,r2,400888c <__divdf3+0xd4>
 400883c:	29000926 	beq	r5,r4,4008864 <__divdf3+0xac>
 4008840:	9809883a 	mov	r4,r19
 4008844:	40094d00 	call	40094d0 <__pack_d>
 4008848:	dfc01217 	ldw	ra,72(sp)
 400884c:	dcc01117 	ldw	r19,68(sp)
 4008850:	dc801017 	ldw	r18,64(sp)
 4008854:	dc400f17 	ldw	r17,60(sp)
 4008858:	dc000e17 	ldw	r16,56(sp)
 400885c:	dec01304 	addi	sp,sp,76
 4008860:	f800283a 	ret
 4008864:	010100b4 	movhi	r4,1026
 4008868:	21112904 	addi	r4,r4,17572
 400886c:	40094d00 	call	40094d0 <__pack_d>
 4008870:	dfc01217 	ldw	ra,72(sp)
 4008874:	dcc01117 	ldw	r19,68(sp)
 4008878:	dc801017 	ldw	r18,64(sp)
 400887c:	dc400f17 	ldw	r17,60(sp)
 4008880:	dc000e17 	ldw	r16,56(sp)
 4008884:	dec01304 	addi	sp,sp,76
 4008888:	f800283a 	ret
 400888c:	29805b26 	beq	r5,r6,40089fc <__divdf3+0x244>
 4008890:	28802d26 	beq	r5,r2,4008948 <__divdf3+0x190>
 4008894:	d8c00617 	ldw	r3,24(sp)
 4008898:	d8800b17 	ldw	r2,44(sp)
 400889c:	d9c00817 	ldw	r7,32(sp)
 40088a0:	dc400d17 	ldw	r17,52(sp)
 40088a4:	188bc83a 	sub	r5,r3,r2
 40088a8:	d9800717 	ldw	r6,28(sp)
 40088ac:	dc000c17 	ldw	r16,48(sp)
 40088b0:	d9400615 	stw	r5,24(sp)
 40088b4:	3c403836 	bltu	r7,r17,4008998 <__divdf3+0x1e0>
 40088b8:	89c03626 	beq	r17,r7,4008994 <__divdf3+0x1dc>
 40088bc:	0015883a 	mov	r10,zero
 40088c0:	001d883a 	mov	r14,zero
 40088c4:	02c40034 	movhi	r11,4096
 40088c8:	001f883a 	mov	r15,zero
 40088cc:	003f883a 	mov	ra,zero
 40088d0:	04800f44 	movi	r18,61
 40088d4:	00000f06 	br	4008914 <__divdf3+0x15c>
 40088d8:	601d883a 	mov	r14,r12
 40088dc:	681f883a 	mov	r15,r13
 40088e0:	400d883a 	mov	r6,r8
 40088e4:	100f883a 	mov	r7,r2
 40088e8:	3191883a 	add	r8,r6,r6
 40088ec:	5808d07a 	srli	r4,r11,1
 40088f0:	4185803a 	cmpltu	r2,r8,r6
 40088f4:	39d3883a 	add	r9,r7,r7
 40088f8:	28c6b03a 	or	r3,r5,r3
 40088fc:	1245883a 	add	r2,r2,r9
 4008900:	1815883a 	mov	r10,r3
 4008904:	2017883a 	mov	r11,r4
 4008908:	400d883a 	mov	r6,r8
 400890c:	100f883a 	mov	r7,r2
 4008910:	fc801726 	beq	ra,r18,4008970 <__divdf3+0x1b8>
 4008914:	580a97fa 	slli	r5,r11,31
 4008918:	5006d07a 	srli	r3,r10,1
 400891c:	ffc00044 	addi	ra,ra,1
 4008920:	3c7ff136 	bltu	r7,r17,40088e8 <__divdf3+0x130>
 4008924:	3411c83a 	sub	r8,r6,r16
 4008928:	3205803a 	cmpltu	r2,r6,r8
 400892c:	3c53c83a 	sub	r9,r7,r17
 4008930:	7298b03a 	or	r12,r14,r10
 4008934:	7adab03a 	or	r13,r15,r11
 4008938:	4885c83a 	sub	r2,r9,r2
 400893c:	89ffe61e 	bne	r17,r7,40088d8 <__divdf3+0x120>
 4008940:	343fe936 	bltu	r6,r16,40088e8 <__divdf3+0x130>
 4008944:	003fe406 	br	40088d8 <__divdf3+0x120>
 4008948:	9809883a 	mov	r4,r19
 400894c:	d9800415 	stw	r6,16(sp)
 4008950:	40094d00 	call	40094d0 <__pack_d>
 4008954:	dfc01217 	ldw	ra,72(sp)
 4008958:	dcc01117 	ldw	r19,68(sp)
 400895c:	dc801017 	ldw	r18,64(sp)
 4008960:	dc400f17 	ldw	r17,60(sp)
 4008964:	dc000e17 	ldw	r16,56(sp)
 4008968:	dec01304 	addi	sp,sp,76
 400896c:	f800283a 	ret
 4008970:	00803fc4 	movi	r2,255
 4008974:	7090703a 	and	r8,r14,r2
 4008978:	00802004 	movi	r2,128
 400897c:	0007883a 	mov	r3,zero
 4008980:	0013883a 	mov	r9,zero
 4008984:	40800d26 	beq	r8,r2,40089bc <__divdf3+0x204>
 4008988:	dbc00815 	stw	r15,32(sp)
 400898c:	db800715 	stw	r14,28(sp)
 4008990:	003fab06 	br	4008840 <__divdf3+0x88>
 4008994:	343fc92e 	bgeu	r6,r16,40088bc <__divdf3+0x104>
 4008998:	3185883a 	add	r2,r6,r6
 400899c:	1189803a 	cmpltu	r4,r2,r6
 40089a0:	39c7883a 	add	r3,r7,r7
 40089a4:	20c9883a 	add	r4,r4,r3
 40089a8:	297fffc4 	addi	r5,r5,-1
 40089ac:	100d883a 	mov	r6,r2
 40089b0:	200f883a 	mov	r7,r4
 40089b4:	d9400615 	stw	r5,24(sp)
 40089b8:	003fc006 	br	40088bc <__divdf3+0x104>
 40089bc:	483ff21e 	bne	r9,zero,4008988 <__divdf3+0x1d0>
 40089c0:	01004004 	movi	r4,256
 40089c4:	7104703a 	and	r2,r14,r4
 40089c8:	10c4b03a 	or	r2,r2,r3
 40089cc:	103fee1e 	bne	r2,zero,4008988 <__divdf3+0x1d0>
 40089d0:	31c4b03a 	or	r2,r6,r7
 40089d4:	103fec26 	beq	r2,zero,4008988 <__divdf3+0x1d0>
 40089d8:	7205883a 	add	r2,r14,r8
 40089dc:	1391803a 	cmpltu	r8,r2,r14
 40089e0:	43d1883a 	add	r8,r8,r15
 40089e4:	013fc004 	movi	r4,-256
 40089e8:	111c703a 	and	r14,r2,r4
 40089ec:	401f883a 	mov	r15,r8
 40089f0:	003fe506 	br	4008988 <__divdf3+0x1d0>
 40089f4:	8009883a 	mov	r4,r16
 40089f8:	003f9206 	br	4008844 <__divdf3+0x8c>
 40089fc:	9809883a 	mov	r4,r19
 4008a00:	d8000715 	stw	zero,28(sp)
 4008a04:	d8000815 	stw	zero,32(sp)
 4008a08:	d8000615 	stw	zero,24(sp)
 4008a0c:	003f8d06 	br	4008844 <__divdf3+0x8c>

04008a10 <__gtdf2>:
 4008a10:	deffef04 	addi	sp,sp,-68
 4008a14:	dc400f15 	stw	r17,60(sp)
 4008a18:	dc400404 	addi	r17,sp,16
 4008a1c:	2005883a 	mov	r2,r4
 4008a20:	2807883a 	mov	r3,r5
 4008a24:	dc000e15 	stw	r16,56(sp)
 4008a28:	d809883a 	mov	r4,sp
 4008a2c:	880b883a 	mov	r5,r17
 4008a30:	dc000904 	addi	r16,sp,36
 4008a34:	d8c00115 	stw	r3,4(sp)
 4008a38:	d8800015 	stw	r2,0(sp)
 4008a3c:	d9800215 	stw	r6,8(sp)
 4008a40:	dfc01015 	stw	ra,64(sp)
 4008a44:	d9c00315 	stw	r7,12(sp)
 4008a48:	40097e40 	call	40097e4 <__unpack_d>
 4008a4c:	d9000204 	addi	r4,sp,8
 4008a50:	800b883a 	mov	r5,r16
 4008a54:	40097e40 	call	40097e4 <__unpack_d>
 4008a58:	d8800417 	ldw	r2,16(sp)
 4008a5c:	00c00044 	movi	r3,1
 4008a60:	01bfffc4 	movi	r6,-1
 4008a64:	1880062e 	bgeu	r3,r2,4008a80 <__gtdf2+0x70>
 4008a68:	d8800917 	ldw	r2,36(sp)
 4008a6c:	8809883a 	mov	r4,r17
 4008a70:	800b883a 	mov	r5,r16
 4008a74:	1880022e 	bgeu	r3,r2,4008a80 <__gtdf2+0x70>
 4008a78:	400991c0 	call	400991c <__fpcmp_parts_d>
 4008a7c:	100d883a 	mov	r6,r2
 4008a80:	3005883a 	mov	r2,r6
 4008a84:	dfc01017 	ldw	ra,64(sp)
 4008a88:	dc400f17 	ldw	r17,60(sp)
 4008a8c:	dc000e17 	ldw	r16,56(sp)
 4008a90:	dec01104 	addi	sp,sp,68
 4008a94:	f800283a 	ret

04008a98 <__gedf2>:
 4008a98:	deffef04 	addi	sp,sp,-68
 4008a9c:	dc400f15 	stw	r17,60(sp)
 4008aa0:	dc400404 	addi	r17,sp,16
 4008aa4:	2005883a 	mov	r2,r4
 4008aa8:	2807883a 	mov	r3,r5
 4008aac:	dc000e15 	stw	r16,56(sp)
 4008ab0:	d809883a 	mov	r4,sp
 4008ab4:	880b883a 	mov	r5,r17
 4008ab8:	dc000904 	addi	r16,sp,36
 4008abc:	d8c00115 	stw	r3,4(sp)
 4008ac0:	d8800015 	stw	r2,0(sp)
 4008ac4:	d9800215 	stw	r6,8(sp)
 4008ac8:	dfc01015 	stw	ra,64(sp)
 4008acc:	d9c00315 	stw	r7,12(sp)
 4008ad0:	40097e40 	call	40097e4 <__unpack_d>
 4008ad4:	d9000204 	addi	r4,sp,8
 4008ad8:	800b883a 	mov	r5,r16
 4008adc:	40097e40 	call	40097e4 <__unpack_d>
 4008ae0:	d8800417 	ldw	r2,16(sp)
 4008ae4:	00c00044 	movi	r3,1
 4008ae8:	01bfffc4 	movi	r6,-1
 4008aec:	1880062e 	bgeu	r3,r2,4008b08 <__gedf2+0x70>
 4008af0:	d8800917 	ldw	r2,36(sp)
 4008af4:	8809883a 	mov	r4,r17
 4008af8:	800b883a 	mov	r5,r16
 4008afc:	1880022e 	bgeu	r3,r2,4008b08 <__gedf2+0x70>
 4008b00:	400991c0 	call	400991c <__fpcmp_parts_d>
 4008b04:	100d883a 	mov	r6,r2
 4008b08:	3005883a 	mov	r2,r6
 4008b0c:	dfc01017 	ldw	ra,64(sp)
 4008b10:	dc400f17 	ldw	r17,60(sp)
 4008b14:	dc000e17 	ldw	r16,56(sp)
 4008b18:	dec01104 	addi	sp,sp,68
 4008b1c:	f800283a 	ret

04008b20 <__ltdf2>:
 4008b20:	deffef04 	addi	sp,sp,-68
 4008b24:	dc400f15 	stw	r17,60(sp)
 4008b28:	dc400404 	addi	r17,sp,16
 4008b2c:	2005883a 	mov	r2,r4
 4008b30:	2807883a 	mov	r3,r5
 4008b34:	dc000e15 	stw	r16,56(sp)
 4008b38:	d809883a 	mov	r4,sp
 4008b3c:	880b883a 	mov	r5,r17
 4008b40:	dc000904 	addi	r16,sp,36
 4008b44:	d8c00115 	stw	r3,4(sp)
 4008b48:	d8800015 	stw	r2,0(sp)
 4008b4c:	d9800215 	stw	r6,8(sp)
 4008b50:	dfc01015 	stw	ra,64(sp)
 4008b54:	d9c00315 	stw	r7,12(sp)
 4008b58:	40097e40 	call	40097e4 <__unpack_d>
 4008b5c:	d9000204 	addi	r4,sp,8
 4008b60:	800b883a 	mov	r5,r16
 4008b64:	40097e40 	call	40097e4 <__unpack_d>
 4008b68:	d8800417 	ldw	r2,16(sp)
 4008b6c:	00c00044 	movi	r3,1
 4008b70:	180d883a 	mov	r6,r3
 4008b74:	1880062e 	bgeu	r3,r2,4008b90 <__ltdf2+0x70>
 4008b78:	d8800917 	ldw	r2,36(sp)
 4008b7c:	8809883a 	mov	r4,r17
 4008b80:	800b883a 	mov	r5,r16
 4008b84:	1880022e 	bgeu	r3,r2,4008b90 <__ltdf2+0x70>
 4008b88:	400991c0 	call	400991c <__fpcmp_parts_d>
 4008b8c:	100d883a 	mov	r6,r2
 4008b90:	3005883a 	mov	r2,r6
 4008b94:	dfc01017 	ldw	ra,64(sp)
 4008b98:	dc400f17 	ldw	r17,60(sp)
 4008b9c:	dc000e17 	ldw	r16,56(sp)
 4008ba0:	dec01104 	addi	sp,sp,68
 4008ba4:	f800283a 	ret

04008ba8 <__ledf2>:
 4008ba8:	deffef04 	addi	sp,sp,-68
 4008bac:	dc400f15 	stw	r17,60(sp)
 4008bb0:	dc400404 	addi	r17,sp,16
 4008bb4:	2005883a 	mov	r2,r4
 4008bb8:	2807883a 	mov	r3,r5
 4008bbc:	dc000e15 	stw	r16,56(sp)
 4008bc0:	d809883a 	mov	r4,sp
 4008bc4:	880b883a 	mov	r5,r17
 4008bc8:	dc000904 	addi	r16,sp,36
 4008bcc:	d8c00115 	stw	r3,4(sp)
 4008bd0:	d8800015 	stw	r2,0(sp)
 4008bd4:	d9800215 	stw	r6,8(sp)
 4008bd8:	dfc01015 	stw	ra,64(sp)
 4008bdc:	d9c00315 	stw	r7,12(sp)
 4008be0:	40097e40 	call	40097e4 <__unpack_d>
 4008be4:	d9000204 	addi	r4,sp,8
 4008be8:	800b883a 	mov	r5,r16
 4008bec:	40097e40 	call	40097e4 <__unpack_d>
 4008bf0:	d8800417 	ldw	r2,16(sp)
 4008bf4:	00c00044 	movi	r3,1
 4008bf8:	180d883a 	mov	r6,r3
 4008bfc:	1880062e 	bgeu	r3,r2,4008c18 <__ledf2+0x70>
 4008c00:	d8800917 	ldw	r2,36(sp)
 4008c04:	8809883a 	mov	r4,r17
 4008c08:	800b883a 	mov	r5,r16
 4008c0c:	1880022e 	bgeu	r3,r2,4008c18 <__ledf2+0x70>
 4008c10:	400991c0 	call	400991c <__fpcmp_parts_d>
 4008c14:	100d883a 	mov	r6,r2
 4008c18:	3005883a 	mov	r2,r6
 4008c1c:	dfc01017 	ldw	ra,64(sp)
 4008c20:	dc400f17 	ldw	r17,60(sp)
 4008c24:	dc000e17 	ldw	r16,56(sp)
 4008c28:	dec01104 	addi	sp,sp,68
 4008c2c:	f800283a 	ret

04008c30 <__floatsidf>:
 4008c30:	2006d7fa 	srli	r3,r4,31
 4008c34:	defff604 	addi	sp,sp,-40
 4008c38:	008000c4 	movi	r2,3
 4008c3c:	dfc00915 	stw	ra,36(sp)
 4008c40:	dcc00815 	stw	r19,32(sp)
 4008c44:	dc800715 	stw	r18,28(sp)
 4008c48:	dc400615 	stw	r17,24(sp)
 4008c4c:	dc000515 	stw	r16,20(sp)
 4008c50:	d8800015 	stw	r2,0(sp)
 4008c54:	d8c00115 	stw	r3,4(sp)
 4008c58:	20000f1e 	bne	r4,zero,4008c98 <__floatsidf+0x68>
 4008c5c:	00800084 	movi	r2,2
 4008c60:	d8800015 	stw	r2,0(sp)
 4008c64:	d809883a 	mov	r4,sp
 4008c68:	40094d00 	call	40094d0 <__pack_d>
 4008c6c:	1009883a 	mov	r4,r2
 4008c70:	180b883a 	mov	r5,r3
 4008c74:	2005883a 	mov	r2,r4
 4008c78:	2807883a 	mov	r3,r5
 4008c7c:	dfc00917 	ldw	ra,36(sp)
 4008c80:	dcc00817 	ldw	r19,32(sp)
 4008c84:	dc800717 	ldw	r18,28(sp)
 4008c88:	dc400617 	ldw	r17,24(sp)
 4008c8c:	dc000517 	ldw	r16,20(sp)
 4008c90:	dec00a04 	addi	sp,sp,40
 4008c94:	f800283a 	ret
 4008c98:	00800f04 	movi	r2,60
 4008c9c:	1807003a 	cmpeq	r3,r3,zero
 4008ca0:	d8800215 	stw	r2,8(sp)
 4008ca4:	18001126 	beq	r3,zero,4008cec <__floatsidf+0xbc>
 4008ca8:	0027883a 	mov	r19,zero
 4008cac:	2025883a 	mov	r18,r4
 4008cb0:	d9000315 	stw	r4,12(sp)
 4008cb4:	dcc00415 	stw	r19,16(sp)
 4008cb8:	40091540 	call	4009154 <__clzsi2>
 4008cbc:	11000744 	addi	r4,r2,29
 4008cc0:	013fe80e 	bge	zero,r4,4008c64 <__floatsidf+0x34>
 4008cc4:	10bfff44 	addi	r2,r2,-3
 4008cc8:	10000c16 	blt	r2,zero,4008cfc <__floatsidf+0xcc>
 4008ccc:	90a2983a 	sll	r17,r18,r2
 4008cd0:	0021883a 	mov	r16,zero
 4008cd4:	d8800217 	ldw	r2,8(sp)
 4008cd8:	dc400415 	stw	r17,16(sp)
 4008cdc:	dc000315 	stw	r16,12(sp)
 4008ce0:	1105c83a 	sub	r2,r2,r4
 4008ce4:	d8800215 	stw	r2,8(sp)
 4008ce8:	003fde06 	br	4008c64 <__floatsidf+0x34>
 4008cec:	00a00034 	movhi	r2,32768
 4008cf0:	20800a26 	beq	r4,r2,4008d1c <__floatsidf+0xec>
 4008cf4:	0109c83a 	sub	r4,zero,r4
 4008cf8:	003feb06 	br	4008ca8 <__floatsidf+0x78>
 4008cfc:	9006d07a 	srli	r3,r18,1
 4008d00:	008007c4 	movi	r2,31
 4008d04:	1105c83a 	sub	r2,r2,r4
 4008d08:	1886d83a 	srl	r3,r3,r2
 4008d0c:	9922983a 	sll	r17,r19,r4
 4008d10:	9120983a 	sll	r16,r18,r4
 4008d14:	1c62b03a 	or	r17,r3,r17
 4008d18:	003fee06 	br	4008cd4 <__floatsidf+0xa4>
 4008d1c:	0009883a 	mov	r4,zero
 4008d20:	01707834 	movhi	r5,49632
 4008d24:	003fd306 	br	4008c74 <__floatsidf+0x44>

04008d28 <__fixdfsi>:
 4008d28:	defff804 	addi	sp,sp,-32
 4008d2c:	2005883a 	mov	r2,r4
 4008d30:	2807883a 	mov	r3,r5
 4008d34:	d809883a 	mov	r4,sp
 4008d38:	d9400204 	addi	r5,sp,8
 4008d3c:	d8c00115 	stw	r3,4(sp)
 4008d40:	d8800015 	stw	r2,0(sp)
 4008d44:	dfc00715 	stw	ra,28(sp)
 4008d48:	40097e40 	call	40097e4 <__unpack_d>
 4008d4c:	d8c00217 	ldw	r3,8(sp)
 4008d50:	00800084 	movi	r2,2
 4008d54:	1880051e 	bne	r3,r2,4008d6c <__fixdfsi+0x44>
 4008d58:	0007883a 	mov	r3,zero
 4008d5c:	1805883a 	mov	r2,r3
 4008d60:	dfc00717 	ldw	ra,28(sp)
 4008d64:	dec00804 	addi	sp,sp,32
 4008d68:	f800283a 	ret
 4008d6c:	00800044 	movi	r2,1
 4008d70:	10fff92e 	bgeu	r2,r3,4008d58 <__fixdfsi+0x30>
 4008d74:	00800104 	movi	r2,4
 4008d78:	18800426 	beq	r3,r2,4008d8c <__fixdfsi+0x64>
 4008d7c:	d8c00417 	ldw	r3,16(sp)
 4008d80:	183ff516 	blt	r3,zero,4008d58 <__fixdfsi+0x30>
 4008d84:	00800784 	movi	r2,30
 4008d88:	10c0080e 	bge	r2,r3,4008dac <__fixdfsi+0x84>
 4008d8c:	d8800317 	ldw	r2,12(sp)
 4008d90:	1000121e 	bne	r2,zero,4008ddc <__fixdfsi+0xb4>
 4008d94:	00e00034 	movhi	r3,32768
 4008d98:	18ffffc4 	addi	r3,r3,-1
 4008d9c:	1805883a 	mov	r2,r3
 4008da0:	dfc00717 	ldw	ra,28(sp)
 4008da4:	dec00804 	addi	sp,sp,32
 4008da8:	f800283a 	ret
 4008dac:	00800f04 	movi	r2,60
 4008db0:	10d1c83a 	sub	r8,r2,r3
 4008db4:	40bff804 	addi	r2,r8,-32
 4008db8:	d9800517 	ldw	r6,20(sp)
 4008dbc:	d9c00617 	ldw	r7,24(sp)
 4008dc0:	10000816 	blt	r2,zero,4008de4 <__fixdfsi+0xbc>
 4008dc4:	3888d83a 	srl	r4,r7,r2
 4008dc8:	d8800317 	ldw	r2,12(sp)
 4008dcc:	2007883a 	mov	r3,r4
 4008dd0:	103fe226 	beq	r2,zero,4008d5c <__fixdfsi+0x34>
 4008dd4:	0107c83a 	sub	r3,zero,r4
 4008dd8:	003fe006 	br	4008d5c <__fixdfsi+0x34>
 4008ddc:	00e00034 	movhi	r3,32768
 4008de0:	003fde06 	br	4008d5c <__fixdfsi+0x34>
 4008de4:	39c7883a 	add	r3,r7,r7
 4008de8:	008007c4 	movi	r2,31
 4008dec:	1205c83a 	sub	r2,r2,r8
 4008df0:	1886983a 	sll	r3,r3,r2
 4008df4:	3208d83a 	srl	r4,r6,r8
 4008df8:	1908b03a 	or	r4,r3,r4
 4008dfc:	003ff206 	br	4008dc8 <__fixdfsi+0xa0>

04008e00 <__make_dp>:
 4008e00:	defff904 	addi	sp,sp,-28
 4008e04:	d8c00717 	ldw	r3,28(sp)
 4008e08:	d9000015 	stw	r4,0(sp)
 4008e0c:	d809883a 	mov	r4,sp
 4008e10:	dfc00515 	stw	ra,20(sp)
 4008e14:	d9c00615 	stw	r7,24(sp)
 4008e18:	d9400115 	stw	r5,4(sp)
 4008e1c:	d9800215 	stw	r6,8(sp)
 4008e20:	d8c00415 	stw	r3,16(sp)
 4008e24:	d9c00315 	stw	r7,12(sp)
 4008e28:	40094d00 	call	40094d0 <__pack_d>
 4008e2c:	dfc00517 	ldw	ra,20(sp)
 4008e30:	dec00704 	addi	sp,sp,28
 4008e34:	f800283a 	ret

04008e38 <__truncdfsf2>:
 4008e38:	defff804 	addi	sp,sp,-32
 4008e3c:	2005883a 	mov	r2,r4
 4008e40:	2807883a 	mov	r3,r5
 4008e44:	d809883a 	mov	r4,sp
 4008e48:	d9400204 	addi	r5,sp,8
 4008e4c:	d8c00115 	stw	r3,4(sp)
 4008e50:	d8800015 	stw	r2,0(sp)
 4008e54:	dfc00715 	stw	ra,28(sp)
 4008e58:	40097e40 	call	40097e4 <__unpack_d>
 4008e5c:	d9c00517 	ldw	r7,20(sp)
 4008e60:	da000617 	ldw	r8,24(sp)
 4008e64:	02d00034 	movhi	r11,16384
 4008e68:	5affffc4 	addi	r11,r11,-1
 4008e6c:	3812d7ba 	srli	r9,r7,30
 4008e70:	401a90ba 	slli	r13,r8,2
 4008e74:	3ac4703a 	and	r2,r7,r11
 4008e78:	0007883a 	mov	r3,zero
 4008e7c:	6a52b03a 	or	r9,r13,r9
 4008e80:	10c4b03a 	or	r2,r2,r3
 4008e84:	d9000217 	ldw	r4,8(sp)
 4008e88:	d9400317 	ldw	r5,12(sp)
 4008e8c:	d9800417 	ldw	r6,16(sp)
 4008e90:	480f883a 	mov	r7,r9
 4008e94:	10000126 	beq	r2,zero,4008e9c <__truncdfsf2+0x64>
 4008e98:	49c00054 	ori	r7,r9,1
 4008e9c:	40094a40 	call	40094a4 <__make_fp>
 4008ea0:	dfc00717 	ldw	ra,28(sp)
 4008ea4:	dec00804 	addi	sp,sp,32
 4008ea8:	f800283a 	ret

04008eac <udivmodsi4>:
 4008eac:	29001b2e 	bgeu	r5,r4,4008f1c <udivmodsi4+0x70>
 4008eb0:	28001a16 	blt	r5,zero,4008f1c <udivmodsi4+0x70>
 4008eb4:	00800044 	movi	r2,1
 4008eb8:	0007883a 	mov	r3,zero
 4008ebc:	01c007c4 	movi	r7,31
 4008ec0:	00000306 	br	4008ed0 <udivmodsi4+0x24>
 4008ec4:	19c01326 	beq	r3,r7,4008f14 <udivmodsi4+0x68>
 4008ec8:	18c00044 	addi	r3,r3,1
 4008ecc:	28000416 	blt	r5,zero,4008ee0 <udivmodsi4+0x34>
 4008ed0:	294b883a 	add	r5,r5,r5
 4008ed4:	1085883a 	add	r2,r2,r2
 4008ed8:	293ffa36 	bltu	r5,r4,4008ec4 <udivmodsi4+0x18>
 4008edc:	10000d26 	beq	r2,zero,4008f14 <udivmodsi4+0x68>
 4008ee0:	0007883a 	mov	r3,zero
 4008ee4:	21400236 	bltu	r4,r5,4008ef0 <udivmodsi4+0x44>
 4008ee8:	2149c83a 	sub	r4,r4,r5
 4008eec:	1886b03a 	or	r3,r3,r2
 4008ef0:	1004d07a 	srli	r2,r2,1
 4008ef4:	280ad07a 	srli	r5,r5,1
 4008ef8:	103ffa1e 	bne	r2,zero,4008ee4 <udivmodsi4+0x38>
 4008efc:	30000226 	beq	r6,zero,4008f08 <udivmodsi4+0x5c>
 4008f00:	2005883a 	mov	r2,r4
 4008f04:	f800283a 	ret
 4008f08:	1809883a 	mov	r4,r3
 4008f0c:	2005883a 	mov	r2,r4
 4008f10:	f800283a 	ret
 4008f14:	0007883a 	mov	r3,zero
 4008f18:	003ff806 	br	4008efc <udivmodsi4+0x50>
 4008f1c:	00800044 	movi	r2,1
 4008f20:	0007883a 	mov	r3,zero
 4008f24:	003fef06 	br	4008ee4 <udivmodsi4+0x38>

04008f28 <__divsi3>:
 4008f28:	defffe04 	addi	sp,sp,-8
 4008f2c:	dc000015 	stw	r16,0(sp)
 4008f30:	dfc00115 	stw	ra,4(sp)
 4008f34:	0021883a 	mov	r16,zero
 4008f38:	20000c16 	blt	r4,zero,4008f6c <__divsi3+0x44>
 4008f3c:	000d883a 	mov	r6,zero
 4008f40:	28000e16 	blt	r5,zero,4008f7c <__divsi3+0x54>
 4008f44:	4008eac0 	call	4008eac <udivmodsi4>
 4008f48:	1007883a 	mov	r3,r2
 4008f4c:	8005003a 	cmpeq	r2,r16,zero
 4008f50:	1000011e 	bne	r2,zero,4008f58 <__divsi3+0x30>
 4008f54:	00c7c83a 	sub	r3,zero,r3
 4008f58:	1805883a 	mov	r2,r3
 4008f5c:	dfc00117 	ldw	ra,4(sp)
 4008f60:	dc000017 	ldw	r16,0(sp)
 4008f64:	dec00204 	addi	sp,sp,8
 4008f68:	f800283a 	ret
 4008f6c:	0109c83a 	sub	r4,zero,r4
 4008f70:	04000044 	movi	r16,1
 4008f74:	000d883a 	mov	r6,zero
 4008f78:	283ff20e 	bge	r5,zero,4008f44 <__divsi3+0x1c>
 4008f7c:	014bc83a 	sub	r5,zero,r5
 4008f80:	8021003a 	cmpeq	r16,r16,zero
 4008f84:	003fef06 	br	4008f44 <__divsi3+0x1c>

04008f88 <__modsi3>:
 4008f88:	deffff04 	addi	sp,sp,-4
 4008f8c:	dfc00015 	stw	ra,0(sp)
 4008f90:	01800044 	movi	r6,1
 4008f94:	2807883a 	mov	r3,r5
 4008f98:	20000416 	blt	r4,zero,4008fac <__modsi3+0x24>
 4008f9c:	28000c16 	blt	r5,zero,4008fd0 <__modsi3+0x48>
 4008fa0:	dfc00017 	ldw	ra,0(sp)
 4008fa4:	dec00104 	addi	sp,sp,4
 4008fa8:	4008eac1 	jmpi	4008eac <udivmodsi4>
 4008fac:	0109c83a 	sub	r4,zero,r4
 4008fb0:	28000b16 	blt	r5,zero,4008fe0 <__modsi3+0x58>
 4008fb4:	180b883a 	mov	r5,r3
 4008fb8:	01800044 	movi	r6,1
 4008fbc:	4008eac0 	call	4008eac <udivmodsi4>
 4008fc0:	0085c83a 	sub	r2,zero,r2
 4008fc4:	dfc00017 	ldw	ra,0(sp)
 4008fc8:	dec00104 	addi	sp,sp,4
 4008fcc:	f800283a 	ret
 4008fd0:	014bc83a 	sub	r5,zero,r5
 4008fd4:	dfc00017 	ldw	ra,0(sp)
 4008fd8:	dec00104 	addi	sp,sp,4
 4008fdc:	4008eac1 	jmpi	4008eac <udivmodsi4>
 4008fe0:	0147c83a 	sub	r3,zero,r5
 4008fe4:	003ff306 	br	4008fb4 <__modsi3+0x2c>

04008fe8 <__udivsi3>:
 4008fe8:	000d883a 	mov	r6,zero
 4008fec:	4008eac1 	jmpi	4008eac <udivmodsi4>

04008ff0 <__umodsi3>:
 4008ff0:	01800044 	movi	r6,1
 4008ff4:	4008eac1 	jmpi	4008eac <udivmodsi4>

04008ff8 <__mulsi3>:
 4008ff8:	20000a26 	beq	r4,zero,4009024 <__mulsi3+0x2c>
 4008ffc:	0007883a 	mov	r3,zero
 4009000:	2080004c 	andi	r2,r4,1
 4009004:	1005003a 	cmpeq	r2,r2,zero
 4009008:	2008d07a 	srli	r4,r4,1
 400900c:	1000011e 	bne	r2,zero,4009014 <__mulsi3+0x1c>
 4009010:	1947883a 	add	r3,r3,r5
 4009014:	294b883a 	add	r5,r5,r5
 4009018:	203ff91e 	bne	r4,zero,4009000 <__mulsi3+0x8>
 400901c:	1805883a 	mov	r2,r3
 4009020:	f800283a 	ret
 4009024:	0007883a 	mov	r3,zero
 4009028:	1805883a 	mov	r2,r3
 400902c:	f800283a 	ret

04009030 <__muldi3>:
 4009030:	defff204 	addi	sp,sp,-56
 4009034:	df000c15 	stw	fp,48(sp)
 4009038:	3038d43a 	srli	fp,r6,16
 400903c:	dd000815 	stw	r20,32(sp)
 4009040:	dc400515 	stw	r17,20(sp)
 4009044:	2028d43a 	srli	r20,r4,16
 4009048:	247fffcc 	andi	r17,r4,65535
 400904c:	dc000415 	stw	r16,16(sp)
 4009050:	343fffcc 	andi	r16,r6,65535
 4009054:	dcc00715 	stw	r19,28(sp)
 4009058:	d9000015 	stw	r4,0(sp)
 400905c:	2827883a 	mov	r19,r5
 4009060:	8809883a 	mov	r4,r17
 4009064:	d9400115 	stw	r5,4(sp)
 4009068:	800b883a 	mov	r5,r16
 400906c:	d9800215 	stw	r6,8(sp)
 4009070:	dfc00d15 	stw	ra,52(sp)
 4009074:	d9c00315 	stw	r7,12(sp)
 4009078:	dd800a15 	stw	r22,40(sp)
 400907c:	dd400915 	stw	r21,36(sp)
 4009080:	302d883a 	mov	r22,r6
 4009084:	ddc00b15 	stw	r23,44(sp)
 4009088:	dc800615 	stw	r18,24(sp)
 400908c:	4008ff80 	call	4008ff8 <__mulsi3>
 4009090:	8809883a 	mov	r4,r17
 4009094:	e00b883a 	mov	r5,fp
 4009098:	102b883a 	mov	r21,r2
 400909c:	4008ff80 	call	4008ff8 <__mulsi3>
 40090a0:	800b883a 	mov	r5,r16
 40090a4:	a009883a 	mov	r4,r20
 40090a8:	1023883a 	mov	r17,r2
 40090ac:	4008ff80 	call	4008ff8 <__mulsi3>
 40090b0:	a009883a 	mov	r4,r20
 40090b4:	e00b883a 	mov	r5,fp
 40090b8:	1021883a 	mov	r16,r2
 40090bc:	4008ff80 	call	4008ff8 <__mulsi3>
 40090c0:	a8ffffcc 	andi	r3,r21,65535
 40090c4:	a82ad43a 	srli	r21,r21,16
 40090c8:	8c23883a 	add	r17,r17,r16
 40090cc:	1011883a 	mov	r8,r2
 40090d0:	ac6b883a 	add	r21,r21,r17
 40090d4:	a804943a 	slli	r2,r21,16
 40090d8:	b009883a 	mov	r4,r22
 40090dc:	980b883a 	mov	r5,r19
 40090e0:	10c7883a 	add	r3,r2,r3
 40090e4:	a812d43a 	srli	r9,r21,16
 40090e8:	180d883a 	mov	r6,r3
 40090ec:	ac00022e 	bgeu	r21,r16,40090f8 <__muldi3+0xc8>
 40090f0:	00800074 	movhi	r2,1
 40090f4:	4091883a 	add	r8,r8,r2
 40090f8:	4267883a 	add	r19,r8,r9
 40090fc:	302d883a 	mov	r22,r6
 4009100:	4008ff80 	call	4008ff8 <__mulsi3>
 4009104:	d9400317 	ldw	r5,12(sp)
 4009108:	d9000017 	ldw	r4,0(sp)
 400910c:	1023883a 	mov	r17,r2
 4009110:	4008ff80 	call	4008ff8 <__mulsi3>
 4009114:	14cb883a 	add	r5,r2,r19
 4009118:	894b883a 	add	r5,r17,r5
 400911c:	b005883a 	mov	r2,r22
 4009120:	2807883a 	mov	r3,r5
 4009124:	dfc00d17 	ldw	ra,52(sp)
 4009128:	df000c17 	ldw	fp,48(sp)
 400912c:	ddc00b17 	ldw	r23,44(sp)
 4009130:	dd800a17 	ldw	r22,40(sp)
 4009134:	dd400917 	ldw	r21,36(sp)
 4009138:	dd000817 	ldw	r20,32(sp)
 400913c:	dcc00717 	ldw	r19,28(sp)
 4009140:	dc800617 	ldw	r18,24(sp)
 4009144:	dc400517 	ldw	r17,20(sp)
 4009148:	dc000417 	ldw	r16,16(sp)
 400914c:	dec00e04 	addi	sp,sp,56
 4009150:	f800283a 	ret

04009154 <__clzsi2>:
 4009154:	00bfffd4 	movui	r2,65535
 4009158:	11000e36 	bltu	r2,r4,4009194 <__clzsi2+0x40>
 400915c:	00803fc4 	movi	r2,255
 4009160:	01400204 	movi	r5,8
 4009164:	0007883a 	mov	r3,zero
 4009168:	11001036 	bltu	r2,r4,40091ac <__clzsi2+0x58>
 400916c:	000b883a 	mov	r5,zero
 4009170:	20c6d83a 	srl	r3,r4,r3
 4009174:	008100b4 	movhi	r2,1026
 4009178:	10912e04 	addi	r2,r2,17592
 400917c:	1887883a 	add	r3,r3,r2
 4009180:	18800003 	ldbu	r2,0(r3)
 4009184:	00c00804 	movi	r3,32
 4009188:	2885883a 	add	r2,r5,r2
 400918c:	1885c83a 	sub	r2,r3,r2
 4009190:	f800283a 	ret
 4009194:	01400404 	movi	r5,16
 4009198:	00804034 	movhi	r2,256
 400919c:	10bfffc4 	addi	r2,r2,-1
 40091a0:	2807883a 	mov	r3,r5
 40091a4:	113ff22e 	bgeu	r2,r4,4009170 <__clzsi2+0x1c>
 40091a8:	01400604 	movi	r5,24
 40091ac:	2807883a 	mov	r3,r5
 40091b0:	20c6d83a 	srl	r3,r4,r3
 40091b4:	008100b4 	movhi	r2,1026
 40091b8:	10912e04 	addi	r2,r2,17592
 40091bc:	1887883a 	add	r3,r3,r2
 40091c0:	18800003 	ldbu	r2,0(r3)
 40091c4:	00c00804 	movi	r3,32
 40091c8:	2885883a 	add	r2,r5,r2
 40091cc:	1885c83a 	sub	r2,r3,r2
 40091d0:	f800283a 	ret

040091d4 <__pack_f>:
 40091d4:	20c00017 	ldw	r3,0(r4)
 40091d8:	01c00044 	movi	r7,1
 40091dc:	21800317 	ldw	r6,12(r4)
 40091e0:	21400117 	ldw	r5,4(r4)
 40091e4:	38c02d2e 	bgeu	r7,r3,400929c <__pack_f+0xc8>
 40091e8:	00800104 	movi	r2,4
 40091ec:	18802826 	beq	r3,r2,4009290 <__pack_f+0xbc>
 40091f0:	00800084 	movi	r2,2
 40091f4:	18800126 	beq	r3,r2,40091fc <__pack_f+0x28>
 40091f8:	3000101e 	bne	r6,zero,400923c <__pack_f+0x68>
 40091fc:	000d883a 	mov	r6,zero
 4009200:	0007883a 	mov	r3,zero
 4009204:	19003fcc 	andi	r4,r3,255
 4009208:	200895fa 	slli	r4,r4,23
 400920c:	00c02034 	movhi	r3,128
 4009210:	18ffffc4 	addi	r3,r3,-1
 4009214:	30c6703a 	and	r3,r6,r3
 4009218:	10a0002c 	andhi	r2,r2,32768
 400921c:	10c4b03a 	or	r2,r2,r3
 4009220:	280a97fa 	slli	r5,r5,31
 4009224:	1104b03a 	or	r2,r2,r4
 4009228:	00e00034 	movhi	r3,32768
 400922c:	18ffffc4 	addi	r3,r3,-1
 4009230:	10c4703a 	and	r2,r2,r3
 4009234:	1144b03a 	or	r2,r2,r5
 4009238:	f800283a 	ret
 400923c:	21000217 	ldw	r4,8(r4)
 4009240:	00bfe084 	movi	r2,-126
 4009244:	20801b16 	blt	r4,r2,40092b4 <__pack_f+0xe0>
 4009248:	00801fc4 	movi	r2,127
 400924c:	11001016 	blt	r2,r4,4009290 <__pack_f+0xbc>
 4009250:	308e703a 	and	r7,r6,r2
 4009254:	2087883a 	add	r3,r4,r2
 4009258:	00801004 	movi	r2,64
 400925c:	38800526 	beq	r7,r2,4009274 <__pack_f+0xa0>
 4009260:	31800fc4 	addi	r6,r6,63
 4009264:	30000716 	blt	r6,zero,4009284 <__pack_f+0xb0>
 4009268:	300490ba 	slli	r2,r6,2
 400926c:	100cd27a 	srli	r6,r2,9
 4009270:	003fe406 	br	4009204 <__pack_f+0x30>
 4009274:	3080200c 	andi	r2,r6,128
 4009278:	103ffa26 	beq	r2,zero,4009264 <__pack_f+0x90>
 400927c:	31cd883a 	add	r6,r6,r7
 4009280:	003ff806 	br	4009264 <__pack_f+0x90>
 4009284:	300cd07a 	srli	r6,r6,1
 4009288:	18c00044 	addi	r3,r3,1
 400928c:	003ff606 	br	4009268 <__pack_f+0x94>
 4009290:	000d883a 	mov	r6,zero
 4009294:	00ffffc4 	movi	r3,-1
 4009298:	003fda06 	br	4009204 <__pack_f+0x30>
 400929c:	31800434 	orhi	r6,r6,16
 40092a0:	00802034 	movhi	r2,128
 40092a4:	10bfffc4 	addi	r2,r2,-1
 40092a8:	308c703a 	and	r6,r6,r2
 40092ac:	00ffffc4 	movi	r3,-1
 40092b0:	003fd406 	br	4009204 <__pack_f+0x30>
 40092b4:	1109c83a 	sub	r4,r2,r4
 40092b8:	00800644 	movi	r2,25
 40092bc:	11001216 	blt	r2,r4,4009308 <__pack_f+0x134>
 40092c0:	3904983a 	sll	r2,r7,r4
 40092c4:	3106d83a 	srl	r3,r6,r4
 40092c8:	10bfffc4 	addi	r2,r2,-1
 40092cc:	3084703a 	and	r2,r6,r2
 40092d0:	1004c03a 	cmpne	r2,r2,zero
 40092d4:	1886b03a 	or	r3,r3,r2
 40092d8:	19001fcc 	andi	r4,r3,127
 40092dc:	00801004 	movi	r2,64
 40092e0:	20800c26 	beq	r4,r2,4009314 <__pack_f+0x140>
 40092e4:	18c00fc4 	addi	r3,r3,63
 40092e8:	00900034 	movhi	r2,16384
 40092ec:	10bfffc4 	addi	r2,r2,-1
 40092f0:	180cd1fa 	srli	r6,r3,7
 40092f4:	10c7803a 	cmpltu	r3,r2,r3
 40092f8:	00802034 	movhi	r2,128
 40092fc:	10bfffc4 	addi	r2,r2,-1
 4009300:	308c703a 	and	r6,r6,r2
 4009304:	003fbf06 	br	4009204 <__pack_f+0x30>
 4009308:	0007883a 	mov	r3,zero
 400930c:	000d883a 	mov	r6,zero
 4009310:	003ff906 	br	40092f8 <__pack_f+0x124>
 4009314:	1880200c 	andi	r2,r3,128
 4009318:	10000126 	beq	r2,zero,4009320 <__pack_f+0x14c>
 400931c:	1907883a 	add	r3,r3,r4
 4009320:	180cd1fa 	srli	r6,r3,7
 4009324:	00900034 	movhi	r2,16384
 4009328:	10bfffc4 	addi	r2,r2,-1
 400932c:	10c7803a 	cmpltu	r3,r2,r3
 4009330:	003ff106 	br	40092f8 <__pack_f+0x124>

04009334 <__unpack_f>:
 4009334:	21800017 	ldw	r6,0(r4)
 4009338:	00c02034 	movhi	r3,128
 400933c:	18ffffc4 	addi	r3,r3,-1
 4009340:	3004d5fa 	srli	r2,r6,23
 4009344:	3008d7fa 	srli	r4,r6,31
 4009348:	30ce703a 	and	r7,r6,r3
 400934c:	10c03fcc 	andi	r3,r2,255
 4009350:	29000115 	stw	r4,4(r5)
 4009354:	1800131e 	bne	r3,zero,40093a4 <__unpack_f+0x70>
 4009358:	38000f26 	beq	r7,zero,4009398 <__unpack_f+0x64>
 400935c:	380691fa 	slli	r3,r7,7
 4009360:	01bfe084 	movi	r6,-126
 4009364:	008000c4 	movi	r2,3
 4009368:	01100034 	movhi	r4,16384
 400936c:	213fffc4 	addi	r4,r4,-1
 4009370:	28800015 	stw	r2,0(r5)
 4009374:	29800215 	stw	r6,8(r5)
 4009378:	20c00536 	bltu	r4,r3,4009390 <__unpack_f+0x5c>
 400937c:	3005883a 	mov	r2,r6
 4009380:	18c7883a 	add	r3,r3,r3
 4009384:	10bfffc4 	addi	r2,r2,-1
 4009388:	20fffd2e 	bgeu	r4,r3,4009380 <__unpack_f+0x4c>
 400938c:	28800215 	stw	r2,8(r5)
 4009390:	28c00315 	stw	r3,12(r5)
 4009394:	f800283a 	ret
 4009398:	00800084 	movi	r2,2
 400939c:	28800015 	stw	r2,0(r5)
 40093a0:	f800283a 	ret
 40093a4:	00803fc4 	movi	r2,255
 40093a8:	18800826 	beq	r3,r2,40093cc <__unpack_f+0x98>
 40093ac:	380491fa 	slli	r2,r7,7
 40093b0:	18ffe044 	addi	r3,r3,-127
 40093b4:	28c00215 	stw	r3,8(r5)
 40093b8:	10900034 	orhi	r2,r2,16384
 40093bc:	28800315 	stw	r2,12(r5)
 40093c0:	008000c4 	movi	r2,3
 40093c4:	28800015 	stw	r2,0(r5)
 40093c8:	f800283a 	ret
 40093cc:	3800031e 	bne	r7,zero,40093dc <__unpack_f+0xa8>
 40093d0:	00800104 	movi	r2,4
 40093d4:	28800015 	stw	r2,0(r5)
 40093d8:	f800283a 	ret
 40093dc:	3080042c 	andhi	r2,r6,16
 40093e0:	10000426 	beq	r2,zero,40093f4 <__unpack_f+0xc0>
 40093e4:	00800044 	movi	r2,1
 40093e8:	28800015 	stw	r2,0(r5)
 40093ec:	29c00315 	stw	r7,12(r5)
 40093f0:	f800283a 	ret
 40093f4:	28000015 	stw	zero,0(r5)
 40093f8:	003ffc06 	br	40093ec <__unpack_f+0xb8>

040093fc <__fpcmp_parts_f>:
 40093fc:	21800017 	ldw	r6,0(r4)
 4009400:	00c00044 	movi	r3,1
 4009404:	19800a2e 	bgeu	r3,r6,4009430 <__fpcmp_parts_f+0x34>
 4009408:	28800017 	ldw	r2,0(r5)
 400940c:	1880082e 	bgeu	r3,r2,4009430 <__fpcmp_parts_f+0x34>
 4009410:	00c00104 	movi	r3,4
 4009414:	30c01e26 	beq	r6,r3,4009490 <__fpcmp_parts_f+0x94>
 4009418:	10c01a26 	beq	r2,r3,4009484 <__fpcmp_parts_f+0x88>
 400941c:	00c00084 	movi	r3,2
 4009420:	30c00526 	beq	r6,r3,4009438 <__fpcmp_parts_f+0x3c>
 4009424:	10c0071e 	bne	r2,r3,4009444 <__fpcmp_parts_f+0x48>
 4009428:	20800117 	ldw	r2,4(r4)
 400942c:	1000091e 	bne	r2,zero,4009454 <__fpcmp_parts_f+0x58>
 4009430:	00800044 	movi	r2,1
 4009434:	f800283a 	ret
 4009438:	10c0121e 	bne	r2,r3,4009484 <__fpcmp_parts_f+0x88>
 400943c:	0005883a 	mov	r2,zero
 4009440:	f800283a 	ret
 4009444:	20c00117 	ldw	r3,4(r4)
 4009448:	28800117 	ldw	r2,4(r5)
 400944c:	18800326 	beq	r3,r2,400945c <__fpcmp_parts_f+0x60>
 4009450:	183ff726 	beq	r3,zero,4009430 <__fpcmp_parts_f+0x34>
 4009454:	00bfffc4 	movi	r2,-1
 4009458:	f800283a 	ret
 400945c:	21800217 	ldw	r6,8(r4)
 4009460:	28800217 	ldw	r2,8(r5)
 4009464:	11bffa16 	blt	r2,r6,4009450 <__fpcmp_parts_f+0x54>
 4009468:	30800416 	blt	r6,r2,400947c <__fpcmp_parts_f+0x80>
 400946c:	21000317 	ldw	r4,12(r4)
 4009470:	29400317 	ldw	r5,12(r5)
 4009474:	293ff636 	bltu	r5,r4,4009450 <__fpcmp_parts_f+0x54>
 4009478:	217ff02e 	bgeu	r4,r5,400943c <__fpcmp_parts_f+0x40>
 400947c:	183fec1e 	bne	r3,zero,4009430 <__fpcmp_parts_f+0x34>
 4009480:	003ff406 	br	4009454 <__fpcmp_parts_f+0x58>
 4009484:	28800117 	ldw	r2,4(r5)
 4009488:	103fe91e 	bne	r2,zero,4009430 <__fpcmp_parts_f+0x34>
 400948c:	003ff106 	br	4009454 <__fpcmp_parts_f+0x58>
 4009490:	11bfe51e 	bne	r2,r6,4009428 <__fpcmp_parts_f+0x2c>
 4009494:	28c00117 	ldw	r3,4(r5)
 4009498:	20800117 	ldw	r2,4(r4)
 400949c:	1885c83a 	sub	r2,r3,r2
 40094a0:	f800283a 	ret

040094a4 <__make_fp>:
 40094a4:	defffb04 	addi	sp,sp,-20
 40094a8:	d9000015 	stw	r4,0(sp)
 40094ac:	d809883a 	mov	r4,sp
 40094b0:	dfc00415 	stw	ra,16(sp)
 40094b4:	d9400115 	stw	r5,4(sp)
 40094b8:	d9800215 	stw	r6,8(sp)
 40094bc:	d9c00315 	stw	r7,12(sp)
 40094c0:	40091d40 	call	40091d4 <__pack_f>
 40094c4:	dfc00417 	ldw	ra,16(sp)
 40094c8:	dec00504 	addi	sp,sp,20
 40094cc:	f800283a 	ret

040094d0 <__pack_d>:
 40094d0:	20c00017 	ldw	r3,0(r4)
 40094d4:	defffd04 	addi	sp,sp,-12
 40094d8:	dc000015 	stw	r16,0(sp)
 40094dc:	dc800215 	stw	r18,8(sp)
 40094e0:	dc400115 	stw	r17,4(sp)
 40094e4:	00800044 	movi	r2,1
 40094e8:	22000317 	ldw	r8,12(r4)
 40094ec:	001f883a 	mov	r15,zero
 40094f0:	22400417 	ldw	r9,16(r4)
 40094f4:	24000117 	ldw	r16,4(r4)
 40094f8:	10c0552e 	bgeu	r2,r3,4009650 <__pack_d+0x180>
 40094fc:	00800104 	movi	r2,4
 4009500:	18804f26 	beq	r3,r2,4009640 <__pack_d+0x170>
 4009504:	00800084 	movi	r2,2
 4009508:	18800226 	beq	r3,r2,4009514 <__pack_d+0x44>
 400950c:	4244b03a 	or	r2,r8,r9
 4009510:	10001a1e 	bne	r2,zero,400957c <__pack_d+0xac>
 4009514:	000d883a 	mov	r6,zero
 4009518:	000f883a 	mov	r7,zero
 400951c:	0011883a 	mov	r8,zero
 4009520:	00800434 	movhi	r2,16
 4009524:	10bfffc4 	addi	r2,r2,-1
 4009528:	301d883a 	mov	r14,r6
 400952c:	3884703a 	and	r2,r7,r2
 4009530:	400a953a 	slli	r5,r8,20
 4009534:	79bffc2c 	andhi	r6,r15,65520
 4009538:	308cb03a 	or	r6,r6,r2
 400953c:	00e00434 	movhi	r3,32784
 4009540:	18ffffc4 	addi	r3,r3,-1
 4009544:	800497fa 	slli	r2,r16,31
 4009548:	30c6703a 	and	r3,r6,r3
 400954c:	1946b03a 	or	r3,r3,r5
 4009550:	01600034 	movhi	r5,32768
 4009554:	297fffc4 	addi	r5,r5,-1
 4009558:	194a703a 	and	r5,r3,r5
 400955c:	288ab03a 	or	r5,r5,r2
 4009560:	2807883a 	mov	r3,r5
 4009564:	7005883a 	mov	r2,r14
 4009568:	dc800217 	ldw	r18,8(sp)
 400956c:	dc400117 	ldw	r17,4(sp)
 4009570:	dc000017 	ldw	r16,0(sp)
 4009574:	dec00304 	addi	sp,sp,12
 4009578:	f800283a 	ret
 400957c:	21000217 	ldw	r4,8(r4)
 4009580:	00bf0084 	movi	r2,-1022
 4009584:	20803f16 	blt	r4,r2,4009684 <__pack_d+0x1b4>
 4009588:	0080ffc4 	movi	r2,1023
 400958c:	11002c16 	blt	r2,r4,4009640 <__pack_d+0x170>
 4009590:	00803fc4 	movi	r2,255
 4009594:	408c703a 	and	r6,r8,r2
 4009598:	00802004 	movi	r2,128
 400959c:	0007883a 	mov	r3,zero
 40095a0:	000f883a 	mov	r7,zero
 40095a4:	2280ffc4 	addi	r10,r4,1023
 40095a8:	30801e26 	beq	r6,r2,4009624 <__pack_d+0x154>
 40095ac:	00801fc4 	movi	r2,127
 40095b0:	4089883a 	add	r4,r8,r2
 40095b4:	220d803a 	cmpltu	r6,r4,r8
 40095b8:	324d883a 	add	r6,r6,r9
 40095bc:	2011883a 	mov	r8,r4
 40095c0:	3013883a 	mov	r9,r6
 40095c4:	00880034 	movhi	r2,8192
 40095c8:	10bfffc4 	addi	r2,r2,-1
 40095cc:	12400d36 	bltu	r2,r9,4009604 <__pack_d+0x134>
 40095d0:	4804963a 	slli	r2,r9,24
 40095d4:	400cd23a 	srli	r6,r8,8
 40095d8:	480ed23a 	srli	r7,r9,8
 40095dc:	013fffc4 	movi	r4,-1
 40095e0:	118cb03a 	or	r6,r2,r6
 40095e4:	01400434 	movhi	r5,16
 40095e8:	297fffc4 	addi	r5,r5,-1
 40095ec:	3104703a 	and	r2,r6,r4
 40095f0:	3946703a 	and	r3,r7,r5
 40095f4:	5201ffcc 	andi	r8,r10,2047
 40095f8:	100d883a 	mov	r6,r2
 40095fc:	180f883a 	mov	r7,r3
 4009600:	003fc706 	br	4009520 <__pack_d+0x50>
 4009604:	480897fa 	slli	r4,r9,31
 4009608:	4004d07a 	srli	r2,r8,1
 400960c:	4806d07a 	srli	r3,r9,1
 4009610:	52800044 	addi	r10,r10,1
 4009614:	2084b03a 	or	r2,r4,r2
 4009618:	1011883a 	mov	r8,r2
 400961c:	1813883a 	mov	r9,r3
 4009620:	003feb06 	br	40095d0 <__pack_d+0x100>
 4009624:	383fe11e 	bne	r7,zero,40095ac <__pack_d+0xdc>
 4009628:	01004004 	movi	r4,256
 400962c:	4104703a 	and	r2,r8,r4
 4009630:	10c4b03a 	or	r2,r2,r3
 4009634:	103fe326 	beq	r2,zero,40095c4 <__pack_d+0xf4>
 4009638:	3005883a 	mov	r2,r6
 400963c:	003fdc06 	br	40095b0 <__pack_d+0xe0>
 4009640:	000d883a 	mov	r6,zero
 4009644:	000f883a 	mov	r7,zero
 4009648:	0201ffc4 	movi	r8,2047
 400964c:	003fb406 	br	4009520 <__pack_d+0x50>
 4009650:	0005883a 	mov	r2,zero
 4009654:	00c00234 	movhi	r3,8
 4009658:	408cb03a 	or	r6,r8,r2
 400965c:	48ceb03a 	or	r7,r9,r3
 4009660:	013fffc4 	movi	r4,-1
 4009664:	01400434 	movhi	r5,16
 4009668:	297fffc4 	addi	r5,r5,-1
 400966c:	3104703a 	and	r2,r6,r4
 4009670:	3946703a 	and	r3,r7,r5
 4009674:	100d883a 	mov	r6,r2
 4009678:	180f883a 	mov	r7,r3
 400967c:	0201ffc4 	movi	r8,2047
 4009680:	003fa706 	br	4009520 <__pack_d+0x50>
 4009684:	1109c83a 	sub	r4,r2,r4
 4009688:	00800e04 	movi	r2,56
 400968c:	11004316 	blt	r2,r4,400979c <__pack_d+0x2cc>
 4009690:	21fff804 	addi	r7,r4,-32
 4009694:	38004516 	blt	r7,zero,40097ac <__pack_d+0x2dc>
 4009698:	49d8d83a 	srl	r12,r9,r7
 400969c:	001b883a 	mov	r13,zero
 40096a0:	0023883a 	mov	r17,zero
 40096a4:	01400044 	movi	r5,1
 40096a8:	0025883a 	mov	r18,zero
 40096ac:	38004716 	blt	r7,zero,40097cc <__pack_d+0x2fc>
 40096b0:	29d6983a 	sll	r11,r5,r7
 40096b4:	0015883a 	mov	r10,zero
 40096b8:	00bfffc4 	movi	r2,-1
 40096bc:	5089883a 	add	r4,r10,r2
 40096c0:	588b883a 	add	r5,r11,r2
 40096c4:	228d803a 	cmpltu	r6,r4,r10
 40096c8:	314b883a 	add	r5,r6,r5
 40096cc:	4104703a 	and	r2,r8,r4
 40096d0:	4946703a 	and	r3,r9,r5
 40096d4:	10c4b03a 	or	r2,r2,r3
 40096d8:	10000226 	beq	r2,zero,40096e4 <__pack_d+0x214>
 40096dc:	04400044 	movi	r17,1
 40096e0:	0025883a 	mov	r18,zero
 40096e4:	00803fc4 	movi	r2,255
 40096e8:	644eb03a 	or	r7,r12,r17
 40096ec:	3892703a 	and	r9,r7,r2
 40096f0:	00802004 	movi	r2,128
 40096f4:	6c90b03a 	or	r8,r13,r18
 40096f8:	0015883a 	mov	r10,zero
 40096fc:	48801626 	beq	r9,r2,4009758 <__pack_d+0x288>
 4009700:	01001fc4 	movi	r4,127
 4009704:	3905883a 	add	r2,r7,r4
 4009708:	11cd803a 	cmpltu	r6,r2,r7
 400970c:	320d883a 	add	r6,r6,r8
 4009710:	100f883a 	mov	r7,r2
 4009714:	00840034 	movhi	r2,4096
 4009718:	10bfffc4 	addi	r2,r2,-1
 400971c:	3011883a 	mov	r8,r6
 4009720:	0007883a 	mov	r3,zero
 4009724:	11801b36 	bltu	r2,r6,4009794 <__pack_d+0x2c4>
 4009728:	4004963a 	slli	r2,r8,24
 400972c:	3808d23a 	srli	r4,r7,8
 4009730:	400ad23a 	srli	r5,r8,8
 4009734:	1813883a 	mov	r9,r3
 4009738:	1108b03a 	or	r4,r2,r4
 400973c:	00bfffc4 	movi	r2,-1
 4009740:	00c00434 	movhi	r3,16
 4009744:	18ffffc4 	addi	r3,r3,-1
 4009748:	208c703a 	and	r6,r4,r2
 400974c:	28ce703a 	and	r7,r5,r3
 4009750:	4a01ffcc 	andi	r8,r9,2047
 4009754:	003f7206 	br	4009520 <__pack_d+0x50>
 4009758:	503fe91e 	bne	r10,zero,4009700 <__pack_d+0x230>
 400975c:	01004004 	movi	r4,256
 4009760:	3904703a 	and	r2,r7,r4
 4009764:	0007883a 	mov	r3,zero
 4009768:	10c4b03a 	or	r2,r2,r3
 400976c:	10000626 	beq	r2,zero,4009788 <__pack_d+0x2b8>
 4009770:	3a45883a 	add	r2,r7,r9
 4009774:	11cd803a 	cmpltu	r6,r2,r7
 4009778:	320d883a 	add	r6,r6,r8
 400977c:	100f883a 	mov	r7,r2
 4009780:	3011883a 	mov	r8,r6
 4009784:	0007883a 	mov	r3,zero
 4009788:	00840034 	movhi	r2,4096
 400978c:	10bfffc4 	addi	r2,r2,-1
 4009790:	123fe52e 	bgeu	r2,r8,4009728 <__pack_d+0x258>
 4009794:	00c00044 	movi	r3,1
 4009798:	003fe306 	br	4009728 <__pack_d+0x258>
 400979c:	0009883a 	mov	r4,zero
 40097a0:	0013883a 	mov	r9,zero
 40097a4:	000b883a 	mov	r5,zero
 40097a8:	003fe406 	br	400973c <__pack_d+0x26c>
 40097ac:	4a47883a 	add	r3,r9,r9
 40097b0:	008007c4 	movi	r2,31
 40097b4:	1105c83a 	sub	r2,r2,r4
 40097b8:	1886983a 	sll	r3,r3,r2
 40097bc:	4118d83a 	srl	r12,r8,r4
 40097c0:	491ad83a 	srl	r13,r9,r4
 40097c4:	1b18b03a 	or	r12,r3,r12
 40097c8:	003fb506 	br	40096a0 <__pack_d+0x1d0>
 40097cc:	2806d07a 	srli	r3,r5,1
 40097d0:	008007c4 	movi	r2,31
 40097d4:	1105c83a 	sub	r2,r2,r4
 40097d8:	1896d83a 	srl	r11,r3,r2
 40097dc:	2914983a 	sll	r10,r5,r4
 40097e0:	003fb506 	br	40096b8 <__pack_d+0x1e8>

040097e4 <__unpack_d>:
 40097e4:	20c00117 	ldw	r3,4(r4)
 40097e8:	22400017 	ldw	r9,0(r4)
 40097ec:	00800434 	movhi	r2,16
 40097f0:	10bfffc4 	addi	r2,r2,-1
 40097f4:	1808d53a 	srli	r4,r3,20
 40097f8:	180cd7fa 	srli	r6,r3,31
 40097fc:	1894703a 	and	r10,r3,r2
 4009800:	2201ffcc 	andi	r8,r4,2047
 4009804:	281b883a 	mov	r13,r5
 4009808:	4817883a 	mov	r11,r9
 400980c:	29800115 	stw	r6,4(r5)
 4009810:	5019883a 	mov	r12,r10
 4009814:	40001e1e 	bne	r8,zero,4009890 <__unpack_d+0xac>
 4009818:	4a84b03a 	or	r2,r9,r10
 400981c:	10001926 	beq	r2,zero,4009884 <__unpack_d+0xa0>
 4009820:	4804d63a 	srli	r2,r9,24
 4009824:	500c923a 	slli	r6,r10,8
 4009828:	013f0084 	movi	r4,-1022
 400982c:	00c40034 	movhi	r3,4096
 4009830:	18ffffc4 	addi	r3,r3,-1
 4009834:	118cb03a 	or	r6,r2,r6
 4009838:	008000c4 	movi	r2,3
 400983c:	480a923a 	slli	r5,r9,8
 4009840:	68800015 	stw	r2,0(r13)
 4009844:	69000215 	stw	r4,8(r13)
 4009848:	19800b36 	bltu	r3,r6,4009878 <__unpack_d+0x94>
 400984c:	200f883a 	mov	r7,r4
 4009850:	1811883a 	mov	r8,r3
 4009854:	2945883a 	add	r2,r5,r5
 4009858:	1149803a 	cmpltu	r4,r2,r5
 400985c:	3187883a 	add	r3,r6,r6
 4009860:	20c9883a 	add	r4,r4,r3
 4009864:	100b883a 	mov	r5,r2
 4009868:	200d883a 	mov	r6,r4
 400986c:	39ffffc4 	addi	r7,r7,-1
 4009870:	413ff82e 	bgeu	r8,r4,4009854 <__unpack_d+0x70>
 4009874:	69c00215 	stw	r7,8(r13)
 4009878:	69800415 	stw	r6,16(r13)
 400987c:	69400315 	stw	r5,12(r13)
 4009880:	f800283a 	ret
 4009884:	00800084 	movi	r2,2
 4009888:	28800015 	stw	r2,0(r5)
 400988c:	f800283a 	ret
 4009890:	0081ffc4 	movi	r2,2047
 4009894:	40800f26 	beq	r8,r2,40098d4 <__unpack_d+0xf0>
 4009898:	480cd63a 	srli	r6,r9,24
 400989c:	5006923a 	slli	r3,r10,8
 40098a0:	4804923a 	slli	r2,r9,8
 40098a4:	0009883a 	mov	r4,zero
 40098a8:	30c6b03a 	or	r3,r6,r3
 40098ac:	01440034 	movhi	r5,4096
 40098b0:	110cb03a 	or	r6,r2,r4
 40098b4:	423f0044 	addi	r8,r8,-1023
 40098b8:	194eb03a 	or	r7,r3,r5
 40098bc:	008000c4 	movi	r2,3
 40098c0:	69c00415 	stw	r7,16(r13)
 40098c4:	6a000215 	stw	r8,8(r13)
 40098c8:	68800015 	stw	r2,0(r13)
 40098cc:	69800315 	stw	r6,12(r13)
 40098d0:	f800283a 	ret
 40098d4:	4a84b03a 	or	r2,r9,r10
 40098d8:	1000031e 	bne	r2,zero,40098e8 <__unpack_d+0x104>
 40098dc:	00800104 	movi	r2,4
 40098e0:	28800015 	stw	r2,0(r5)
 40098e4:	f800283a 	ret
 40098e8:	0009883a 	mov	r4,zero
 40098ec:	01400234 	movhi	r5,8
 40098f0:	4904703a 	and	r2,r9,r4
 40098f4:	5146703a 	and	r3,r10,r5
 40098f8:	10c4b03a 	or	r2,r2,r3
 40098fc:	10000526 	beq	r2,zero,4009914 <__unpack_d+0x130>
 4009900:	00800044 	movi	r2,1
 4009904:	68800015 	stw	r2,0(r13)
 4009908:	6b000415 	stw	r12,16(r13)
 400990c:	6ac00315 	stw	r11,12(r13)
 4009910:	f800283a 	ret
 4009914:	68000015 	stw	zero,0(r13)
 4009918:	003ffb06 	br	4009908 <__unpack_d+0x124>

0400991c <__fpcmp_parts_d>:
 400991c:	21800017 	ldw	r6,0(r4)
 4009920:	00c00044 	movi	r3,1
 4009924:	19800a2e 	bgeu	r3,r6,4009950 <__fpcmp_parts_d+0x34>
 4009928:	28800017 	ldw	r2,0(r5)
 400992c:	1880082e 	bgeu	r3,r2,4009950 <__fpcmp_parts_d+0x34>
 4009930:	00c00104 	movi	r3,4
 4009934:	30c02626 	beq	r6,r3,40099d0 <__fpcmp_parts_d+0xb4>
 4009938:	10c02226 	beq	r2,r3,40099c4 <__fpcmp_parts_d+0xa8>
 400993c:	00c00084 	movi	r3,2
 4009940:	30c00526 	beq	r6,r3,4009958 <__fpcmp_parts_d+0x3c>
 4009944:	10c0071e 	bne	r2,r3,4009964 <__fpcmp_parts_d+0x48>
 4009948:	20800117 	ldw	r2,4(r4)
 400994c:	1000091e 	bne	r2,zero,4009974 <__fpcmp_parts_d+0x58>
 4009950:	00800044 	movi	r2,1
 4009954:	f800283a 	ret
 4009958:	10c01a1e 	bne	r2,r3,40099c4 <__fpcmp_parts_d+0xa8>
 400995c:	0005883a 	mov	r2,zero
 4009960:	f800283a 	ret
 4009964:	22000117 	ldw	r8,4(r4)
 4009968:	28800117 	ldw	r2,4(r5)
 400996c:	40800326 	beq	r8,r2,400997c <__fpcmp_parts_d+0x60>
 4009970:	403ff726 	beq	r8,zero,4009950 <__fpcmp_parts_d+0x34>
 4009974:	00bfffc4 	movi	r2,-1
 4009978:	f800283a 	ret
 400997c:	20c00217 	ldw	r3,8(r4)
 4009980:	28800217 	ldw	r2,8(r5)
 4009984:	10fffa16 	blt	r2,r3,4009970 <__fpcmp_parts_d+0x54>
 4009988:	18800916 	blt	r3,r2,40099b0 <__fpcmp_parts_d+0x94>
 400998c:	21c00417 	ldw	r7,16(r4)
 4009990:	28c00417 	ldw	r3,16(r5)
 4009994:	21800317 	ldw	r6,12(r4)
 4009998:	28800317 	ldw	r2,12(r5)
 400999c:	19fff436 	bltu	r3,r7,4009970 <__fpcmp_parts_d+0x54>
 40099a0:	38c00526 	beq	r7,r3,40099b8 <__fpcmp_parts_d+0x9c>
 40099a4:	38c00236 	bltu	r7,r3,40099b0 <__fpcmp_parts_d+0x94>
 40099a8:	19ffec1e 	bne	r3,r7,400995c <__fpcmp_parts_d+0x40>
 40099ac:	30bfeb2e 	bgeu	r6,r2,400995c <__fpcmp_parts_d+0x40>
 40099b0:	403fe71e 	bne	r8,zero,4009950 <__fpcmp_parts_d+0x34>
 40099b4:	003fef06 	br	4009974 <__fpcmp_parts_d+0x58>
 40099b8:	11bffa2e 	bgeu	r2,r6,40099a4 <__fpcmp_parts_d+0x88>
 40099bc:	403fe426 	beq	r8,zero,4009950 <__fpcmp_parts_d+0x34>
 40099c0:	003fec06 	br	4009974 <__fpcmp_parts_d+0x58>
 40099c4:	28800117 	ldw	r2,4(r5)
 40099c8:	103fe11e 	bne	r2,zero,4009950 <__fpcmp_parts_d+0x34>
 40099cc:	003fe906 	br	4009974 <__fpcmp_parts_d+0x58>
 40099d0:	11bfdd1e 	bne	r2,r6,4009948 <__fpcmp_parts_d+0x2c>
 40099d4:	28c00117 	ldw	r3,4(r5)
 40099d8:	20800117 	ldw	r2,4(r4)
 40099dc:	1885c83a 	sub	r2,r3,r2
 40099e0:	f800283a 	ret

040099e4 <__errno>:
 40099e4:	00c100b4 	movhi	r3,1026
 40099e8:	18da4904 	addi	r3,r3,26916
 40099ec:	18800017 	ldw	r2,0(r3)
 40099f0:	f800283a 	ret

040099f4 <free>:
 40099f4:	008100b4 	movhi	r2,1026
 40099f8:	109a4904 	addi	r2,r2,26916
 40099fc:	200b883a 	mov	r5,r4
 4009a00:	11000017 	ldw	r4,0(r2)
 4009a04:	400fc801 	jmpi	400fc80 <_free_r>

04009a08 <malloc>:
 4009a08:	008100b4 	movhi	r2,1026
 4009a0c:	109a4904 	addi	r2,r2,26916
 4009a10:	200b883a 	mov	r5,r4
 4009a14:	11000017 	ldw	r4,0(r2)
 4009a18:	4009a1c1 	jmpi	4009a1c <_malloc_r>

04009a1c <_malloc_r>:
 4009a1c:	defff604 	addi	sp,sp,-40
 4009a20:	28c002c4 	addi	r3,r5,11
 4009a24:	00800584 	movi	r2,22
 4009a28:	dc800215 	stw	r18,8(sp)
 4009a2c:	dfc00915 	stw	ra,36(sp)
 4009a30:	df000815 	stw	fp,32(sp)
 4009a34:	ddc00715 	stw	r23,28(sp)
 4009a38:	dd800615 	stw	r22,24(sp)
 4009a3c:	dd400515 	stw	r21,20(sp)
 4009a40:	dd000415 	stw	r20,16(sp)
 4009a44:	dcc00315 	stw	r19,12(sp)
 4009a48:	dc400115 	stw	r17,4(sp)
 4009a4c:	dc000015 	stw	r16,0(sp)
 4009a50:	2025883a 	mov	r18,r4
 4009a54:	10c01236 	bltu	r2,r3,4009aa0 <_malloc_r+0x84>
 4009a58:	04400404 	movi	r17,16
 4009a5c:	8940142e 	bgeu	r17,r5,4009ab0 <_malloc_r+0x94>
 4009a60:	00800304 	movi	r2,12
 4009a64:	0007883a 	mov	r3,zero
 4009a68:	90800015 	stw	r2,0(r18)
 4009a6c:	1805883a 	mov	r2,r3
 4009a70:	dfc00917 	ldw	ra,36(sp)
 4009a74:	df000817 	ldw	fp,32(sp)
 4009a78:	ddc00717 	ldw	r23,28(sp)
 4009a7c:	dd800617 	ldw	r22,24(sp)
 4009a80:	dd400517 	ldw	r21,20(sp)
 4009a84:	dd000417 	ldw	r20,16(sp)
 4009a88:	dcc00317 	ldw	r19,12(sp)
 4009a8c:	dc800217 	ldw	r18,8(sp)
 4009a90:	dc400117 	ldw	r17,4(sp)
 4009a94:	dc000017 	ldw	r16,0(sp)
 4009a98:	dec00a04 	addi	sp,sp,40
 4009a9c:	f800283a 	ret
 4009aa0:	00bffe04 	movi	r2,-8
 4009aa4:	18a2703a 	and	r17,r3,r2
 4009aa8:	883fed16 	blt	r17,zero,4009a60 <_malloc_r+0x44>
 4009aac:	897fec36 	bltu	r17,r5,4009a60 <_malloc_r+0x44>
 4009ab0:	9009883a 	mov	r4,r18
 4009ab4:	4017dd40 	call	4017dd4 <__malloc_lock>
 4009ab8:	00807dc4 	movi	r2,503
 4009abc:	14402b2e 	bgeu	r2,r17,4009b6c <_malloc_r+0x150>
 4009ac0:	8806d27a 	srli	r3,r17,9
 4009ac4:	18003f1e 	bne	r3,zero,4009bc4 <_malloc_r+0x1a8>
 4009ac8:	880cd0fa 	srli	r6,r17,3
 4009acc:	300490fa 	slli	r2,r6,3
 4009ad0:	02c100b4 	movhi	r11,1026
 4009ad4:	5ad48204 	addi	r11,r11,21000
 4009ad8:	12cb883a 	add	r5,r2,r11
 4009adc:	2c000317 	ldw	r16,12(r5)
 4009ae0:	580f883a 	mov	r7,r11
 4009ae4:	2c00041e 	bne	r5,r16,4009af8 <_malloc_r+0xdc>
 4009ae8:	00000a06 	br	4009b14 <_malloc_r+0xf8>
 4009aec:	1800860e 	bge	r3,zero,4009d08 <_malloc_r+0x2ec>
 4009af0:	84000317 	ldw	r16,12(r16)
 4009af4:	2c000726 	beq	r5,r16,4009b14 <_malloc_r+0xf8>
 4009af8:	80800117 	ldw	r2,4(r16)
 4009afc:	00ffff04 	movi	r3,-4
 4009b00:	10c8703a 	and	r4,r2,r3
 4009b04:	2447c83a 	sub	r3,r4,r17
 4009b08:	008003c4 	movi	r2,15
 4009b0c:	10fff70e 	bge	r2,r3,4009aec <_malloc_r+0xd0>
 4009b10:	31bfffc4 	addi	r6,r6,-1
 4009b14:	32400044 	addi	r9,r6,1
 4009b18:	028100b4 	movhi	r10,1026
 4009b1c:	52948404 	addi	r10,r10,21008
 4009b20:	54000217 	ldw	r16,8(r10)
 4009b24:	8280a026 	beq	r16,r10,4009da8 <_malloc_r+0x38c>
 4009b28:	80800117 	ldw	r2,4(r16)
 4009b2c:	00ffff04 	movi	r3,-4
 4009b30:	10ca703a 	and	r5,r2,r3
 4009b34:	2c4dc83a 	sub	r6,r5,r17
 4009b38:	008003c4 	movi	r2,15
 4009b3c:	11808316 	blt	r2,r6,4009d4c <_malloc_r+0x330>
 4009b40:	52800315 	stw	r10,12(r10)
 4009b44:	52800215 	stw	r10,8(r10)
 4009b48:	30002916 	blt	r6,zero,4009bf0 <_malloc_r+0x1d4>
 4009b4c:	8147883a 	add	r3,r16,r5
 4009b50:	18800117 	ldw	r2,4(r3)
 4009b54:	9009883a 	mov	r4,r18
 4009b58:	10800054 	ori	r2,r2,1
 4009b5c:	18800115 	stw	r2,4(r3)
 4009b60:	4017edc0 	call	4017edc <__malloc_unlock>
 4009b64:	80c00204 	addi	r3,r16,8
 4009b68:	003fc006 	br	4009a6c <_malloc_r+0x50>
 4009b6c:	02c100b4 	movhi	r11,1026
 4009b70:	5ad48204 	addi	r11,r11,21000
 4009b74:	8ac5883a 	add	r2,r17,r11
 4009b78:	14000317 	ldw	r16,12(r2)
 4009b7c:	580f883a 	mov	r7,r11
 4009b80:	8806d0fa 	srli	r3,r17,3
 4009b84:	14006c26 	beq	r2,r16,4009d38 <_malloc_r+0x31c>
 4009b88:	80c00117 	ldw	r3,4(r16)
 4009b8c:	00bfff04 	movi	r2,-4
 4009b90:	81800317 	ldw	r6,12(r16)
 4009b94:	1886703a 	and	r3,r3,r2
 4009b98:	80c7883a 	add	r3,r16,r3
 4009b9c:	18800117 	ldw	r2,4(r3)
 4009ba0:	81400217 	ldw	r5,8(r16)
 4009ba4:	9009883a 	mov	r4,r18
 4009ba8:	10800054 	ori	r2,r2,1
 4009bac:	18800115 	stw	r2,4(r3)
 4009bb0:	31400215 	stw	r5,8(r6)
 4009bb4:	29800315 	stw	r6,12(r5)
 4009bb8:	4017edc0 	call	4017edc <__malloc_unlock>
 4009bbc:	80c00204 	addi	r3,r16,8
 4009bc0:	003faa06 	br	4009a6c <_malloc_r+0x50>
 4009bc4:	00800104 	movi	r2,4
 4009bc8:	10c0052e 	bgeu	r2,r3,4009be0 <_malloc_r+0x1c4>
 4009bcc:	00800504 	movi	r2,20
 4009bd0:	10c07836 	bltu	r2,r3,4009db4 <_malloc_r+0x398>
 4009bd4:	198016c4 	addi	r6,r3,91
 4009bd8:	300490fa 	slli	r2,r6,3
 4009bdc:	003fbc06 	br	4009ad0 <_malloc_r+0xb4>
 4009be0:	8804d1ba 	srli	r2,r17,6
 4009be4:	11800e04 	addi	r6,r2,56
 4009be8:	300490fa 	slli	r2,r6,3
 4009bec:	003fb806 	br	4009ad0 <_malloc_r+0xb4>
 4009bf0:	00807fc4 	movi	r2,511
 4009bf4:	1140bb36 	bltu	r2,r5,4009ee4 <_malloc_r+0x4c8>
 4009bf8:	2806d0fa 	srli	r3,r5,3
 4009bfc:	573ffe04 	addi	fp,r10,-8
 4009c00:	00800044 	movi	r2,1
 4009c04:	180890fa 	slli	r4,r3,3
 4009c08:	1807d0ba 	srai	r3,r3,2
 4009c0c:	e1c00117 	ldw	r7,4(fp)
 4009c10:	5909883a 	add	r4,r11,r4
 4009c14:	21400217 	ldw	r5,8(r4)
 4009c18:	10c4983a 	sll	r2,r2,r3
 4009c1c:	81000315 	stw	r4,12(r16)
 4009c20:	81400215 	stw	r5,8(r16)
 4009c24:	388eb03a 	or	r7,r7,r2
 4009c28:	2c000315 	stw	r16,12(r5)
 4009c2c:	24000215 	stw	r16,8(r4)
 4009c30:	e1c00115 	stw	r7,4(fp)
 4009c34:	4807883a 	mov	r3,r9
 4009c38:	4800cd16 	blt	r9,zero,4009f70 <_malloc_r+0x554>
 4009c3c:	1807d0ba 	srai	r3,r3,2
 4009c40:	00800044 	movi	r2,1
 4009c44:	10c8983a 	sll	r4,r2,r3
 4009c48:	39004436 	bltu	r7,r4,4009d5c <_malloc_r+0x340>
 4009c4c:	21c4703a 	and	r2,r4,r7
 4009c50:	10000a1e 	bne	r2,zero,4009c7c <_malloc_r+0x260>
 4009c54:	2109883a 	add	r4,r4,r4
 4009c58:	00bfff04 	movi	r2,-4
 4009c5c:	4884703a 	and	r2,r9,r2
 4009c60:	3906703a 	and	r3,r7,r4
 4009c64:	12400104 	addi	r9,r2,4
 4009c68:	1800041e 	bne	r3,zero,4009c7c <_malloc_r+0x260>
 4009c6c:	2109883a 	add	r4,r4,r4
 4009c70:	3904703a 	and	r2,r7,r4
 4009c74:	4a400104 	addi	r9,r9,4
 4009c78:	103ffc26 	beq	r2,zero,4009c6c <_malloc_r+0x250>
 4009c7c:	480490fa 	slli	r2,r9,3
 4009c80:	4819883a 	mov	r12,r9
 4009c84:	023fff04 	movi	r8,-4
 4009c88:	589b883a 	add	r13,r11,r2
 4009c8c:	6807883a 	mov	r3,r13
 4009c90:	014003c4 	movi	r5,15
 4009c94:	1c000317 	ldw	r16,12(r3)
 4009c98:	1c00041e 	bne	r3,r16,4009cac <_malloc_r+0x290>
 4009c9c:	0000a706 	br	4009f3c <_malloc_r+0x520>
 4009ca0:	3000ab0e 	bge	r6,zero,4009f50 <_malloc_r+0x534>
 4009ca4:	84000317 	ldw	r16,12(r16)
 4009ca8:	1c00a426 	beq	r3,r16,4009f3c <_malloc_r+0x520>
 4009cac:	80800117 	ldw	r2,4(r16)
 4009cb0:	1204703a 	and	r2,r2,r8
 4009cb4:	144dc83a 	sub	r6,r2,r17
 4009cb8:	29bff90e 	bge	r5,r6,4009ca0 <_malloc_r+0x284>
 4009cbc:	81000317 	ldw	r4,12(r16)
 4009cc0:	80c00217 	ldw	r3,8(r16)
 4009cc4:	89400054 	ori	r5,r17,1
 4009cc8:	8445883a 	add	r2,r16,r17
 4009ccc:	20c00215 	stw	r3,8(r4)
 4009cd0:	19000315 	stw	r4,12(r3)
 4009cd4:	81400115 	stw	r5,4(r16)
 4009cd8:	1187883a 	add	r3,r2,r6
 4009cdc:	31000054 	ori	r4,r6,1
 4009ce0:	50800315 	stw	r2,12(r10)
 4009ce4:	50800215 	stw	r2,8(r10)
 4009ce8:	19800015 	stw	r6,0(r3)
 4009cec:	11000115 	stw	r4,4(r2)
 4009cf0:	12800215 	stw	r10,8(r2)
 4009cf4:	12800315 	stw	r10,12(r2)
 4009cf8:	9009883a 	mov	r4,r18
 4009cfc:	4017edc0 	call	4017edc <__malloc_unlock>
 4009d00:	80c00204 	addi	r3,r16,8
 4009d04:	003f5906 	br	4009a6c <_malloc_r+0x50>
 4009d08:	8109883a 	add	r4,r16,r4
 4009d0c:	20800117 	ldw	r2,4(r4)
 4009d10:	80c00217 	ldw	r3,8(r16)
 4009d14:	81400317 	ldw	r5,12(r16)
 4009d18:	10800054 	ori	r2,r2,1
 4009d1c:	20800115 	stw	r2,4(r4)
 4009d20:	28c00215 	stw	r3,8(r5)
 4009d24:	19400315 	stw	r5,12(r3)
 4009d28:	9009883a 	mov	r4,r18
 4009d2c:	4017edc0 	call	4017edc <__malloc_unlock>
 4009d30:	80c00204 	addi	r3,r16,8
 4009d34:	003f4d06 	br	4009a6c <_malloc_r+0x50>
 4009d38:	80800204 	addi	r2,r16,8
 4009d3c:	14000317 	ldw	r16,12(r2)
 4009d40:	143f911e 	bne	r2,r16,4009b88 <_malloc_r+0x16c>
 4009d44:	1a400084 	addi	r9,r3,2
 4009d48:	003f7306 	br	4009b18 <_malloc_r+0xfc>
 4009d4c:	88c00054 	ori	r3,r17,1
 4009d50:	8445883a 	add	r2,r16,r17
 4009d54:	80c00115 	stw	r3,4(r16)
 4009d58:	003fdf06 	br	4009cd8 <_malloc_r+0x2bc>
 4009d5c:	e4000217 	ldw	r16,8(fp)
 4009d60:	00bfff04 	movi	r2,-4
 4009d64:	80c00117 	ldw	r3,4(r16)
 4009d68:	802d883a 	mov	r22,r16
 4009d6c:	18aa703a 	and	r21,r3,r2
 4009d70:	ac401636 	bltu	r21,r17,4009dcc <_malloc_r+0x3b0>
 4009d74:	ac49c83a 	sub	r4,r21,r17
 4009d78:	008003c4 	movi	r2,15
 4009d7c:	1100130e 	bge	r2,r4,4009dcc <_malloc_r+0x3b0>
 4009d80:	88800054 	ori	r2,r17,1
 4009d84:	8447883a 	add	r3,r16,r17
 4009d88:	80800115 	stw	r2,4(r16)
 4009d8c:	20800054 	ori	r2,r4,1
 4009d90:	18800115 	stw	r2,4(r3)
 4009d94:	e0c00215 	stw	r3,8(fp)
 4009d98:	9009883a 	mov	r4,r18
 4009d9c:	4017edc0 	call	4017edc <__malloc_unlock>
 4009da0:	80c00204 	addi	r3,r16,8
 4009da4:	003f3106 	br	4009a6c <_malloc_r+0x50>
 4009da8:	39c00117 	ldw	r7,4(r7)
 4009dac:	573ffe04 	addi	fp,r10,-8
 4009db0:	003fa006 	br	4009c34 <_malloc_r+0x218>
 4009db4:	00801504 	movi	r2,84
 4009db8:	10c06736 	bltu	r2,r3,4009f58 <_malloc_r+0x53c>
 4009dbc:	8804d33a 	srli	r2,r17,12
 4009dc0:	11801b84 	addi	r6,r2,110
 4009dc4:	300490fa 	slli	r2,r6,3
 4009dc8:	003f4106 	br	4009ad0 <_malloc_r+0xb4>
 4009dcc:	d0a04b17 	ldw	r2,-32468(gp)
 4009dd0:	d0e00417 	ldw	r3,-32752(gp)
 4009dd4:	053fffc4 	movi	r20,-1
 4009dd8:	10800404 	addi	r2,r2,16
 4009ddc:	88a7883a 	add	r19,r17,r2
 4009de0:	1d000326 	beq	r3,r20,4009df0 <_malloc_r+0x3d4>
 4009de4:	98c3ffc4 	addi	r3,r19,4095
 4009de8:	00bc0004 	movi	r2,-4096
 4009dec:	18a6703a 	and	r19,r3,r2
 4009df0:	9009883a 	mov	r4,r18
 4009df4:	980b883a 	mov	r5,r19
 4009df8:	400a2880 	call	400a288 <_sbrk_r>
 4009dfc:	1009883a 	mov	r4,r2
 4009e00:	15000426 	beq	r2,r20,4009e14 <_malloc_r+0x3f8>
 4009e04:	854b883a 	add	r5,r16,r21
 4009e08:	1029883a 	mov	r20,r2
 4009e0c:	11405a2e 	bgeu	r2,r5,4009f78 <_malloc_r+0x55c>
 4009e10:	87000c26 	beq	r16,fp,4009e44 <_malloc_r+0x428>
 4009e14:	e4000217 	ldw	r16,8(fp)
 4009e18:	80c00117 	ldw	r3,4(r16)
 4009e1c:	00bfff04 	movi	r2,-4
 4009e20:	1884703a 	and	r2,r3,r2
 4009e24:	14400336 	bltu	r2,r17,4009e34 <_malloc_r+0x418>
 4009e28:	1449c83a 	sub	r4,r2,r17
 4009e2c:	008003c4 	movi	r2,15
 4009e30:	113fd316 	blt	r2,r4,4009d80 <_malloc_r+0x364>
 4009e34:	9009883a 	mov	r4,r18
 4009e38:	4017edc0 	call	4017edc <__malloc_unlock>
 4009e3c:	0007883a 	mov	r3,zero
 4009e40:	003f0a06 	br	4009a6c <_malloc_r+0x50>
 4009e44:	05c100b4 	movhi	r23,1026
 4009e48:	bddab904 	addi	r23,r23,27364
 4009e4c:	b8800017 	ldw	r2,0(r23)
 4009e50:	988d883a 	add	r6,r19,r2
 4009e54:	b9800015 	stw	r6,0(r23)
 4009e58:	d0e00417 	ldw	r3,-32752(gp)
 4009e5c:	00bfffc4 	movi	r2,-1
 4009e60:	18808e26 	beq	r3,r2,400a09c <_malloc_r+0x680>
 4009e64:	2145c83a 	sub	r2,r4,r5
 4009e68:	3085883a 	add	r2,r6,r2
 4009e6c:	b8800015 	stw	r2,0(r23)
 4009e70:	20c001cc 	andi	r3,r4,7
 4009e74:	18005f1e 	bne	r3,zero,4009ff4 <_malloc_r+0x5d8>
 4009e78:	000b883a 	mov	r5,zero
 4009e7c:	a4c5883a 	add	r2,r20,r19
 4009e80:	1083ffcc 	andi	r2,r2,4095
 4009e84:	00c40004 	movi	r3,4096
 4009e88:	1887c83a 	sub	r3,r3,r2
 4009e8c:	28e7883a 	add	r19,r5,r3
 4009e90:	9009883a 	mov	r4,r18
 4009e94:	980b883a 	mov	r5,r19
 4009e98:	400a2880 	call	400a288 <_sbrk_r>
 4009e9c:	1007883a 	mov	r3,r2
 4009ea0:	00bfffc4 	movi	r2,-1
 4009ea4:	18807a26 	beq	r3,r2,400a090 <_malloc_r+0x674>
 4009ea8:	1d05c83a 	sub	r2,r3,r20
 4009eac:	9885883a 	add	r2,r19,r2
 4009eb0:	10c00054 	ori	r3,r2,1
 4009eb4:	b8800017 	ldw	r2,0(r23)
 4009eb8:	a021883a 	mov	r16,r20
 4009ebc:	a0c00115 	stw	r3,4(r20)
 4009ec0:	9885883a 	add	r2,r19,r2
 4009ec4:	b8800015 	stw	r2,0(r23)
 4009ec8:	e5000215 	stw	r20,8(fp)
 4009ecc:	b7003626 	beq	r22,fp,4009fa8 <_malloc_r+0x58c>
 4009ed0:	018003c4 	movi	r6,15
 4009ed4:	35404b36 	bltu	r6,r21,400a004 <_malloc_r+0x5e8>
 4009ed8:	00800044 	movi	r2,1
 4009edc:	a0800115 	stw	r2,4(r20)
 4009ee0:	003fcd06 	br	4009e18 <_malloc_r+0x3fc>
 4009ee4:	2808d27a 	srli	r4,r5,9
 4009ee8:	2000371e 	bne	r4,zero,4009fc8 <_malloc_r+0x5ac>
 4009eec:	2808d0fa 	srli	r4,r5,3
 4009ef0:	200690fa 	slli	r3,r4,3
 4009ef4:	1ad1883a 	add	r8,r3,r11
 4009ef8:	41800217 	ldw	r6,8(r8)
 4009efc:	41805b26 	beq	r8,r6,400a06c <_malloc_r+0x650>
 4009f00:	30800117 	ldw	r2,4(r6)
 4009f04:	00ffff04 	movi	r3,-4
 4009f08:	10c4703a 	and	r2,r2,r3
 4009f0c:	2880022e 	bgeu	r5,r2,4009f18 <_malloc_r+0x4fc>
 4009f10:	31800217 	ldw	r6,8(r6)
 4009f14:	41bffa1e 	bne	r8,r6,4009f00 <_malloc_r+0x4e4>
 4009f18:	32000317 	ldw	r8,12(r6)
 4009f1c:	39c00117 	ldw	r7,4(r7)
 4009f20:	82000315 	stw	r8,12(r16)
 4009f24:	81800215 	stw	r6,8(r16)
 4009f28:	070100b4 	movhi	fp,1026
 4009f2c:	e7148204 	addi	fp,fp,21000
 4009f30:	34000315 	stw	r16,12(r6)
 4009f34:	44000215 	stw	r16,8(r8)
 4009f38:	003f3e06 	br	4009c34 <_malloc_r+0x218>
 4009f3c:	63000044 	addi	r12,r12,1
 4009f40:	608000cc 	andi	r2,r12,3
 4009f44:	10005d26 	beq	r2,zero,400a0bc <_malloc_r+0x6a0>
 4009f48:	18c00204 	addi	r3,r3,8
 4009f4c:	003f5106 	br	4009c94 <_malloc_r+0x278>
 4009f50:	8089883a 	add	r4,r16,r2
 4009f54:	003f6d06 	br	4009d0c <_malloc_r+0x2f0>
 4009f58:	00805504 	movi	r2,340
 4009f5c:	10c02036 	bltu	r2,r3,4009fe0 <_malloc_r+0x5c4>
 4009f60:	8804d3fa 	srli	r2,r17,15
 4009f64:	11801dc4 	addi	r6,r2,119
 4009f68:	300490fa 	slli	r2,r6,3
 4009f6c:	003ed806 	br	4009ad0 <_malloc_r+0xb4>
 4009f70:	48c000c4 	addi	r3,r9,3
 4009f74:	003f3106 	br	4009c3c <_malloc_r+0x220>
 4009f78:	05c100b4 	movhi	r23,1026
 4009f7c:	bddab904 	addi	r23,r23,27364
 4009f80:	b8800017 	ldw	r2,0(r23)
 4009f84:	988d883a 	add	r6,r19,r2
 4009f88:	b9800015 	stw	r6,0(r23)
 4009f8c:	293fb21e 	bne	r5,r4,4009e58 <_malloc_r+0x43c>
 4009f90:	2083ffcc 	andi	r2,r4,4095
 4009f94:	103fb01e 	bne	r2,zero,4009e58 <_malloc_r+0x43c>
 4009f98:	e4000217 	ldw	r16,8(fp)
 4009f9c:	9d45883a 	add	r2,r19,r21
 4009fa0:	10800054 	ori	r2,r2,1
 4009fa4:	80800115 	stw	r2,4(r16)
 4009fa8:	b8c00017 	ldw	r3,0(r23)
 4009fac:	d0a04c17 	ldw	r2,-32464(gp)
 4009fb0:	10c0012e 	bgeu	r2,r3,4009fb8 <_malloc_r+0x59c>
 4009fb4:	d0e04c15 	stw	r3,-32464(gp)
 4009fb8:	d0a04d17 	ldw	r2,-32460(gp)
 4009fbc:	10ff962e 	bgeu	r2,r3,4009e18 <_malloc_r+0x3fc>
 4009fc0:	d0e04d15 	stw	r3,-32460(gp)
 4009fc4:	003f9406 	br	4009e18 <_malloc_r+0x3fc>
 4009fc8:	00800104 	movi	r2,4
 4009fcc:	11001e36 	bltu	r2,r4,400a048 <_malloc_r+0x62c>
 4009fd0:	2804d1ba 	srli	r2,r5,6
 4009fd4:	11000e04 	addi	r4,r2,56
 4009fd8:	200690fa 	slli	r3,r4,3
 4009fdc:	003fc506 	br	4009ef4 <_malloc_r+0x4d8>
 4009fe0:	00815504 	movi	r2,1364
 4009fe4:	10c01d2e 	bgeu	r2,r3,400a05c <_malloc_r+0x640>
 4009fe8:	01801f84 	movi	r6,126
 4009fec:	0080fc04 	movi	r2,1008
 4009ff0:	003eb706 	br	4009ad0 <_malloc_r+0xb4>
 4009ff4:	00800204 	movi	r2,8
 4009ff8:	10cbc83a 	sub	r5,r2,r3
 4009ffc:	2169883a 	add	r20,r4,r5
 400a000:	003f9e06 	br	4009e7c <_malloc_r+0x460>
 400a004:	00bffe04 	movi	r2,-8
 400a008:	a93ffd04 	addi	r4,r21,-12
 400a00c:	2088703a 	and	r4,r4,r2
 400a010:	b10b883a 	add	r5,r22,r4
 400a014:	00c00144 	movi	r3,5
 400a018:	28c00215 	stw	r3,8(r5)
 400a01c:	28c00115 	stw	r3,4(r5)
 400a020:	b0800117 	ldw	r2,4(r22)
 400a024:	1080004c 	andi	r2,r2,1
 400a028:	2084b03a 	or	r2,r4,r2
 400a02c:	b0800115 	stw	r2,4(r22)
 400a030:	313fdd2e 	bgeu	r6,r4,4009fa8 <_malloc_r+0x58c>
 400a034:	b1400204 	addi	r5,r22,8
 400a038:	9009883a 	mov	r4,r18
 400a03c:	400fc800 	call	400fc80 <_free_r>
 400a040:	e4000217 	ldw	r16,8(fp)
 400a044:	003fd806 	br	4009fa8 <_malloc_r+0x58c>
 400a048:	00800504 	movi	r2,20
 400a04c:	11001536 	bltu	r2,r4,400a0a4 <_malloc_r+0x688>
 400a050:	210016c4 	addi	r4,r4,91
 400a054:	200690fa 	slli	r3,r4,3
 400a058:	003fa606 	br	4009ef4 <_malloc_r+0x4d8>
 400a05c:	8804d4ba 	srli	r2,r17,18
 400a060:	11801f04 	addi	r6,r2,124
 400a064:	300490fa 	slli	r2,r6,3
 400a068:	003e9906 	br	4009ad0 <_malloc_r+0xb4>
 400a06c:	2009d0ba 	srai	r4,r4,2
 400a070:	014100b4 	movhi	r5,1026
 400a074:	29548204 	addi	r5,r5,21000
 400a078:	00c00044 	movi	r3,1
 400a07c:	28800117 	ldw	r2,4(r5)
 400a080:	1906983a 	sll	r3,r3,r4
 400a084:	10c4b03a 	or	r2,r2,r3
 400a088:	28800115 	stw	r2,4(r5)
 400a08c:	003fa306 	br	4009f1c <_malloc_r+0x500>
 400a090:	0027883a 	mov	r19,zero
 400a094:	00c00044 	movi	r3,1
 400a098:	003f8606 	br	4009eb4 <_malloc_r+0x498>
 400a09c:	d1200415 	stw	r4,-32752(gp)
 400a0a0:	003f7306 	br	4009e70 <_malloc_r+0x454>
 400a0a4:	00801504 	movi	r2,84
 400a0a8:	11001936 	bltu	r2,r4,400a110 <_malloc_r+0x6f4>
 400a0ac:	2804d33a 	srli	r2,r5,12
 400a0b0:	11001b84 	addi	r4,r2,110
 400a0b4:	200690fa 	slli	r3,r4,3
 400a0b8:	003f8e06 	br	4009ef4 <_malloc_r+0x4d8>
 400a0bc:	480b883a 	mov	r5,r9
 400a0c0:	6807883a 	mov	r3,r13
 400a0c4:	288000cc 	andi	r2,r5,3
 400a0c8:	18fffe04 	addi	r3,r3,-8
 400a0cc:	297fffc4 	addi	r5,r5,-1
 400a0d0:	10001526 	beq	r2,zero,400a128 <_malloc_r+0x70c>
 400a0d4:	18800217 	ldw	r2,8(r3)
 400a0d8:	10fffa26 	beq	r2,r3,400a0c4 <_malloc_r+0x6a8>
 400a0dc:	2109883a 	add	r4,r4,r4
 400a0e0:	393f1e36 	bltu	r7,r4,4009d5c <_malloc_r+0x340>
 400a0e4:	203f1d26 	beq	r4,zero,4009d5c <_malloc_r+0x340>
 400a0e8:	21c4703a 	and	r2,r4,r7
 400a0ec:	10000226 	beq	r2,zero,400a0f8 <_malloc_r+0x6dc>
 400a0f0:	6013883a 	mov	r9,r12
 400a0f4:	003ee106 	br	4009c7c <_malloc_r+0x260>
 400a0f8:	2109883a 	add	r4,r4,r4
 400a0fc:	3904703a 	and	r2,r7,r4
 400a100:	63000104 	addi	r12,r12,4
 400a104:	103ffc26 	beq	r2,zero,400a0f8 <_malloc_r+0x6dc>
 400a108:	6013883a 	mov	r9,r12
 400a10c:	003edb06 	br	4009c7c <_malloc_r+0x260>
 400a110:	00805504 	movi	r2,340
 400a114:	11000836 	bltu	r2,r4,400a138 <_malloc_r+0x71c>
 400a118:	2804d3fa 	srli	r2,r5,15
 400a11c:	11001dc4 	addi	r4,r2,119
 400a120:	200690fa 	slli	r3,r4,3
 400a124:	003f7306 	br	4009ef4 <_malloc_r+0x4d8>
 400a128:	0104303a 	nor	r2,zero,r4
 400a12c:	388e703a 	and	r7,r7,r2
 400a130:	e1c00115 	stw	r7,4(fp)
 400a134:	003fe906 	br	400a0dc <_malloc_r+0x6c0>
 400a138:	00815504 	movi	r2,1364
 400a13c:	1100032e 	bgeu	r2,r4,400a14c <_malloc_r+0x730>
 400a140:	01001f84 	movi	r4,126
 400a144:	00c0fc04 	movi	r3,1008
 400a148:	003f6a06 	br	4009ef4 <_malloc_r+0x4d8>
 400a14c:	2804d4ba 	srli	r2,r5,18
 400a150:	11001f04 	addi	r4,r2,124
 400a154:	200690fa 	slli	r3,r4,3
 400a158:	003f6606 	br	4009ef4 <_malloc_r+0x4d8>

0400a15c <printf>:
 400a15c:	defffb04 	addi	sp,sp,-20
 400a160:	dfc00115 	stw	ra,4(sp)
 400a164:	d9400215 	stw	r5,8(sp)
 400a168:	d9800315 	stw	r6,12(sp)
 400a16c:	d9c00415 	stw	r7,16(sp)
 400a170:	008100b4 	movhi	r2,1026
 400a174:	109a4904 	addi	r2,r2,26916
 400a178:	10c00017 	ldw	r3,0(r2)
 400a17c:	200b883a 	mov	r5,r4
 400a180:	d8800204 	addi	r2,sp,8
 400a184:	19000217 	ldw	r4,8(r3)
 400a188:	100d883a 	mov	r6,r2
 400a18c:	d8800015 	stw	r2,0(sp)
 400a190:	400c3040 	call	400c304 <__vfprintf_internal>
 400a194:	dfc00117 	ldw	ra,4(sp)
 400a198:	dec00504 	addi	sp,sp,20
 400a19c:	f800283a 	ret

0400a1a0 <_printf_r>:
 400a1a0:	defffc04 	addi	sp,sp,-16
 400a1a4:	dfc00115 	stw	ra,4(sp)
 400a1a8:	d9800215 	stw	r6,8(sp)
 400a1ac:	d9c00315 	stw	r7,12(sp)
 400a1b0:	280d883a 	mov	r6,r5
 400a1b4:	21400217 	ldw	r5,8(r4)
 400a1b8:	d8c00204 	addi	r3,sp,8
 400a1bc:	180f883a 	mov	r7,r3
 400a1c0:	d8c00015 	stw	r3,0(sp)
 400a1c4:	400a4400 	call	400a440 <___vfprintf_internal_r>
 400a1c8:	dfc00117 	ldw	ra,4(sp)
 400a1cc:	dec00404 	addi	sp,sp,16
 400a1d0:	f800283a 	ret

0400a1d4 <_puts_r>:
 400a1d4:	defff604 	addi	sp,sp,-40
 400a1d8:	dc400715 	stw	r17,28(sp)
 400a1dc:	2023883a 	mov	r17,r4
 400a1e0:	2809883a 	mov	r4,r5
 400a1e4:	dfc00915 	stw	ra,36(sp)
 400a1e8:	dcc00815 	stw	r19,32(sp)
 400a1ec:	2827883a 	mov	r19,r5
 400a1f0:	400a3740 	call	400a374 <strlen>
 400a1f4:	89400217 	ldw	r5,8(r17)
 400a1f8:	00c100b4 	movhi	r3,1026
 400a1fc:	18d16f04 	addi	r3,r3,17852
 400a200:	01c00044 	movi	r7,1
 400a204:	12000044 	addi	r8,r2,1
 400a208:	d8c00515 	stw	r3,20(sp)
 400a20c:	d9c00615 	stw	r7,24(sp)
 400a210:	d8c00304 	addi	r3,sp,12
 400a214:	01c00084 	movi	r7,2
 400a218:	8809883a 	mov	r4,r17
 400a21c:	d80d883a 	mov	r6,sp
 400a220:	d8c00015 	stw	r3,0(sp)
 400a224:	dcc00315 	stw	r19,12(sp)
 400a228:	da000215 	stw	r8,8(sp)
 400a22c:	d9c00115 	stw	r7,4(sp)
 400a230:	d8800415 	stw	r2,16(sp)
 400a234:	400ff940 	call	400ff94 <__sfvwrite_r>
 400a238:	00ffffc4 	movi	r3,-1
 400a23c:	10000626 	beq	r2,zero,400a258 <_puts_r+0x84>
 400a240:	1805883a 	mov	r2,r3
 400a244:	dfc00917 	ldw	ra,36(sp)
 400a248:	dcc00817 	ldw	r19,32(sp)
 400a24c:	dc400717 	ldw	r17,28(sp)
 400a250:	dec00a04 	addi	sp,sp,40
 400a254:	f800283a 	ret
 400a258:	00c00284 	movi	r3,10
 400a25c:	1805883a 	mov	r2,r3
 400a260:	dfc00917 	ldw	ra,36(sp)
 400a264:	dcc00817 	ldw	r19,32(sp)
 400a268:	dc400717 	ldw	r17,28(sp)
 400a26c:	dec00a04 	addi	sp,sp,40
 400a270:	f800283a 	ret

0400a274 <puts>:
 400a274:	008100b4 	movhi	r2,1026
 400a278:	109a4904 	addi	r2,r2,26916
 400a27c:	200b883a 	mov	r5,r4
 400a280:	11000017 	ldw	r4,0(r2)
 400a284:	400a1d41 	jmpi	400a1d4 <_puts_r>

0400a288 <_sbrk_r>:
 400a288:	defffd04 	addi	sp,sp,-12
 400a28c:	dc000015 	stw	r16,0(sp)
 400a290:	040100b4 	movhi	r16,1026
 400a294:	841a9604 	addi	r16,r16,27224
 400a298:	dc400115 	stw	r17,4(sp)
 400a29c:	80000015 	stw	zero,0(r16)
 400a2a0:	2023883a 	mov	r17,r4
 400a2a4:	2809883a 	mov	r4,r5
 400a2a8:	dfc00215 	stw	ra,8(sp)
 400a2ac:	40177c40 	call	40177c4 <sbrk>
 400a2b0:	1007883a 	mov	r3,r2
 400a2b4:	00bfffc4 	movi	r2,-1
 400a2b8:	18800626 	beq	r3,r2,400a2d4 <_sbrk_r+0x4c>
 400a2bc:	1805883a 	mov	r2,r3
 400a2c0:	dfc00217 	ldw	ra,8(sp)
 400a2c4:	dc400117 	ldw	r17,4(sp)
 400a2c8:	dc000017 	ldw	r16,0(sp)
 400a2cc:	dec00304 	addi	sp,sp,12
 400a2d0:	f800283a 	ret
 400a2d4:	80800017 	ldw	r2,0(r16)
 400a2d8:	103ff826 	beq	r2,zero,400a2bc <_sbrk_r+0x34>
 400a2dc:	88800015 	stw	r2,0(r17)
 400a2e0:	1805883a 	mov	r2,r3
 400a2e4:	dfc00217 	ldw	ra,8(sp)
 400a2e8:	dc400117 	ldw	r17,4(sp)
 400a2ec:	dc000017 	ldw	r16,0(sp)
 400a2f0:	dec00304 	addi	sp,sp,12
 400a2f4:	f800283a 	ret

0400a2f8 <_scanf_r>:
 400a2f8:	defffc04 	addi	sp,sp,-16
 400a2fc:	dfc00115 	stw	ra,4(sp)
 400a300:	d9800215 	stw	r6,8(sp)
 400a304:	d9c00315 	stw	r7,12(sp)
 400a308:	280d883a 	mov	r6,r5
 400a30c:	21400117 	ldw	r5,4(r4)
 400a310:	d8c00204 	addi	r3,sp,8
 400a314:	180f883a 	mov	r7,r3
 400a318:	d8c00015 	stw	r3,0(sp)
 400a31c:	400c3280 	call	400c328 <__svfscanf_r>
 400a320:	dfc00117 	ldw	ra,4(sp)
 400a324:	dec00404 	addi	sp,sp,16
 400a328:	f800283a 	ret

0400a32c <scanf>:
 400a32c:	defffb04 	addi	sp,sp,-20
 400a330:	dfc00115 	stw	ra,4(sp)
 400a334:	d9400215 	stw	r5,8(sp)
 400a338:	d9800315 	stw	r6,12(sp)
 400a33c:	d9c00415 	stw	r7,16(sp)
 400a340:	008100b4 	movhi	r2,1026
 400a344:	109a4904 	addi	r2,r2,26916
 400a348:	11400017 	ldw	r5,0(r2)
 400a34c:	200d883a 	mov	r6,r4
 400a350:	d8800204 	addi	r2,sp,8
 400a354:	2809883a 	mov	r4,r5
 400a358:	29400117 	ldw	r5,4(r5)
 400a35c:	100f883a 	mov	r7,r2
 400a360:	d8800015 	stw	r2,0(sp)
 400a364:	400c3280 	call	400c328 <__svfscanf_r>
 400a368:	dfc00117 	ldw	ra,4(sp)
 400a36c:	dec00504 	addi	sp,sp,20
 400a370:	f800283a 	ret

0400a374 <strlen>:
 400a374:	208000cc 	andi	r2,r4,3
 400a378:	2011883a 	mov	r8,r4
 400a37c:	1000161e 	bne	r2,zero,400a3d8 <strlen+0x64>
 400a380:	20c00017 	ldw	r3,0(r4)
 400a384:	017fbff4 	movhi	r5,65279
 400a388:	297fbfc4 	addi	r5,r5,-257
 400a38c:	01e02074 	movhi	r7,32897
 400a390:	39e02004 	addi	r7,r7,-32640
 400a394:	1945883a 	add	r2,r3,r5
 400a398:	11c4703a 	and	r2,r2,r7
 400a39c:	00c6303a 	nor	r3,zero,r3
 400a3a0:	1886703a 	and	r3,r3,r2
 400a3a4:	18000c1e 	bne	r3,zero,400a3d8 <strlen+0x64>
 400a3a8:	280d883a 	mov	r6,r5
 400a3ac:	380b883a 	mov	r5,r7
 400a3b0:	21000104 	addi	r4,r4,4
 400a3b4:	20800017 	ldw	r2,0(r4)
 400a3b8:	1187883a 	add	r3,r2,r6
 400a3bc:	1946703a 	and	r3,r3,r5
 400a3c0:	0084303a 	nor	r2,zero,r2
 400a3c4:	10c4703a 	and	r2,r2,r3
 400a3c8:	103ff926 	beq	r2,zero,400a3b0 <strlen+0x3c>
 400a3cc:	20800007 	ldb	r2,0(r4)
 400a3d0:	10000326 	beq	r2,zero,400a3e0 <strlen+0x6c>
 400a3d4:	21000044 	addi	r4,r4,1
 400a3d8:	20800007 	ldb	r2,0(r4)
 400a3dc:	103ffd1e 	bne	r2,zero,400a3d4 <strlen+0x60>
 400a3e0:	2205c83a 	sub	r2,r4,r8
 400a3e4:	f800283a 	ret

0400a3e8 <__sprint_r>:
 400a3e8:	30800217 	ldw	r2,8(r6)
 400a3ec:	defffe04 	addi	sp,sp,-8
 400a3f0:	dc000015 	stw	r16,0(sp)
 400a3f4:	dfc00115 	stw	ra,4(sp)
 400a3f8:	3021883a 	mov	r16,r6
 400a3fc:	0007883a 	mov	r3,zero
 400a400:	1000061e 	bne	r2,zero,400a41c <__sprint_r+0x34>
 400a404:	1805883a 	mov	r2,r3
 400a408:	30000115 	stw	zero,4(r6)
 400a40c:	dfc00117 	ldw	ra,4(sp)
 400a410:	dc000017 	ldw	r16,0(sp)
 400a414:	dec00204 	addi	sp,sp,8
 400a418:	f800283a 	ret
 400a41c:	400ff940 	call	400ff94 <__sfvwrite_r>
 400a420:	1007883a 	mov	r3,r2
 400a424:	1805883a 	mov	r2,r3
 400a428:	80000115 	stw	zero,4(r16)
 400a42c:	80000215 	stw	zero,8(r16)
 400a430:	dfc00117 	ldw	ra,4(sp)
 400a434:	dc000017 	ldw	r16,0(sp)
 400a438:	dec00204 	addi	sp,sp,8
 400a43c:	f800283a 	ret

0400a440 <___vfprintf_internal_r>:
 400a440:	defea404 	addi	sp,sp,-1392
 400a444:	dd815815 	stw	r22,1376(sp)
 400a448:	dc015215 	stw	r16,1352(sp)
 400a44c:	d9c15115 	stw	r7,1348(sp)
 400a450:	dfc15b15 	stw	ra,1388(sp)
 400a454:	df015a15 	stw	fp,1384(sp)
 400a458:	ddc15915 	stw	r23,1380(sp)
 400a45c:	dd415715 	stw	r21,1372(sp)
 400a460:	dd015615 	stw	r20,1368(sp)
 400a464:	dcc15515 	stw	r19,1364(sp)
 400a468:	dc815415 	stw	r18,1360(sp)
 400a46c:	dc415315 	stw	r17,1356(sp)
 400a470:	282d883a 	mov	r22,r5
 400a474:	3021883a 	mov	r16,r6
 400a478:	d9014f15 	stw	r4,1340(sp)
 400a47c:	40105e40 	call	40105e4 <_localeconv_r>
 400a480:	10800017 	ldw	r2,0(r2)
 400a484:	d9c15117 	ldw	r7,1348(sp)
 400a488:	d8814915 	stw	r2,1316(sp)
 400a48c:	d8814f17 	ldw	r2,1340(sp)
 400a490:	10000226 	beq	r2,zero,400a49c <___vfprintf_internal_r+0x5c>
 400a494:	10800e17 	ldw	r2,56(r2)
 400a498:	10020d26 	beq	r2,zero,400acd0 <___vfprintf_internal_r+0x890>
 400a49c:	b080030b 	ldhu	r2,12(r22)
 400a4a0:	1080020c 	andi	r2,r2,8
 400a4a4:	10020e26 	beq	r2,zero,400ace0 <___vfprintf_internal_r+0x8a0>
 400a4a8:	b0800417 	ldw	r2,16(r22)
 400a4ac:	10020c26 	beq	r2,zero,400ace0 <___vfprintf_internal_r+0x8a0>
 400a4b0:	b200030b 	ldhu	r8,12(r22)
 400a4b4:	00800284 	movi	r2,10
 400a4b8:	40c0068c 	andi	r3,r8,26
 400a4bc:	18802f1e 	bne	r3,r2,400a57c <___vfprintf_internal_r+0x13c>
 400a4c0:	b080038f 	ldh	r2,14(r22)
 400a4c4:	10002d16 	blt	r2,zero,400a57c <___vfprintf_internal_r+0x13c>
 400a4c8:	b240038b 	ldhu	r9,14(r22)
 400a4cc:	b2800717 	ldw	r10,28(r22)
 400a4d0:	b2c00917 	ldw	r11,36(r22)
 400a4d4:	d9014f17 	ldw	r4,1340(sp)
 400a4d8:	dc402904 	addi	r17,sp,164
 400a4dc:	d8804004 	addi	r2,sp,256
 400a4e0:	00c10004 	movi	r3,1024
 400a4e4:	423fff4c 	andi	r8,r8,65533
 400a4e8:	800d883a 	mov	r6,r16
 400a4ec:	880b883a 	mov	r5,r17
 400a4f0:	da002c0d 	sth	r8,176(sp)
 400a4f4:	da402c8d 	sth	r9,178(sp)
 400a4f8:	da803015 	stw	r10,192(sp)
 400a4fc:	dac03215 	stw	r11,200(sp)
 400a500:	d8802d15 	stw	r2,180(sp)
 400a504:	d8c02e15 	stw	r3,184(sp)
 400a508:	d8802915 	stw	r2,164(sp)
 400a50c:	d8c02b15 	stw	r3,172(sp)
 400a510:	d8002f15 	stw	zero,188(sp)
 400a514:	400a4400 	call	400a440 <___vfprintf_internal_r>
 400a518:	d8814b15 	stw	r2,1324(sp)
 400a51c:	10000416 	blt	r2,zero,400a530 <___vfprintf_internal_r+0xf0>
 400a520:	d9014f17 	ldw	r4,1340(sp)
 400a524:	880b883a 	mov	r5,r17
 400a528:	400f3e40 	call	400f3e4 <_fflush_r>
 400a52c:	1002321e 	bne	r2,zero,400adf8 <___vfprintf_internal_r+0x9b8>
 400a530:	d8802c0b 	ldhu	r2,176(sp)
 400a534:	1080100c 	andi	r2,r2,64
 400a538:	10000326 	beq	r2,zero,400a548 <___vfprintf_internal_r+0x108>
 400a53c:	b080030b 	ldhu	r2,12(r22)
 400a540:	10801014 	ori	r2,r2,64
 400a544:	b080030d 	sth	r2,12(r22)
 400a548:	d8814b17 	ldw	r2,1324(sp)
 400a54c:	dfc15b17 	ldw	ra,1388(sp)
 400a550:	df015a17 	ldw	fp,1384(sp)
 400a554:	ddc15917 	ldw	r23,1380(sp)
 400a558:	dd815817 	ldw	r22,1376(sp)
 400a55c:	dd415717 	ldw	r21,1372(sp)
 400a560:	dd015617 	ldw	r20,1368(sp)
 400a564:	dcc15517 	ldw	r19,1364(sp)
 400a568:	dc815417 	ldw	r18,1360(sp)
 400a56c:	dc415317 	ldw	r17,1356(sp)
 400a570:	dc015217 	ldw	r16,1352(sp)
 400a574:	dec15c04 	addi	sp,sp,1392
 400a578:	f800283a 	ret
 400a57c:	0005883a 	mov	r2,zero
 400a580:	0007883a 	mov	r3,zero
 400a584:	dd401904 	addi	r21,sp,100
 400a588:	d8814215 	stw	r2,1288(sp)
 400a58c:	802f883a 	mov	r23,r16
 400a590:	d8c14315 	stw	r3,1292(sp)
 400a594:	d8014b15 	stw	zero,1324(sp)
 400a598:	d8014815 	stw	zero,1312(sp)
 400a59c:	d8014415 	stw	zero,1296(sp)
 400a5a0:	d8014715 	stw	zero,1308(sp)
 400a5a4:	dd400c15 	stw	r21,48(sp)
 400a5a8:	d8000e15 	stw	zero,56(sp)
 400a5ac:	d8000d15 	stw	zero,52(sp)
 400a5b0:	b8800007 	ldb	r2,0(r23)
 400a5b4:	10001926 	beq	r2,zero,400a61c <___vfprintf_internal_r+0x1dc>
 400a5b8:	00c00944 	movi	r3,37
 400a5bc:	10c01726 	beq	r2,r3,400a61c <___vfprintf_internal_r+0x1dc>
 400a5c0:	b821883a 	mov	r16,r23
 400a5c4:	00000106 	br	400a5cc <___vfprintf_internal_r+0x18c>
 400a5c8:	10c00326 	beq	r2,r3,400a5d8 <___vfprintf_internal_r+0x198>
 400a5cc:	84000044 	addi	r16,r16,1
 400a5d0:	80800007 	ldb	r2,0(r16)
 400a5d4:	103ffc1e 	bne	r2,zero,400a5c8 <___vfprintf_internal_r+0x188>
 400a5d8:	85e7c83a 	sub	r19,r16,r23
 400a5dc:	98000e26 	beq	r19,zero,400a618 <___vfprintf_internal_r+0x1d8>
 400a5e0:	dc800e17 	ldw	r18,56(sp)
 400a5e4:	dc400d17 	ldw	r17,52(sp)
 400a5e8:	008001c4 	movi	r2,7
 400a5ec:	94e5883a 	add	r18,r18,r19
 400a5f0:	8c400044 	addi	r17,r17,1
 400a5f4:	adc00015 	stw	r23,0(r21)
 400a5f8:	dc800e15 	stw	r18,56(sp)
 400a5fc:	acc00115 	stw	r19,4(r21)
 400a600:	dc400d15 	stw	r17,52(sp)
 400a604:	14428b16 	blt	r2,r17,400b034 <___vfprintf_internal_r+0xbf4>
 400a608:	ad400204 	addi	r21,r21,8
 400a60c:	d9014b17 	ldw	r4,1324(sp)
 400a610:	24c9883a 	add	r4,r4,r19
 400a614:	d9014b15 	stw	r4,1324(sp)
 400a618:	802f883a 	mov	r23,r16
 400a61c:	b8800007 	ldb	r2,0(r23)
 400a620:	10013c26 	beq	r2,zero,400ab14 <___vfprintf_internal_r+0x6d4>
 400a624:	bdc00044 	addi	r23,r23,1
 400a628:	d8000405 	stb	zero,16(sp)
 400a62c:	b8c00007 	ldb	r3,0(r23)
 400a630:	04ffffc4 	movi	r19,-1
 400a634:	d8014c15 	stw	zero,1328(sp)
 400a638:	d8014a15 	stw	zero,1320(sp)
 400a63c:	d8c14d15 	stw	r3,1332(sp)
 400a640:	bdc00044 	addi	r23,r23,1
 400a644:	d9414d17 	ldw	r5,1332(sp)
 400a648:	00801604 	movi	r2,88
 400a64c:	28fff804 	addi	r3,r5,-32
 400a650:	10c06036 	bltu	r2,r3,400a7d4 <___vfprintf_internal_r+0x394>
 400a654:	18c5883a 	add	r2,r3,r3
 400a658:	1085883a 	add	r2,r2,r2
 400a65c:	00c10074 	movhi	r3,1025
 400a660:	18e99c04 	addi	r3,r3,-22928
 400a664:	10c5883a 	add	r2,r2,r3
 400a668:	11000017 	ldw	r4,0(r2)
 400a66c:	2000683a 	jmp	r4
 400a670:	0400b5e4 	muli	r16,zero,727
 400a674:	0400a7d4 	movui	r16,671
 400a678:	0400a7d4 	movui	r16,671
 400a67c:	0400b5d0 	cmplti	r16,zero,727
 400a680:	0400a7d4 	movui	r16,671
 400a684:	0400a7d4 	movui	r16,671
 400a688:	0400a7d4 	movui	r16,671
 400a68c:	0400a7d4 	movui	r16,671
 400a690:	0400a7d4 	movui	r16,671
 400a694:	0400a7d4 	movui	r16,671
 400a698:	0400b3b0 	cmpltui	r16,zero,718
 400a69c:	0400b5c0 	call	400b5c <__reset+0x3ff35c>
 400a6a0:	0400a7d4 	movui	r16,671
 400a6a4:	0400b3c8 	cmpgei	r16,zero,719
 400a6a8:	0400b668 	cmpgeui	r16,zero,729
 400a6ac:	0400a7d4 	movui	r16,671
 400a6b0:	0400b654 	movui	r16,729
 400a6b4:	0400b610 	cmplti	r16,zero,728
 400a6b8:	0400b610 	cmplti	r16,zero,728
 400a6bc:	0400b610 	cmplti	r16,zero,728
 400a6c0:	0400b610 	cmplti	r16,zero,728
 400a6c4:	0400b610 	cmplti	r16,zero,728
 400a6c8:	0400b610 	cmplti	r16,zero,728
 400a6cc:	0400b610 	cmplti	r16,zero,728
 400a6d0:	0400b610 	cmplti	r16,zero,728
 400a6d4:	0400b610 	cmplti	r16,zero,728
 400a6d8:	0400a7d4 	movui	r16,671
 400a6dc:	0400a7d4 	movui	r16,671
 400a6e0:	0400a7d4 	movui	r16,671
 400a6e4:	0400a7d4 	movui	r16,671
 400a6e8:	0400a7d4 	movui	r16,671
 400a6ec:	0400a7d4 	movui	r16,671
 400a6f0:	0400a7d4 	movui	r16,671
 400a6f4:	0400a7d4 	movui	r16,671
 400a6f8:	0400a7d4 	movui	r16,671
 400a6fc:	0400a7d4 	movui	r16,671
 400a700:	0400ae2c 	andhi	r16,zero,696
 400a704:	0400b498 	cmpnei	r16,zero,722
 400a708:	0400a7d4 	movui	r16,671
 400a70c:	0400b498 	cmpnei	r16,zero,722
 400a710:	0400a7d4 	movui	r16,671
 400a714:	0400a7d4 	movui	r16,671
 400a718:	0400a7d4 	movui	r16,671
 400a71c:	0400a7d4 	movui	r16,671
 400a720:	0400b5fc 	xorhi	r16,zero,727
 400a724:	0400a7d4 	movui	r16,671
 400a728:	0400a7d4 	movui	r16,671
 400a72c:	0400aee0 	cmpeqi	r16,zero,699
 400a730:	0400a7d4 	movui	r16,671
 400a734:	0400a7d4 	movui	r16,671
 400a738:	0400a7d4 	movui	r16,671
 400a73c:	0400a7d4 	movui	r16,671
 400a740:	0400a7d4 	movui	r16,671
 400a744:	0400af2c 	andhi	r16,zero,700
 400a748:	0400a7d4 	movui	r16,671
 400a74c:	0400a7d4 	movui	r16,671
 400a750:	0400b54c 	andi	r16,zero,725
 400a754:	0400a7d4 	movui	r16,671
 400a758:	0400a7d4 	movui	r16,671
 400a75c:	0400a7d4 	movui	r16,671
 400a760:	0400a7d4 	movui	r16,671
 400a764:	0400a7d4 	movui	r16,671
 400a768:	0400a7d4 	movui	r16,671
 400a76c:	0400a7d4 	movui	r16,671
 400a770:	0400a7d4 	movui	r16,671
 400a774:	0400a7d4 	movui	r16,671
 400a778:	0400a7d4 	movui	r16,671
 400a77c:	0400b520 	cmpeqi	r16,zero,724
 400a780:	0400ae38 	rdprs	r16,zero,696
 400a784:	0400b498 	cmpnei	r16,zero,722
 400a788:	0400b498 	cmpnei	r16,zero,722
 400a78c:	0400b498 	cmpnei	r16,zero,722
 400a790:	0400b484 	movi	r16,722
 400a794:	0400ae38 	rdprs	r16,zero,696
 400a798:	0400a7d4 	movui	r16,671
 400a79c:	0400a7d4 	movui	r16,671
 400a7a0:	0400b40c 	andi	r16,zero,720
 400a7a4:	0400a7d4 	movui	r16,671
 400a7a8:	0400b3dc 	xori	r16,zero,719
 400a7ac:	0400aeec 	andhi	r16,zero,699
 400a7b0:	0400b43c 	xorhi	r16,zero,720
 400a7b4:	0400b428 	cmpgeui	r16,zero,720
 400a7b8:	0400a7d4 	movui	r16,671
 400a7bc:	0400b6d0 	cmplti	r16,zero,731
 400a7c0:	0400a7d4 	movui	r16,671
 400a7c4:	0400af38 	rdprs	r16,zero,700
 400a7c8:	0400a7d4 	movui	r16,671
 400a7cc:	0400a7d4 	movui	r16,671
 400a7d0:	0400b5b0 	cmpltui	r16,zero,726
 400a7d4:	d9014d17 	ldw	r4,1332(sp)
 400a7d8:	2000ce26 	beq	r4,zero,400ab14 <___vfprintf_internal_r+0x6d4>
 400a7dc:	01400044 	movi	r5,1
 400a7e0:	d9800f04 	addi	r6,sp,60
 400a7e4:	d9c14015 	stw	r7,1280(sp)
 400a7e8:	d9414515 	stw	r5,1300(sp)
 400a7ec:	d9814115 	stw	r6,1284(sp)
 400a7f0:	280f883a 	mov	r7,r5
 400a7f4:	d9000f05 	stb	r4,60(sp)
 400a7f8:	d8000405 	stb	zero,16(sp)
 400a7fc:	d8014615 	stw	zero,1304(sp)
 400a800:	d8c14c17 	ldw	r3,1328(sp)
 400a804:	1880008c 	andi	r2,r3,2
 400a808:	1005003a 	cmpeq	r2,r2,zero
 400a80c:	d8815015 	stw	r2,1344(sp)
 400a810:	1000031e 	bne	r2,zero,400a820 <___vfprintf_internal_r+0x3e0>
 400a814:	d9014517 	ldw	r4,1300(sp)
 400a818:	21000084 	addi	r4,r4,2
 400a81c:	d9014515 	stw	r4,1300(sp)
 400a820:	d9414c17 	ldw	r5,1328(sp)
 400a824:	2940210c 	andi	r5,r5,132
 400a828:	d9414e15 	stw	r5,1336(sp)
 400a82c:	28002d1e 	bne	r5,zero,400a8e4 <___vfprintf_internal_r+0x4a4>
 400a830:	d9814a17 	ldw	r6,1320(sp)
 400a834:	d8814517 	ldw	r2,1300(sp)
 400a838:	30a1c83a 	sub	r16,r6,r2
 400a83c:	0400290e 	bge	zero,r16,400a8e4 <___vfprintf_internal_r+0x4a4>
 400a840:	00800404 	movi	r2,16
 400a844:	14045e0e 	bge	r2,r16,400b9c0 <___vfprintf_internal_r+0x1580>
 400a848:	dc800e17 	ldw	r18,56(sp)
 400a84c:	dc400d17 	ldw	r17,52(sp)
 400a850:	1027883a 	mov	r19,r2
 400a854:	070100b4 	movhi	fp,1026
 400a858:	e7118b84 	addi	fp,fp,17966
 400a85c:	050001c4 	movi	r20,7
 400a860:	00000306 	br	400a870 <___vfprintf_internal_r+0x430>
 400a864:	843ffc04 	addi	r16,r16,-16
 400a868:	ad400204 	addi	r21,r21,8
 400a86c:	9c00130e 	bge	r19,r16,400a8bc <___vfprintf_internal_r+0x47c>
 400a870:	94800404 	addi	r18,r18,16
 400a874:	8c400044 	addi	r17,r17,1
 400a878:	af000015 	stw	fp,0(r21)
 400a87c:	acc00115 	stw	r19,4(r21)
 400a880:	dc800e15 	stw	r18,56(sp)
 400a884:	dc400d15 	stw	r17,52(sp)
 400a888:	a47ff60e 	bge	r20,r17,400a864 <___vfprintf_internal_r+0x424>
 400a88c:	d9014f17 	ldw	r4,1340(sp)
 400a890:	b00b883a 	mov	r5,r22
 400a894:	d9800c04 	addi	r6,sp,48
 400a898:	d9c15115 	stw	r7,1348(sp)
 400a89c:	400a3e80 	call	400a3e8 <__sprint_r>
 400a8a0:	d9c15117 	ldw	r7,1348(sp)
 400a8a4:	10009e1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400a8a8:	843ffc04 	addi	r16,r16,-16
 400a8ac:	dc800e17 	ldw	r18,56(sp)
 400a8b0:	dc400d17 	ldw	r17,52(sp)
 400a8b4:	dd401904 	addi	r21,sp,100
 400a8b8:	9c3fed16 	blt	r19,r16,400a870 <___vfprintf_internal_r+0x430>
 400a8bc:	9425883a 	add	r18,r18,r16
 400a8c0:	8c400044 	addi	r17,r17,1
 400a8c4:	008001c4 	movi	r2,7
 400a8c8:	af000015 	stw	fp,0(r21)
 400a8cc:	ac000115 	stw	r16,4(r21)
 400a8d0:	dc800e15 	stw	r18,56(sp)
 400a8d4:	dc400d15 	stw	r17,52(sp)
 400a8d8:	1441f516 	blt	r2,r17,400b0b0 <___vfprintf_internal_r+0xc70>
 400a8dc:	ad400204 	addi	r21,r21,8
 400a8e0:	00000206 	br	400a8ec <___vfprintf_internal_r+0x4ac>
 400a8e4:	dc800e17 	ldw	r18,56(sp)
 400a8e8:	dc400d17 	ldw	r17,52(sp)
 400a8ec:	d8800407 	ldb	r2,16(sp)
 400a8f0:	10000b26 	beq	r2,zero,400a920 <___vfprintf_internal_r+0x4e0>
 400a8f4:	00800044 	movi	r2,1
 400a8f8:	94800044 	addi	r18,r18,1
 400a8fc:	8c400044 	addi	r17,r17,1
 400a900:	a8800115 	stw	r2,4(r21)
 400a904:	d8c00404 	addi	r3,sp,16
 400a908:	008001c4 	movi	r2,7
 400a90c:	a8c00015 	stw	r3,0(r21)
 400a910:	dc800e15 	stw	r18,56(sp)
 400a914:	dc400d15 	stw	r17,52(sp)
 400a918:	1441da16 	blt	r2,r17,400b084 <___vfprintf_internal_r+0xc44>
 400a91c:	ad400204 	addi	r21,r21,8
 400a920:	d9015017 	ldw	r4,1344(sp)
 400a924:	20000b1e 	bne	r4,zero,400a954 <___vfprintf_internal_r+0x514>
 400a928:	d8800444 	addi	r2,sp,17
 400a92c:	94800084 	addi	r18,r18,2
 400a930:	8c400044 	addi	r17,r17,1
 400a934:	a8800015 	stw	r2,0(r21)
 400a938:	00c00084 	movi	r3,2
 400a93c:	008001c4 	movi	r2,7
 400a940:	a8c00115 	stw	r3,4(r21)
 400a944:	dc800e15 	stw	r18,56(sp)
 400a948:	dc400d15 	stw	r17,52(sp)
 400a94c:	1441c216 	blt	r2,r17,400b058 <___vfprintf_internal_r+0xc18>
 400a950:	ad400204 	addi	r21,r21,8
 400a954:	d9414e17 	ldw	r5,1336(sp)
 400a958:	00802004 	movi	r2,128
 400a95c:	2880b126 	beq	r5,r2,400ac24 <___vfprintf_internal_r+0x7e4>
 400a960:	d8c14617 	ldw	r3,1304(sp)
 400a964:	19e1c83a 	sub	r16,r3,r7
 400a968:	0400260e 	bge	zero,r16,400aa04 <___vfprintf_internal_r+0x5c4>
 400a96c:	00800404 	movi	r2,16
 400a970:	1403cf0e 	bge	r2,r16,400b8b0 <___vfprintf_internal_r+0x1470>
 400a974:	1027883a 	mov	r19,r2
 400a978:	070100b4 	movhi	fp,1026
 400a97c:	e7118784 	addi	fp,fp,17950
 400a980:	050001c4 	movi	r20,7
 400a984:	00000306 	br	400a994 <___vfprintf_internal_r+0x554>
 400a988:	843ffc04 	addi	r16,r16,-16
 400a98c:	ad400204 	addi	r21,r21,8
 400a990:	9c00130e 	bge	r19,r16,400a9e0 <___vfprintf_internal_r+0x5a0>
 400a994:	94800404 	addi	r18,r18,16
 400a998:	8c400044 	addi	r17,r17,1
 400a99c:	af000015 	stw	fp,0(r21)
 400a9a0:	acc00115 	stw	r19,4(r21)
 400a9a4:	dc800e15 	stw	r18,56(sp)
 400a9a8:	dc400d15 	stw	r17,52(sp)
 400a9ac:	a47ff60e 	bge	r20,r17,400a988 <___vfprintf_internal_r+0x548>
 400a9b0:	d9014f17 	ldw	r4,1340(sp)
 400a9b4:	b00b883a 	mov	r5,r22
 400a9b8:	d9800c04 	addi	r6,sp,48
 400a9bc:	d9c15115 	stw	r7,1348(sp)
 400a9c0:	400a3e80 	call	400a3e8 <__sprint_r>
 400a9c4:	d9c15117 	ldw	r7,1348(sp)
 400a9c8:	1000551e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400a9cc:	843ffc04 	addi	r16,r16,-16
 400a9d0:	dc800e17 	ldw	r18,56(sp)
 400a9d4:	dc400d17 	ldw	r17,52(sp)
 400a9d8:	dd401904 	addi	r21,sp,100
 400a9dc:	9c3fed16 	blt	r19,r16,400a994 <___vfprintf_internal_r+0x554>
 400a9e0:	9425883a 	add	r18,r18,r16
 400a9e4:	8c400044 	addi	r17,r17,1
 400a9e8:	008001c4 	movi	r2,7
 400a9ec:	af000015 	stw	fp,0(r21)
 400a9f0:	ac000115 	stw	r16,4(r21)
 400a9f4:	dc800e15 	stw	r18,56(sp)
 400a9f8:	dc400d15 	stw	r17,52(sp)
 400a9fc:	14418216 	blt	r2,r17,400b008 <___vfprintf_internal_r+0xbc8>
 400aa00:	ad400204 	addi	r21,r21,8
 400aa04:	d9014c17 	ldw	r4,1328(sp)
 400aa08:	2080400c 	andi	r2,r4,256
 400aa0c:	10004a1e 	bne	r2,zero,400ab38 <___vfprintf_internal_r+0x6f8>
 400aa10:	d9414117 	ldw	r5,1284(sp)
 400aa14:	91e5883a 	add	r18,r18,r7
 400aa18:	8c400044 	addi	r17,r17,1
 400aa1c:	008001c4 	movi	r2,7
 400aa20:	a9400015 	stw	r5,0(r21)
 400aa24:	a9c00115 	stw	r7,4(r21)
 400aa28:	dc800e15 	stw	r18,56(sp)
 400aa2c:	dc400d15 	stw	r17,52(sp)
 400aa30:	14416716 	blt	r2,r17,400afd0 <___vfprintf_internal_r+0xb90>
 400aa34:	a8c00204 	addi	r3,r21,8
 400aa38:	d9814c17 	ldw	r6,1328(sp)
 400aa3c:	3080010c 	andi	r2,r6,4
 400aa40:	10002826 	beq	r2,zero,400aae4 <___vfprintf_internal_r+0x6a4>
 400aa44:	d8814a17 	ldw	r2,1320(sp)
 400aa48:	d9014517 	ldw	r4,1300(sp)
 400aa4c:	1121c83a 	sub	r16,r2,r4
 400aa50:	0400240e 	bge	zero,r16,400aae4 <___vfprintf_internal_r+0x6a4>
 400aa54:	00800404 	movi	r2,16
 400aa58:	1404550e 	bge	r2,r16,400bbb0 <___vfprintf_internal_r+0x1770>
 400aa5c:	dc400d17 	ldw	r17,52(sp)
 400aa60:	1027883a 	mov	r19,r2
 400aa64:	070100b4 	movhi	fp,1026
 400aa68:	e7118b84 	addi	fp,fp,17966
 400aa6c:	050001c4 	movi	r20,7
 400aa70:	00000306 	br	400aa80 <___vfprintf_internal_r+0x640>
 400aa74:	843ffc04 	addi	r16,r16,-16
 400aa78:	18c00204 	addi	r3,r3,8
 400aa7c:	9c00110e 	bge	r19,r16,400aac4 <___vfprintf_internal_r+0x684>
 400aa80:	94800404 	addi	r18,r18,16
 400aa84:	8c400044 	addi	r17,r17,1
 400aa88:	1f000015 	stw	fp,0(r3)
 400aa8c:	1cc00115 	stw	r19,4(r3)
 400aa90:	dc800e15 	stw	r18,56(sp)
 400aa94:	dc400d15 	stw	r17,52(sp)
 400aa98:	a47ff60e 	bge	r20,r17,400aa74 <___vfprintf_internal_r+0x634>
 400aa9c:	d9014f17 	ldw	r4,1340(sp)
 400aaa0:	b00b883a 	mov	r5,r22
 400aaa4:	d9800c04 	addi	r6,sp,48
 400aaa8:	400a3e80 	call	400a3e8 <__sprint_r>
 400aaac:	10001c1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400aab0:	843ffc04 	addi	r16,r16,-16
 400aab4:	dc800e17 	ldw	r18,56(sp)
 400aab8:	dc400d17 	ldw	r17,52(sp)
 400aabc:	d8c01904 	addi	r3,sp,100
 400aac0:	9c3fef16 	blt	r19,r16,400aa80 <___vfprintf_internal_r+0x640>
 400aac4:	9425883a 	add	r18,r18,r16
 400aac8:	8c400044 	addi	r17,r17,1
 400aacc:	008001c4 	movi	r2,7
 400aad0:	1f000015 	stw	fp,0(r3)
 400aad4:	1c000115 	stw	r16,4(r3)
 400aad8:	dc800e15 	stw	r18,56(sp)
 400aadc:	dc400d15 	stw	r17,52(sp)
 400aae0:	1440cb16 	blt	r2,r17,400ae10 <___vfprintf_internal_r+0x9d0>
 400aae4:	d8814a17 	ldw	r2,1320(sp)
 400aae8:	d9414517 	ldw	r5,1300(sp)
 400aaec:	1140010e 	bge	r2,r5,400aaf4 <___vfprintf_internal_r+0x6b4>
 400aaf0:	2805883a 	mov	r2,r5
 400aaf4:	d9814b17 	ldw	r6,1324(sp)
 400aaf8:	308d883a 	add	r6,r6,r2
 400aafc:	d9814b15 	stw	r6,1324(sp)
 400ab00:	90013b1e 	bne	r18,zero,400aff0 <___vfprintf_internal_r+0xbb0>
 400ab04:	d9c14017 	ldw	r7,1280(sp)
 400ab08:	dd401904 	addi	r21,sp,100
 400ab0c:	d8000d15 	stw	zero,52(sp)
 400ab10:	003ea706 	br	400a5b0 <___vfprintf_internal_r+0x170>
 400ab14:	d8800e17 	ldw	r2,56(sp)
 400ab18:	1005451e 	bne	r2,zero,400c030 <___vfprintf_internal_r+0x1bf0>
 400ab1c:	d8000d15 	stw	zero,52(sp)
 400ab20:	b080030b 	ldhu	r2,12(r22)
 400ab24:	1080100c 	andi	r2,r2,64
 400ab28:	103e8726 	beq	r2,zero,400a548 <___vfprintf_internal_r+0x108>
 400ab2c:	00bfffc4 	movi	r2,-1
 400ab30:	d8814b15 	stw	r2,1324(sp)
 400ab34:	003e8406 	br	400a548 <___vfprintf_internal_r+0x108>
 400ab38:	d9814d17 	ldw	r6,1332(sp)
 400ab3c:	00801944 	movi	r2,101
 400ab40:	11806e16 	blt	r2,r6,400acfc <___vfprintf_internal_r+0x8bc>
 400ab44:	d9414717 	ldw	r5,1308(sp)
 400ab48:	00c00044 	movi	r3,1
 400ab4c:	1943490e 	bge	r3,r5,400b874 <___vfprintf_internal_r+0x1434>
 400ab50:	d8814117 	ldw	r2,1284(sp)
 400ab54:	94800044 	addi	r18,r18,1
 400ab58:	8c400044 	addi	r17,r17,1
 400ab5c:	a8800015 	stw	r2,0(r21)
 400ab60:	008001c4 	movi	r2,7
 400ab64:	a8c00115 	stw	r3,4(r21)
 400ab68:	dc800e15 	stw	r18,56(sp)
 400ab6c:	dc400d15 	stw	r17,52(sp)
 400ab70:	1441ca16 	blt	r2,r17,400b29c <___vfprintf_internal_r+0xe5c>
 400ab74:	a8c00204 	addi	r3,r21,8
 400ab78:	d9014917 	ldw	r4,1316(sp)
 400ab7c:	00800044 	movi	r2,1
 400ab80:	94800044 	addi	r18,r18,1
 400ab84:	8c400044 	addi	r17,r17,1
 400ab88:	18800115 	stw	r2,4(r3)
 400ab8c:	008001c4 	movi	r2,7
 400ab90:	19000015 	stw	r4,0(r3)
 400ab94:	dc800e15 	stw	r18,56(sp)
 400ab98:	dc400d15 	stw	r17,52(sp)
 400ab9c:	1441b616 	blt	r2,r17,400b278 <___vfprintf_internal_r+0xe38>
 400aba0:	1cc00204 	addi	r19,r3,8
 400aba4:	d9014217 	ldw	r4,1288(sp)
 400aba8:	d9414317 	ldw	r5,1292(sp)
 400abac:	000d883a 	mov	r6,zero
 400abb0:	000f883a 	mov	r7,zero
 400abb4:	4016c980 	call	4016c98 <__nedf2>
 400abb8:	10017426 	beq	r2,zero,400b18c <___vfprintf_internal_r+0xd4c>
 400abbc:	d9414717 	ldw	r5,1308(sp)
 400abc0:	d9814117 	ldw	r6,1284(sp)
 400abc4:	8c400044 	addi	r17,r17,1
 400abc8:	2c85883a 	add	r2,r5,r18
 400abcc:	14bfffc4 	addi	r18,r2,-1
 400abd0:	28bfffc4 	addi	r2,r5,-1
 400abd4:	30c00044 	addi	r3,r6,1
 400abd8:	98800115 	stw	r2,4(r19)
 400abdc:	008001c4 	movi	r2,7
 400abe0:	98c00015 	stw	r3,0(r19)
 400abe4:	dc800e15 	stw	r18,56(sp)
 400abe8:	dc400d15 	stw	r17,52(sp)
 400abec:	14418e16 	blt	r2,r17,400b228 <___vfprintf_internal_r+0xde8>
 400abf0:	9cc00204 	addi	r19,r19,8
 400abf4:	d9414817 	ldw	r5,1312(sp)
 400abf8:	d8800804 	addi	r2,sp,32
 400abfc:	8c400044 	addi	r17,r17,1
 400ac00:	9165883a 	add	r18,r18,r5
 400ac04:	98800015 	stw	r2,0(r19)
 400ac08:	008001c4 	movi	r2,7
 400ac0c:	99400115 	stw	r5,4(r19)
 400ac10:	dc800e15 	stw	r18,56(sp)
 400ac14:	dc400d15 	stw	r17,52(sp)
 400ac18:	1440ed16 	blt	r2,r17,400afd0 <___vfprintf_internal_r+0xb90>
 400ac1c:	98c00204 	addi	r3,r19,8
 400ac20:	003f8506 	br	400aa38 <___vfprintf_internal_r+0x5f8>
 400ac24:	d9814a17 	ldw	r6,1320(sp)
 400ac28:	d8814517 	ldw	r2,1300(sp)
 400ac2c:	30a1c83a 	sub	r16,r6,r2
 400ac30:	043f4b0e 	bge	zero,r16,400a960 <___vfprintf_internal_r+0x520>
 400ac34:	00800404 	movi	r2,16
 400ac38:	14043a0e 	bge	r2,r16,400bd24 <___vfprintf_internal_r+0x18e4>
 400ac3c:	1027883a 	mov	r19,r2
 400ac40:	070100b4 	movhi	fp,1026
 400ac44:	e7118784 	addi	fp,fp,17950
 400ac48:	050001c4 	movi	r20,7
 400ac4c:	00000306 	br	400ac5c <___vfprintf_internal_r+0x81c>
 400ac50:	843ffc04 	addi	r16,r16,-16
 400ac54:	ad400204 	addi	r21,r21,8
 400ac58:	9c00130e 	bge	r19,r16,400aca8 <___vfprintf_internal_r+0x868>
 400ac5c:	94800404 	addi	r18,r18,16
 400ac60:	8c400044 	addi	r17,r17,1
 400ac64:	af000015 	stw	fp,0(r21)
 400ac68:	acc00115 	stw	r19,4(r21)
 400ac6c:	dc800e15 	stw	r18,56(sp)
 400ac70:	dc400d15 	stw	r17,52(sp)
 400ac74:	a47ff60e 	bge	r20,r17,400ac50 <___vfprintf_internal_r+0x810>
 400ac78:	d9014f17 	ldw	r4,1340(sp)
 400ac7c:	b00b883a 	mov	r5,r22
 400ac80:	d9800c04 	addi	r6,sp,48
 400ac84:	d9c15115 	stw	r7,1348(sp)
 400ac88:	400a3e80 	call	400a3e8 <__sprint_r>
 400ac8c:	d9c15117 	ldw	r7,1348(sp)
 400ac90:	103fa31e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400ac94:	843ffc04 	addi	r16,r16,-16
 400ac98:	dc800e17 	ldw	r18,56(sp)
 400ac9c:	dc400d17 	ldw	r17,52(sp)
 400aca0:	dd401904 	addi	r21,sp,100
 400aca4:	9c3fed16 	blt	r19,r16,400ac5c <___vfprintf_internal_r+0x81c>
 400aca8:	9425883a 	add	r18,r18,r16
 400acac:	8c400044 	addi	r17,r17,1
 400acb0:	008001c4 	movi	r2,7
 400acb4:	af000015 	stw	fp,0(r21)
 400acb8:	ac000115 	stw	r16,4(r21)
 400acbc:	dc800e15 	stw	r18,56(sp)
 400acc0:	dc400d15 	stw	r17,52(sp)
 400acc4:	14416116 	blt	r2,r17,400b24c <___vfprintf_internal_r+0xe0c>
 400acc8:	ad400204 	addi	r21,r21,8
 400accc:	003f2406 	br	400a960 <___vfprintf_internal_r+0x520>
 400acd0:	d9014f17 	ldw	r4,1340(sp)
 400acd4:	400f67c0 	call	400f67c <__sinit>
 400acd8:	d9c15117 	ldw	r7,1348(sp)
 400acdc:	003def06 	br	400a49c <___vfprintf_internal_r+0x5c>
 400ace0:	d9014f17 	ldw	r4,1340(sp)
 400ace4:	b00b883a 	mov	r5,r22
 400ace8:	d9c15115 	stw	r7,1348(sp)
 400acec:	400dab00 	call	400dab0 <__swsetup_r>
 400acf0:	d9c15117 	ldw	r7,1348(sp)
 400acf4:	103dee26 	beq	r2,zero,400a4b0 <___vfprintf_internal_r+0x70>
 400acf8:	003f8c06 	br	400ab2c <___vfprintf_internal_r+0x6ec>
 400acfc:	d9014217 	ldw	r4,1288(sp)
 400ad00:	d9414317 	ldw	r5,1292(sp)
 400ad04:	000d883a 	mov	r6,zero
 400ad08:	000f883a 	mov	r7,zero
 400ad0c:	4016c100 	call	4016c10 <__eqdf2>
 400ad10:	1000f21e 	bne	r2,zero,400b0dc <___vfprintf_internal_r+0xc9c>
 400ad14:	008100b4 	movhi	r2,1026
 400ad18:	10918704 	addi	r2,r2,17948
 400ad1c:	94800044 	addi	r18,r18,1
 400ad20:	8c400044 	addi	r17,r17,1
 400ad24:	a8800015 	stw	r2,0(r21)
 400ad28:	00c00044 	movi	r3,1
 400ad2c:	008001c4 	movi	r2,7
 400ad30:	a8c00115 	stw	r3,4(r21)
 400ad34:	dc800e15 	stw	r18,56(sp)
 400ad38:	dc400d15 	stw	r17,52(sp)
 400ad3c:	14430016 	blt	r2,r17,400b940 <___vfprintf_internal_r+0x1500>
 400ad40:	a8c00204 	addi	r3,r21,8
 400ad44:	d8800517 	ldw	r2,20(sp)
 400ad48:	d9014717 	ldw	r4,1308(sp)
 400ad4c:	11015c0e 	bge	r2,r4,400b2c0 <___vfprintf_internal_r+0xe80>
 400ad50:	dc400d17 	ldw	r17,52(sp)
 400ad54:	d9814917 	ldw	r6,1316(sp)
 400ad58:	00800044 	movi	r2,1
 400ad5c:	94800044 	addi	r18,r18,1
 400ad60:	8c400044 	addi	r17,r17,1
 400ad64:	18800115 	stw	r2,4(r3)
 400ad68:	008001c4 	movi	r2,7
 400ad6c:	19800015 	stw	r6,0(r3)
 400ad70:	dc800e15 	stw	r18,56(sp)
 400ad74:	dc400d15 	stw	r17,52(sp)
 400ad78:	14431616 	blt	r2,r17,400b9d4 <___vfprintf_internal_r+0x1594>
 400ad7c:	18c00204 	addi	r3,r3,8
 400ad80:	d8814717 	ldw	r2,1308(sp)
 400ad84:	143fffc4 	addi	r16,r2,-1
 400ad88:	043f2b0e 	bge	zero,r16,400aa38 <___vfprintf_internal_r+0x5f8>
 400ad8c:	00800404 	movi	r2,16
 400ad90:	1402a80e 	bge	r2,r16,400b834 <___vfprintf_internal_r+0x13f4>
 400ad94:	dc400d17 	ldw	r17,52(sp)
 400ad98:	1027883a 	mov	r19,r2
 400ad9c:	070100b4 	movhi	fp,1026
 400ada0:	e7118784 	addi	fp,fp,17950
 400ada4:	050001c4 	movi	r20,7
 400ada8:	00000306 	br	400adb8 <___vfprintf_internal_r+0x978>
 400adac:	18c00204 	addi	r3,r3,8
 400adb0:	843ffc04 	addi	r16,r16,-16
 400adb4:	9c02a20e 	bge	r19,r16,400b840 <___vfprintf_internal_r+0x1400>
 400adb8:	94800404 	addi	r18,r18,16
 400adbc:	8c400044 	addi	r17,r17,1
 400adc0:	1f000015 	stw	fp,0(r3)
 400adc4:	1cc00115 	stw	r19,4(r3)
 400adc8:	dc800e15 	stw	r18,56(sp)
 400adcc:	dc400d15 	stw	r17,52(sp)
 400add0:	a47ff60e 	bge	r20,r17,400adac <___vfprintf_internal_r+0x96c>
 400add4:	d9014f17 	ldw	r4,1340(sp)
 400add8:	b00b883a 	mov	r5,r22
 400addc:	d9800c04 	addi	r6,sp,48
 400ade0:	400a3e80 	call	400a3e8 <__sprint_r>
 400ade4:	103f4e1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400ade8:	dc800e17 	ldw	r18,56(sp)
 400adec:	dc400d17 	ldw	r17,52(sp)
 400adf0:	d8c01904 	addi	r3,sp,100
 400adf4:	003fee06 	br	400adb0 <___vfprintf_internal_r+0x970>
 400adf8:	d8802c0b 	ldhu	r2,176(sp)
 400adfc:	00ffffc4 	movi	r3,-1
 400ae00:	d8c14b15 	stw	r3,1324(sp)
 400ae04:	1080100c 	andi	r2,r2,64
 400ae08:	103dcc1e 	bne	r2,zero,400a53c <___vfprintf_internal_r+0xfc>
 400ae0c:	003dce06 	br	400a548 <___vfprintf_internal_r+0x108>
 400ae10:	d9014f17 	ldw	r4,1340(sp)
 400ae14:	b00b883a 	mov	r5,r22
 400ae18:	d9800c04 	addi	r6,sp,48
 400ae1c:	400a3e80 	call	400a3e8 <__sprint_r>
 400ae20:	103f3f1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400ae24:	dc800e17 	ldw	r18,56(sp)
 400ae28:	003f2e06 	br	400aae4 <___vfprintf_internal_r+0x6a4>
 400ae2c:	d9414c17 	ldw	r5,1328(sp)
 400ae30:	29400414 	ori	r5,r5,16
 400ae34:	d9414c15 	stw	r5,1328(sp)
 400ae38:	d9814c17 	ldw	r6,1328(sp)
 400ae3c:	3080080c 	andi	r2,r6,32
 400ae40:	10014f1e 	bne	r2,zero,400b380 <___vfprintf_internal_r+0xf40>
 400ae44:	d8c14c17 	ldw	r3,1328(sp)
 400ae48:	1880040c 	andi	r2,r3,16
 400ae4c:	1002f01e 	bne	r2,zero,400ba10 <___vfprintf_internal_r+0x15d0>
 400ae50:	d9014c17 	ldw	r4,1328(sp)
 400ae54:	2080100c 	andi	r2,r4,64
 400ae58:	1002ed26 	beq	r2,zero,400ba10 <___vfprintf_internal_r+0x15d0>
 400ae5c:	3880000f 	ldh	r2,0(r7)
 400ae60:	39c00104 	addi	r7,r7,4
 400ae64:	d9c14015 	stw	r7,1280(sp)
 400ae68:	1023d7fa 	srai	r17,r2,31
 400ae6c:	1021883a 	mov	r16,r2
 400ae70:	88037816 	blt	r17,zero,400bc54 <___vfprintf_internal_r+0x1814>
 400ae74:	01000044 	movi	r4,1
 400ae78:	98000416 	blt	r19,zero,400ae8c <___vfprintf_internal_r+0xa4c>
 400ae7c:	d8c14c17 	ldw	r3,1328(sp)
 400ae80:	00bfdfc4 	movi	r2,-129
 400ae84:	1886703a 	and	r3,r3,r2
 400ae88:	d8c14c15 	stw	r3,1328(sp)
 400ae8c:	8444b03a 	or	r2,r16,r17
 400ae90:	10022c1e 	bne	r2,zero,400b744 <___vfprintf_internal_r+0x1304>
 400ae94:	98022b1e 	bne	r19,zero,400b744 <___vfprintf_internal_r+0x1304>
 400ae98:	20803fcc 	andi	r2,r4,255
 400ae9c:	1002a126 	beq	r2,zero,400b924 <___vfprintf_internal_r+0x14e4>
 400aea0:	d8c01904 	addi	r3,sp,100
 400aea4:	dd000f04 	addi	r20,sp,60
 400aea8:	d8c14115 	stw	r3,1284(sp)
 400aeac:	d8c14117 	ldw	r3,1284(sp)
 400aeb0:	dcc14515 	stw	r19,1300(sp)
 400aeb4:	a0c5c83a 	sub	r2,r20,r3
 400aeb8:	11c00a04 	addi	r7,r2,40
 400aebc:	99c0010e 	bge	r19,r7,400aec4 <___vfprintf_internal_r+0xa84>
 400aec0:	d9c14515 	stw	r7,1300(sp)
 400aec4:	dcc14615 	stw	r19,1304(sp)
 400aec8:	d8800407 	ldb	r2,16(sp)
 400aecc:	103e4c26 	beq	r2,zero,400a800 <___vfprintf_internal_r+0x3c0>
 400aed0:	d8814517 	ldw	r2,1300(sp)
 400aed4:	10800044 	addi	r2,r2,1
 400aed8:	d8814515 	stw	r2,1300(sp)
 400aedc:	003e4806 	br	400a800 <___vfprintf_internal_r+0x3c0>
 400aee0:	d9814c17 	ldw	r6,1328(sp)
 400aee4:	31800414 	ori	r6,r6,16
 400aee8:	d9814c15 	stw	r6,1328(sp)
 400aeec:	d8c14c17 	ldw	r3,1328(sp)
 400aef0:	1880080c 	andi	r2,r3,32
 400aef4:	1001271e 	bne	r2,zero,400b394 <___vfprintf_internal_r+0xf54>
 400aef8:	d9414c17 	ldw	r5,1328(sp)
 400aefc:	2880040c 	andi	r2,r5,16
 400af00:	1002bc1e 	bne	r2,zero,400b9f4 <___vfprintf_internal_r+0x15b4>
 400af04:	d9814c17 	ldw	r6,1328(sp)
 400af08:	3080100c 	andi	r2,r6,64
 400af0c:	1002b926 	beq	r2,zero,400b9f4 <___vfprintf_internal_r+0x15b4>
 400af10:	3c00000b 	ldhu	r16,0(r7)
 400af14:	0009883a 	mov	r4,zero
 400af18:	39c00104 	addi	r7,r7,4
 400af1c:	0023883a 	mov	r17,zero
 400af20:	d9c14015 	stw	r7,1280(sp)
 400af24:	d8000405 	stb	zero,16(sp)
 400af28:	003fd306 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400af2c:	d9014c17 	ldw	r4,1328(sp)
 400af30:	21000414 	ori	r4,r4,16
 400af34:	d9014c15 	stw	r4,1328(sp)
 400af38:	d9414c17 	ldw	r5,1328(sp)
 400af3c:	2880080c 	andi	r2,r5,32
 400af40:	1001081e 	bne	r2,zero,400b364 <___vfprintf_internal_r+0xf24>
 400af44:	d8c14c17 	ldw	r3,1328(sp)
 400af48:	1880040c 	andi	r2,r3,16
 400af4c:	1002b61e 	bne	r2,zero,400ba28 <___vfprintf_internal_r+0x15e8>
 400af50:	d9014c17 	ldw	r4,1328(sp)
 400af54:	2080100c 	andi	r2,r4,64
 400af58:	1002b326 	beq	r2,zero,400ba28 <___vfprintf_internal_r+0x15e8>
 400af5c:	3c00000b 	ldhu	r16,0(r7)
 400af60:	01000044 	movi	r4,1
 400af64:	39c00104 	addi	r7,r7,4
 400af68:	0023883a 	mov	r17,zero
 400af6c:	d9c14015 	stw	r7,1280(sp)
 400af70:	d8000405 	stb	zero,16(sp)
 400af74:	003fc006 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400af78:	d9014f17 	ldw	r4,1340(sp)
 400af7c:	b00b883a 	mov	r5,r22
 400af80:	d9800c04 	addi	r6,sp,48
 400af84:	400a3e80 	call	400a3e8 <__sprint_r>
 400af88:	103ee51e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400af8c:	dc800e17 	ldw	r18,56(sp)
 400af90:	d8c01904 	addi	r3,sp,100
 400af94:	d9814c17 	ldw	r6,1328(sp)
 400af98:	3080004c 	andi	r2,r6,1
 400af9c:	1005003a 	cmpeq	r2,r2,zero
 400afa0:	103ea51e 	bne	r2,zero,400aa38 <___vfprintf_internal_r+0x5f8>
 400afa4:	00800044 	movi	r2,1
 400afa8:	dc400d17 	ldw	r17,52(sp)
 400afac:	18800115 	stw	r2,4(r3)
 400afb0:	d8814917 	ldw	r2,1316(sp)
 400afb4:	94800044 	addi	r18,r18,1
 400afb8:	8c400044 	addi	r17,r17,1
 400afbc:	18800015 	stw	r2,0(r3)
 400afc0:	008001c4 	movi	r2,7
 400afc4:	dc800e15 	stw	r18,56(sp)
 400afc8:	dc400d15 	stw	r17,52(sp)
 400afcc:	1442240e 	bge	r2,r17,400b860 <___vfprintf_internal_r+0x1420>
 400afd0:	d9014f17 	ldw	r4,1340(sp)
 400afd4:	b00b883a 	mov	r5,r22
 400afd8:	d9800c04 	addi	r6,sp,48
 400afdc:	400a3e80 	call	400a3e8 <__sprint_r>
 400afe0:	103ecf1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400afe4:	dc800e17 	ldw	r18,56(sp)
 400afe8:	d8c01904 	addi	r3,sp,100
 400afec:	003e9206 	br	400aa38 <___vfprintf_internal_r+0x5f8>
 400aff0:	d9014f17 	ldw	r4,1340(sp)
 400aff4:	b00b883a 	mov	r5,r22
 400aff8:	d9800c04 	addi	r6,sp,48
 400affc:	400a3e80 	call	400a3e8 <__sprint_r>
 400b000:	103ec026 	beq	r2,zero,400ab04 <___vfprintf_internal_r+0x6c4>
 400b004:	003ec606 	br	400ab20 <___vfprintf_internal_r+0x6e0>
 400b008:	d9014f17 	ldw	r4,1340(sp)
 400b00c:	b00b883a 	mov	r5,r22
 400b010:	d9800c04 	addi	r6,sp,48
 400b014:	d9c15115 	stw	r7,1348(sp)
 400b018:	400a3e80 	call	400a3e8 <__sprint_r>
 400b01c:	d9c15117 	ldw	r7,1348(sp)
 400b020:	103ebf1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b024:	dc800e17 	ldw	r18,56(sp)
 400b028:	dc400d17 	ldw	r17,52(sp)
 400b02c:	dd401904 	addi	r21,sp,100
 400b030:	003e7406 	br	400aa04 <___vfprintf_internal_r+0x5c4>
 400b034:	d9014f17 	ldw	r4,1340(sp)
 400b038:	b00b883a 	mov	r5,r22
 400b03c:	d9800c04 	addi	r6,sp,48
 400b040:	d9c15115 	stw	r7,1348(sp)
 400b044:	400a3e80 	call	400a3e8 <__sprint_r>
 400b048:	d9c15117 	ldw	r7,1348(sp)
 400b04c:	103eb41e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b050:	dd401904 	addi	r21,sp,100
 400b054:	003d6d06 	br	400a60c <___vfprintf_internal_r+0x1cc>
 400b058:	d9014f17 	ldw	r4,1340(sp)
 400b05c:	b00b883a 	mov	r5,r22
 400b060:	d9800c04 	addi	r6,sp,48
 400b064:	d9c15115 	stw	r7,1348(sp)
 400b068:	400a3e80 	call	400a3e8 <__sprint_r>
 400b06c:	d9c15117 	ldw	r7,1348(sp)
 400b070:	103eab1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b074:	dc800e17 	ldw	r18,56(sp)
 400b078:	dc400d17 	ldw	r17,52(sp)
 400b07c:	dd401904 	addi	r21,sp,100
 400b080:	003e3406 	br	400a954 <___vfprintf_internal_r+0x514>
 400b084:	d9014f17 	ldw	r4,1340(sp)
 400b088:	b00b883a 	mov	r5,r22
 400b08c:	d9800c04 	addi	r6,sp,48
 400b090:	d9c15115 	stw	r7,1348(sp)
 400b094:	400a3e80 	call	400a3e8 <__sprint_r>
 400b098:	d9c15117 	ldw	r7,1348(sp)
 400b09c:	103ea01e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b0a0:	dc800e17 	ldw	r18,56(sp)
 400b0a4:	dc400d17 	ldw	r17,52(sp)
 400b0a8:	dd401904 	addi	r21,sp,100
 400b0ac:	003e1c06 	br	400a920 <___vfprintf_internal_r+0x4e0>
 400b0b0:	d9014f17 	ldw	r4,1340(sp)
 400b0b4:	b00b883a 	mov	r5,r22
 400b0b8:	d9800c04 	addi	r6,sp,48
 400b0bc:	d9c15115 	stw	r7,1348(sp)
 400b0c0:	400a3e80 	call	400a3e8 <__sprint_r>
 400b0c4:	d9c15117 	ldw	r7,1348(sp)
 400b0c8:	103e951e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b0cc:	dc800e17 	ldw	r18,56(sp)
 400b0d0:	dc400d17 	ldw	r17,52(sp)
 400b0d4:	dd401904 	addi	r21,sp,100
 400b0d8:	003e0406 	br	400a8ec <___vfprintf_internal_r+0x4ac>
 400b0dc:	d9000517 	ldw	r4,20(sp)
 400b0e0:	0102580e 	bge	zero,r4,400ba44 <___vfprintf_internal_r+0x1604>
 400b0e4:	d9814717 	ldw	r6,1308(sp)
 400b0e8:	21807a16 	blt	r4,r6,400b2d4 <___vfprintf_internal_r+0xe94>
 400b0ec:	d8814117 	ldw	r2,1284(sp)
 400b0f0:	91a5883a 	add	r18,r18,r6
 400b0f4:	8c400044 	addi	r17,r17,1
 400b0f8:	a8800015 	stw	r2,0(r21)
 400b0fc:	008001c4 	movi	r2,7
 400b100:	a9800115 	stw	r6,4(r21)
 400b104:	dc800e15 	stw	r18,56(sp)
 400b108:	dc400d15 	stw	r17,52(sp)
 400b10c:	1442fc16 	blt	r2,r17,400bd00 <___vfprintf_internal_r+0x18c0>
 400b110:	a8c00204 	addi	r3,r21,8
 400b114:	d9414717 	ldw	r5,1308(sp)
 400b118:	2161c83a 	sub	r16,r4,r5
 400b11c:	043f9d0e 	bge	zero,r16,400af94 <___vfprintf_internal_r+0xb54>
 400b120:	00800404 	movi	r2,16
 400b124:	1402190e 	bge	r2,r16,400b98c <___vfprintf_internal_r+0x154c>
 400b128:	dc400d17 	ldw	r17,52(sp)
 400b12c:	1027883a 	mov	r19,r2
 400b130:	070100b4 	movhi	fp,1026
 400b134:	e7118784 	addi	fp,fp,17950
 400b138:	050001c4 	movi	r20,7
 400b13c:	00000306 	br	400b14c <___vfprintf_internal_r+0xd0c>
 400b140:	18c00204 	addi	r3,r3,8
 400b144:	843ffc04 	addi	r16,r16,-16
 400b148:	9c02130e 	bge	r19,r16,400b998 <___vfprintf_internal_r+0x1558>
 400b14c:	94800404 	addi	r18,r18,16
 400b150:	8c400044 	addi	r17,r17,1
 400b154:	1f000015 	stw	fp,0(r3)
 400b158:	1cc00115 	stw	r19,4(r3)
 400b15c:	dc800e15 	stw	r18,56(sp)
 400b160:	dc400d15 	stw	r17,52(sp)
 400b164:	a47ff60e 	bge	r20,r17,400b140 <___vfprintf_internal_r+0xd00>
 400b168:	d9014f17 	ldw	r4,1340(sp)
 400b16c:	b00b883a 	mov	r5,r22
 400b170:	d9800c04 	addi	r6,sp,48
 400b174:	400a3e80 	call	400a3e8 <__sprint_r>
 400b178:	103e691e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b17c:	dc800e17 	ldw	r18,56(sp)
 400b180:	dc400d17 	ldw	r17,52(sp)
 400b184:	d8c01904 	addi	r3,sp,100
 400b188:	003fee06 	br	400b144 <___vfprintf_internal_r+0xd04>
 400b18c:	d8814717 	ldw	r2,1308(sp)
 400b190:	143fffc4 	addi	r16,r2,-1
 400b194:	043e970e 	bge	zero,r16,400abf4 <___vfprintf_internal_r+0x7b4>
 400b198:	00800404 	movi	r2,16
 400b19c:	1400180e 	bge	r2,r16,400b200 <___vfprintf_internal_r+0xdc0>
 400b1a0:	1029883a 	mov	r20,r2
 400b1a4:	070100b4 	movhi	fp,1026
 400b1a8:	e7118784 	addi	fp,fp,17950
 400b1ac:	054001c4 	movi	r21,7
 400b1b0:	00000306 	br	400b1c0 <___vfprintf_internal_r+0xd80>
 400b1b4:	9cc00204 	addi	r19,r19,8
 400b1b8:	843ffc04 	addi	r16,r16,-16
 400b1bc:	a400120e 	bge	r20,r16,400b208 <___vfprintf_internal_r+0xdc8>
 400b1c0:	94800404 	addi	r18,r18,16
 400b1c4:	8c400044 	addi	r17,r17,1
 400b1c8:	9f000015 	stw	fp,0(r19)
 400b1cc:	9d000115 	stw	r20,4(r19)
 400b1d0:	dc800e15 	stw	r18,56(sp)
 400b1d4:	dc400d15 	stw	r17,52(sp)
 400b1d8:	ac7ff60e 	bge	r21,r17,400b1b4 <___vfprintf_internal_r+0xd74>
 400b1dc:	d9014f17 	ldw	r4,1340(sp)
 400b1e0:	b00b883a 	mov	r5,r22
 400b1e4:	d9800c04 	addi	r6,sp,48
 400b1e8:	400a3e80 	call	400a3e8 <__sprint_r>
 400b1ec:	103e4c1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b1f0:	dc800e17 	ldw	r18,56(sp)
 400b1f4:	dc400d17 	ldw	r17,52(sp)
 400b1f8:	dcc01904 	addi	r19,sp,100
 400b1fc:	003fee06 	br	400b1b8 <___vfprintf_internal_r+0xd78>
 400b200:	070100b4 	movhi	fp,1026
 400b204:	e7118784 	addi	fp,fp,17950
 400b208:	9425883a 	add	r18,r18,r16
 400b20c:	8c400044 	addi	r17,r17,1
 400b210:	008001c4 	movi	r2,7
 400b214:	9f000015 	stw	fp,0(r19)
 400b218:	9c000115 	stw	r16,4(r19)
 400b21c:	dc800e15 	stw	r18,56(sp)
 400b220:	dc400d15 	stw	r17,52(sp)
 400b224:	147e720e 	bge	r2,r17,400abf0 <___vfprintf_internal_r+0x7b0>
 400b228:	d9014f17 	ldw	r4,1340(sp)
 400b22c:	b00b883a 	mov	r5,r22
 400b230:	d9800c04 	addi	r6,sp,48
 400b234:	400a3e80 	call	400a3e8 <__sprint_r>
 400b238:	103e391e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b23c:	dc800e17 	ldw	r18,56(sp)
 400b240:	dc400d17 	ldw	r17,52(sp)
 400b244:	dcc01904 	addi	r19,sp,100
 400b248:	003e6a06 	br	400abf4 <___vfprintf_internal_r+0x7b4>
 400b24c:	d9014f17 	ldw	r4,1340(sp)
 400b250:	b00b883a 	mov	r5,r22
 400b254:	d9800c04 	addi	r6,sp,48
 400b258:	d9c15115 	stw	r7,1348(sp)
 400b25c:	400a3e80 	call	400a3e8 <__sprint_r>
 400b260:	d9c15117 	ldw	r7,1348(sp)
 400b264:	103e2e1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b268:	dc800e17 	ldw	r18,56(sp)
 400b26c:	dc400d17 	ldw	r17,52(sp)
 400b270:	dd401904 	addi	r21,sp,100
 400b274:	003dba06 	br	400a960 <___vfprintf_internal_r+0x520>
 400b278:	d9014f17 	ldw	r4,1340(sp)
 400b27c:	b00b883a 	mov	r5,r22
 400b280:	d9800c04 	addi	r6,sp,48
 400b284:	400a3e80 	call	400a3e8 <__sprint_r>
 400b288:	103e251e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b28c:	dc800e17 	ldw	r18,56(sp)
 400b290:	dc400d17 	ldw	r17,52(sp)
 400b294:	dcc01904 	addi	r19,sp,100
 400b298:	003e4206 	br	400aba4 <___vfprintf_internal_r+0x764>
 400b29c:	d9014f17 	ldw	r4,1340(sp)
 400b2a0:	b00b883a 	mov	r5,r22
 400b2a4:	d9800c04 	addi	r6,sp,48
 400b2a8:	400a3e80 	call	400a3e8 <__sprint_r>
 400b2ac:	103e1c1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b2b0:	dc800e17 	ldw	r18,56(sp)
 400b2b4:	dc400d17 	ldw	r17,52(sp)
 400b2b8:	d8c01904 	addi	r3,sp,100
 400b2bc:	003e2e06 	br	400ab78 <___vfprintf_internal_r+0x738>
 400b2c0:	d9414c17 	ldw	r5,1328(sp)
 400b2c4:	2880004c 	andi	r2,r5,1
 400b2c8:	1005003a 	cmpeq	r2,r2,zero
 400b2cc:	103dda1e 	bne	r2,zero,400aa38 <___vfprintf_internal_r+0x5f8>
 400b2d0:	003e9f06 	br	400ad50 <___vfprintf_internal_r+0x910>
 400b2d4:	d8c14117 	ldw	r3,1284(sp)
 400b2d8:	9125883a 	add	r18,r18,r4
 400b2dc:	8c400044 	addi	r17,r17,1
 400b2e0:	008001c4 	movi	r2,7
 400b2e4:	a8c00015 	stw	r3,0(r21)
 400b2e8:	a9000115 	stw	r4,4(r21)
 400b2ec:	dc800e15 	stw	r18,56(sp)
 400b2f0:	dc400d15 	stw	r17,52(sp)
 400b2f4:	14426c16 	blt	r2,r17,400bca8 <___vfprintf_internal_r+0x1868>
 400b2f8:	a8c00204 	addi	r3,r21,8
 400b2fc:	d9414917 	ldw	r5,1316(sp)
 400b300:	00800044 	movi	r2,1
 400b304:	94800044 	addi	r18,r18,1
 400b308:	8c400044 	addi	r17,r17,1
 400b30c:	18800115 	stw	r2,4(r3)
 400b310:	008001c4 	movi	r2,7
 400b314:	19400015 	stw	r5,0(r3)
 400b318:	dc800e15 	stw	r18,56(sp)
 400b31c:	dc400d15 	stw	r17,52(sp)
 400b320:	2021883a 	mov	r16,r4
 400b324:	14425616 	blt	r2,r17,400bc80 <___vfprintf_internal_r+0x1840>
 400b328:	19400204 	addi	r5,r3,8
 400b32c:	d9814717 	ldw	r6,1308(sp)
 400b330:	8c400044 	addi	r17,r17,1
 400b334:	dc400d15 	stw	r17,52(sp)
 400b338:	3107c83a 	sub	r3,r6,r4
 400b33c:	d9014117 	ldw	r4,1284(sp)
 400b340:	90e5883a 	add	r18,r18,r3
 400b344:	28c00115 	stw	r3,4(r5)
 400b348:	8105883a 	add	r2,r16,r4
 400b34c:	28800015 	stw	r2,0(r5)
 400b350:	008001c4 	movi	r2,7
 400b354:	dc800e15 	stw	r18,56(sp)
 400b358:	147f1d16 	blt	r2,r17,400afd0 <___vfprintf_internal_r+0xb90>
 400b35c:	28c00204 	addi	r3,r5,8
 400b360:	003db506 	br	400aa38 <___vfprintf_internal_r+0x5f8>
 400b364:	3c000017 	ldw	r16,0(r7)
 400b368:	3c400117 	ldw	r17,4(r7)
 400b36c:	39800204 	addi	r6,r7,8
 400b370:	01000044 	movi	r4,1
 400b374:	d9814015 	stw	r6,1280(sp)
 400b378:	d8000405 	stb	zero,16(sp)
 400b37c:	003ebe06 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400b380:	3c000017 	ldw	r16,0(r7)
 400b384:	3c400117 	ldw	r17,4(r7)
 400b388:	38800204 	addi	r2,r7,8
 400b38c:	d8814015 	stw	r2,1280(sp)
 400b390:	003eb706 	br	400ae70 <___vfprintf_internal_r+0xa30>
 400b394:	3c000017 	ldw	r16,0(r7)
 400b398:	3c400117 	ldw	r17,4(r7)
 400b39c:	39000204 	addi	r4,r7,8
 400b3a0:	d9014015 	stw	r4,1280(sp)
 400b3a4:	0009883a 	mov	r4,zero
 400b3a8:	d8000405 	stb	zero,16(sp)
 400b3ac:	003eb206 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400b3b0:	38c00017 	ldw	r3,0(r7)
 400b3b4:	39c00104 	addi	r7,r7,4
 400b3b8:	d8c14a15 	stw	r3,1320(sp)
 400b3bc:	1800d70e 	bge	r3,zero,400b71c <___vfprintf_internal_r+0x12dc>
 400b3c0:	00c7c83a 	sub	r3,zero,r3
 400b3c4:	d8c14a15 	stw	r3,1320(sp)
 400b3c8:	d9014c17 	ldw	r4,1328(sp)
 400b3cc:	b8c00007 	ldb	r3,0(r23)
 400b3d0:	21000114 	ori	r4,r4,4
 400b3d4:	d9014c15 	stw	r4,1328(sp)
 400b3d8:	003c9806 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b3dc:	d9814c17 	ldw	r6,1328(sp)
 400b3e0:	3080080c 	andi	r2,r6,32
 400b3e4:	1001f626 	beq	r2,zero,400bbc0 <___vfprintf_internal_r+0x1780>
 400b3e8:	d9014b17 	ldw	r4,1324(sp)
 400b3ec:	38800017 	ldw	r2,0(r7)
 400b3f0:	39c00104 	addi	r7,r7,4
 400b3f4:	d9c14015 	stw	r7,1280(sp)
 400b3f8:	2007d7fa 	srai	r3,r4,31
 400b3fc:	d9c14017 	ldw	r7,1280(sp)
 400b400:	11000015 	stw	r4,0(r2)
 400b404:	10c00115 	stw	r3,4(r2)
 400b408:	003c6906 	br	400a5b0 <___vfprintf_internal_r+0x170>
 400b40c:	b8c00007 	ldb	r3,0(r23)
 400b410:	00801b04 	movi	r2,108
 400b414:	18825526 	beq	r3,r2,400bd6c <___vfprintf_internal_r+0x192c>
 400b418:	d9414c17 	ldw	r5,1328(sp)
 400b41c:	29400414 	ori	r5,r5,16
 400b420:	d9414c15 	stw	r5,1328(sp)
 400b424:	003c8506 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b428:	d9814c17 	ldw	r6,1328(sp)
 400b42c:	b8c00007 	ldb	r3,0(r23)
 400b430:	31800814 	ori	r6,r6,32
 400b434:	d9814c15 	stw	r6,1328(sp)
 400b438:	003c8006 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b43c:	d8814c17 	ldw	r2,1328(sp)
 400b440:	3c000017 	ldw	r16,0(r7)
 400b444:	00c01e04 	movi	r3,120
 400b448:	10800094 	ori	r2,r2,2
 400b44c:	d8814c15 	stw	r2,1328(sp)
 400b450:	39c00104 	addi	r7,r7,4
 400b454:	014100b4 	movhi	r5,1026
 400b458:	29517004 	addi	r5,r5,17856
 400b45c:	00800c04 	movi	r2,48
 400b460:	0023883a 	mov	r17,zero
 400b464:	01000084 	movi	r4,2
 400b468:	d9c14015 	stw	r7,1280(sp)
 400b46c:	d8c14d15 	stw	r3,1332(sp)
 400b470:	d9414415 	stw	r5,1296(sp)
 400b474:	d8800445 	stb	r2,17(sp)
 400b478:	d8c00485 	stb	r3,18(sp)
 400b47c:	d8000405 	stb	zero,16(sp)
 400b480:	003e7d06 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400b484:	d8814c17 	ldw	r2,1328(sp)
 400b488:	b8c00007 	ldb	r3,0(r23)
 400b48c:	10801014 	ori	r2,r2,64
 400b490:	d8814c15 	stw	r2,1328(sp)
 400b494:	003c6906 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b498:	d9414c17 	ldw	r5,1328(sp)
 400b49c:	2880020c 	andi	r2,r5,8
 400b4a0:	1001e526 	beq	r2,zero,400bc38 <___vfprintf_internal_r+0x17f8>
 400b4a4:	39800017 	ldw	r6,0(r7)
 400b4a8:	38800204 	addi	r2,r7,8
 400b4ac:	d8814015 	stw	r2,1280(sp)
 400b4b0:	d9814215 	stw	r6,1288(sp)
 400b4b4:	39c00117 	ldw	r7,4(r7)
 400b4b8:	d9c14315 	stw	r7,1292(sp)
 400b4bc:	d9014217 	ldw	r4,1288(sp)
 400b4c0:	d9414317 	ldw	r5,1292(sp)
 400b4c4:	40124900 	call	4012490 <__isinfd>
 400b4c8:	10021d26 	beq	r2,zero,400bd40 <___vfprintf_internal_r+0x1900>
 400b4cc:	d9014217 	ldw	r4,1288(sp)
 400b4d0:	d9414317 	ldw	r5,1292(sp)
 400b4d4:	000d883a 	mov	r6,zero
 400b4d8:	000f883a 	mov	r7,zero
 400b4dc:	4008b200 	call	4008b20 <__ltdf2>
 400b4e0:	1002d016 	blt	r2,zero,400c024 <___vfprintf_internal_r+0x1be4>
 400b4e4:	d9414d17 	ldw	r5,1332(sp)
 400b4e8:	008011c4 	movi	r2,71
 400b4ec:	11421016 	blt	r2,r5,400bd30 <___vfprintf_internal_r+0x18f0>
 400b4f0:	018100b4 	movhi	r6,1026
 400b4f4:	31917504 	addi	r6,r6,17876
 400b4f8:	d9814115 	stw	r6,1284(sp)
 400b4fc:	d9014c17 	ldw	r4,1328(sp)
 400b500:	00c000c4 	movi	r3,3
 400b504:	00bfdfc4 	movi	r2,-129
 400b508:	2088703a 	and	r4,r4,r2
 400b50c:	180f883a 	mov	r7,r3
 400b510:	d8c14515 	stw	r3,1300(sp)
 400b514:	d9014c15 	stw	r4,1328(sp)
 400b518:	d8014615 	stw	zero,1304(sp)
 400b51c:	003e6a06 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400b520:	38800017 	ldw	r2,0(r7)
 400b524:	00c00044 	movi	r3,1
 400b528:	39c00104 	addi	r7,r7,4
 400b52c:	d9c14015 	stw	r7,1280(sp)
 400b530:	d9000f04 	addi	r4,sp,60
 400b534:	180f883a 	mov	r7,r3
 400b538:	d8c14515 	stw	r3,1300(sp)
 400b53c:	d9014115 	stw	r4,1284(sp)
 400b540:	d8800f05 	stb	r2,60(sp)
 400b544:	d8000405 	stb	zero,16(sp)
 400b548:	003cac06 	br	400a7fc <___vfprintf_internal_r+0x3bc>
 400b54c:	014100b4 	movhi	r5,1026
 400b550:	29517b04 	addi	r5,r5,17900
 400b554:	d9414415 	stw	r5,1296(sp)
 400b558:	d9814c17 	ldw	r6,1328(sp)
 400b55c:	3080080c 	andi	r2,r6,32
 400b560:	1000ff26 	beq	r2,zero,400b960 <___vfprintf_internal_r+0x1520>
 400b564:	3c000017 	ldw	r16,0(r7)
 400b568:	3c400117 	ldw	r17,4(r7)
 400b56c:	38800204 	addi	r2,r7,8
 400b570:	d8814015 	stw	r2,1280(sp)
 400b574:	d9414c17 	ldw	r5,1328(sp)
 400b578:	2880004c 	andi	r2,r5,1
 400b57c:	1005003a 	cmpeq	r2,r2,zero
 400b580:	1000b91e 	bne	r2,zero,400b868 <___vfprintf_internal_r+0x1428>
 400b584:	8444b03a 	or	r2,r16,r17
 400b588:	1000b726 	beq	r2,zero,400b868 <___vfprintf_internal_r+0x1428>
 400b58c:	d9814d17 	ldw	r6,1332(sp)
 400b590:	29400094 	ori	r5,r5,2
 400b594:	00800c04 	movi	r2,48
 400b598:	01000084 	movi	r4,2
 400b59c:	d9414c15 	stw	r5,1328(sp)
 400b5a0:	d8800445 	stb	r2,17(sp)
 400b5a4:	d9800485 	stb	r6,18(sp)
 400b5a8:	d8000405 	stb	zero,16(sp)
 400b5ac:	003e3206 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400b5b0:	018100b4 	movhi	r6,1026
 400b5b4:	31917004 	addi	r6,r6,17856
 400b5b8:	d9814415 	stw	r6,1296(sp)
 400b5bc:	003fe606 	br	400b558 <___vfprintf_internal_r+0x1118>
 400b5c0:	00800ac4 	movi	r2,43
 400b5c4:	d8800405 	stb	r2,16(sp)
 400b5c8:	b8c00007 	ldb	r3,0(r23)
 400b5cc:	003c1b06 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b5d0:	d8814c17 	ldw	r2,1328(sp)
 400b5d4:	b8c00007 	ldb	r3,0(r23)
 400b5d8:	10800054 	ori	r2,r2,1
 400b5dc:	d8814c15 	stw	r2,1328(sp)
 400b5e0:	003c1606 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b5e4:	d8800407 	ldb	r2,16(sp)
 400b5e8:	10004c1e 	bne	r2,zero,400b71c <___vfprintf_internal_r+0x12dc>
 400b5ec:	00800804 	movi	r2,32
 400b5f0:	d8800405 	stb	r2,16(sp)
 400b5f4:	b8c00007 	ldb	r3,0(r23)
 400b5f8:	003c1006 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b5fc:	d9814c17 	ldw	r6,1328(sp)
 400b600:	b8c00007 	ldb	r3,0(r23)
 400b604:	31800214 	ori	r6,r6,8
 400b608:	d9814c15 	stw	r6,1328(sp)
 400b60c:	003c0b06 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b610:	0009883a 	mov	r4,zero
 400b614:	04000244 	movi	r16,9
 400b618:	01400284 	movi	r5,10
 400b61c:	d9c15115 	stw	r7,1348(sp)
 400b620:	4008ff80 	call	4008ff8 <__mulsi3>
 400b624:	b9000007 	ldb	r4,0(r23)
 400b628:	d8c14d17 	ldw	r3,1332(sp)
 400b62c:	bdc00044 	addi	r23,r23,1
 400b630:	d9014d15 	stw	r4,1332(sp)
 400b634:	d9414d17 	ldw	r5,1332(sp)
 400b638:	1885883a 	add	r2,r3,r2
 400b63c:	113ff404 	addi	r4,r2,-48
 400b640:	28bff404 	addi	r2,r5,-48
 400b644:	d9c15117 	ldw	r7,1348(sp)
 400b648:	80bff32e 	bgeu	r16,r2,400b618 <___vfprintf_internal_r+0x11d8>
 400b64c:	d9014a15 	stw	r4,1320(sp)
 400b650:	003bfc06 	br	400a644 <___vfprintf_internal_r+0x204>
 400b654:	d8814c17 	ldw	r2,1328(sp)
 400b658:	b8c00007 	ldb	r3,0(r23)
 400b65c:	10802014 	ori	r2,r2,128
 400b660:	d8814c15 	stw	r2,1328(sp)
 400b664:	003bf506 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b668:	b8c00007 	ldb	r3,0(r23)
 400b66c:	00800a84 	movi	r2,42
 400b670:	bdc00044 	addi	r23,r23,1
 400b674:	18831826 	beq	r3,r2,400c2d8 <___vfprintf_internal_r+0x1e98>
 400b678:	d8c14d15 	stw	r3,1332(sp)
 400b67c:	18bff404 	addi	r2,r3,-48
 400b680:	00c00244 	movi	r3,9
 400b684:	18827b36 	bltu	r3,r2,400c074 <___vfprintf_internal_r+0x1c34>
 400b688:	1821883a 	mov	r16,r3
 400b68c:	0009883a 	mov	r4,zero
 400b690:	01400284 	movi	r5,10
 400b694:	d9c15115 	stw	r7,1348(sp)
 400b698:	4008ff80 	call	4008ff8 <__mulsi3>
 400b69c:	d9414d17 	ldw	r5,1332(sp)
 400b6a0:	b9800007 	ldb	r6,0(r23)
 400b6a4:	d9c15117 	ldw	r7,1348(sp)
 400b6a8:	1145883a 	add	r2,r2,r5
 400b6ac:	113ff404 	addi	r4,r2,-48
 400b6b0:	30bff404 	addi	r2,r6,-48
 400b6b4:	d9814d15 	stw	r6,1332(sp)
 400b6b8:	bdc00044 	addi	r23,r23,1
 400b6bc:	80bff42e 	bgeu	r16,r2,400b690 <___vfprintf_internal_r+0x1250>
 400b6c0:	2027883a 	mov	r19,r4
 400b6c4:	203bdf0e 	bge	r4,zero,400a644 <___vfprintf_internal_r+0x204>
 400b6c8:	04ffffc4 	movi	r19,-1
 400b6cc:	003bdd06 	br	400a644 <___vfprintf_internal_r+0x204>
 400b6d0:	d8000405 	stb	zero,16(sp)
 400b6d4:	39800017 	ldw	r6,0(r7)
 400b6d8:	39c00104 	addi	r7,r7,4
 400b6dc:	d9c14015 	stw	r7,1280(sp)
 400b6e0:	d9814115 	stw	r6,1284(sp)
 400b6e4:	3001c926 	beq	r6,zero,400be0c <___vfprintf_internal_r+0x19cc>
 400b6e8:	98000e16 	blt	r19,zero,400b724 <___vfprintf_internal_r+0x12e4>
 400b6ec:	d9014117 	ldw	r4,1284(sp)
 400b6f0:	000b883a 	mov	r5,zero
 400b6f4:	980d883a 	mov	r6,r19
 400b6f8:	40109340 	call	4010934 <memchr>
 400b6fc:	10025926 	beq	r2,zero,400c064 <___vfprintf_internal_r+0x1c24>
 400b700:	d8c14117 	ldw	r3,1284(sp)
 400b704:	10cfc83a 	sub	r7,r2,r3
 400b708:	99c19e16 	blt	r19,r7,400bd84 <___vfprintf_internal_r+0x1944>
 400b70c:	d9c14515 	stw	r7,1300(sp)
 400b710:	38000916 	blt	r7,zero,400b738 <___vfprintf_internal_r+0x12f8>
 400b714:	d8014615 	stw	zero,1304(sp)
 400b718:	003deb06 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400b71c:	b8c00007 	ldb	r3,0(r23)
 400b720:	003bc606 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400b724:	d9014117 	ldw	r4,1284(sp)
 400b728:	400a3740 	call	400a374 <strlen>
 400b72c:	d8814515 	stw	r2,1300(sp)
 400b730:	100f883a 	mov	r7,r2
 400b734:	103ff70e 	bge	r2,zero,400b714 <___vfprintf_internal_r+0x12d4>
 400b738:	d8014515 	stw	zero,1300(sp)
 400b73c:	d8014615 	stw	zero,1304(sp)
 400b740:	003de106 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400b744:	20c03fcc 	andi	r3,r4,255
 400b748:	00800044 	movi	r2,1
 400b74c:	18802d26 	beq	r3,r2,400b804 <___vfprintf_internal_r+0x13c4>
 400b750:	18800e36 	bltu	r3,r2,400b78c <___vfprintf_internal_r+0x134c>
 400b754:	00800084 	movi	r2,2
 400b758:	1880fa26 	beq	r3,r2,400bb44 <___vfprintf_internal_r+0x1704>
 400b75c:	010100b4 	movhi	r4,1026
 400b760:	21118004 	addi	r4,r4,17920
 400b764:	400a3740 	call	400a374 <strlen>
 400b768:	100f883a 	mov	r7,r2
 400b76c:	dcc14515 	stw	r19,1300(sp)
 400b770:	9880010e 	bge	r19,r2,400b778 <___vfprintf_internal_r+0x1338>
 400b774:	d8814515 	stw	r2,1300(sp)
 400b778:	008100b4 	movhi	r2,1026
 400b77c:	10918004 	addi	r2,r2,17920
 400b780:	dcc14615 	stw	r19,1304(sp)
 400b784:	d8814115 	stw	r2,1284(sp)
 400b788:	003dcf06 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400b78c:	d9401904 	addi	r5,sp,100
 400b790:	dd000f04 	addi	r20,sp,60
 400b794:	d9414115 	stw	r5,1284(sp)
 400b798:	880a977a 	slli	r5,r17,29
 400b79c:	d9814117 	ldw	r6,1284(sp)
 400b7a0:	8004d0fa 	srli	r2,r16,3
 400b7a4:	8806d0fa 	srli	r3,r17,3
 400b7a8:	810001cc 	andi	r4,r16,7
 400b7ac:	2884b03a 	or	r2,r5,r2
 400b7b0:	31bfffc4 	addi	r6,r6,-1
 400b7b4:	21000c04 	addi	r4,r4,48
 400b7b8:	d9814115 	stw	r6,1284(sp)
 400b7bc:	10cab03a 	or	r5,r2,r3
 400b7c0:	31000005 	stb	r4,0(r6)
 400b7c4:	1021883a 	mov	r16,r2
 400b7c8:	1823883a 	mov	r17,r3
 400b7cc:	283ff21e 	bne	r5,zero,400b798 <___vfprintf_internal_r+0x1358>
 400b7d0:	d8c14c17 	ldw	r3,1328(sp)
 400b7d4:	1880004c 	andi	r2,r3,1
 400b7d8:	1005003a 	cmpeq	r2,r2,zero
 400b7dc:	103db31e 	bne	r2,zero,400aeac <___vfprintf_internal_r+0xa6c>
 400b7e0:	20803fcc 	andi	r2,r4,255
 400b7e4:	1080201c 	xori	r2,r2,128
 400b7e8:	10bfe004 	addi	r2,r2,-128
 400b7ec:	00c00c04 	movi	r3,48
 400b7f0:	10fdae26 	beq	r2,r3,400aeac <___vfprintf_internal_r+0xa6c>
 400b7f4:	31bfffc4 	addi	r6,r6,-1
 400b7f8:	d9814115 	stw	r6,1284(sp)
 400b7fc:	30c00005 	stb	r3,0(r6)
 400b800:	003daa06 	br	400aeac <___vfprintf_internal_r+0xa6c>
 400b804:	88800068 	cmpgeui	r2,r17,1
 400b808:	10002c1e 	bne	r2,zero,400b8bc <___vfprintf_internal_r+0x147c>
 400b80c:	8800021e 	bne	r17,zero,400b818 <___vfprintf_internal_r+0x13d8>
 400b810:	00800244 	movi	r2,9
 400b814:	14002936 	bltu	r2,r16,400b8bc <___vfprintf_internal_r+0x147c>
 400b818:	d90018c4 	addi	r4,sp,99
 400b81c:	dd000f04 	addi	r20,sp,60
 400b820:	d9014115 	stw	r4,1284(sp)
 400b824:	d9014117 	ldw	r4,1284(sp)
 400b828:	80800c04 	addi	r2,r16,48
 400b82c:	20800005 	stb	r2,0(r4)
 400b830:	003d9e06 	br	400aeac <___vfprintf_internal_r+0xa6c>
 400b834:	dc400d17 	ldw	r17,52(sp)
 400b838:	070100b4 	movhi	fp,1026
 400b83c:	e7118784 	addi	fp,fp,17950
 400b840:	9425883a 	add	r18,r18,r16
 400b844:	8c400044 	addi	r17,r17,1
 400b848:	008001c4 	movi	r2,7
 400b84c:	1f000015 	stw	fp,0(r3)
 400b850:	1c000115 	stw	r16,4(r3)
 400b854:	dc800e15 	stw	r18,56(sp)
 400b858:	dc400d15 	stw	r17,52(sp)
 400b85c:	147ddc16 	blt	r2,r17,400afd0 <___vfprintf_internal_r+0xb90>
 400b860:	18c00204 	addi	r3,r3,8
 400b864:	003c7406 	br	400aa38 <___vfprintf_internal_r+0x5f8>
 400b868:	01000084 	movi	r4,2
 400b86c:	d8000405 	stb	zero,16(sp)
 400b870:	003d8106 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400b874:	d9814c17 	ldw	r6,1328(sp)
 400b878:	30c4703a 	and	r2,r6,r3
 400b87c:	1005003a 	cmpeq	r2,r2,zero
 400b880:	103cb326 	beq	r2,zero,400ab50 <___vfprintf_internal_r+0x710>
 400b884:	d9014117 	ldw	r4,1284(sp)
 400b888:	94800044 	addi	r18,r18,1
 400b88c:	8c400044 	addi	r17,r17,1
 400b890:	008001c4 	movi	r2,7
 400b894:	a9000015 	stw	r4,0(r21)
 400b898:	a8c00115 	stw	r3,4(r21)
 400b89c:	dc800e15 	stw	r18,56(sp)
 400b8a0:	dc400d15 	stw	r17,52(sp)
 400b8a4:	147e6016 	blt	r2,r17,400b228 <___vfprintf_internal_r+0xde8>
 400b8a8:	acc00204 	addi	r19,r21,8
 400b8ac:	003cd106 	br	400abf4 <___vfprintf_internal_r+0x7b4>
 400b8b0:	070100b4 	movhi	fp,1026
 400b8b4:	e7118784 	addi	fp,fp,17950
 400b8b8:	003c4906 	br	400a9e0 <___vfprintf_internal_r+0x5a0>
 400b8bc:	dd000f04 	addi	r20,sp,60
 400b8c0:	dc801904 	addi	r18,sp,100
 400b8c4:	8009883a 	mov	r4,r16
 400b8c8:	880b883a 	mov	r5,r17
 400b8cc:	01800284 	movi	r6,10
 400b8d0:	000f883a 	mov	r7,zero
 400b8d4:	40164c00 	call	40164c0 <__umoddi3>
 400b8d8:	12000c04 	addi	r8,r2,48
 400b8dc:	94bfffc4 	addi	r18,r18,-1
 400b8e0:	8009883a 	mov	r4,r16
 400b8e4:	880b883a 	mov	r5,r17
 400b8e8:	01800284 	movi	r6,10
 400b8ec:	000f883a 	mov	r7,zero
 400b8f0:	92000005 	stb	r8,0(r18)
 400b8f4:	4015e540 	call	4015e54 <__udivdi3>
 400b8f8:	1009883a 	mov	r4,r2
 400b8fc:	1021883a 	mov	r16,r2
 400b900:	18800068 	cmpgeui	r2,r3,1
 400b904:	1823883a 	mov	r17,r3
 400b908:	103fee1e 	bne	r2,zero,400b8c4 <___vfprintf_internal_r+0x1484>
 400b90c:	1800021e 	bne	r3,zero,400b918 <___vfprintf_internal_r+0x14d8>
 400b910:	00800244 	movi	r2,9
 400b914:	113feb36 	bltu	r2,r4,400b8c4 <___vfprintf_internal_r+0x1484>
 400b918:	94bfffc4 	addi	r18,r18,-1
 400b91c:	dc814115 	stw	r18,1284(sp)
 400b920:	003fc006 	br	400b824 <___vfprintf_internal_r+0x13e4>
 400b924:	d9014c17 	ldw	r4,1328(sp)
 400b928:	2080004c 	andi	r2,r4,1
 400b92c:	10009a1e 	bne	r2,zero,400bb98 <___vfprintf_internal_r+0x1758>
 400b930:	d9401904 	addi	r5,sp,100
 400b934:	dd000f04 	addi	r20,sp,60
 400b938:	d9414115 	stw	r5,1284(sp)
 400b93c:	003d5b06 	br	400aeac <___vfprintf_internal_r+0xa6c>
 400b940:	d9014f17 	ldw	r4,1340(sp)
 400b944:	b00b883a 	mov	r5,r22
 400b948:	d9800c04 	addi	r6,sp,48
 400b94c:	400a3e80 	call	400a3e8 <__sprint_r>
 400b950:	103c731e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b954:	dc800e17 	ldw	r18,56(sp)
 400b958:	d8c01904 	addi	r3,sp,100
 400b95c:	003cf906 	br	400ad44 <___vfprintf_internal_r+0x904>
 400b960:	d8c14c17 	ldw	r3,1328(sp)
 400b964:	1880040c 	andi	r2,r3,16
 400b968:	1000711e 	bne	r2,zero,400bb30 <___vfprintf_internal_r+0x16f0>
 400b96c:	d9014c17 	ldw	r4,1328(sp)
 400b970:	2080100c 	andi	r2,r4,64
 400b974:	10006e26 	beq	r2,zero,400bb30 <___vfprintf_internal_r+0x16f0>
 400b978:	3c00000b 	ldhu	r16,0(r7)
 400b97c:	0023883a 	mov	r17,zero
 400b980:	39c00104 	addi	r7,r7,4
 400b984:	d9c14015 	stw	r7,1280(sp)
 400b988:	003efa06 	br	400b574 <___vfprintf_internal_r+0x1134>
 400b98c:	dc400d17 	ldw	r17,52(sp)
 400b990:	070100b4 	movhi	fp,1026
 400b994:	e7118784 	addi	fp,fp,17950
 400b998:	9425883a 	add	r18,r18,r16
 400b99c:	8c400044 	addi	r17,r17,1
 400b9a0:	008001c4 	movi	r2,7
 400b9a4:	1f000015 	stw	fp,0(r3)
 400b9a8:	1c000115 	stw	r16,4(r3)
 400b9ac:	dc800e15 	stw	r18,56(sp)
 400b9b0:	dc400d15 	stw	r17,52(sp)
 400b9b4:	147d7016 	blt	r2,r17,400af78 <___vfprintf_internal_r+0xb38>
 400b9b8:	18c00204 	addi	r3,r3,8
 400b9bc:	003d7506 	br	400af94 <___vfprintf_internal_r+0xb54>
 400b9c0:	dc800e17 	ldw	r18,56(sp)
 400b9c4:	dc400d17 	ldw	r17,52(sp)
 400b9c8:	070100b4 	movhi	fp,1026
 400b9cc:	e7118b84 	addi	fp,fp,17966
 400b9d0:	003bba06 	br	400a8bc <___vfprintf_internal_r+0x47c>
 400b9d4:	d9014f17 	ldw	r4,1340(sp)
 400b9d8:	b00b883a 	mov	r5,r22
 400b9dc:	d9800c04 	addi	r6,sp,48
 400b9e0:	400a3e80 	call	400a3e8 <__sprint_r>
 400b9e4:	103c4e1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400b9e8:	dc800e17 	ldw	r18,56(sp)
 400b9ec:	d8c01904 	addi	r3,sp,100
 400b9f0:	003ce306 	br	400ad80 <___vfprintf_internal_r+0x940>
 400b9f4:	3c000017 	ldw	r16,0(r7)
 400b9f8:	0009883a 	mov	r4,zero
 400b9fc:	39c00104 	addi	r7,r7,4
 400ba00:	0023883a 	mov	r17,zero
 400ba04:	d9c14015 	stw	r7,1280(sp)
 400ba08:	d8000405 	stb	zero,16(sp)
 400ba0c:	003d1a06 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400ba10:	38800017 	ldw	r2,0(r7)
 400ba14:	39c00104 	addi	r7,r7,4
 400ba18:	d9c14015 	stw	r7,1280(sp)
 400ba1c:	1023d7fa 	srai	r17,r2,31
 400ba20:	1021883a 	mov	r16,r2
 400ba24:	003d1206 	br	400ae70 <___vfprintf_internal_r+0xa30>
 400ba28:	3c000017 	ldw	r16,0(r7)
 400ba2c:	01000044 	movi	r4,1
 400ba30:	39c00104 	addi	r7,r7,4
 400ba34:	0023883a 	mov	r17,zero
 400ba38:	d9c14015 	stw	r7,1280(sp)
 400ba3c:	d8000405 	stb	zero,16(sp)
 400ba40:	003d0d06 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400ba44:	008100b4 	movhi	r2,1026
 400ba48:	10918704 	addi	r2,r2,17948
 400ba4c:	94800044 	addi	r18,r18,1
 400ba50:	8c400044 	addi	r17,r17,1
 400ba54:	a8800015 	stw	r2,0(r21)
 400ba58:	00c00044 	movi	r3,1
 400ba5c:	008001c4 	movi	r2,7
 400ba60:	a8c00115 	stw	r3,4(r21)
 400ba64:	dc800e15 	stw	r18,56(sp)
 400ba68:	dc400d15 	stw	r17,52(sp)
 400ba6c:	1440ca16 	blt	r2,r17,400bd98 <___vfprintf_internal_r+0x1958>
 400ba70:	a8c00204 	addi	r3,r21,8
 400ba74:	2000061e 	bne	r4,zero,400ba90 <___vfprintf_internal_r+0x1650>
 400ba78:	d9414717 	ldw	r5,1308(sp)
 400ba7c:	2800041e 	bne	r5,zero,400ba90 <___vfprintf_internal_r+0x1650>
 400ba80:	d9814c17 	ldw	r6,1328(sp)
 400ba84:	3080004c 	andi	r2,r6,1
 400ba88:	1005003a 	cmpeq	r2,r2,zero
 400ba8c:	103bea1e 	bne	r2,zero,400aa38 <___vfprintf_internal_r+0x5f8>
 400ba90:	00800044 	movi	r2,1
 400ba94:	dc400d17 	ldw	r17,52(sp)
 400ba98:	18800115 	stw	r2,4(r3)
 400ba9c:	d8814917 	ldw	r2,1316(sp)
 400baa0:	94800044 	addi	r18,r18,1
 400baa4:	8c400044 	addi	r17,r17,1
 400baa8:	18800015 	stw	r2,0(r3)
 400baac:	008001c4 	movi	r2,7
 400bab0:	dc800e15 	stw	r18,56(sp)
 400bab4:	dc400d15 	stw	r17,52(sp)
 400bab8:	1440ca16 	blt	r2,r17,400bde4 <___vfprintf_internal_r+0x19a4>
 400babc:	18c00204 	addi	r3,r3,8
 400bac0:	0121c83a 	sub	r16,zero,r4
 400bac4:	0400500e 	bge	zero,r16,400bc08 <___vfprintf_internal_r+0x17c8>
 400bac8:	00800404 	movi	r2,16
 400bacc:	1400800e 	bge	r2,r16,400bcd0 <___vfprintf_internal_r+0x1890>
 400bad0:	1027883a 	mov	r19,r2
 400bad4:	070100b4 	movhi	fp,1026
 400bad8:	e7118784 	addi	fp,fp,17950
 400badc:	050001c4 	movi	r20,7
 400bae0:	00000306 	br	400baf0 <___vfprintf_internal_r+0x16b0>
 400bae4:	18c00204 	addi	r3,r3,8
 400bae8:	843ffc04 	addi	r16,r16,-16
 400baec:	9c007a0e 	bge	r19,r16,400bcd8 <___vfprintf_internal_r+0x1898>
 400baf0:	94800404 	addi	r18,r18,16
 400baf4:	8c400044 	addi	r17,r17,1
 400baf8:	1f000015 	stw	fp,0(r3)
 400bafc:	1cc00115 	stw	r19,4(r3)
 400bb00:	dc800e15 	stw	r18,56(sp)
 400bb04:	dc400d15 	stw	r17,52(sp)
 400bb08:	a47ff60e 	bge	r20,r17,400bae4 <___vfprintf_internal_r+0x16a4>
 400bb0c:	d9014f17 	ldw	r4,1340(sp)
 400bb10:	b00b883a 	mov	r5,r22
 400bb14:	d9800c04 	addi	r6,sp,48
 400bb18:	400a3e80 	call	400a3e8 <__sprint_r>
 400bb1c:	103c001e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bb20:	dc800e17 	ldw	r18,56(sp)
 400bb24:	dc400d17 	ldw	r17,52(sp)
 400bb28:	d8c01904 	addi	r3,sp,100
 400bb2c:	003fee06 	br	400bae8 <___vfprintf_internal_r+0x16a8>
 400bb30:	3c000017 	ldw	r16,0(r7)
 400bb34:	0023883a 	mov	r17,zero
 400bb38:	39c00104 	addi	r7,r7,4
 400bb3c:	d9c14015 	stw	r7,1280(sp)
 400bb40:	003e8c06 	br	400b574 <___vfprintf_internal_r+0x1134>
 400bb44:	d9401904 	addi	r5,sp,100
 400bb48:	dd000f04 	addi	r20,sp,60
 400bb4c:	d9414115 	stw	r5,1284(sp)
 400bb50:	d9814417 	ldw	r6,1296(sp)
 400bb54:	880a973a 	slli	r5,r17,28
 400bb58:	8004d13a 	srli	r2,r16,4
 400bb5c:	810003cc 	andi	r4,r16,15
 400bb60:	3109883a 	add	r4,r6,r4
 400bb64:	2884b03a 	or	r2,r5,r2
 400bb68:	21400003 	ldbu	r5,0(r4)
 400bb6c:	d9014117 	ldw	r4,1284(sp)
 400bb70:	8806d13a 	srli	r3,r17,4
 400bb74:	1021883a 	mov	r16,r2
 400bb78:	213fffc4 	addi	r4,r4,-1
 400bb7c:	d9014115 	stw	r4,1284(sp)
 400bb80:	d9814117 	ldw	r6,1284(sp)
 400bb84:	10c8b03a 	or	r4,r2,r3
 400bb88:	1823883a 	mov	r17,r3
 400bb8c:	31400005 	stb	r5,0(r6)
 400bb90:	203fef1e 	bne	r4,zero,400bb50 <___vfprintf_internal_r+0x1710>
 400bb94:	003cc506 	br	400aeac <___vfprintf_internal_r+0xa6c>
 400bb98:	00800c04 	movi	r2,48
 400bb9c:	d98018c4 	addi	r6,sp,99
 400bba0:	dd000f04 	addi	r20,sp,60
 400bba4:	d88018c5 	stb	r2,99(sp)
 400bba8:	d9814115 	stw	r6,1284(sp)
 400bbac:	003cbf06 	br	400aeac <___vfprintf_internal_r+0xa6c>
 400bbb0:	dc400d17 	ldw	r17,52(sp)
 400bbb4:	070100b4 	movhi	fp,1026
 400bbb8:	e7118b84 	addi	fp,fp,17966
 400bbbc:	003bc106 	br	400aac4 <___vfprintf_internal_r+0x684>
 400bbc0:	d9414c17 	ldw	r5,1328(sp)
 400bbc4:	2880040c 	andi	r2,r5,16
 400bbc8:	10007c26 	beq	r2,zero,400bdbc <___vfprintf_internal_r+0x197c>
 400bbcc:	38800017 	ldw	r2,0(r7)
 400bbd0:	39c00104 	addi	r7,r7,4
 400bbd4:	d9c14015 	stw	r7,1280(sp)
 400bbd8:	d9814b17 	ldw	r6,1324(sp)
 400bbdc:	d9c14017 	ldw	r7,1280(sp)
 400bbe0:	11800015 	stw	r6,0(r2)
 400bbe4:	003a7206 	br	400a5b0 <___vfprintf_internal_r+0x170>
 400bbe8:	d9014f17 	ldw	r4,1340(sp)
 400bbec:	b00b883a 	mov	r5,r22
 400bbf0:	d9800c04 	addi	r6,sp,48
 400bbf4:	400a3e80 	call	400a3e8 <__sprint_r>
 400bbf8:	103bc91e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bbfc:	dc800e17 	ldw	r18,56(sp)
 400bc00:	dc400d17 	ldw	r17,52(sp)
 400bc04:	d8c01904 	addi	r3,sp,100
 400bc08:	d9014717 	ldw	r4,1308(sp)
 400bc0c:	d9414117 	ldw	r5,1284(sp)
 400bc10:	8c400044 	addi	r17,r17,1
 400bc14:	9125883a 	add	r18,r18,r4
 400bc18:	008001c4 	movi	r2,7
 400bc1c:	19400015 	stw	r5,0(r3)
 400bc20:	19000115 	stw	r4,4(r3)
 400bc24:	dc800e15 	stw	r18,56(sp)
 400bc28:	dc400d15 	stw	r17,52(sp)
 400bc2c:	147ce816 	blt	r2,r17,400afd0 <___vfprintf_internal_r+0xb90>
 400bc30:	18c00204 	addi	r3,r3,8
 400bc34:	003b8006 	br	400aa38 <___vfprintf_internal_r+0x5f8>
 400bc38:	38c00017 	ldw	r3,0(r7)
 400bc3c:	39000204 	addi	r4,r7,8
 400bc40:	d9014015 	stw	r4,1280(sp)
 400bc44:	d8c14215 	stw	r3,1288(sp)
 400bc48:	39c00117 	ldw	r7,4(r7)
 400bc4c:	d9c14315 	stw	r7,1292(sp)
 400bc50:	003e1a06 	br	400b4bc <___vfprintf_internal_r+0x107c>
 400bc54:	0005883a 	mov	r2,zero
 400bc58:	1409c83a 	sub	r4,r2,r16
 400bc5c:	1105803a 	cmpltu	r2,r2,r4
 400bc60:	044bc83a 	sub	r5,zero,r17
 400bc64:	2885c83a 	sub	r2,r5,r2
 400bc68:	2021883a 	mov	r16,r4
 400bc6c:	1023883a 	mov	r17,r2
 400bc70:	01000044 	movi	r4,1
 400bc74:	00800b44 	movi	r2,45
 400bc78:	d8800405 	stb	r2,16(sp)
 400bc7c:	003c7e06 	br	400ae78 <___vfprintf_internal_r+0xa38>
 400bc80:	d9014f17 	ldw	r4,1340(sp)
 400bc84:	b00b883a 	mov	r5,r22
 400bc88:	d9800c04 	addi	r6,sp,48
 400bc8c:	400a3e80 	call	400a3e8 <__sprint_r>
 400bc90:	103ba31e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bc94:	dc800e17 	ldw	r18,56(sp)
 400bc98:	dc400d17 	ldw	r17,52(sp)
 400bc9c:	d9000517 	ldw	r4,20(sp)
 400bca0:	d9401904 	addi	r5,sp,100
 400bca4:	003da106 	br	400b32c <___vfprintf_internal_r+0xeec>
 400bca8:	d9014f17 	ldw	r4,1340(sp)
 400bcac:	b00b883a 	mov	r5,r22
 400bcb0:	d9800c04 	addi	r6,sp,48
 400bcb4:	400a3e80 	call	400a3e8 <__sprint_r>
 400bcb8:	103b991e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bcbc:	dc800e17 	ldw	r18,56(sp)
 400bcc0:	dc400d17 	ldw	r17,52(sp)
 400bcc4:	d9000517 	ldw	r4,20(sp)
 400bcc8:	d8c01904 	addi	r3,sp,100
 400bccc:	003d8b06 	br	400b2fc <___vfprintf_internal_r+0xebc>
 400bcd0:	070100b4 	movhi	fp,1026
 400bcd4:	e7118784 	addi	fp,fp,17950
 400bcd8:	9425883a 	add	r18,r18,r16
 400bcdc:	8c400044 	addi	r17,r17,1
 400bce0:	008001c4 	movi	r2,7
 400bce4:	1f000015 	stw	fp,0(r3)
 400bce8:	1c000115 	stw	r16,4(r3)
 400bcec:	dc800e15 	stw	r18,56(sp)
 400bcf0:	dc400d15 	stw	r17,52(sp)
 400bcf4:	147fbc16 	blt	r2,r17,400bbe8 <___vfprintf_internal_r+0x17a8>
 400bcf8:	18c00204 	addi	r3,r3,8
 400bcfc:	003fc206 	br	400bc08 <___vfprintf_internal_r+0x17c8>
 400bd00:	d9014f17 	ldw	r4,1340(sp)
 400bd04:	b00b883a 	mov	r5,r22
 400bd08:	d9800c04 	addi	r6,sp,48
 400bd0c:	400a3e80 	call	400a3e8 <__sprint_r>
 400bd10:	103b831e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bd14:	dc800e17 	ldw	r18,56(sp)
 400bd18:	d9000517 	ldw	r4,20(sp)
 400bd1c:	d8c01904 	addi	r3,sp,100
 400bd20:	003cfc06 	br	400b114 <___vfprintf_internal_r+0xcd4>
 400bd24:	070100b4 	movhi	fp,1026
 400bd28:	e7118784 	addi	fp,fp,17950
 400bd2c:	003bde06 	br	400aca8 <___vfprintf_internal_r+0x868>
 400bd30:	008100b4 	movhi	r2,1026
 400bd34:	10917604 	addi	r2,r2,17880
 400bd38:	d8814115 	stw	r2,1284(sp)
 400bd3c:	003def06 	br	400b4fc <___vfprintf_internal_r+0x10bc>
 400bd40:	d9014217 	ldw	r4,1288(sp)
 400bd44:	d9414317 	ldw	r5,1292(sp)
 400bd48:	400768c0 	call	400768c <__isnand>
 400bd4c:	10003926 	beq	r2,zero,400be34 <___vfprintf_internal_r+0x19f4>
 400bd50:	d9414d17 	ldw	r5,1332(sp)
 400bd54:	008011c4 	movi	r2,71
 400bd58:	1140ce16 	blt	r2,r5,400c094 <___vfprintf_internal_r+0x1c54>
 400bd5c:	018100b4 	movhi	r6,1026
 400bd60:	31917704 	addi	r6,r6,17884
 400bd64:	d9814115 	stw	r6,1284(sp)
 400bd68:	003de406 	br	400b4fc <___vfprintf_internal_r+0x10bc>
 400bd6c:	d9014c17 	ldw	r4,1328(sp)
 400bd70:	bdc00044 	addi	r23,r23,1
 400bd74:	b8c00007 	ldb	r3,0(r23)
 400bd78:	21000814 	ori	r4,r4,32
 400bd7c:	d9014c15 	stw	r4,1328(sp)
 400bd80:	003a2e06 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400bd84:	dcc14515 	stw	r19,1300(sp)
 400bd88:	98011016 	blt	r19,zero,400c1cc <___vfprintf_internal_r+0x1d8c>
 400bd8c:	980f883a 	mov	r7,r19
 400bd90:	d8014615 	stw	zero,1304(sp)
 400bd94:	003c4c06 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400bd98:	d9014f17 	ldw	r4,1340(sp)
 400bd9c:	b00b883a 	mov	r5,r22
 400bda0:	d9800c04 	addi	r6,sp,48
 400bda4:	400a3e80 	call	400a3e8 <__sprint_r>
 400bda8:	103b5d1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bdac:	dc800e17 	ldw	r18,56(sp)
 400bdb0:	d9000517 	ldw	r4,20(sp)
 400bdb4:	d8c01904 	addi	r3,sp,100
 400bdb8:	003f2e06 	br	400ba74 <___vfprintf_internal_r+0x1634>
 400bdbc:	d8c14c17 	ldw	r3,1328(sp)
 400bdc0:	1880100c 	andi	r2,r3,64
 400bdc4:	1000a026 	beq	r2,zero,400c048 <___vfprintf_internal_r+0x1c08>
 400bdc8:	38800017 	ldw	r2,0(r7)
 400bdcc:	39c00104 	addi	r7,r7,4
 400bdd0:	d9c14015 	stw	r7,1280(sp)
 400bdd4:	d9014b17 	ldw	r4,1324(sp)
 400bdd8:	d9c14017 	ldw	r7,1280(sp)
 400bddc:	1100000d 	sth	r4,0(r2)
 400bde0:	0039f306 	br	400a5b0 <___vfprintf_internal_r+0x170>
 400bde4:	d9014f17 	ldw	r4,1340(sp)
 400bde8:	b00b883a 	mov	r5,r22
 400bdec:	d9800c04 	addi	r6,sp,48
 400bdf0:	400a3e80 	call	400a3e8 <__sprint_r>
 400bdf4:	103b4a1e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400bdf8:	dc800e17 	ldw	r18,56(sp)
 400bdfc:	dc400d17 	ldw	r17,52(sp)
 400be00:	d9000517 	ldw	r4,20(sp)
 400be04:	d8c01904 	addi	r3,sp,100
 400be08:	003f2d06 	br	400bac0 <___vfprintf_internal_r+0x1680>
 400be0c:	00800184 	movi	r2,6
 400be10:	14c09a36 	bltu	r2,r19,400c07c <___vfprintf_internal_r+0x1c3c>
 400be14:	dcc14515 	stw	r19,1300(sp)
 400be18:	9800010e 	bge	r19,zero,400be20 <___vfprintf_internal_r+0x19e0>
 400be1c:	d8014515 	stw	zero,1300(sp)
 400be20:	008100b4 	movhi	r2,1026
 400be24:	10917904 	addi	r2,r2,17892
 400be28:	980f883a 	mov	r7,r19
 400be2c:	d8814115 	stw	r2,1284(sp)
 400be30:	003a7206 	br	400a7fc <___vfprintf_internal_r+0x3bc>
 400be34:	00bfffc4 	movi	r2,-1
 400be38:	9880e226 	beq	r19,r2,400c1c4 <___vfprintf_internal_r+0x1d84>
 400be3c:	d9414d17 	ldw	r5,1332(sp)
 400be40:	008019c4 	movi	r2,103
 400be44:	2880dc26 	beq	r5,r2,400c1b8 <___vfprintf_internal_r+0x1d78>
 400be48:	008011c4 	movi	r2,71
 400be4c:	2880da26 	beq	r5,r2,400c1b8 <___vfprintf_internal_r+0x1d78>
 400be50:	d9414c17 	ldw	r5,1328(sp)
 400be54:	d9014317 	ldw	r4,1292(sp)
 400be58:	d9814217 	ldw	r6,1288(sp)
 400be5c:	29404014 	ori	r5,r5,256
 400be60:	d9414c15 	stw	r5,1328(sp)
 400be64:	2000cc16 	blt	r4,zero,400c198 <___vfprintf_internal_r+0x1d58>
 400be68:	3021883a 	mov	r16,r6
 400be6c:	2023883a 	mov	r17,r4
 400be70:	0039883a 	mov	fp,zero
 400be74:	d9414d17 	ldw	r5,1332(sp)
 400be78:	00801984 	movi	r2,102
 400be7c:	2880b726 	beq	r5,r2,400c15c <___vfprintf_internal_r+0x1d1c>
 400be80:	00801184 	movi	r2,70
 400be84:	2880b526 	beq	r5,r2,400c15c <___vfprintf_internal_r+0x1d1c>
 400be88:	00801944 	movi	r2,101
 400be8c:	2880c826 	beq	r5,r2,400c1b0 <___vfprintf_internal_r+0x1d70>
 400be90:	00801144 	movi	r2,69
 400be94:	2880c626 	beq	r5,r2,400c1b0 <___vfprintf_internal_r+0x1d70>
 400be98:	9829883a 	mov	r20,r19
 400be9c:	d9014f17 	ldw	r4,1340(sp)
 400bea0:	d8800504 	addi	r2,sp,20
 400bea4:	880d883a 	mov	r6,r17
 400bea8:	d8800115 	stw	r2,4(sp)
 400beac:	d8c00604 	addi	r3,sp,24
 400beb0:	d8800704 	addi	r2,sp,28
 400beb4:	800b883a 	mov	r5,r16
 400beb8:	01c00084 	movi	r7,2
 400bebc:	d8c00215 	stw	r3,8(sp)
 400bec0:	d8800315 	stw	r2,12(sp)
 400bec4:	dd000015 	stw	r20,0(sp)
 400bec8:	400de300 	call	400de30 <_dtoa_r>
 400becc:	d9814d17 	ldw	r6,1332(sp)
 400bed0:	d8814115 	stw	r2,1284(sp)
 400bed4:	008019c4 	movi	r2,103
 400bed8:	30809526 	beq	r6,r2,400c130 <___vfprintf_internal_r+0x1cf0>
 400bedc:	d8c14d17 	ldw	r3,1332(sp)
 400bee0:	008011c4 	movi	r2,71
 400bee4:	18809226 	beq	r3,r2,400c130 <___vfprintf_internal_r+0x1cf0>
 400bee8:	d9414117 	ldw	r5,1284(sp)
 400beec:	d9814d17 	ldw	r6,1332(sp)
 400bef0:	00801984 	movi	r2,102
 400bef4:	2d25883a 	add	r18,r5,r20
 400bef8:	30808626 	beq	r6,r2,400c114 <___vfprintf_internal_r+0x1cd4>
 400befc:	00801184 	movi	r2,70
 400bf00:	30808426 	beq	r6,r2,400c114 <___vfprintf_internal_r+0x1cd4>
 400bf04:	000d883a 	mov	r6,zero
 400bf08:	000f883a 	mov	r7,zero
 400bf0c:	880b883a 	mov	r5,r17
 400bf10:	8009883a 	mov	r4,r16
 400bf14:	4016c100 	call	4016c10 <__eqdf2>
 400bf18:	1000751e 	bne	r2,zero,400c0f0 <___vfprintf_internal_r+0x1cb0>
 400bf1c:	9005883a 	mov	r2,r18
 400bf20:	dc800715 	stw	r18,28(sp)
 400bf24:	d9014117 	ldw	r4,1284(sp)
 400bf28:	d9414d17 	ldw	r5,1332(sp)
 400bf2c:	00c019c4 	movi	r3,103
 400bf30:	1125c83a 	sub	r18,r2,r4
 400bf34:	28c06826 	beq	r5,r3,400c0d8 <___vfprintf_internal_r+0x1c98>
 400bf38:	008011c4 	movi	r2,71
 400bf3c:	28806626 	beq	r5,r2,400c0d8 <___vfprintf_internal_r+0x1c98>
 400bf40:	d9000517 	ldw	r4,20(sp)
 400bf44:	d8c14d17 	ldw	r3,1332(sp)
 400bf48:	00801944 	movi	r2,101
 400bf4c:	10c05516 	blt	r2,r3,400c0a4 <___vfprintf_internal_r+0x1c64>
 400bf50:	213fffc4 	addi	r4,r4,-1
 400bf54:	d9000515 	stw	r4,20(sp)
 400bf58:	d8c00805 	stb	r3,32(sp)
 400bf5c:	2021883a 	mov	r16,r4
 400bf60:	2000c116 	blt	r4,zero,400c268 <___vfprintf_internal_r+0x1e28>
 400bf64:	00800ac4 	movi	r2,43
 400bf68:	d8800845 	stb	r2,33(sp)
 400bf6c:	00800244 	movi	r2,9
 400bf70:	1400af0e 	bge	r2,r16,400c230 <___vfprintf_internal_r+0x1df0>
 400bf74:	1027883a 	mov	r19,r2
 400bf78:	dc400b84 	addi	r17,sp,46
 400bf7c:	8009883a 	mov	r4,r16
 400bf80:	01400284 	movi	r5,10
 400bf84:	4008f880 	call	4008f88 <__modsi3>
 400bf88:	10800c04 	addi	r2,r2,48
 400bf8c:	8c7fffc4 	addi	r17,r17,-1
 400bf90:	8009883a 	mov	r4,r16
 400bf94:	01400284 	movi	r5,10
 400bf98:	88800005 	stb	r2,0(r17)
 400bf9c:	4008f280 	call	4008f28 <__divsi3>
 400bfa0:	1021883a 	mov	r16,r2
 400bfa4:	98bff516 	blt	r19,r2,400bf7c <___vfprintf_internal_r+0x1b3c>
 400bfa8:	10c00c04 	addi	r3,r2,48
 400bfac:	d88009c4 	addi	r2,sp,39
 400bfb0:	108001c4 	addi	r2,r2,7
 400bfb4:	897fffc4 	addi	r5,r17,-1
 400bfb8:	88ffffc5 	stb	r3,-1(r17)
 400bfbc:	2880a72e 	bgeu	r5,r2,400c25c <___vfprintf_internal_r+0x1e1c>
 400bfc0:	1009883a 	mov	r4,r2
 400bfc4:	d9800804 	addi	r6,sp,32
 400bfc8:	d8c00884 	addi	r3,sp,34
 400bfcc:	28800003 	ldbu	r2,0(r5)
 400bfd0:	29400044 	addi	r5,r5,1
 400bfd4:	18800005 	stb	r2,0(r3)
 400bfd8:	18c00044 	addi	r3,r3,1
 400bfdc:	293ffb36 	bltu	r5,r4,400bfcc <___vfprintf_internal_r+0x1b8c>
 400bfe0:	1987c83a 	sub	r3,r3,r6
 400bfe4:	00800044 	movi	r2,1
 400bfe8:	d8c14815 	stw	r3,1312(sp)
 400bfec:	90cf883a 	add	r7,r18,r3
 400bff0:	1480960e 	bge	r2,r18,400c24c <___vfprintf_internal_r+0x1e0c>
 400bff4:	39c00044 	addi	r7,r7,1
 400bff8:	d9c14515 	stw	r7,1300(sp)
 400bffc:	38003416 	blt	r7,zero,400c0d0 <___vfprintf_internal_r+0x1c90>
 400c000:	e0803fcc 	andi	r2,fp,255
 400c004:	1080201c 	xori	r2,r2,128
 400c008:	10bfe004 	addi	r2,r2,-128
 400c00c:	10004e26 	beq	r2,zero,400c148 <___vfprintf_internal_r+0x1d08>
 400c010:	00800b44 	movi	r2,45
 400c014:	dc814715 	stw	r18,1308(sp)
 400c018:	d8014615 	stw	zero,1304(sp)
 400c01c:	d8800405 	stb	r2,16(sp)
 400c020:	003bab06 	br	400aed0 <___vfprintf_internal_r+0xa90>
 400c024:	00800b44 	movi	r2,45
 400c028:	d8800405 	stb	r2,16(sp)
 400c02c:	003d2d06 	br	400b4e4 <___vfprintf_internal_r+0x10a4>
 400c030:	d9014f17 	ldw	r4,1340(sp)
 400c034:	b00b883a 	mov	r5,r22
 400c038:	d9800c04 	addi	r6,sp,48
 400c03c:	400a3e80 	call	400a3e8 <__sprint_r>
 400c040:	103ab71e 	bne	r2,zero,400ab20 <___vfprintf_internal_r+0x6e0>
 400c044:	003ab506 	br	400ab1c <___vfprintf_internal_r+0x6dc>
 400c048:	38800017 	ldw	r2,0(r7)
 400c04c:	39c00104 	addi	r7,r7,4
 400c050:	d9c14015 	stw	r7,1280(sp)
 400c054:	d9414b17 	ldw	r5,1324(sp)
 400c058:	d9c14017 	ldw	r7,1280(sp)
 400c05c:	11400015 	stw	r5,0(r2)
 400c060:	00395306 	br	400a5b0 <___vfprintf_internal_r+0x170>
 400c064:	980f883a 	mov	r7,r19
 400c068:	dcc14515 	stw	r19,1300(sp)
 400c06c:	d8014615 	stw	zero,1304(sp)
 400c070:	003b9506 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400c074:	0027883a 	mov	r19,zero
 400c078:	00397206 	br	400a644 <___vfprintf_internal_r+0x204>
 400c07c:	00c100b4 	movhi	r3,1026
 400c080:	18d17904 	addi	r3,r3,17892
 400c084:	100f883a 	mov	r7,r2
 400c088:	d8814515 	stw	r2,1300(sp)
 400c08c:	d8c14115 	stw	r3,1284(sp)
 400c090:	0039da06 	br	400a7fc <___vfprintf_internal_r+0x3bc>
 400c094:	008100b4 	movhi	r2,1026
 400c098:	10917804 	addi	r2,r2,17888
 400c09c:	d8814115 	stw	r2,1284(sp)
 400c0a0:	003d1606 	br	400b4fc <___vfprintf_internal_r+0x10bc>
 400c0a4:	d9414d17 	ldw	r5,1332(sp)
 400c0a8:	00801984 	movi	r2,102
 400c0ac:	28804926 	beq	r5,r2,400c1d4 <___vfprintf_internal_r+0x1d94>
 400c0b0:	200f883a 	mov	r7,r4
 400c0b4:	24805716 	blt	r4,r18,400c214 <___vfprintf_internal_r+0x1dd4>
 400c0b8:	d9414c17 	ldw	r5,1328(sp)
 400c0bc:	2880004c 	andi	r2,r5,1
 400c0c0:	10000126 	beq	r2,zero,400c0c8 <___vfprintf_internal_r+0x1c88>
 400c0c4:	21c00044 	addi	r7,r4,1
 400c0c8:	d9c14515 	stw	r7,1300(sp)
 400c0cc:	383fcc0e 	bge	r7,zero,400c000 <___vfprintf_internal_r+0x1bc0>
 400c0d0:	d8014515 	stw	zero,1300(sp)
 400c0d4:	003fca06 	br	400c000 <___vfprintf_internal_r+0x1bc0>
 400c0d8:	d9000517 	ldw	r4,20(sp)
 400c0dc:	00bfff04 	movi	r2,-4
 400c0e0:	1100480e 	bge	r2,r4,400c204 <___vfprintf_internal_r+0x1dc4>
 400c0e4:	99004716 	blt	r19,r4,400c204 <___vfprintf_internal_r+0x1dc4>
 400c0e8:	d8c14d15 	stw	r3,1332(sp)
 400c0ec:	003ff006 	br	400c0b0 <___vfprintf_internal_r+0x1c70>
 400c0f0:	d8800717 	ldw	r2,28(sp)
 400c0f4:	14bf8b2e 	bgeu	r2,r18,400bf24 <___vfprintf_internal_r+0x1ae4>
 400c0f8:	9007883a 	mov	r3,r18
 400c0fc:	01000c04 	movi	r4,48
 400c100:	11000005 	stb	r4,0(r2)
 400c104:	10800044 	addi	r2,r2,1
 400c108:	d8800715 	stw	r2,28(sp)
 400c10c:	18bffc1e 	bne	r3,r2,400c100 <___vfprintf_internal_r+0x1cc0>
 400c110:	003f8406 	br	400bf24 <___vfprintf_internal_r+0x1ae4>
 400c114:	d8814117 	ldw	r2,1284(sp)
 400c118:	10c00007 	ldb	r3,0(r2)
 400c11c:	00800c04 	movi	r2,48
 400c120:	18805b26 	beq	r3,r2,400c290 <___vfprintf_internal_r+0x1e50>
 400c124:	d9000517 	ldw	r4,20(sp)
 400c128:	9125883a 	add	r18,r18,r4
 400c12c:	003f7506 	br	400bf04 <___vfprintf_internal_r+0x1ac4>
 400c130:	d9014c17 	ldw	r4,1328(sp)
 400c134:	2080004c 	andi	r2,r4,1
 400c138:	1005003a 	cmpeq	r2,r2,zero
 400c13c:	103f6a26 	beq	r2,zero,400bee8 <___vfprintf_internal_r+0x1aa8>
 400c140:	d8800717 	ldw	r2,28(sp)
 400c144:	003f7706 	br	400bf24 <___vfprintf_internal_r+0x1ae4>
 400c148:	d9c14515 	stw	r7,1300(sp)
 400c14c:	38004d16 	blt	r7,zero,400c284 <___vfprintf_internal_r+0x1e44>
 400c150:	dc814715 	stw	r18,1308(sp)
 400c154:	d8014615 	stw	zero,1304(sp)
 400c158:	003b5b06 	br	400aec8 <___vfprintf_internal_r+0xa88>
 400c15c:	d9014f17 	ldw	r4,1340(sp)
 400c160:	d8800504 	addi	r2,sp,20
 400c164:	d8800115 	stw	r2,4(sp)
 400c168:	d8c00604 	addi	r3,sp,24
 400c16c:	d8800704 	addi	r2,sp,28
 400c170:	800b883a 	mov	r5,r16
 400c174:	880d883a 	mov	r6,r17
 400c178:	01c000c4 	movi	r7,3
 400c17c:	d8c00215 	stw	r3,8(sp)
 400c180:	d8800315 	stw	r2,12(sp)
 400c184:	dcc00015 	stw	r19,0(sp)
 400c188:	9829883a 	mov	r20,r19
 400c18c:	400de300 	call	400de30 <_dtoa_r>
 400c190:	d8814115 	stw	r2,1284(sp)
 400c194:	003f5106 	br	400bedc <___vfprintf_internal_r+0x1a9c>
 400c198:	d8c14217 	ldw	r3,1288(sp)
 400c19c:	d9014317 	ldw	r4,1292(sp)
 400c1a0:	07000b44 	movi	fp,45
 400c1a4:	1821883a 	mov	r16,r3
 400c1a8:	2460003c 	xorhi	r17,r4,32768
 400c1ac:	003f3106 	br	400be74 <___vfprintf_internal_r+0x1a34>
 400c1b0:	9d000044 	addi	r20,r19,1
 400c1b4:	003f3906 	br	400be9c <___vfprintf_internal_r+0x1a5c>
 400c1b8:	983f251e 	bne	r19,zero,400be50 <___vfprintf_internal_r+0x1a10>
 400c1bc:	04c00044 	movi	r19,1
 400c1c0:	003f2306 	br	400be50 <___vfprintf_internal_r+0x1a10>
 400c1c4:	04c00184 	movi	r19,6
 400c1c8:	003f2106 	br	400be50 <___vfprintf_internal_r+0x1a10>
 400c1cc:	d8014515 	stw	zero,1300(sp)
 400c1d0:	003eee06 	br	400bd8c <___vfprintf_internal_r+0x194c>
 400c1d4:	200f883a 	mov	r7,r4
 400c1d8:	0100370e 	bge	zero,r4,400c2b8 <___vfprintf_internal_r+0x1e78>
 400c1dc:	9800031e 	bne	r19,zero,400c1ec <___vfprintf_internal_r+0x1dac>
 400c1e0:	d9814c17 	ldw	r6,1328(sp)
 400c1e4:	3080004c 	andi	r2,r6,1
 400c1e8:	103fb726 	beq	r2,zero,400c0c8 <___vfprintf_internal_r+0x1c88>
 400c1ec:	20800044 	addi	r2,r4,1
 400c1f0:	98a7883a 	add	r19,r19,r2
 400c1f4:	dcc14515 	stw	r19,1300(sp)
 400c1f8:	980f883a 	mov	r7,r19
 400c1fc:	983f800e 	bge	r19,zero,400c000 <___vfprintf_internal_r+0x1bc0>
 400c200:	003fb306 	br	400c0d0 <___vfprintf_internal_r+0x1c90>
 400c204:	d9814d17 	ldw	r6,1332(sp)
 400c208:	31bfff84 	addi	r6,r6,-2
 400c20c:	d9814d15 	stw	r6,1332(sp)
 400c210:	003f4c06 	br	400bf44 <___vfprintf_internal_r+0x1b04>
 400c214:	0100180e 	bge	zero,r4,400c278 <___vfprintf_internal_r+0x1e38>
 400c218:	00800044 	movi	r2,1
 400c21c:	1485883a 	add	r2,r2,r18
 400c220:	d8814515 	stw	r2,1300(sp)
 400c224:	100f883a 	mov	r7,r2
 400c228:	103f750e 	bge	r2,zero,400c000 <___vfprintf_internal_r+0x1bc0>
 400c22c:	003fa806 	br	400c0d0 <___vfprintf_internal_r+0x1c90>
 400c230:	80c00c04 	addi	r3,r16,48
 400c234:	00800c04 	movi	r2,48
 400c238:	d8c008c5 	stb	r3,35(sp)
 400c23c:	d9800804 	addi	r6,sp,32
 400c240:	d8c00904 	addi	r3,sp,36
 400c244:	d8800885 	stb	r2,34(sp)
 400c248:	003f6506 	br	400bfe0 <___vfprintf_internal_r+0x1ba0>
 400c24c:	d9014c17 	ldw	r4,1328(sp)
 400c250:	2084703a 	and	r2,r4,r2
 400c254:	103f9c26 	beq	r2,zero,400c0c8 <___vfprintf_internal_r+0x1c88>
 400c258:	003f6606 	br	400bff4 <___vfprintf_internal_r+0x1bb4>
 400c25c:	d9800804 	addi	r6,sp,32
 400c260:	d8c00884 	addi	r3,sp,34
 400c264:	003f5e06 	br	400bfe0 <___vfprintf_internal_r+0x1ba0>
 400c268:	00800b44 	movi	r2,45
 400c26c:	0121c83a 	sub	r16,zero,r4
 400c270:	d8800845 	stb	r2,33(sp)
 400c274:	003f3d06 	br	400bf6c <___vfprintf_internal_r+0x1b2c>
 400c278:	00800084 	movi	r2,2
 400c27c:	1105c83a 	sub	r2,r2,r4
 400c280:	003fe606 	br	400c21c <___vfprintf_internal_r+0x1ddc>
 400c284:	d8014515 	stw	zero,1300(sp)
 400c288:	dc814715 	stw	r18,1308(sp)
 400c28c:	003fb106 	br	400c154 <___vfprintf_internal_r+0x1d14>
 400c290:	000d883a 	mov	r6,zero
 400c294:	000f883a 	mov	r7,zero
 400c298:	8009883a 	mov	r4,r16
 400c29c:	880b883a 	mov	r5,r17
 400c2a0:	4016c980 	call	4016c98 <__nedf2>
 400c2a4:	103f9f26 	beq	r2,zero,400c124 <___vfprintf_internal_r+0x1ce4>
 400c2a8:	00800044 	movi	r2,1
 400c2ac:	1509c83a 	sub	r4,r2,r20
 400c2b0:	d9000515 	stw	r4,20(sp)
 400c2b4:	003f9b06 	br	400c124 <___vfprintf_internal_r+0x1ce4>
 400c2b8:	98000d1e 	bne	r19,zero,400c2f0 <___vfprintf_internal_r+0x1eb0>
 400c2bc:	d8c14c17 	ldw	r3,1328(sp)
 400c2c0:	1880004c 	andi	r2,r3,1
 400c2c4:	10000a1e 	bne	r2,zero,400c2f0 <___vfprintf_internal_r+0x1eb0>
 400c2c8:	01000044 	movi	r4,1
 400c2cc:	200f883a 	mov	r7,r4
 400c2d0:	d9014515 	stw	r4,1300(sp)
 400c2d4:	003f4a06 	br	400c000 <___vfprintf_internal_r+0x1bc0>
 400c2d8:	3cc00017 	ldw	r19,0(r7)
 400c2dc:	39c00104 	addi	r7,r7,4
 400c2e0:	983d0e0e 	bge	r19,zero,400b71c <___vfprintf_internal_r+0x12dc>
 400c2e4:	b8c00007 	ldb	r3,0(r23)
 400c2e8:	04ffffc4 	movi	r19,-1
 400c2ec:	0038d306 	br	400a63c <___vfprintf_internal_r+0x1fc>
 400c2f0:	9cc00084 	addi	r19,r19,2
 400c2f4:	dcc14515 	stw	r19,1300(sp)
 400c2f8:	980f883a 	mov	r7,r19
 400c2fc:	983f400e 	bge	r19,zero,400c000 <___vfprintf_internal_r+0x1bc0>
 400c300:	003f7306 	br	400c0d0 <___vfprintf_internal_r+0x1c90>

0400c304 <__vfprintf_internal>:
 400c304:	008100b4 	movhi	r2,1026
 400c308:	109a4904 	addi	r2,r2,26916
 400c30c:	2013883a 	mov	r9,r4
 400c310:	11000017 	ldw	r4,0(r2)
 400c314:	2805883a 	mov	r2,r5
 400c318:	300f883a 	mov	r7,r6
 400c31c:	480b883a 	mov	r5,r9
 400c320:	100d883a 	mov	r6,r2
 400c324:	400a4401 	jmpi	400a440 <___vfprintf_internal_r>

0400c328 <__svfscanf_r>:
 400c328:	deff4e04 	addi	sp,sp,-712
 400c32c:	dd80ae15 	stw	r22,696(sp)
 400c330:	dd00ac15 	stw	r20,688(sp)
 400c334:	dc40a915 	stw	r17,676(sp)
 400c338:	dc00a815 	stw	r16,672(sp)
 400c33c:	dfc0b115 	stw	ra,708(sp)
 400c340:	df00b015 	stw	fp,704(sp)
 400c344:	ddc0af15 	stw	r23,700(sp)
 400c348:	dd40ad15 	stw	r21,692(sp)
 400c34c:	dcc0ab15 	stw	r19,684(sp)
 400c350:	dc80aa15 	stw	r18,680(sp)
 400c354:	202d883a 	mov	r22,r4
 400c358:	2821883a 	mov	r16,r5
 400c35c:	d9c0a415 	stw	r7,656(sp)
 400c360:	3029883a 	mov	r20,r6
 400c364:	d800a215 	stw	zero,648(sp)
 400c368:	0023883a 	mov	r17,zero
 400c36c:	d800a115 	stw	zero,644(sp)
 400c370:	d800a015 	stw	zero,640(sp)
 400c374:	a1000007 	ldb	r4,0(r20)
 400c378:	d9000115 	stw	r4,4(sp)
 400c37c:	20001f26 	beq	r4,zero,400c3fc <__svfscanf_r+0xd4>
 400c380:	04c100b4 	movhi	r19,1026
 400c384:	9cda4d04 	addi	r19,r19,26932
 400c388:	9c800017 	ldw	r18,0(r19)
 400c38c:	a5000044 	addi	r20,r20,1
 400c390:	9107883a 	add	r3,r18,r4
 400c394:	18800003 	ldbu	r2,0(r3)
 400c398:	1080020c 	andi	r2,r2,8
 400c39c:	10002426 	beq	r2,zero,400c430 <__svfscanf_r+0x108>
 400c3a0:	80c00117 	ldw	r3,4(r16)
 400c3a4:	00c00e0e 	bge	zero,r3,400c3e0 <__svfscanf_r+0xb8>
 400c3a8:	81400017 	ldw	r5,0(r16)
 400c3ac:	98800017 	ldw	r2,0(r19)
 400c3b0:	28c00003 	ldbu	r3,0(r5)
 400c3b4:	1887883a 	add	r3,r3,r2
 400c3b8:	19000003 	ldbu	r4,0(r3)
 400c3bc:	2100020c 	andi	r4,r4,8
 400c3c0:	203fec26 	beq	r4,zero,400c374 <__svfscanf_r+0x4c>
 400c3c4:	80c00117 	ldw	r3,4(r16)
 400c3c8:	29800044 	addi	r6,r5,1
 400c3cc:	8c400044 	addi	r17,r17,1
 400c3d0:	18ffffc4 	addi	r3,r3,-1
 400c3d4:	81800015 	stw	r6,0(r16)
 400c3d8:	80c00115 	stw	r3,4(r16)
 400c3dc:	00fff216 	blt	zero,r3,400c3a8 <__svfscanf_r+0x80>
 400c3e0:	b009883a 	mov	r4,r22
 400c3e4:	800b883a 	mov	r5,r16
 400c3e8:	40122b00 	call	40122b0 <__srefill_r>
 400c3ec:	103fee26 	beq	r2,zero,400c3a8 <__svfscanf_r+0x80>
 400c3f0:	a1000007 	ldb	r4,0(r20)
 400c3f4:	d9000115 	stw	r4,4(sp)
 400c3f8:	203fe11e 	bne	r4,zero,400c380 <__svfscanf_r+0x58>
 400c3fc:	d880a217 	ldw	r2,648(sp)
 400c400:	dfc0b117 	ldw	ra,708(sp)
 400c404:	df00b017 	ldw	fp,704(sp)
 400c408:	ddc0af17 	ldw	r23,700(sp)
 400c40c:	dd80ae17 	ldw	r22,696(sp)
 400c410:	dd40ad17 	ldw	r21,692(sp)
 400c414:	dd00ac17 	ldw	r20,688(sp)
 400c418:	dcc0ab17 	ldw	r19,684(sp)
 400c41c:	dc80aa17 	ldw	r18,680(sp)
 400c420:	dc40a917 	ldw	r17,676(sp)
 400c424:	dc00a817 	ldw	r16,672(sp)
 400c428:	dec0b204 	addi	sp,sp,712
 400c42c:	f800283a 	ret
 400c430:	00800944 	movi	r2,37
 400c434:	20801626 	beq	r4,r2,400c490 <__svfscanf_r+0x168>
 400c438:	80800117 	ldw	r2,4(r16)
 400c43c:	00800b0e 	bge	zero,r2,400c46c <__svfscanf_r+0x144>
 400c440:	81000017 	ldw	r4,0(r16)
 400c444:	a0ffffc7 	ldb	r3,-1(r20)
 400c448:	20800003 	ldbu	r2,0(r4)
 400c44c:	10ffeb1e 	bne	r2,r3,400c3fc <__svfscanf_r+0xd4>
 400c450:	80c00117 	ldw	r3,4(r16)
 400c454:	21800044 	addi	r6,r4,1
 400c458:	8c400044 	addi	r17,r17,1
 400c45c:	18ffffc4 	addi	r3,r3,-1
 400c460:	80c00115 	stw	r3,4(r16)
 400c464:	81800015 	stw	r6,0(r16)
 400c468:	003fc206 	br	400c374 <__svfscanf_r+0x4c>
 400c46c:	b009883a 	mov	r4,r22
 400c470:	800b883a 	mov	r5,r16
 400c474:	40122b00 	call	40122b0 <__srefill_r>
 400c478:	103ff126 	beq	r2,zero,400c440 <__svfscanf_r+0x118>
 400c47c:	d900a217 	ldw	r4,648(sp)
 400c480:	2004981e 	bne	r4,zero,400d6e4 <__svfscanf_r+0x13bc>
 400c484:	00bfffc4 	movi	r2,-1
 400c488:	d880a215 	stw	r2,648(sp)
 400c48c:	003fdb06 	br	400c3fc <__svfscanf_r+0xd4>
 400c490:	d800a315 	stw	zero,652(sp)
 400c494:	002b883a 	mov	r21,zero
 400c498:	a0c00003 	ldbu	r3,0(r20)
 400c49c:	00801e04 	movi	r2,120
 400c4a0:	a5000044 	addi	r20,r20,1
 400c4a4:	1dc03fcc 	andi	r23,r3,255
 400c4a8:	bdc0201c 	xori	r23,r23,128
 400c4ac:	bdffe004 	addi	r23,r23,-128
 400c4b0:	10c08036 	bltu	r2,r3,400c6b4 <__svfscanf_r+0x38c>
 400c4b4:	18c5883a 	add	r2,r3,r3
 400c4b8:	1085883a 	add	r2,r2,r2
 400c4bc:	00c10074 	movhi	r3,1025
 400c4c0:	18f13404 	addi	r3,r3,-15152
 400c4c4:	10c5883a 	add	r2,r2,r3
 400c4c8:	11000017 	ldw	r4,0(r2)
 400c4cc:	2000683a 	jmp	r4
 400c4d0:	0400c484 	movi	r16,786
 400c4d4:	0400c6b4 	movhi	r16,794
 400c4d8:	0400c6b4 	movhi	r16,794
 400c4dc:	0400c6b4 	movhi	r16,794
 400c4e0:	0400c6b4 	movhi	r16,794
 400c4e4:	0400c6b4 	movhi	r16,794
 400c4e8:	0400c6b4 	movhi	r16,794
 400c4ec:	0400c6b4 	movhi	r16,794
 400c4f0:	0400c6b4 	movhi	r16,794
 400c4f4:	0400c6b4 	movhi	r16,794
 400c4f8:	0400c6b4 	movhi	r16,794
 400c4fc:	0400c6b4 	movhi	r16,794
 400c500:	0400c6b4 	movhi	r16,794
 400c504:	0400c6b4 	movhi	r16,794
 400c508:	0400c6b4 	movhi	r16,794
 400c50c:	0400c6b4 	movhi	r16,794
 400c510:	0400c6b4 	movhi	r16,794
 400c514:	0400c6b4 	movhi	r16,794
 400c518:	0400c6b4 	movhi	r16,794
 400c51c:	0400c6b4 	movhi	r16,794
 400c520:	0400c6b4 	movhi	r16,794
 400c524:	0400c6b4 	movhi	r16,794
 400c528:	0400c6b4 	movhi	r16,794
 400c52c:	0400c6b4 	movhi	r16,794
 400c530:	0400c6b4 	movhi	r16,794
 400c534:	0400c6b4 	movhi	r16,794
 400c538:	0400c6b4 	movhi	r16,794
 400c53c:	0400c6b4 	movhi	r16,794
 400c540:	0400c6b4 	movhi	r16,794
 400c544:	0400c6b4 	movhi	r16,794
 400c548:	0400c6b4 	movhi	r16,794
 400c54c:	0400c6b4 	movhi	r16,794
 400c550:	0400c6b4 	movhi	r16,794
 400c554:	0400c6b4 	movhi	r16,794
 400c558:	0400c6b4 	movhi	r16,794
 400c55c:	0400c6b4 	movhi	r16,794
 400c560:	0400c6b4 	movhi	r16,794
 400c564:	0400c438 	rdprs	r16,zero,784
 400c568:	0400c6b4 	movhi	r16,794
 400c56c:	0400c6b4 	movhi	r16,794
 400c570:	0400c6b4 	movhi	r16,794
 400c574:	0400c6b4 	movhi	r16,794
 400c578:	0400d554 	movui	r16,853
 400c57c:	0400c6b4 	movhi	r16,794
 400c580:	0400c6b4 	movhi	r16,794
 400c584:	0400c6b4 	movhi	r16,794
 400c588:	0400c6b4 	movhi	r16,794
 400c58c:	0400c6b4 	movhi	r16,794
 400c590:	0400d538 	rdprs	r16,zero,852
 400c594:	0400d538 	rdprs	r16,zero,852
 400c598:	0400d538 	rdprs	r16,zero,852
 400c59c:	0400d538 	rdprs	r16,zero,852
 400c5a0:	0400d538 	rdprs	r16,zero,852
 400c5a4:	0400d538 	rdprs	r16,zero,852
 400c5a8:	0400d538 	rdprs	r16,zero,852
 400c5ac:	0400d538 	rdprs	r16,zero,852
 400c5b0:	0400d538 	rdprs	r16,zero,852
 400c5b4:	0400d538 	rdprs	r16,zero,852
 400c5b8:	0400c6b4 	movhi	r16,794
 400c5bc:	0400c6b4 	movhi	r16,794
 400c5c0:	0400c6b4 	movhi	r16,794
 400c5c4:	0400c6b4 	movhi	r16,794
 400c5c8:	0400c6b4 	movhi	r16,794
 400c5cc:	0400c6b4 	movhi	r16,794
 400c5d0:	0400c6b4 	movhi	r16,794
 400c5d4:	0400c6b4 	movhi	r16,794
 400c5d8:	0400c6b4 	movhi	r16,794
 400c5dc:	0400c6b4 	movhi	r16,794
 400c5e0:	0400c6c8 	cmpgei	r16,zero,795
 400c5e4:	0400d63c 	xorhi	r16,zero,856
 400c5e8:	0400c6b4 	movhi	r16,794
 400c5ec:	0400d63c 	xorhi	r16,zero,856
 400c5f0:	0400c6b4 	movhi	r16,794
 400c5f4:	0400c6b4 	movhi	r16,794
 400c5f8:	0400c6b4 	movhi	r16,794
 400c5fc:	0400c6b4 	movhi	r16,794
 400c600:	0400d530 	cmpltui	r16,zero,852
 400c604:	0400c6b4 	movhi	r16,794
 400c608:	0400c6b4 	movhi	r16,794
 400c60c:	0400d510 	cmplti	r16,zero,852
 400c610:	0400c6b4 	movhi	r16,794
 400c614:	0400c6b4 	movhi	r16,794
 400c618:	0400c6b4 	movhi	r16,794
 400c61c:	0400c6b4 	movhi	r16,794
 400c620:	0400c6b4 	movhi	r16,794
 400c624:	0400c6b4 	movhi	r16,794
 400c628:	0400c6b4 	movhi	r16,794
 400c62c:	0400c6b4 	movhi	r16,794
 400c630:	0400d55c 	xori	r16,zero,853
 400c634:	0400c6b4 	movhi	r16,794
 400c638:	0400c6b4 	movhi	r16,794
 400c63c:	0400d4f4 	movhi	r16,851
 400c640:	0400c6b4 	movhi	r16,794
 400c644:	0400c6b4 	movhi	r16,794
 400c648:	0400c6b4 	movhi	r16,794
 400c64c:	0400c6b4 	movhi	r16,794
 400c650:	0400c6b4 	movhi	r16,794
 400c654:	0400c6b4 	movhi	r16,794
 400c658:	0400c6b4 	movhi	r16,794
 400c65c:	0400d644 	movi	r16,857
 400c660:	0400c6cc 	andi	r16,zero,795
 400c664:	0400d63c 	xorhi	r16,zero,856
 400c668:	0400d63c 	xorhi	r16,zero,856
 400c66c:	0400d63c 	xorhi	r16,zero,856
 400c670:	0400d650 	cmplti	r16,zero,857
 400c674:	0400d598 	cmpnei	r16,zero,854
 400c678:	0400c6b4 	movhi	r16,794
 400c67c:	0400c6b4 	movhi	r16,794
 400c680:	0400cc60 	cmpeqi	r16,zero,817
 400c684:	0400c6b4 	movhi	r16,794
 400c688:	0400d74c 	andi	r16,zero,861
 400c68c:	0400d708 	cmpgei	r16,zero,860
 400c690:	0400d72c 	andhi	r16,zero,860
 400c694:	0400c6b4 	movhi	r16,794
 400c698:	0400c6b4 	movhi	r16,794
 400c69c:	0400d724 	muli	r16,zero,860
 400c6a0:	0400c6b4 	movhi	r16,794
 400c6a4:	0400d57c 	xorhi	r16,zero,853
 400c6a8:	0400c6b4 	movhi	r16,794
 400c6ac:	0400c6b4 	movhi	r16,794
 400c6b0:	0400d55c 	xori	r16,zero,853
 400c6b4:	bc87883a 	add	r3,r23,r18
 400c6b8:	18800003 	ldbu	r2,0(r3)
 400c6bc:	1080004c 	andi	r2,r2,1
 400c6c0:	1005003a 	cmpeq	r2,r2,zero
 400c6c4:	1000011e 	bne	r2,zero,400c6cc <__svfscanf_r+0x3a4>
 400c6c8:	ad400054 	ori	r21,r21,1
 400c6cc:	01010074 	movhi	r4,1025
 400c6d0:	210ff204 	addi	r4,r4,16328
 400c6d4:	00800284 	movi	r2,10
 400c6d8:	d900a015 	stw	r4,640(sp)
 400c6dc:	048000c4 	movi	r18,3
 400c6e0:	d880a115 	stw	r2,644(sp)
 400c6e4:	80c00117 	ldw	r3,4(r16)
 400c6e8:	00c13f0e 	bge	zero,r3,400cbe8 <__svfscanf_r+0x8c0>
 400c6ec:	a880100c 	andi	r2,r21,64
 400c6f0:	10001326 	beq	r2,zero,400c740 <__svfscanf_r+0x418>
 400c6f4:	00800104 	movi	r2,4
 400c6f8:	14bf1e36 	bltu	r2,r18,400c374 <__svfscanf_r+0x4c>
 400c6fc:	9485883a 	add	r2,r18,r18
 400c700:	1085883a 	add	r2,r2,r2
 400c704:	00c10074 	movhi	r3,1025
 400c708:	18f1c604 	addi	r3,r3,-14568
 400c70c:	10c5883a 	add	r2,r2,r3
 400c710:	11000017 	ldw	r4,0(r2)
 400c714:	2000683a 	jmp	r4
 400c718:	0400c77c 	xorhi	r16,zero,797
 400c71c:	0400c87c 	xorhi	r16,zero,801
 400c720:	0400ca8c 	andi	r16,zero,810
 400c724:	0400c8f0 	cmpltui	r16,zero,803
 400c728:	0400cbc4 	movi	r16,815
 400c72c:	b009883a 	mov	r4,r22
 400c730:	800b883a 	mov	r5,r16
 400c734:	40122b00 	call	40122b0 <__srefill_r>
 400c738:	103f501e 	bne	r2,zero,400c47c <__svfscanf_r+0x154>
 400c73c:	8c400044 	addi	r17,r17,1
 400c740:	81400017 	ldw	r5,0(r16)
 400c744:	98800017 	ldw	r2,0(r19)
 400c748:	28c00003 	ldbu	r3,0(r5)
 400c74c:	1887883a 	add	r3,r3,r2
 400c750:	19000003 	ldbu	r4,0(r3)
 400c754:	2100020c 	andi	r4,r4,8
 400c758:	203fe626 	beq	r4,zero,400c6f4 <__svfscanf_r+0x3cc>
 400c75c:	80c00117 	ldw	r3,4(r16)
 400c760:	18ffffc4 	addi	r3,r3,-1
 400c764:	80c00115 	stw	r3,4(r16)
 400c768:	00fff00e 	bge	zero,r3,400c72c <__svfscanf_r+0x404>
 400c76c:	29800044 	addi	r6,r5,1
 400c770:	8c400044 	addi	r17,r17,1
 400c774:	81800015 	stw	r6,0(r16)
 400c778:	003ff106 	br	400c740 <__svfscanf_r+0x418>
 400c77c:	d8c0a317 	ldw	r3,652(sp)
 400c780:	1800021e 	bne	r3,zero,400c78c <__svfscanf_r+0x464>
 400c784:	01000044 	movi	r4,1
 400c788:	d900a315 	stw	r4,652(sp)
 400c78c:	a880004c 	andi	r2,r21,1
 400c790:	1005003a 	cmpeq	r2,r2,zero
 400c794:	1002811e 	bne	r2,zero,400d19c <__svfscanf_r+0xe74>
 400c798:	ad40040c 	andi	r21,r21,16
 400c79c:	a805003a 	cmpeq	r2,r21,zero
 400c7a0:	d880a615 	stw	r2,664(sp)
 400c7a4:	1003d31e 	bne	r2,zero,400d6f4 <__svfscanf_r+0x13cc>
 400c7a8:	0027883a 	mov	r19,zero
 400c7ac:	d900a317 	ldw	r4,652(sp)
 400c7b0:	2003c726 	beq	r4,zero,400d6d0 <__svfscanf_r+0x13a8>
 400c7b4:	070100b4 	movhi	fp,1026
 400c7b8:	e71a4e04 	addi	fp,fp,26936
 400c7bc:	e0800017 	ldw	r2,0(fp)
 400c7c0:	103f2e26 	beq	r2,zero,400c47c <__svfscanf_r+0x154>
 400c7c4:	d8804404 	addi	r2,sp,272
 400c7c8:	0025883a 	mov	r18,zero
 400c7cc:	d880a515 	stw	r2,660(sp)
 400c7d0:	05ffffc4 	movi	r23,-1
 400c7d4:	80800017 	ldw	r2,0(r16)
 400c7d8:	80c00117 	ldw	r3,4(r16)
 400c7dc:	d900a517 	ldw	r4,660(sp)
 400c7e0:	12000003 	ldbu	r8,0(r2)
 400c7e4:	18ffffc4 	addi	r3,r3,-1
 400c7e8:	11800044 	addi	r6,r2,1
 400c7ec:	248f883a 	add	r7,r4,r18
 400c7f0:	80c00115 	stw	r3,4(r16)
 400c7f4:	81800015 	stw	r6,0(r16)
 400c7f8:	3a000005 	stb	r8,0(r7)
 400c7fc:	d9000204 	addi	r4,sp,8
 400c800:	000b883a 	mov	r5,zero
 400c804:	01800204 	movi	r6,8
 400c808:	4010b980 	call	4010b98 <memset>
 400c80c:	d980a517 	ldw	r6,660(sp)
 400c810:	94800044 	addi	r18,r18,1
 400c814:	d8800204 	addi	r2,sp,8
 400c818:	b009883a 	mov	r4,r22
 400c81c:	980b883a 	mov	r5,r19
 400c820:	900f883a 	mov	r7,r18
 400c824:	d8800015 	stw	r2,0(sp)
 400c828:	40108340 	call	4010834 <_mbrtowc_r>
 400c82c:	1007883a 	mov	r3,r2
 400c830:	15ff1226 	beq	r2,r23,400c47c <__svfscanf_r+0x154>
 400c834:	10039e1e 	bne	r2,zero,400d6b0 <__svfscanf_r+0x1388>
 400c838:	a800011e 	bne	r21,zero,400c840 <__svfscanf_r+0x518>
 400c83c:	98000015 	stw	zero,0(r19)
 400c840:	d8c0a317 	ldw	r3,652(sp)
 400c844:	d900a617 	ldw	r4,664(sp)
 400c848:	8ca3883a 	add	r17,r17,r18
 400c84c:	18ffffc4 	addi	r3,r3,-1
 400c850:	d8c0a315 	stw	r3,652(sp)
 400c854:	20000126 	beq	r4,zero,400c85c <__svfscanf_r+0x534>
 400c858:	9cc00104 	addi	r19,r19,4
 400c85c:	0025883a 	mov	r18,zero
 400c860:	80c00117 	ldw	r3,4(r16)
 400c864:	00c3950e 	bge	zero,r3,400d6bc <__svfscanf_r+0x1394>
 400c868:	d880a317 	ldw	r2,652(sp)
 400c86c:	10039826 	beq	r2,zero,400d6d0 <__svfscanf_r+0x13a8>
 400c870:	e0800017 	ldw	r2,0(fp)
 400c874:	90bfd71e 	bne	r18,r2,400c7d4 <__svfscanf_r+0x4ac>
 400c878:	003f0006 	br	400c47c <__svfscanf_r+0x154>
 400c87c:	d880a317 	ldw	r2,652(sp)
 400c880:	1000021e 	bne	r2,zero,400c88c <__svfscanf_r+0x564>
 400c884:	00ffffc4 	movi	r3,-1
 400c888:	d8c0a315 	stw	r3,652(sp)
 400c88c:	a880040c 	andi	r2,r21,16
 400c890:	1003b826 	beq	r2,zero,400d774 <__svfscanf_r+0x144c>
 400c894:	0027883a 	mov	r19,zero
 400c898:	dd400404 	addi	r21,sp,16
 400c89c:	81000017 	ldw	r4,0(r16)
 400c8a0:	20800003 	ldbu	r2,0(r4)
 400c8a4:	a885883a 	add	r2,r21,r2
 400c8a8:	10c00007 	ldb	r3,0(r2)
 400c8ac:	18037d26 	beq	r3,zero,400d6a4 <__svfscanf_r+0x137c>
 400c8b0:	80c00117 	ldw	r3,4(r16)
 400c8b4:	21800044 	addi	r6,r4,1
 400c8b8:	d900a317 	ldw	r4,652(sp)
 400c8bc:	18ffffc4 	addi	r3,r3,-1
 400c8c0:	9cc00044 	addi	r19,r19,1
 400c8c4:	81800015 	stw	r6,0(r16)
 400c8c8:	80c00115 	stw	r3,4(r16)
 400c8cc:	24c37526 	beq	r4,r19,400d6a4 <__svfscanf_r+0x137c>
 400c8d0:	00fff216 	blt	zero,r3,400c89c <__svfscanf_r+0x574>
 400c8d4:	b009883a 	mov	r4,r22
 400c8d8:	800b883a 	mov	r5,r16
 400c8dc:	40122b00 	call	40122b0 <__srefill_r>
 400c8e0:	103fee26 	beq	r2,zero,400c89c <__svfscanf_r+0x574>
 400c8e4:	983ee526 	beq	r19,zero,400c47c <__svfscanf_r+0x154>
 400c8e8:	8ce3883a 	add	r17,r17,r19
 400c8ec:	003ea106 	br	400c374 <__svfscanf_r+0x4c>
 400c8f0:	d900a317 	ldw	r4,652(sp)
 400c8f4:	00805704 	movi	r2,348
 400c8f8:	20ffffc4 	addi	r3,r4,-1
 400c8fc:	10c0bf2e 	bgeu	r2,r3,400cbfc <__svfscanf_r+0x8d4>
 400c900:	00805744 	movi	r2,349
 400c904:	24ffa8c4 	addi	r19,r4,-349
 400c908:	ac836014 	ori	r18,r21,3456
 400c90c:	d880a315 	stw	r2,652(sp)
 400c910:	d8c04404 	addi	r3,sp,272
 400c914:	d8c0a515 	stw	r3,660(sp)
 400c918:	002f883a 	mov	r23,zero
 400c91c:	182b883a 	mov	r21,r3
 400c920:	81800017 	ldw	r6,0(r16)
 400c924:	00c01344 	movi	r3,77
 400c928:	31400003 	ldbu	r5,0(r6)
 400c92c:	28bff544 	addi	r2,r5,-43
 400c930:	10803fcc 	andi	r2,r2,255
 400c934:	1880b836 	bltu	r3,r2,400cc18 <__svfscanf_r+0x8f0>
 400c938:	1085883a 	add	r2,r2,r2
 400c93c:	1085883a 	add	r2,r2,r2
 400c940:	00c10074 	movhi	r3,1025
 400c944:	18f25504 	addi	r3,r3,-13996
 400c948:	10c5883a 	add	r2,r2,r3
 400c94c:	11000017 	ldw	r4,0(r2)
 400c950:	2000683a 	jmp	r4
 400c954:	0400cd68 	cmpgeui	r16,zero,821
 400c958:	0400cc18 	cmpnei	r16,zero,816
 400c95c:	0400cd68 	cmpgeui	r16,zero,821
 400c960:	0400cc18 	cmpnei	r16,zero,816
 400c964:	0400cc18 	cmpnei	r16,zero,816
 400c968:	0400cdac 	andhi	r16,zero,822
 400c96c:	0400d5b0 	cmpltui	r16,zero,854
 400c970:	0400d5b0 	cmpltui	r16,zero,854
 400c974:	0400d5b0 	cmpltui	r16,zero,854
 400c978:	0400d5b0 	cmpltui	r16,zero,854
 400c97c:	0400d5b0 	cmpltui	r16,zero,854
 400c980:	0400d5b0 	cmpltui	r16,zero,854
 400c984:	0400d5b0 	cmpltui	r16,zero,854
 400c988:	0400d5d8 	cmpnei	r16,zero,855
 400c98c:	0400d5d8 	cmpnei	r16,zero,855
 400c990:	0400cc18 	cmpnei	r16,zero,816
 400c994:	0400cc18 	cmpnei	r16,zero,816
 400c998:	0400cc18 	cmpnei	r16,zero,816
 400c99c:	0400cc18 	cmpnei	r16,zero,816
 400c9a0:	0400cc18 	cmpnei	r16,zero,816
 400c9a4:	0400cc18 	cmpnei	r16,zero,816
 400c9a8:	0400cc18 	cmpnei	r16,zero,816
 400c9ac:	0400d608 	cmpgei	r16,zero,856
 400c9b0:	0400d608 	cmpgei	r16,zero,856
 400c9b4:	0400d608 	cmpgei	r16,zero,856
 400c9b8:	0400d608 	cmpgei	r16,zero,856
 400c9bc:	0400d608 	cmpgei	r16,zero,856
 400c9c0:	0400d608 	cmpgei	r16,zero,856
 400c9c4:	0400cc18 	cmpnei	r16,zero,816
 400c9c8:	0400cc18 	cmpnei	r16,zero,816
 400c9cc:	0400cc18 	cmpnei	r16,zero,816
 400c9d0:	0400cc18 	cmpnei	r16,zero,816
 400c9d4:	0400cc18 	cmpnei	r16,zero,816
 400c9d8:	0400cc18 	cmpnei	r16,zero,816
 400c9dc:	0400cc18 	cmpnei	r16,zero,816
 400c9e0:	0400cc18 	cmpnei	r16,zero,816
 400c9e4:	0400cc18 	cmpnei	r16,zero,816
 400c9e8:	0400cc18 	cmpnei	r16,zero,816
 400c9ec:	0400cc18 	cmpnei	r16,zero,816
 400c9f0:	0400cc18 	cmpnei	r16,zero,816
 400c9f4:	0400cc18 	cmpnei	r16,zero,816
 400c9f8:	0400cc18 	cmpnei	r16,zero,816
 400c9fc:	0400cc18 	cmpnei	r16,zero,816
 400ca00:	0400cc18 	cmpnei	r16,zero,816
 400ca04:	0400cc18 	cmpnei	r16,zero,816
 400ca08:	0400d618 	cmpnei	r16,zero,856
 400ca0c:	0400cc18 	cmpnei	r16,zero,816
 400ca10:	0400cc18 	cmpnei	r16,zero,816
 400ca14:	0400cc18 	cmpnei	r16,zero,816
 400ca18:	0400cc18 	cmpnei	r16,zero,816
 400ca1c:	0400cc18 	cmpnei	r16,zero,816
 400ca20:	0400cc18 	cmpnei	r16,zero,816
 400ca24:	0400cc18 	cmpnei	r16,zero,816
 400ca28:	0400cc18 	cmpnei	r16,zero,816
 400ca2c:	0400d608 	cmpgei	r16,zero,856
 400ca30:	0400d608 	cmpgei	r16,zero,856
 400ca34:	0400d608 	cmpgei	r16,zero,856
 400ca38:	0400d608 	cmpgei	r16,zero,856
 400ca3c:	0400d608 	cmpgei	r16,zero,856
 400ca40:	0400d608 	cmpgei	r16,zero,856
 400ca44:	0400cc18 	cmpnei	r16,zero,816
 400ca48:	0400cc18 	cmpnei	r16,zero,816
 400ca4c:	0400cc18 	cmpnei	r16,zero,816
 400ca50:	0400cc18 	cmpnei	r16,zero,816
 400ca54:	0400cc18 	cmpnei	r16,zero,816
 400ca58:	0400cc18 	cmpnei	r16,zero,816
 400ca5c:	0400cc18 	cmpnei	r16,zero,816
 400ca60:	0400cc18 	cmpnei	r16,zero,816
 400ca64:	0400cc18 	cmpnei	r16,zero,816
 400ca68:	0400cc18 	cmpnei	r16,zero,816
 400ca6c:	0400cc18 	cmpnei	r16,zero,816
 400ca70:	0400cc18 	cmpnei	r16,zero,816
 400ca74:	0400cc18 	cmpnei	r16,zero,816
 400ca78:	0400cc18 	cmpnei	r16,zero,816
 400ca7c:	0400cc18 	cmpnei	r16,zero,816
 400ca80:	0400cc18 	cmpnei	r16,zero,816
 400ca84:	0400cc18 	cmpnei	r16,zero,816
 400ca88:	0400d618 	cmpnei	r16,zero,856
 400ca8c:	d900a317 	ldw	r4,652(sp)
 400ca90:	2000021e 	bne	r4,zero,400ca9c <__svfscanf_r+0x774>
 400ca94:	00bfffc4 	movi	r2,-1
 400ca98:	d880a315 	stw	r2,652(sp)
 400ca9c:	a880004c 	andi	r2,r21,1
 400caa0:	1005003a 	cmpeq	r2,r2,zero
 400caa4:	1003651e 	bne	r2,zero,400d83c <__svfscanf_r+0x1514>
 400caa8:	adc0040c 	andi	r23,r21,16
 400caac:	b807003a 	cmpeq	r3,r23,zero
 400cab0:	d8c0a715 	stw	r3,668(sp)
 400cab4:	1802f61e 	bne	r3,zero,400d690 <__svfscanf_r+0x1368>
 400cab8:	dd400104 	addi	r21,sp,4
 400cabc:	0025883a 	mov	r18,zero
 400cac0:	073fffc4 	movi	fp,-1
 400cac4:	81400017 	ldw	r5,0(r16)
 400cac8:	98800017 	ldw	r2,0(r19)
 400cacc:	29c00003 	ldbu	r7,0(r5)
 400cad0:	38c03fcc 	andi	r3,r7,255
 400cad4:	1887883a 	add	r3,r3,r2
 400cad8:	19000003 	ldbu	r4,0(r3)
 400cadc:	2100020c 	andi	r4,r4,8
 400cae0:	2000321e 	bne	r4,zero,400cbac <__svfscanf_r+0x884>
 400cae4:	d8c0a317 	ldw	r3,652(sp)
 400cae8:	18003026 	beq	r3,zero,400cbac <__svfscanf_r+0x884>
 400caec:	008100b4 	movhi	r2,1026
 400caf0:	109a4e04 	addi	r2,r2,26936
 400caf4:	10c00017 	ldw	r3,0(r2)
 400caf8:	90fe6026 	beq	r18,r3,400c47c <__svfscanf_r+0x154>
 400cafc:	d8c04404 	addi	r3,sp,272
 400cb00:	80800117 	ldw	r2,4(r16)
 400cb04:	d8c0a515 	stw	r3,660(sp)
 400cb08:	d900a517 	ldw	r4,660(sp)
 400cb0c:	10ffffc4 	addi	r3,r2,-1
 400cb10:	29800044 	addi	r6,r5,1
 400cb14:	80c00115 	stw	r3,4(r16)
 400cb18:	2485883a 	add	r2,r4,r18
 400cb1c:	81800015 	stw	r6,0(r16)
 400cb20:	d9000204 	addi	r4,sp,8
 400cb24:	000b883a 	mov	r5,zero
 400cb28:	01800204 	movi	r6,8
 400cb2c:	11c00005 	stb	r7,0(r2)
 400cb30:	4010b980 	call	4010b98 <memset>
 400cb34:	d980a517 	ldw	r6,660(sp)
 400cb38:	94800044 	addi	r18,r18,1
 400cb3c:	d8800204 	addi	r2,sp,8
 400cb40:	b009883a 	mov	r4,r22
 400cb44:	a80b883a 	mov	r5,r21
 400cb48:	900f883a 	mov	r7,r18
 400cb4c:	d8800015 	stw	r2,0(sp)
 400cb50:	40108340 	call	4010834 <_mbrtowc_r>
 400cb54:	1007883a 	mov	r3,r2
 400cb58:	173e4826 	beq	r2,fp,400c47c <__svfscanf_r+0x154>
 400cb5c:	1002c91e 	bne	r2,zero,400d684 <__svfscanf_r+0x135c>
 400cb60:	a8000015 	stw	zero,0(r21)
 400cb64:	a9000017 	ldw	r4,0(r21)
 400cb68:	40105b00 	call	40105b0 <iswspace>
 400cb6c:	1002bc1e 	bne	r2,zero,400d660 <__svfscanf_r+0x1338>
 400cb70:	d900a317 	ldw	r4,652(sp)
 400cb74:	d880a717 	ldw	r2,668(sp)
 400cb78:	8ca3883a 	add	r17,r17,r18
 400cb7c:	213fffc4 	addi	r4,r4,-1
 400cb80:	d900a315 	stw	r4,652(sp)
 400cb84:	10000126 	beq	r2,zero,400cb8c <__svfscanf_r+0x864>
 400cb88:	ad400104 	addi	r21,r21,4
 400cb8c:	0025883a 	mov	r18,zero
 400cb90:	80c00117 	ldw	r3,4(r16)
 400cb94:	00ffcb16 	blt	zero,r3,400cac4 <__svfscanf_r+0x79c>
 400cb98:	b009883a 	mov	r4,r22
 400cb9c:	800b883a 	mov	r5,r16
 400cba0:	40122b00 	call	40122b0 <__srefill_r>
 400cba4:	103fc726 	beq	r2,zero,400cac4 <__svfscanf_r+0x79c>
 400cba8:	903e341e 	bne	r18,zero,400c47c <__svfscanf_r+0x154>
 400cbac:	b83df11e 	bne	r23,zero,400c374 <__svfscanf_r+0x4c>
 400cbb0:	d900a217 	ldw	r4,648(sp)
 400cbb4:	a8000015 	stw	zero,0(r21)
 400cbb8:	21000044 	addi	r4,r4,1
 400cbbc:	d900a215 	stw	r4,648(sp)
 400cbc0:	003dec06 	br	400c374 <__svfscanf_r+0x4c>
 400cbc4:	d900a317 	ldw	r4,652(sp)
 400cbc8:	00805704 	movi	r2,348
 400cbcc:	20ffffc4 	addi	r3,r4,-1
 400cbd0:	10c0902e 	bgeu	r2,r3,400ce14 <__svfscanf_r+0xaec>
 400cbd4:	00805744 	movi	r2,349
 400cbd8:	24ffa8c4 	addi	r19,r4,-349
 400cbdc:	ad41e014 	ori	r21,r21,1920
 400cbe0:	d880a315 	stw	r2,652(sp)
 400cbe4:	00010806 	br	400d008 <__svfscanf_r+0xce0>
 400cbe8:	b009883a 	mov	r4,r22
 400cbec:	800b883a 	mov	r5,r16
 400cbf0:	40122b00 	call	40122b0 <__srefill_r>
 400cbf4:	103ebd26 	beq	r2,zero,400c6ec <__svfscanf_r+0x3c4>
 400cbf8:	003e2006 	br	400c47c <__svfscanf_r+0x154>
 400cbfc:	d900a317 	ldw	r4,652(sp)
 400cc00:	ac836014 	ori	r18,r21,3456
 400cc04:	2002941e 	bne	r4,zero,400d658 <__svfscanf_r+0x1330>
 400cc08:	d8804404 	addi	r2,sp,272
 400cc0c:	d880a515 	stw	r2,660(sp)
 400cc10:	002f883a 	mov	r23,zero
 400cc14:	102b883a 	mov	r21,r2
 400cc18:	9080400c 	andi	r2,r18,256
 400cc1c:	10000926 	beq	r2,zero,400cc44 <__svfscanf_r+0x91c>
 400cc20:	d8c0a517 	ldw	r3,660(sp)
 400cc24:	1d40052e 	bgeu	r3,r21,400cc3c <__svfscanf_r+0x914>
 400cc28:	ad7fffc4 	addi	r21,r21,-1
 400cc2c:	a9400007 	ldb	r5,0(r21)
 400cc30:	b009883a 	mov	r4,r22
 400cc34:	800d883a 	mov	r6,r16
 400cc38:	4014b840 	call	4014b84 <_ungetc_r>
 400cc3c:	d900a517 	ldw	r4,660(sp)
 400cc40:	257dee26 	beq	r4,r21,400c3fc <__svfscanf_r+0xd4>
 400cc44:	9080040c 	andi	r2,r18,16
 400cc48:	10000a26 	beq	r2,zero,400cc74 <__svfscanf_r+0x94c>
 400cc4c:	d8c0a517 	ldw	r3,660(sp)
 400cc50:	a8c5c83a 	sub	r2,r21,r3
 400cc54:	b885883a 	add	r2,r23,r2
 400cc58:	88a3883a 	add	r17,r17,r2
 400cc5c:	003dc506 	br	400c374 <__svfscanf_r+0x4c>
 400cc60:	a0c00007 	ldb	r3,0(r20)
 400cc64:	00801b04 	movi	r2,108
 400cc68:	18801726 	beq	r3,r2,400ccc8 <__svfscanf_r+0x9a0>
 400cc6c:	ad400054 	ori	r21,r21,1
 400cc70:	003e0906 	br	400c498 <__svfscanf_r+0x170>
 400cc74:	a8000005 	stb	zero,0(r21)
 400cc78:	d8c0a017 	ldw	r3,640(sp)
 400cc7c:	d940a517 	ldw	r5,660(sp)
 400cc80:	d9c0a117 	ldw	r7,644(sp)
 400cc84:	b009883a 	mov	r4,r22
 400cc88:	000d883a 	mov	r6,zero
 400cc8c:	183ee83a 	callr	r3
 400cc90:	1007883a 	mov	r3,r2
 400cc94:	9080080c 	andi	r2,r18,32
 400cc98:	1000251e 	bne	r2,zero,400cd30 <__svfscanf_r+0xa08>
 400cc9c:	9080010c 	andi	r2,r18,4
 400cca0:	10000c26 	beq	r2,zero,400ccd4 <__svfscanf_r+0x9ac>
 400cca4:	d900a417 	ldw	r4,656(sp)
 400cca8:	20800017 	ldw	r2,0(r4)
 400ccac:	21000104 	addi	r4,r4,4
 400ccb0:	d900a415 	stw	r4,656(sp)
 400ccb4:	10c0000d 	sth	r3,0(r2)
 400ccb8:	d880a217 	ldw	r2,648(sp)
 400ccbc:	10800044 	addi	r2,r2,1
 400ccc0:	d880a215 	stw	r2,648(sp)
 400ccc4:	003fe106 	br	400cc4c <__svfscanf_r+0x924>
 400ccc8:	a5000044 	addi	r20,r20,1
 400cccc:	ad400094 	ori	r21,r21,2
 400ccd0:	003df106 	br	400c498 <__svfscanf_r+0x170>
 400ccd4:	9080004c 	andi	r2,r18,1
 400ccd8:	1005003a 	cmpeq	r2,r2,zero
 400ccdc:	10001426 	beq	r2,zero,400cd30 <__svfscanf_r+0xa08>
 400cce0:	9080008c 	andi	r2,r18,2
 400cce4:	10001226 	beq	r2,zero,400cd30 <__svfscanf_r+0xa08>
 400cce8:	d8c0a017 	ldw	r3,640(sp)
 400ccec:	00810074 	movhi	r2,1025
 400ccf0:	10915504 	addi	r2,r2,17748
 400ccf4:	18801426 	beq	r3,r2,400cd48 <__svfscanf_r+0xa20>
 400ccf8:	d9c0a117 	ldw	r7,644(sp)
 400ccfc:	d940a517 	ldw	r5,660(sp)
 400cd00:	000d883a 	mov	r6,zero
 400cd04:	b009883a 	mov	r4,r22
 400cd08:	401423c0 	call	401423c <_strtoll_r>
 400cd0c:	100d883a 	mov	r6,r2
 400cd10:	180f883a 	mov	r7,r3
 400cd14:	d900a417 	ldw	r4,656(sp)
 400cd18:	20800017 	ldw	r2,0(r4)
 400cd1c:	21000104 	addi	r4,r4,4
 400cd20:	d900a415 	stw	r4,656(sp)
 400cd24:	11c00115 	stw	r7,4(r2)
 400cd28:	11800015 	stw	r6,0(r2)
 400cd2c:	003fe206 	br	400ccb8 <__svfscanf_r+0x990>
 400cd30:	d900a417 	ldw	r4,656(sp)
 400cd34:	20800017 	ldw	r2,0(r4)
 400cd38:	21000104 	addi	r4,r4,4
 400cd3c:	d900a415 	stw	r4,656(sp)
 400cd40:	10c00015 	stw	r3,0(r2)
 400cd44:	003fdc06 	br	400ccb8 <__svfscanf_r+0x990>
 400cd48:	d9c0a117 	ldw	r7,644(sp)
 400cd4c:	d940a517 	ldw	r5,660(sp)
 400cd50:	000d883a 	mov	r6,zero
 400cd54:	b009883a 	mov	r4,r22
 400cd58:	40147b80 	call	40147b8 <_strtoull_r>
 400cd5c:	100d883a 	mov	r6,r2
 400cd60:	180f883a 	mov	r7,r3
 400cd64:	003feb06 	br	400cd14 <__svfscanf_r+0x9ec>
 400cd68:	9080200c 	andi	r2,r18,128
 400cd6c:	103faa26 	beq	r2,zero,400cc18 <__svfscanf_r+0x8f0>
 400cd70:	00bfdfc4 	movi	r2,-129
 400cd74:	90a4703a 	and	r18,r18,r2
 400cd78:	a9400005 	stb	r5,0(r21)
 400cd7c:	ad400044 	addi	r21,r21,1
 400cd80:	80c00117 	ldw	r3,4(r16)
 400cd84:	18ffffc4 	addi	r3,r3,-1
 400cd88:	80c00115 	stw	r3,4(r16)
 400cd8c:	00c0130e 	bge	zero,r3,400cddc <__svfscanf_r+0xab4>
 400cd90:	31800044 	addi	r6,r6,1
 400cd94:	81800015 	stw	r6,0(r16)
 400cd98:	d880a317 	ldw	r2,652(sp)
 400cd9c:	10bfffc4 	addi	r2,r2,-1
 400cda0:	d880a315 	stw	r2,652(sp)
 400cda4:	103ede1e 	bne	r2,zero,400c920 <__svfscanf_r+0x5f8>
 400cda8:	003f9b06 	br	400cc18 <__svfscanf_r+0x8f0>
 400cdac:	9082000c 	andi	r2,r18,2048
 400cdb0:	103ff126 	beq	r2,zero,400cd78 <__svfscanf_r+0xa50>
 400cdb4:	d8c0a117 	ldw	r3,644(sp)
 400cdb8:	1800031e 	bne	r3,zero,400cdc8 <__svfscanf_r+0xaa0>
 400cdbc:	01000204 	movi	r4,8
 400cdc0:	94808014 	ori	r18,r18,512
 400cdc4:	d900a115 	stw	r4,644(sp)
 400cdc8:	9081000c 	andi	r2,r18,1024
 400cdcc:	10000826 	beq	r2,zero,400cdf0 <__svfscanf_r+0xac8>
 400cdd0:	00be9fc4 	movi	r2,-1409
 400cdd4:	90a4703a 	and	r18,r18,r2
 400cdd8:	003fe706 	br	400cd78 <__svfscanf_r+0xa50>
 400cddc:	b009883a 	mov	r4,r22
 400cde0:	800b883a 	mov	r5,r16
 400cde4:	40122b00 	call	40122b0 <__srefill_r>
 400cde8:	103feb26 	beq	r2,zero,400cd98 <__svfscanf_r+0xa70>
 400cdec:	003f8a06 	br	400cc18 <__svfscanf_r+0x8f0>
 400cdf0:	98000426 	beq	r19,zero,400ce04 <__svfscanf_r+0xadc>
 400cdf4:	d880a317 	ldw	r2,652(sp)
 400cdf8:	9cffffc4 	addi	r19,r19,-1
 400cdfc:	10800044 	addi	r2,r2,1
 400ce00:	d880a315 	stw	r2,652(sp)
 400ce04:	00bf1fc4 	movi	r2,-897
 400ce08:	90a4703a 	and	r18,r18,r2
 400ce0c:	bdc00044 	addi	r23,r23,1
 400ce10:	003fdb06 	br	400cd80 <__svfscanf_r+0xa58>
 400ce14:	d900a317 	ldw	r4,652(sp)
 400ce18:	ad41e014 	ori	r21,r21,1920
 400ce1c:	2000791e 	bne	r4,zero,400d004 <__svfscanf_r+0xcdc>
 400ce20:	d8c04404 	addi	r3,sp,272
 400ce24:	d8c0a515 	stw	r3,660(sp)
 400ce28:	182f883a 	mov	r23,r3
 400ce2c:	d8009c15 	stw	zero,624(sp)
 400ce30:	d8009d15 	stw	zero,628(sp)
 400ce34:	d8009f15 	stw	zero,636(sp)
 400ce38:	d8009e15 	stw	zero,632(sp)
 400ce3c:	0039883a 	mov	fp,zero
 400ce40:	e1003fcc 	andi	r4,fp,255
 400ce44:	2100201c 	xori	r4,r4,128
 400ce48:	213fe004 	addi	r4,r4,-128
 400ce4c:	20ffffc4 	addi	r3,r4,-1
 400ce50:	00800184 	movi	r2,6
 400ce54:	10c01736 	bltu	r2,r3,400ceb4 <__svfscanf_r+0xb8c>
 400ce58:	00c00084 	movi	r3,2
 400ce5c:	19026d0e 	bge	r3,r4,400d814 <__svfscanf_r+0x14ec>
 400ce60:	008000c4 	movi	r2,3
 400ce64:	1100130e 	bge	r2,r4,400ceb4 <__svfscanf_r+0xb8c>
 400ce68:	e4ffffc4 	addi	r19,fp,-1
 400ce6c:	b825883a 	mov	r18,r23
 400ce70:	94bfffc4 	addi	r18,r18,-1
 400ce74:	91400007 	ldb	r5,0(r18)
 400ce78:	b009883a 	mov	r4,r22
 400ce7c:	800d883a 	mov	r6,r16
 400ce80:	4014b840 	call	4014b84 <_ungetc_r>
 400ce84:	9cffffc4 	addi	r19,r19,-1
 400ce88:	98c03fcc 	andi	r3,r19,255
 400ce8c:	18c0201c 	xori	r3,r3,128
 400ce90:	18ffe004 	addi	r3,r3,-128
 400ce94:	00800084 	movi	r2,2
 400ce98:	18bff51e 	bne	r3,r2,400ce70 <__svfscanf_r+0xb48>
 400ce9c:	e0bfff04 	addi	r2,fp,-4
 400cea0:	10803fcc 	andi	r2,r2,255
 400cea4:	b887c83a 	sub	r3,r23,r2
 400cea8:	8885c83a 	sub	r2,r17,r2
 400ceac:	147fffc4 	addi	r17,r2,-1
 400ceb0:	1dffffc4 	addi	r23,r3,-1
 400ceb4:	a880400c 	andi	r2,r21,256
 400ceb8:	10001226 	beq	r2,zero,400cf04 <__svfscanf_r+0xbdc>
 400cebc:	a881000c 	andi	r2,r21,1024
 400cec0:	10002b1e 	bne	r2,zero,400cf70 <__svfscanf_r+0xc48>
 400cec4:	bdffffc4 	addi	r23,r23,-1
 400cec8:	b9400007 	ldb	r5,0(r23)
 400cecc:	00801944 	movi	r2,101
 400ced0:	8c7fffc4 	addi	r17,r17,-1
 400ced4:	28800826 	beq	r5,r2,400cef8 <__svfscanf_r+0xbd0>
 400ced8:	00801144 	movi	r2,69
 400cedc:	28800626 	beq	r5,r2,400cef8 <__svfscanf_r+0xbd0>
 400cee0:	bdffffc4 	addi	r23,r23,-1
 400cee4:	b009883a 	mov	r4,r22
 400cee8:	800d883a 	mov	r6,r16
 400ceec:	4014b840 	call	4014b84 <_ungetc_r>
 400cef0:	b9400007 	ldb	r5,0(r23)
 400cef4:	8c7fffc4 	addi	r17,r17,-1
 400cef8:	b009883a 	mov	r4,r22
 400cefc:	800d883a 	mov	r6,r16
 400cf00:	4014b840 	call	4014b84 <_ungetc_r>
 400cf04:	a880040c 	andi	r2,r21,16
 400cf08:	103d1a1e 	bne	r2,zero,400c374 <__svfscanf_r+0x4c>
 400cf0c:	a8c1800c 	andi	r3,r21,1536
 400cf10:	00810004 	movi	r2,1024
 400cf14:	b8000005 	stb	zero,0(r23)
 400cf18:	18813326 	beq	r3,r2,400d3e8 <__svfscanf_r+0x10c0>
 400cf1c:	d8809d17 	ldw	r2,628(sp)
 400cf20:	1000251e 	bne	r2,zero,400cfb8 <__svfscanf_r+0xc90>
 400cf24:	d940a517 	ldw	r5,660(sp)
 400cf28:	b009883a 	mov	r4,r22
 400cf2c:	000d883a 	mov	r6,zero
 400cf30:	40128bc0 	call	40128bc <_strtod_r>
 400cf34:	a900004c 	andi	r4,r21,1
 400cf38:	2009003a 	cmpeq	r4,r4,zero
 400cf3c:	1025883a 	mov	r18,r2
 400cf40:	1827883a 	mov	r19,r3
 400cf44:	2000141e 	bne	r4,zero,400cf98 <__svfscanf_r+0xc70>
 400cf48:	d8c0a417 	ldw	r3,656(sp)
 400cf4c:	18800017 	ldw	r2,0(r3)
 400cf50:	1d400104 	addi	r21,r3,4
 400cf54:	14c00115 	stw	r19,4(r2)
 400cf58:	14800015 	stw	r18,0(r2)
 400cf5c:	d8c0a217 	ldw	r3,648(sp)
 400cf60:	dd40a415 	stw	r21,656(sp)
 400cf64:	18c00044 	addi	r3,r3,1
 400cf68:	d8c0a215 	stw	r3,648(sp)
 400cf6c:	003d0106 	br	400c374 <__svfscanf_r+0x4c>
 400cf70:	d900a517 	ldw	r4,660(sp)
 400cf74:	25fd212e 	bgeu	r4,r23,400c3fc <__svfscanf_r+0xd4>
 400cf78:	bdffffc4 	addi	r23,r23,-1
 400cf7c:	b9400007 	ldb	r5,0(r23)
 400cf80:	b009883a 	mov	r4,r22
 400cf84:	800d883a 	mov	r6,r16
 400cf88:	4014b840 	call	4014b84 <_ungetc_r>
 400cf8c:	d880a517 	ldw	r2,660(sp)
 400cf90:	15fff936 	bltu	r2,r23,400cf78 <__svfscanf_r+0xc50>
 400cf94:	003d1906 	br	400c3fc <__svfscanf_r+0xd4>
 400cf98:	a880008c 	andi	r2,r21,2
 400cf9c:	10011926 	beq	r2,zero,400d404 <__svfscanf_r+0x10dc>
 400cfa0:	d900a417 	ldw	r4,656(sp)
 400cfa4:	20800017 	ldw	r2,0(r4)
 400cfa8:	25400104 	addi	r21,r4,4
 400cfac:	10c00115 	stw	r3,4(r2)
 400cfb0:	14800015 	stw	r18,0(r2)
 400cfb4:	003fe906 	br	400cf5c <__svfscanf_r+0xc34>
 400cfb8:	d8c09c17 	ldw	r3,624(sp)
 400cfbc:	b009883a 	mov	r4,r22
 400cfc0:	000d883a 	mov	r6,zero
 400cfc4:	19400044 	addi	r5,r3,1
 400cfc8:	01c00284 	movi	r7,10
 400cfcc:	4013fc80 	call	4013fc8 <_strtol_r>
 400cfd0:	d9009d17 	ldw	r4,628(sp)
 400cfd4:	110dc83a 	sub	r6,r2,r4
 400cfd8:	d8c0a517 	ldw	r3,660(sp)
 400cfdc:	d9009c17 	ldw	r4,624(sp)
 400cfe0:	188054c4 	addi	r2,r3,339
 400cfe4:	20800236 	bltu	r4,r2,400cff0 <__svfscanf_r+0xcc8>
 400cfe8:	18805484 	addi	r2,r3,338
 400cfec:	d8809c15 	stw	r2,624(sp)
 400cff0:	d9009c17 	ldw	r4,624(sp)
 400cff4:	014100b4 	movhi	r5,1026
 400cff8:	29519004 	addi	r5,r5,17984
 400cffc:	40125980 	call	4012598 <sprintf>
 400d000:	003fc806 	br	400cf24 <__svfscanf_r+0xbfc>
 400d004:	0027883a 	mov	r19,zero
 400d008:	d8c04404 	addi	r3,sp,272
 400d00c:	d8c0a515 	stw	r3,660(sp)
 400d010:	182f883a 	mov	r23,r3
 400d014:	d8009f15 	stw	zero,636(sp)
 400d018:	d8009e15 	stw	zero,632(sp)
 400d01c:	d8009d15 	stw	zero,628(sp)
 400d020:	d8009c15 	stw	zero,624(sp)
 400d024:	0039883a 	mov	fp,zero
 400d028:	0025883a 	mov	r18,zero
 400d02c:	80800017 	ldw	r2,0(r16)
 400d030:	11400003 	ldbu	r5,0(r2)
 400d034:	00801384 	movi	r2,78
 400d038:	28fff544 	addi	r3,r5,-43
 400d03c:	18c03fcc 	andi	r3,r3,255
 400d040:	10c08336 	bltu	r2,r3,400d250 <__svfscanf_r+0xf28>
 400d044:	18c5883a 	add	r2,r3,r3
 400d048:	1085883a 	add	r2,r2,r2
 400d04c:	00c10074 	movhi	r3,1025
 400d050:	18f41804 	addi	r3,r3,-12192
 400d054:	10c5883a 	add	r2,r2,r3
 400d058:	11000017 	ldw	r4,0(r2)
 400d05c:	2000683a 	jmp	r4
 400d060:	0400d208 	cmpgei	r16,zero,840
 400d064:	0400d250 	cmplti	r16,zero,841
 400d068:	0400d208 	cmpgei	r16,zero,840
 400d06c:	0400d294 	movui	r16,842
 400d070:	0400d250 	cmplti	r16,zero,841
 400d074:	0400d300 	call	400d30 <__reset+0x3ff530>
 400d078:	0400d334 	movhi	r16,844
 400d07c:	0400d334 	movhi	r16,844
 400d080:	0400d334 	movhi	r16,844
 400d084:	0400d334 	movhi	r16,844
 400d088:	0400d334 	movhi	r16,844
 400d08c:	0400d334 	movhi	r16,844
 400d090:	0400d334 	movhi	r16,844
 400d094:	0400d334 	movhi	r16,844
 400d098:	0400d334 	movhi	r16,844
 400d09c:	0400d250 	cmplti	r16,zero,841
 400d0a0:	0400d250 	cmplti	r16,zero,841
 400d0a4:	0400d250 	cmplti	r16,zero,841
 400d0a8:	0400d250 	cmplti	r16,zero,841
 400d0ac:	0400d250 	cmplti	r16,zero,841
 400d0b0:	0400d250 	cmplti	r16,zero,841
 400d0b4:	0400d250 	cmplti	r16,zero,841
 400d0b8:	0400d354 	movui	r16,845
 400d0bc:	0400d250 	cmplti	r16,zero,841
 400d0c0:	0400d250 	cmplti	r16,zero,841
 400d0c4:	0400d250 	cmplti	r16,zero,841
 400d0c8:	0400d364 	muli	r16,zero,845
 400d0cc:	0400d3b0 	cmpltui	r16,zero,846
 400d0d0:	0400d250 	cmplti	r16,zero,841
 400d0d4:	0400d250 	cmplti	r16,zero,841
 400d0d8:	0400d488 	cmpgei	r16,zero,850
 400d0dc:	0400d250 	cmplti	r16,zero,841
 400d0e0:	0400d250 	cmplti	r16,zero,841
 400d0e4:	0400d250 	cmplti	r16,zero,841
 400d0e8:	0400d250 	cmplti	r16,zero,841
 400d0ec:	0400d434 	movhi	r16,848
 400d0f0:	0400d250 	cmplti	r16,zero,841
 400d0f4:	0400d250 	cmplti	r16,zero,841
 400d0f8:	0400d250 	cmplti	r16,zero,841
 400d0fc:	0400d250 	cmplti	r16,zero,841
 400d100:	0400d250 	cmplti	r16,zero,841
 400d104:	0400d4c8 	cmpgei	r16,zero,851
 400d108:	0400d250 	cmplti	r16,zero,841
 400d10c:	0400d250 	cmplti	r16,zero,841
 400d110:	0400d250 	cmplti	r16,zero,841
 400d114:	0400d250 	cmplti	r16,zero,841
 400d118:	0400d3cc 	andi	r16,zero,847
 400d11c:	0400d250 	cmplti	r16,zero,841
 400d120:	0400d250 	cmplti	r16,zero,841
 400d124:	0400d250 	cmplti	r16,zero,841
 400d128:	0400d250 	cmplti	r16,zero,841
 400d12c:	0400d250 	cmplti	r16,zero,841
 400d130:	0400d250 	cmplti	r16,zero,841
 400d134:	0400d250 	cmplti	r16,zero,841
 400d138:	0400d354 	movui	r16,845
 400d13c:	0400d250 	cmplti	r16,zero,841
 400d140:	0400d250 	cmplti	r16,zero,841
 400d144:	0400d250 	cmplti	r16,zero,841
 400d148:	0400d364 	muli	r16,zero,845
 400d14c:	0400d3b0 	cmpltui	r16,zero,846
 400d150:	0400d250 	cmplti	r16,zero,841
 400d154:	0400d250 	cmplti	r16,zero,841
 400d158:	0400d488 	cmpgei	r16,zero,850
 400d15c:	0400d250 	cmplti	r16,zero,841
 400d160:	0400d250 	cmplti	r16,zero,841
 400d164:	0400d250 	cmplti	r16,zero,841
 400d168:	0400d250 	cmplti	r16,zero,841
 400d16c:	0400d434 	movhi	r16,848
 400d170:	0400d250 	cmplti	r16,zero,841
 400d174:	0400d250 	cmplti	r16,zero,841
 400d178:	0400d250 	cmplti	r16,zero,841
 400d17c:	0400d250 	cmplti	r16,zero,841
 400d180:	0400d250 	cmplti	r16,zero,841
 400d184:	0400d4c8 	cmpgei	r16,zero,851
 400d188:	0400d250 	cmplti	r16,zero,841
 400d18c:	0400d250 	cmplti	r16,zero,841
 400d190:	0400d250 	cmplti	r16,zero,841
 400d194:	0400d250 	cmplti	r16,zero,841
 400d198:	0400d3cc 	andi	r16,zero,847
 400d19c:	a880040c 	andi	r2,r21,16
 400d1a0:	10004826 	beq	r2,zero,400d2c4 <__svfscanf_r+0xf9c>
 400d1a4:	0027883a 	mov	r19,zero
 400d1a8:	00000b06 	br	400d1d8 <__svfscanf_r+0xeb0>
 400d1ac:	80800017 	ldw	r2,0(r16)
 400d1b0:	b009883a 	mov	r4,r22
 400d1b4:	800b883a 	mov	r5,r16
 400d1b8:	148d883a 	add	r6,r2,r18
 400d1bc:	81800015 	stw	r6,0(r16)
 400d1c0:	9ca7883a 	add	r19,r19,r18
 400d1c4:	40122b00 	call	40122b0 <__srefill_r>
 400d1c8:	103dc61e 	bne	r2,zero,400c8e4 <__svfscanf_r+0x5bc>
 400d1cc:	d880a317 	ldw	r2,652(sp)
 400d1d0:	1485c83a 	sub	r2,r2,r18
 400d1d4:	d880a315 	stw	r2,652(sp)
 400d1d8:	84800117 	ldw	r18,4(r16)
 400d1dc:	d900a317 	ldw	r4,652(sp)
 400d1e0:	913ff216 	blt	r18,r4,400d1ac <__svfscanf_r+0xe84>
 400d1e4:	d900a317 	ldw	r4,652(sp)
 400d1e8:	80800017 	ldw	r2,0(r16)
 400d1ec:	9927883a 	add	r19,r19,r4
 400d1f0:	9107c83a 	sub	r3,r18,r4
 400d1f4:	110d883a 	add	r6,r2,r4
 400d1f8:	8ce3883a 	add	r17,r17,r19
 400d1fc:	80c00115 	stw	r3,4(r16)
 400d200:	81800015 	stw	r6,0(r16)
 400d204:	003c5b06 	br	400c374 <__svfscanf_r+0x4c>
 400d208:	a880200c 	andi	r2,r21,128
 400d20c:	10001026 	beq	r2,zero,400d250 <__svfscanf_r+0xf28>
 400d210:	00bfdfc4 	movi	r2,-129
 400d214:	a8aa703a 	and	r21,r21,r2
 400d218:	b9400005 	stb	r5,0(r23)
 400d21c:	bdc00044 	addi	r23,r23,1
 400d220:	80c00117 	ldw	r3,4(r16)
 400d224:	8c400044 	addi	r17,r17,1
 400d228:	18bfffc4 	addi	r2,r3,-1
 400d22c:	80800115 	stw	r2,4(r16)
 400d230:	00801f0e 	bge	zero,r2,400d2b0 <__svfscanf_r+0xf88>
 400d234:	80800017 	ldw	r2,0(r16)
 400d238:	10800044 	addi	r2,r2,1
 400d23c:	80800015 	stw	r2,0(r16)
 400d240:	d880a317 	ldw	r2,652(sp)
 400d244:	10bfffc4 	addi	r2,r2,-1
 400d248:	d880a315 	stw	r2,652(sp)
 400d24c:	103f771e 	bne	r2,zero,400d02c <__svfscanf_r+0xd04>
 400d250:	d8c09e17 	ldw	r3,632(sp)
 400d254:	18000226 	beq	r3,zero,400d260 <__svfscanf_r+0xf38>
 400d258:	00bfbfc4 	movi	r2,-257
 400d25c:	a8aa703a 	and	r21,r21,r2
 400d260:	90ffffc4 	addi	r3,r18,-1
 400d264:	00800044 	movi	r2,1
 400d268:	10fef536 	bltu	r2,r3,400ce40 <__svfscanf_r+0xb18>
 400d26c:	d900a517 	ldw	r4,660(sp)
 400d270:	25fc622e 	bgeu	r4,r23,400c3fc <__svfscanf_r+0xd4>
 400d274:	bdffffc4 	addi	r23,r23,-1
 400d278:	b9400007 	ldb	r5,0(r23)
 400d27c:	b009883a 	mov	r4,r22
 400d280:	800d883a 	mov	r6,r16
 400d284:	4014b840 	call	4014b84 <_ungetc_r>
 400d288:	d880a517 	ldw	r2,660(sp)
 400d28c:	15fff936 	bltu	r2,r23,400d274 <__svfscanf_r+0xf4c>
 400d290:	003c5a06 	br	400c3fc <__svfscanf_r+0xd4>
 400d294:	a880800c 	andi	r2,r21,512
 400d298:	103fed26 	beq	r2,zero,400d250 <__svfscanf_r+0xf28>
 400d29c:	d9009e17 	ldw	r4,632(sp)
 400d2a0:	00bf5fc4 	movi	r2,-641
 400d2a4:	a8aa703a 	and	r21,r21,r2
 400d2a8:	d9009f15 	stw	r4,636(sp)
 400d2ac:	003fda06 	br	400d218 <__svfscanf_r+0xef0>
 400d2b0:	b009883a 	mov	r4,r22
 400d2b4:	800b883a 	mov	r5,r16
 400d2b8:	40122b00 	call	40122b0 <__srefill_r>
 400d2bc:	103fe026 	beq	r2,zero,400d240 <__svfscanf_r+0xf18>
 400d2c0:	003fe306 	br	400d250 <__svfscanf_r+0xf28>
 400d2c4:	d880a417 	ldw	r2,656(sp)
 400d2c8:	d980a317 	ldw	r6,652(sp)
 400d2cc:	01400044 	movi	r5,1
 400d2d0:	11000017 	ldw	r4,0(r2)
 400d2d4:	800f883a 	mov	r7,r16
 400d2d8:	400fb140 	call	400fb14 <fread>
 400d2dc:	103c6726 	beq	r2,zero,400c47c <__svfscanf_r+0x154>
 400d2e0:	d8c0a417 	ldw	r3,656(sp)
 400d2e4:	d900a217 	ldw	r4,648(sp)
 400d2e8:	88a3883a 	add	r17,r17,r2
 400d2ec:	18c00104 	addi	r3,r3,4
 400d2f0:	21000044 	addi	r4,r4,1
 400d2f4:	d8c0a415 	stw	r3,656(sp)
 400d2f8:	d900a215 	stw	r4,648(sp)
 400d2fc:	003c1d06 	br	400c374 <__svfscanf_r+0x4c>
 400d300:	a880400c 	andi	r2,r21,256
 400d304:	10000b26 	beq	r2,zero,400d334 <__svfscanf_r+0x100c>
 400d308:	00bfdfc4 	movi	r2,-129
 400d30c:	a8aa703a 	and	r21,r21,r2
 400d310:	d8809e17 	ldw	r2,632(sp)
 400d314:	10800044 	addi	r2,r2,1
 400d318:	d8809e15 	stw	r2,632(sp)
 400d31c:	983fc026 	beq	r19,zero,400d220 <__svfscanf_r+0xef8>
 400d320:	d8c0a317 	ldw	r3,652(sp)
 400d324:	9cffffc4 	addi	r19,r19,-1
 400d328:	18c00044 	addi	r3,r3,1
 400d32c:	d8c0a315 	stw	r3,652(sp)
 400d330:	003fbb06 	br	400d220 <__svfscanf_r+0xef8>
 400d334:	e0803fcc 	andi	r2,fp,255
 400d338:	1080201c 	xori	r2,r2,128
 400d33c:	10bfe004 	addi	r2,r2,-128
 400d340:	9085883a 	add	r2,r18,r2
 400d344:	103fc21e 	bne	r2,zero,400d250 <__svfscanf_r+0xf28>
 400d348:	00bf9fc4 	movi	r2,-385
 400d34c:	a8aa703a 	and	r21,r21,r2
 400d350:	003fb106 	br	400d218 <__svfscanf_r+0xef0>
 400d354:	00800044 	movi	r2,1
 400d358:	90bfbd1e 	bne	r18,r2,400d250 <__svfscanf_r+0xf28>
 400d35c:	04800084 	movi	r18,2
 400d360:	003fad06 	br	400d218 <__svfscanf_r+0xef0>
 400d364:	a8c1400c 	andi	r3,r21,1280
 400d368:	00810004 	movi	r2,1024
 400d36c:	18800426 	beq	r3,r2,400d380 <__svfscanf_r+0x1058>
 400d370:	a884703a 	and	r2,r21,r2
 400d374:	103fb626 	beq	r2,zero,400d250 <__svfscanf_r+0xf28>
 400d378:	d8809e17 	ldw	r2,632(sp)
 400d37c:	103fb826 	beq	r2,zero,400d260 <__svfscanf_r+0xf38>
 400d380:	a880800c 	andi	r2,r21,512
 400d384:	1000051e 	bne	r2,zero,400d39c <__svfscanf_r+0x1074>
 400d388:	d8c09e17 	ldw	r3,632(sp)
 400d38c:	d9009f17 	ldw	r4,636(sp)
 400d390:	ddc09c15 	stw	r23,624(sp)
 400d394:	1907c83a 	sub	r3,r3,r4
 400d398:	d8c09d15 	stw	r3,628(sp)
 400d39c:	00be7fc4 	movi	r2,-1537
 400d3a0:	a884703a 	and	r2,r21,r2
 400d3a4:	15406014 	ori	r21,r2,384
 400d3a8:	d8009e15 	stw	zero,632(sp)
 400d3ac:	003f9a06 	br	400d218 <__svfscanf_r+0xef0>
 400d3b0:	e0c03fcc 	andi	r3,fp,255
 400d3b4:	18c0201c 	xori	r3,r3,128
 400d3b8:	18ffe004 	addi	r3,r3,-128
 400d3bc:	00800084 	movi	r2,2
 400d3c0:	18bfa31e 	bne	r3,r2,400d250 <__svfscanf_r+0xf28>
 400d3c4:	070000c4 	movi	fp,3
 400d3c8:	003f9306 	br	400d218 <__svfscanf_r+0xef0>
 400d3cc:	e0c03fcc 	andi	r3,fp,255
 400d3d0:	18c0201c 	xori	r3,r3,128
 400d3d4:	18ffe004 	addi	r3,r3,-128
 400d3d8:	008001c4 	movi	r2,7
 400d3dc:	18bf9c1e 	bne	r3,r2,400d250 <__svfscanf_r+0xf28>
 400d3e0:	07000204 	movi	fp,8
 400d3e4:	003f8c06 	br	400d218 <__svfscanf_r+0xef0>
 400d3e8:	d8c09e17 	ldw	r3,632(sp)
 400d3ec:	d9009f17 	ldw	r4,636(sp)
 400d3f0:	1905c83a 	sub	r2,r3,r4
 400d3f4:	103ecb26 	beq	r2,zero,400cf24 <__svfscanf_r+0xbfc>
 400d3f8:	008dc83a 	sub	r6,zero,r2
 400d3fc:	ddc09c15 	stw	r23,624(sp)
 400d400:	003ef506 	br	400cfd8 <__svfscanf_r+0xcb0>
 400d404:	d880a417 	ldw	r2,656(sp)
 400d408:	9009883a 	mov	r4,r18
 400d40c:	180b883a 	mov	r5,r3
 400d410:	15c00017 	ldw	r23,0(r2)
 400d414:	15400104 	addi	r21,r2,4
 400d418:	400768c0 	call	400768c <__isnand>
 400d41c:	1000311e 	bne	r2,zero,400d4e4 <__svfscanf_r+0x11bc>
 400d420:	980b883a 	mov	r5,r19
 400d424:	9009883a 	mov	r4,r18
 400d428:	4008e380 	call	4008e38 <__truncdfsf2>
 400d42c:	b8800015 	stw	r2,0(r23)
 400d430:	003eca06 	br	400cf5c <__svfscanf_r+0xc34>
 400d434:	9000101e 	bne	r18,zero,400d478 <__svfscanf_r+0x1150>
 400d438:	a8c1c00c 	andi	r3,r21,1792
 400d43c:	0081c004 	movi	r2,1792
 400d440:	18800926 	beq	r3,r2,400d468 <__svfscanf_r+0x1140>
 400d444:	e0c03fcc 	andi	r3,fp,255
 400d448:	18c0201c 	xori	r3,r3,128
 400d44c:	18ffe004 	addi	r3,r3,-128
 400d450:	00800044 	movi	r2,1
 400d454:	18800226 	beq	r3,r2,400d460 <__svfscanf_r+0x1138>
 400d458:	00800104 	movi	r2,4
 400d45c:	18bf7c1e 	bne	r3,r2,400d250 <__svfscanf_r+0xf28>
 400d460:	e7000044 	addi	fp,fp,1
 400d464:	003f6c06 	br	400d218 <__svfscanf_r+0xef0>
 400d468:	00be1fc4 	movi	r2,-1921
 400d46c:	a8aa703a 	and	r21,r21,r2
 400d470:	04800044 	movi	r18,1
 400d474:	003f6806 	br	400d218 <__svfscanf_r+0xef0>
 400d478:	00800084 	movi	r2,2
 400d47c:	90bff11e 	bne	r18,r2,400d444 <__svfscanf_r+0x111c>
 400d480:	048000c4 	movi	r18,3
 400d484:	003f6406 	br	400d218 <__svfscanf_r+0xef0>
 400d488:	e0c03fcc 	andi	r3,fp,255
 400d48c:	18c0201c 	xori	r3,r3,128
 400d490:	18ffe004 	addi	r3,r3,-128
 400d494:	1800071e 	bne	r3,zero,400d4b4 <__svfscanf_r+0x118c>
 400d498:	a8c1c00c 	andi	r3,r21,1792
 400d49c:	0081c004 	movi	r2,1792
 400d4a0:	18bf6b1e 	bne	r3,r2,400d250 <__svfscanf_r+0xf28>
 400d4a4:	00be1fc4 	movi	r2,-1921
 400d4a8:	a8aa703a 	and	r21,r21,r2
 400d4ac:	07000044 	movi	fp,1
 400d4b0:	003f5906 	br	400d218 <__svfscanf_r+0xef0>
 400d4b4:	008000c4 	movi	r2,3
 400d4b8:	18bfe926 	beq	r3,r2,400d460 <__svfscanf_r+0x1138>
 400d4bc:	00800144 	movi	r2,5
 400d4c0:	18bfe726 	beq	r3,r2,400d460 <__svfscanf_r+0x1138>
 400d4c4:	003f6206 	br	400d250 <__svfscanf_r+0xf28>
 400d4c8:	e0c03fcc 	andi	r3,fp,255
 400d4cc:	18c0201c 	xori	r3,r3,128
 400d4d0:	18ffe004 	addi	r3,r3,-128
 400d4d4:	00800184 	movi	r2,6
 400d4d8:	18bf5d1e 	bne	r3,r2,400d250 <__svfscanf_r+0xf28>
 400d4dc:	070001c4 	movi	fp,7
 400d4e0:	003f4d06 	br	400d218 <__svfscanf_r+0xef0>
 400d4e4:	0009883a 	mov	r4,zero
 400d4e8:	40125900 	call	4012590 <nanf>
 400d4ec:	b8800015 	stw	r2,0(r23)
 400d4f0:	003e9a06 	br	400cf5c <__svfscanf_r+0xc34>
 400d4f4:	a00b883a 	mov	r5,r20
 400d4f8:	d9000404 	addi	r4,sp,16
 400d4fc:	40124d00 	call	40124d0 <__sccl>
 400d500:	1029883a 	mov	r20,r2
 400d504:	ad401014 	ori	r21,r21,64
 400d508:	04800044 	movi	r18,1
 400d50c:	003c7506 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d510:	01000204 	movi	r4,8
 400d514:	00810074 	movhi	r2,1025
 400d518:	10915504 	addi	r2,r2,17748
 400d51c:	ad400054 	ori	r21,r21,1
 400d520:	048000c4 	movi	r18,3
 400d524:	d900a115 	stw	r4,644(sp)
 400d528:	d880a015 	stw	r2,640(sp)
 400d52c:	003c6d06 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d530:	ad400094 	ori	r21,r21,2
 400d534:	003bd806 	br	400c498 <__svfscanf_r+0x170>
 400d538:	d900a317 	ldw	r4,652(sp)
 400d53c:	01400284 	movi	r5,10
 400d540:	4008ff80 	call	4008ff8 <__mulsi3>
 400d544:	15c5883a 	add	r2,r2,r23
 400d548:	10bff404 	addi	r2,r2,-48
 400d54c:	d880a315 	stw	r2,652(sp)
 400d550:	003bd106 	br	400c498 <__svfscanf_r+0x170>
 400d554:	ad400414 	ori	r21,r21,16
 400d558:	003bcf06 	br	400c498 <__svfscanf_r+0x170>
 400d55c:	00800404 	movi	r2,16
 400d560:	00c10074 	movhi	r3,1025
 400d564:	18d15504 	addi	r3,r3,17748
 400d568:	ad408014 	ori	r21,r21,512
 400d56c:	048000c4 	movi	r18,3
 400d570:	d880a115 	stw	r2,644(sp)
 400d574:	d8c0a015 	stw	r3,640(sp)
 400d578:	003c5a06 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d57c:	00c00284 	movi	r3,10
 400d580:	01010074 	movhi	r4,1025
 400d584:	21115504 	addi	r4,r4,17748
 400d588:	048000c4 	movi	r18,3
 400d58c:	d8c0a115 	stw	r3,644(sp)
 400d590:	d900a015 	stw	r4,640(sp)
 400d594:	003c5306 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d598:	00c10074 	movhi	r3,1025
 400d59c:	18cff204 	addi	r3,r3,16328
 400d5a0:	048000c4 	movi	r18,3
 400d5a4:	d8c0a015 	stw	r3,640(sp)
 400d5a8:	d800a115 	stw	zero,644(sp)
 400d5ac:	003c4d06 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d5b0:	d8c0a117 	ldw	r3,644(sp)
 400d5b4:	18c5883a 	add	r2,r3,r3
 400d5b8:	00c100b4 	movhi	r3,1026
 400d5bc:	18d19184 	addi	r3,r3,17990
 400d5c0:	10c5883a 	add	r2,r2,r3
 400d5c4:	1080000f 	ldh	r2,0(r2)
 400d5c8:	00fd1fc4 	movi	r3,-2945
 400d5cc:	90e4703a 	and	r18,r18,r3
 400d5d0:	d880a115 	stw	r2,644(sp)
 400d5d4:	003de806 	br	400cd78 <__svfscanf_r+0xa50>
 400d5d8:	d900a117 	ldw	r4,644(sp)
 400d5dc:	00c100b4 	movhi	r3,1026
 400d5e0:	18d19184 	addi	r3,r3,17990
 400d5e4:	2105883a 	add	r2,r4,r4
 400d5e8:	10c5883a 	add	r2,r2,r3
 400d5ec:	1080000f 	ldh	r2,0(r2)
 400d5f0:	00c00204 	movi	r3,8
 400d5f4:	d880a115 	stw	r2,644(sp)
 400d5f8:	18bd870e 	bge	r3,r2,400cc18 <__svfscanf_r+0x8f0>
 400d5fc:	00bd1fc4 	movi	r2,-2945
 400d600:	90a4703a 	and	r18,r18,r2
 400d604:	003ddc06 	br	400cd78 <__svfscanf_r+0xa50>
 400d608:	d8c0a117 	ldw	r3,644(sp)
 400d60c:	00800284 	movi	r2,10
 400d610:	10fffa16 	blt	r2,r3,400d5fc <__svfscanf_r+0x12d4>
 400d614:	003d8006 	br	400cc18 <__svfscanf_r+0x8f0>
 400d618:	90c1800c 	andi	r3,r18,1536
 400d61c:	00808004 	movi	r2,512
 400d620:	18bd7d1e 	bne	r3,r2,400cc18 <__svfscanf_r+0x8f0>
 400d624:	00bf7fc4 	movi	r2,-513
 400d628:	9084703a 	and	r2,r18,r2
 400d62c:	01000404 	movi	r4,16
 400d630:	14814014 	ori	r18,r2,1280
 400d634:	d900a115 	stw	r4,644(sp)
 400d638:	003dcf06 	br	400cd78 <__svfscanf_r+0xa50>
 400d63c:	04800104 	movi	r18,4
 400d640:	003c2806 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d644:	ad401014 	ori	r21,r21,64
 400d648:	0025883a 	mov	r18,zero
 400d64c:	003c2506 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d650:	ad400114 	ori	r21,r21,4
 400d654:	003b9006 	br	400c498 <__svfscanf_r+0x170>
 400d658:	0027883a 	mov	r19,zero
 400d65c:	003cac06 	br	400c910 <__svfscanf_r+0x5e8>
 400d660:	903d5226 	beq	r18,zero,400cbac <__svfscanf_r+0x884>
 400d664:	94bfffc4 	addi	r18,r18,-1
 400d668:	d8c04404 	addi	r3,sp,272
 400d66c:	1c85883a 	add	r2,r3,r18
 400d670:	11400003 	ldbu	r5,0(r2)
 400d674:	b009883a 	mov	r4,r22
 400d678:	800d883a 	mov	r6,r16
 400d67c:	4014b840 	call	4014b84 <_ungetc_r>
 400d680:	003ff706 	br	400d660 <__svfscanf_r+0x1338>
 400d684:	00bfff84 	movi	r2,-2
 400d688:	18bd361e 	bne	r3,r2,400cb64 <__svfscanf_r+0x83c>
 400d68c:	003d4006 	br	400cb90 <__svfscanf_r+0x868>
 400d690:	d900a417 	ldw	r4,656(sp)
 400d694:	25400017 	ldw	r21,0(r4)
 400d698:	21000104 	addi	r4,r4,4
 400d69c:	d900a415 	stw	r4,656(sp)
 400d6a0:	003d0606 	br	400cabc <__svfscanf_r+0x794>
 400d6a4:	983b5526 	beq	r19,zero,400c3fc <__svfscanf_r+0xd4>
 400d6a8:	8ce3883a 	add	r17,r17,r19
 400d6ac:	003b3106 	br	400c374 <__svfscanf_r+0x4c>
 400d6b0:	00bfff84 	movi	r2,-2
 400d6b4:	18bc621e 	bne	r3,r2,400c840 <__svfscanf_r+0x518>
 400d6b8:	003c6906 	br	400c860 <__svfscanf_r+0x538>
 400d6bc:	b009883a 	mov	r4,r22
 400d6c0:	800b883a 	mov	r5,r16
 400d6c4:	40122b00 	call	40122b0 <__srefill_r>
 400d6c8:	103c6726 	beq	r2,zero,400c868 <__svfscanf_r+0x540>
 400d6cc:	903b6b1e 	bne	r18,zero,400c47c <__svfscanf_r+0x154>
 400d6d0:	a83b281e 	bne	r21,zero,400c374 <__svfscanf_r+0x4c>
 400d6d4:	d8c0a217 	ldw	r3,648(sp)
 400d6d8:	18c00044 	addi	r3,r3,1
 400d6dc:	d8c0a215 	stw	r3,648(sp)
 400d6e0:	003b2406 	br	400c374 <__svfscanf_r+0x4c>
 400d6e4:	8080030b 	ldhu	r2,12(r16)
 400d6e8:	1080100c 	andi	r2,r2,64
 400d6ec:	103b4326 	beq	r2,zero,400c3fc <__svfscanf_r+0xd4>
 400d6f0:	003b6406 	br	400c484 <__svfscanf_r+0x15c>
 400d6f4:	d8c0a417 	ldw	r3,656(sp)
 400d6f8:	1cc00017 	ldw	r19,0(r3)
 400d6fc:	18c00104 	addi	r3,r3,4
 400d700:	d8c0a415 	stw	r3,656(sp)
 400d704:	003c2906 	br	400c7ac <__svfscanf_r+0x484>
 400d708:	00800204 	movi	r2,8
 400d70c:	00c10074 	movhi	r3,1025
 400d710:	18d15504 	addi	r3,r3,17748
 400d714:	048000c4 	movi	r18,3
 400d718:	d880a115 	stw	r2,644(sp)
 400d71c:	d8c0a015 	stw	r3,640(sp)
 400d720:	003bf006 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d724:	04800084 	movi	r18,2
 400d728:	003bee06 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d72c:	01000404 	movi	r4,16
 400d730:	00810074 	movhi	r2,1025
 400d734:	10915504 	addi	r2,r2,17748
 400d738:	ad408814 	ori	r21,r21,544
 400d73c:	048000c4 	movi	r18,3
 400d740:	d900a115 	stw	r4,644(sp)
 400d744:	d880a015 	stw	r2,640(sp)
 400d748:	003be606 	br	400c6e4 <__svfscanf_r+0x3bc>
 400d74c:	a880040c 	andi	r2,r21,16
 400d750:	103b081e 	bne	r2,zero,400c374 <__svfscanf_r+0x4c>
 400d754:	a880010c 	andi	r2,r21,4
 400d758:	10004e26 	beq	r2,zero,400d894 <__svfscanf_r+0x156c>
 400d75c:	d8c0a417 	ldw	r3,656(sp)
 400d760:	18800017 	ldw	r2,0(r3)
 400d764:	18c00104 	addi	r3,r3,4
 400d768:	d8c0a415 	stw	r3,656(sp)
 400d76c:	1440000d 	sth	r17,0(r2)
 400d770:	003b0006 	br	400c374 <__svfscanf_r+0x4c>
 400d774:	d880a417 	ldw	r2,656(sp)
 400d778:	dd400404 	addi	r21,sp,16
 400d77c:	14800017 	ldw	r18,0(r2)
 400d780:	9027883a 	mov	r19,r18
 400d784:	81000017 	ldw	r4,0(r16)
 400d788:	20800003 	ldbu	r2,0(r4)
 400d78c:	a885883a 	add	r2,r21,r2
 400d790:	10c00007 	ldb	r3,0(r2)
 400d794:	18001426 	beq	r3,zero,400d7e8 <__svfscanf_r+0x14c0>
 400d798:	d8c0a317 	ldw	r3,652(sp)
 400d79c:	80800117 	ldw	r2,4(r16)
 400d7a0:	21800044 	addi	r6,r4,1
 400d7a4:	18ffffc4 	addi	r3,r3,-1
 400d7a8:	d8c0a315 	stw	r3,652(sp)
 400d7ac:	10ffffc4 	addi	r3,r2,-1
 400d7b0:	80c00115 	stw	r3,4(r16)
 400d7b4:	20800003 	ldbu	r2,0(r4)
 400d7b8:	90800005 	stb	r2,0(r18)
 400d7bc:	d900a317 	ldw	r4,652(sp)
 400d7c0:	81800015 	stw	r6,0(r16)
 400d7c4:	94800044 	addi	r18,r18,1
 400d7c8:	20000726 	beq	r4,zero,400d7e8 <__svfscanf_r+0x14c0>
 400d7cc:	80800117 	ldw	r2,4(r16)
 400d7d0:	00bfec16 	blt	zero,r2,400d784 <__svfscanf_r+0x145c>
 400d7d4:	b009883a 	mov	r4,r22
 400d7d8:	800b883a 	mov	r5,r16
 400d7dc:	40122b00 	call	40122b0 <__srefill_r>
 400d7e0:	103fe826 	beq	r2,zero,400d784 <__svfscanf_r+0x145c>
 400d7e4:	9cbb2526 	beq	r19,r18,400c47c <__svfscanf_r+0x154>
 400d7e8:	94e7c83a 	sub	r19,r18,r19
 400d7ec:	983b0326 	beq	r19,zero,400c3fc <__svfscanf_r+0xd4>
 400d7f0:	90000005 	stb	zero,0(r18)
 400d7f4:	d880a417 	ldw	r2,656(sp)
 400d7f8:	d8c0a217 	ldw	r3,648(sp)
 400d7fc:	8ce3883a 	add	r17,r17,r19
 400d800:	10800104 	addi	r2,r2,4
 400d804:	18c00044 	addi	r3,r3,1
 400d808:	d880a415 	stw	r2,656(sp)
 400d80c:	d8c0a215 	stw	r3,648(sp)
 400d810:	003ad806 	br	400c374 <__svfscanf_r+0x4c>
 400d814:	d900a517 	ldw	r4,660(sp)
 400d818:	25faf82e 	bgeu	r4,r23,400c3fc <__svfscanf_r+0xd4>
 400d81c:	bdffffc4 	addi	r23,r23,-1
 400d820:	b9400007 	ldb	r5,0(r23)
 400d824:	b009883a 	mov	r4,r22
 400d828:	800d883a 	mov	r6,r16
 400d82c:	4014b840 	call	4014b84 <_ungetc_r>
 400d830:	d8c0a517 	ldw	r3,660(sp)
 400d834:	1dfff936 	bltu	r3,r23,400d81c <__svfscanf_r+0x14f4>
 400d838:	003af006 	br	400c3fc <__svfscanf_r+0xd4>
 400d83c:	a880040c 	andi	r2,r21,16
 400d840:	10002d26 	beq	r2,zero,400d8f8 <__svfscanf_r+0x15d0>
 400d844:	0025883a 	mov	r18,zero
 400d848:	00000906 	br	400d870 <__svfscanf_r+0x1548>
 400d84c:	80c00117 	ldw	r3,4(r16)
 400d850:	d880a317 	ldw	r2,652(sp)
 400d854:	29800044 	addi	r6,r5,1
 400d858:	18ffffc4 	addi	r3,r3,-1
 400d85c:	94800044 	addi	r18,r18,1
 400d860:	81800015 	stw	r6,0(r16)
 400d864:	80c00115 	stw	r3,4(r16)
 400d868:	14800826 	beq	r2,r18,400d88c <__svfscanf_r+0x1564>
 400d86c:	00c0120e 	bge	zero,r3,400d8b8 <__svfscanf_r+0x1590>
 400d870:	81400017 	ldw	r5,0(r16)
 400d874:	98800017 	ldw	r2,0(r19)
 400d878:	28c00003 	ldbu	r3,0(r5)
 400d87c:	1887883a 	add	r3,r3,r2
 400d880:	19000003 	ldbu	r4,0(r3)
 400d884:	2100020c 	andi	r4,r4,8
 400d888:	203ff026 	beq	r4,zero,400d84c <__svfscanf_r+0x1524>
 400d88c:	8ca3883a 	add	r17,r17,r18
 400d890:	003ab806 	br	400c374 <__svfscanf_r+0x4c>
 400d894:	a880004c 	andi	r2,r21,1
 400d898:	1005003a 	cmpeq	r2,r2,zero
 400d89c:	10000b1e 	bne	r2,zero,400d8cc <__svfscanf_r+0x15a4>
 400d8a0:	d900a417 	ldw	r4,656(sp)
 400d8a4:	20800017 	ldw	r2,0(r4)
 400d8a8:	21000104 	addi	r4,r4,4
 400d8ac:	d900a415 	stw	r4,656(sp)
 400d8b0:	14400015 	stw	r17,0(r2)
 400d8b4:	003aaf06 	br	400c374 <__svfscanf_r+0x4c>
 400d8b8:	b009883a 	mov	r4,r22
 400d8bc:	800b883a 	mov	r5,r16
 400d8c0:	40122b00 	call	40122b0 <__srefill_r>
 400d8c4:	103fea26 	beq	r2,zero,400d870 <__svfscanf_r+0x1548>
 400d8c8:	003ff006 	br	400d88c <__svfscanf_r+0x1564>
 400d8cc:	a880008c 	andi	r2,r21,2
 400d8d0:	10002c26 	beq	r2,zero,400d984 <__svfscanf_r+0x165c>
 400d8d4:	d8c0a417 	ldw	r3,656(sp)
 400d8d8:	d900a417 	ldw	r4,656(sp)
 400d8dc:	18800017 	ldw	r2,0(r3)
 400d8e0:	8807d7fa 	srai	r3,r17,31
 400d8e4:	21000104 	addi	r4,r4,4
 400d8e8:	d900a415 	stw	r4,656(sp)
 400d8ec:	14400015 	stw	r17,0(r2)
 400d8f0:	10c00115 	stw	r3,4(r2)
 400d8f4:	003a9f06 	br	400c374 <__svfscanf_r+0x4c>
 400d8f8:	d8c0a417 	ldw	r3,656(sp)
 400d8fc:	1d400017 	ldw	r21,0(r3)
 400d900:	a825883a 	mov	r18,r21
 400d904:	00000e06 	br	400d940 <__svfscanf_r+0x1618>
 400d908:	80800117 	ldw	r2,4(r16)
 400d90c:	d900a317 	ldw	r4,652(sp)
 400d910:	29800044 	addi	r6,r5,1
 400d914:	10ffffc4 	addi	r3,r2,-1
 400d918:	213fffc4 	addi	r4,r4,-1
 400d91c:	d900a315 	stw	r4,652(sp)
 400d920:	80c00115 	stw	r3,4(r16)
 400d924:	28800003 	ldbu	r2,0(r5)
 400d928:	90800005 	stb	r2,0(r18)
 400d92c:	81800015 	stw	r6,0(r16)
 400d930:	94800044 	addi	r18,r18,1
 400d934:	20000926 	beq	r4,zero,400d95c <__svfscanf_r+0x1634>
 400d938:	80800117 	ldw	r2,4(r16)
 400d93c:	0080170e 	bge	zero,r2,400d99c <__svfscanf_r+0x1674>
 400d940:	81400017 	ldw	r5,0(r16)
 400d944:	98800017 	ldw	r2,0(r19)
 400d948:	28c00003 	ldbu	r3,0(r5)
 400d94c:	1887883a 	add	r3,r3,r2
 400d950:	19000003 	ldbu	r4,0(r3)
 400d954:	2100020c 	andi	r4,r4,8
 400d958:	203feb26 	beq	r4,zero,400d908 <__svfscanf_r+0x15e0>
 400d95c:	9545c83a 	sub	r2,r18,r21
 400d960:	d8c0a217 	ldw	r3,648(sp)
 400d964:	88a3883a 	add	r17,r17,r2
 400d968:	d880a417 	ldw	r2,656(sp)
 400d96c:	18c00044 	addi	r3,r3,1
 400d970:	d8c0a215 	stw	r3,648(sp)
 400d974:	10800104 	addi	r2,r2,4
 400d978:	d880a415 	stw	r2,656(sp)
 400d97c:	90000005 	stb	zero,0(r18)
 400d980:	003a7c06 	br	400c374 <__svfscanf_r+0x4c>
 400d984:	d8c0a417 	ldw	r3,656(sp)
 400d988:	18800017 	ldw	r2,0(r3)
 400d98c:	18c00104 	addi	r3,r3,4
 400d990:	d8c0a415 	stw	r3,656(sp)
 400d994:	14400015 	stw	r17,0(r2)
 400d998:	003a7606 	br	400c374 <__svfscanf_r+0x4c>
 400d99c:	b009883a 	mov	r4,r22
 400d9a0:	800b883a 	mov	r5,r16
 400d9a4:	40122b00 	call	40122b0 <__srefill_r>
 400d9a8:	103fe526 	beq	r2,zero,400d940 <__svfscanf_r+0x1618>
 400d9ac:	003feb06 	br	400d95c <__svfscanf_r+0x1634>

0400d9b0 <__svfscanf>:
 400d9b0:	008100b4 	movhi	r2,1026
 400d9b4:	109a4904 	addi	r2,r2,26916
 400d9b8:	2013883a 	mov	r9,r4
 400d9bc:	11000017 	ldw	r4,0(r2)
 400d9c0:	2805883a 	mov	r2,r5
 400d9c4:	300f883a 	mov	r7,r6
 400d9c8:	480b883a 	mov	r5,r9
 400d9cc:	100d883a 	mov	r6,r2
 400d9d0:	400c3281 	jmpi	400c328 <__svfscanf_r>

0400d9d4 <_vfscanf_r>:
 400d9d4:	defffb04 	addi	sp,sp,-20
 400d9d8:	dcc00315 	stw	r19,12(sp)
 400d9dc:	dc800215 	stw	r18,8(sp)
 400d9e0:	dc400115 	stw	r17,4(sp)
 400d9e4:	dc000015 	stw	r16,0(sp)
 400d9e8:	dfc00415 	stw	ra,16(sp)
 400d9ec:	2021883a 	mov	r16,r4
 400d9f0:	2823883a 	mov	r17,r5
 400d9f4:	3025883a 	mov	r18,r6
 400d9f8:	3827883a 	mov	r19,r7
 400d9fc:	20000226 	beq	r4,zero,400da08 <_vfscanf_r+0x34>
 400da00:	20800e17 	ldw	r2,56(r4)
 400da04:	10000b26 	beq	r2,zero,400da34 <_vfscanf_r+0x60>
 400da08:	8009883a 	mov	r4,r16
 400da0c:	880b883a 	mov	r5,r17
 400da10:	900d883a 	mov	r6,r18
 400da14:	980f883a 	mov	r7,r19
 400da18:	dfc00417 	ldw	ra,16(sp)
 400da1c:	dcc00317 	ldw	r19,12(sp)
 400da20:	dc800217 	ldw	r18,8(sp)
 400da24:	dc400117 	ldw	r17,4(sp)
 400da28:	dc000017 	ldw	r16,0(sp)
 400da2c:	dec00504 	addi	sp,sp,20
 400da30:	400c3281 	jmpi	400c328 <__svfscanf_r>
 400da34:	400f67c0 	call	400f67c <__sinit>
 400da38:	003ff306 	br	400da08 <_vfscanf_r+0x34>

0400da3c <vfscanf>:
 400da3c:	defffb04 	addi	sp,sp,-20
 400da40:	dcc00315 	stw	r19,12(sp)
 400da44:	04c100b4 	movhi	r19,1026
 400da48:	9cda4904 	addi	r19,r19,26916
 400da4c:	98c00017 	ldw	r3,0(r19)
 400da50:	dc800215 	stw	r18,8(sp)
 400da54:	dc400115 	stw	r17,4(sp)
 400da58:	dc000015 	stw	r16,0(sp)
 400da5c:	dfc00415 	stw	ra,16(sp)
 400da60:	2021883a 	mov	r16,r4
 400da64:	2823883a 	mov	r17,r5
 400da68:	3025883a 	mov	r18,r6
 400da6c:	18000326 	beq	r3,zero,400da7c <vfscanf+0x40>
 400da70:	18800e17 	ldw	r2,56(r3)
 400da74:	1809883a 	mov	r4,r3
 400da78:	10000b26 	beq	r2,zero,400daa8 <vfscanf+0x6c>
 400da7c:	99000017 	ldw	r4,0(r19)
 400da80:	800b883a 	mov	r5,r16
 400da84:	880d883a 	mov	r6,r17
 400da88:	900f883a 	mov	r7,r18
 400da8c:	dfc00417 	ldw	ra,16(sp)
 400da90:	dcc00317 	ldw	r19,12(sp)
 400da94:	dc800217 	ldw	r18,8(sp)
 400da98:	dc400117 	ldw	r17,4(sp)
 400da9c:	dc000017 	ldw	r16,0(sp)
 400daa0:	dec00504 	addi	sp,sp,20
 400daa4:	400c3281 	jmpi	400c328 <__svfscanf_r>
 400daa8:	400f67c0 	call	400f67c <__sinit>
 400daac:	003ff306 	br	400da7c <vfscanf+0x40>

0400dab0 <__swsetup_r>:
 400dab0:	008100b4 	movhi	r2,1026
 400dab4:	109a4904 	addi	r2,r2,26916
 400dab8:	10c00017 	ldw	r3,0(r2)
 400dabc:	defffd04 	addi	sp,sp,-12
 400dac0:	dc400115 	stw	r17,4(sp)
 400dac4:	dc000015 	stw	r16,0(sp)
 400dac8:	dfc00215 	stw	ra,8(sp)
 400dacc:	2023883a 	mov	r17,r4
 400dad0:	2821883a 	mov	r16,r5
 400dad4:	18000226 	beq	r3,zero,400dae0 <__swsetup_r+0x30>
 400dad8:	18800e17 	ldw	r2,56(r3)
 400dadc:	10001f26 	beq	r2,zero,400db5c <__swsetup_r+0xac>
 400dae0:	8100030b 	ldhu	r4,12(r16)
 400dae4:	2080020c 	andi	r2,r4,8
 400dae8:	10002826 	beq	r2,zero,400db8c <__swsetup_r+0xdc>
 400daec:	81400417 	ldw	r5,16(r16)
 400daf0:	28001d26 	beq	r5,zero,400db68 <__swsetup_r+0xb8>
 400daf4:	2080004c 	andi	r2,r4,1
 400daf8:	1005003a 	cmpeq	r2,r2,zero
 400dafc:	10000b26 	beq	r2,zero,400db2c <__swsetup_r+0x7c>
 400db00:	2080008c 	andi	r2,r4,2
 400db04:	10001226 	beq	r2,zero,400db50 <__swsetup_r+0xa0>
 400db08:	0005883a 	mov	r2,zero
 400db0c:	80800215 	stw	r2,8(r16)
 400db10:	28000b26 	beq	r5,zero,400db40 <__swsetup_r+0x90>
 400db14:	0005883a 	mov	r2,zero
 400db18:	dfc00217 	ldw	ra,8(sp)
 400db1c:	dc400117 	ldw	r17,4(sp)
 400db20:	dc000017 	ldw	r16,0(sp)
 400db24:	dec00304 	addi	sp,sp,12
 400db28:	f800283a 	ret
 400db2c:	80800517 	ldw	r2,20(r16)
 400db30:	80000215 	stw	zero,8(r16)
 400db34:	0085c83a 	sub	r2,zero,r2
 400db38:	80800615 	stw	r2,24(r16)
 400db3c:	283ff51e 	bne	r5,zero,400db14 <__swsetup_r+0x64>
 400db40:	2080200c 	andi	r2,r4,128
 400db44:	103ff326 	beq	r2,zero,400db14 <__swsetup_r+0x64>
 400db48:	00bfffc4 	movi	r2,-1
 400db4c:	003ff206 	br	400db18 <__swsetup_r+0x68>
 400db50:	80800517 	ldw	r2,20(r16)
 400db54:	80800215 	stw	r2,8(r16)
 400db58:	003fed06 	br	400db10 <__swsetup_r+0x60>
 400db5c:	1809883a 	mov	r4,r3
 400db60:	400f67c0 	call	400f67c <__sinit>
 400db64:	003fde06 	br	400dae0 <__swsetup_r+0x30>
 400db68:	20c0a00c 	andi	r3,r4,640
 400db6c:	00808004 	movi	r2,512
 400db70:	18bfe026 	beq	r3,r2,400daf4 <__swsetup_r+0x44>
 400db74:	8809883a 	mov	r4,r17
 400db78:	800b883a 	mov	r5,r16
 400db7c:	40106a00 	call	40106a0 <__smakebuf_r>
 400db80:	8100030b 	ldhu	r4,12(r16)
 400db84:	81400417 	ldw	r5,16(r16)
 400db88:	003fda06 	br	400daf4 <__swsetup_r+0x44>
 400db8c:	2080040c 	andi	r2,r4,16
 400db90:	103fed26 	beq	r2,zero,400db48 <__swsetup_r+0x98>
 400db94:	2080010c 	andi	r2,r4,4
 400db98:	10001226 	beq	r2,zero,400dbe4 <__swsetup_r+0x134>
 400db9c:	81400c17 	ldw	r5,48(r16)
 400dba0:	28000526 	beq	r5,zero,400dbb8 <__swsetup_r+0x108>
 400dba4:	80801004 	addi	r2,r16,64
 400dba8:	28800226 	beq	r5,r2,400dbb4 <__swsetup_r+0x104>
 400dbac:	8809883a 	mov	r4,r17
 400dbb0:	400fc800 	call	400fc80 <_free_r>
 400dbb4:	80000c15 	stw	zero,48(r16)
 400dbb8:	8080030b 	ldhu	r2,12(r16)
 400dbbc:	81400417 	ldw	r5,16(r16)
 400dbc0:	80000115 	stw	zero,4(r16)
 400dbc4:	10bff6cc 	andi	r2,r2,65499
 400dbc8:	8080030d 	sth	r2,12(r16)
 400dbcc:	81400015 	stw	r5,0(r16)
 400dbd0:	8080030b 	ldhu	r2,12(r16)
 400dbd4:	10800214 	ori	r2,r2,8
 400dbd8:	113fffcc 	andi	r4,r2,65535
 400dbdc:	8080030d 	sth	r2,12(r16)
 400dbe0:	003fc306 	br	400daf0 <__swsetup_r+0x40>
 400dbe4:	81400417 	ldw	r5,16(r16)
 400dbe8:	003ff906 	br	400dbd0 <__swsetup_r+0x120>

0400dbec <quorem>:
 400dbec:	28c00417 	ldw	r3,16(r5)
 400dbf0:	20800417 	ldw	r2,16(r4)
 400dbf4:	defff104 	addi	sp,sp,-60
 400dbf8:	dfc00e15 	stw	ra,56(sp)
 400dbfc:	df000d15 	stw	fp,52(sp)
 400dc00:	ddc00c15 	stw	r23,48(sp)
 400dc04:	dd800b15 	stw	r22,44(sp)
 400dc08:	dd400a15 	stw	r21,40(sp)
 400dc0c:	dd000915 	stw	r20,36(sp)
 400dc10:	dcc00815 	stw	r19,32(sp)
 400dc14:	dc800715 	stw	r18,28(sp)
 400dc18:	dc400615 	stw	r17,24(sp)
 400dc1c:	dc000515 	stw	r16,20(sp)
 400dc20:	d9000315 	stw	r4,12(sp)
 400dc24:	d9400415 	stw	r5,16(sp)
 400dc28:	10c07f16 	blt	r2,r3,400de28 <quorem+0x23c>
 400dc2c:	1d3fffc4 	addi	r20,r3,-1
 400dc30:	d8c00417 	ldw	r3,16(sp)
 400dc34:	d9000317 	ldw	r4,12(sp)
 400dc38:	a505883a 	add	r2,r20,r20
 400dc3c:	1085883a 	add	r2,r2,r2
 400dc40:	1cc00504 	addi	r19,r3,20
 400dc44:	25c00504 	addi	r23,r4,20
 400dc48:	98ad883a 	add	r22,r19,r2
 400dc4c:	15c7883a 	add	r3,r2,r23
 400dc50:	b1400017 	ldw	r5,0(r22)
 400dc54:	19000017 	ldw	r4,0(r3)
 400dc58:	d8c00015 	stw	r3,0(sp)
 400dc5c:	29400044 	addi	r5,r5,1
 400dc60:	d9000215 	stw	r4,8(sp)
 400dc64:	4008fe80 	call	4008fe8 <__udivsi3>
 400dc68:	1039883a 	mov	fp,r2
 400dc6c:	10003d1e 	bne	r2,zero,400dd64 <quorem+0x178>
 400dc70:	d9400417 	ldw	r5,16(sp)
 400dc74:	d9000317 	ldw	r4,12(sp)
 400dc78:	4010d8c0 	call	4010d8c <__mcmp>
 400dc7c:	10002c16 	blt	r2,zero,400dd30 <quorem+0x144>
 400dc80:	e7000044 	addi	fp,fp,1
 400dc84:	b80f883a 	mov	r7,r23
 400dc88:	0011883a 	mov	r8,zero
 400dc8c:	0009883a 	mov	r4,zero
 400dc90:	99400017 	ldw	r5,0(r19)
 400dc94:	38c00017 	ldw	r3,0(r7)
 400dc98:	9cc00104 	addi	r19,r19,4
 400dc9c:	28bfffcc 	andi	r2,r5,65535
 400dca0:	2085883a 	add	r2,r4,r2
 400dca4:	11bfffcc 	andi	r6,r2,65535
 400dca8:	193fffcc 	andi	r4,r3,65535
 400dcac:	1004d43a 	srli	r2,r2,16
 400dcb0:	280ad43a 	srli	r5,r5,16
 400dcb4:	2189c83a 	sub	r4,r4,r6
 400dcb8:	2209883a 	add	r4,r4,r8
 400dcbc:	1806d43a 	srli	r3,r3,16
 400dcc0:	288b883a 	add	r5,r5,r2
 400dcc4:	200dd43a 	srai	r6,r4,16
 400dcc8:	28bfffcc 	andi	r2,r5,65535
 400dccc:	1887c83a 	sub	r3,r3,r2
 400dcd0:	1987883a 	add	r3,r3,r6
 400dcd4:	3900000d 	sth	r4,0(r7)
 400dcd8:	38c0008d 	sth	r3,2(r7)
 400dcdc:	2808d43a 	srli	r4,r5,16
 400dce0:	39c00104 	addi	r7,r7,4
 400dce4:	1811d43a 	srai	r8,r3,16
 400dce8:	b4ffe92e 	bgeu	r22,r19,400dc90 <quorem+0xa4>
 400dcec:	a505883a 	add	r2,r20,r20
 400dcf0:	1085883a 	add	r2,r2,r2
 400dcf4:	b885883a 	add	r2,r23,r2
 400dcf8:	10c00017 	ldw	r3,0(r2)
 400dcfc:	18000c1e 	bne	r3,zero,400dd30 <quorem+0x144>
 400dd00:	113fff04 	addi	r4,r2,-4
 400dd04:	b900082e 	bgeu	r23,r4,400dd28 <quorem+0x13c>
 400dd08:	10bfff17 	ldw	r2,-4(r2)
 400dd0c:	10000326 	beq	r2,zero,400dd1c <quorem+0x130>
 400dd10:	00000506 	br	400dd28 <quorem+0x13c>
 400dd14:	20800017 	ldw	r2,0(r4)
 400dd18:	1000031e 	bne	r2,zero,400dd28 <quorem+0x13c>
 400dd1c:	213fff04 	addi	r4,r4,-4
 400dd20:	a53fffc4 	addi	r20,r20,-1
 400dd24:	b93ffb36 	bltu	r23,r4,400dd14 <quorem+0x128>
 400dd28:	d9000317 	ldw	r4,12(sp)
 400dd2c:	25000415 	stw	r20,16(r4)
 400dd30:	e005883a 	mov	r2,fp
 400dd34:	dfc00e17 	ldw	ra,56(sp)
 400dd38:	df000d17 	ldw	fp,52(sp)
 400dd3c:	ddc00c17 	ldw	r23,48(sp)
 400dd40:	dd800b17 	ldw	r22,44(sp)
 400dd44:	dd400a17 	ldw	r21,40(sp)
 400dd48:	dd000917 	ldw	r20,36(sp)
 400dd4c:	dcc00817 	ldw	r19,32(sp)
 400dd50:	dc800717 	ldw	r18,28(sp)
 400dd54:	dc400617 	ldw	r17,24(sp)
 400dd58:	dc000517 	ldw	r16,20(sp)
 400dd5c:	dec00f04 	addi	sp,sp,60
 400dd60:	f800283a 	ret
 400dd64:	b823883a 	mov	r17,r23
 400dd68:	9825883a 	mov	r18,r19
 400dd6c:	d8000115 	stw	zero,4(sp)
 400dd70:	002b883a 	mov	r21,zero
 400dd74:	94000017 	ldw	r16,0(r18)
 400dd78:	e009883a 	mov	r4,fp
 400dd7c:	94800104 	addi	r18,r18,4
 400dd80:	817fffcc 	andi	r5,r16,65535
 400dd84:	4008ff80 	call	4008ff8 <__mulsi3>
 400dd88:	800ad43a 	srli	r5,r16,16
 400dd8c:	e009883a 	mov	r4,fp
 400dd90:	a8a1883a 	add	r16,r21,r2
 400dd94:	4008ff80 	call	4008ff8 <__mulsi3>
 400dd98:	89000017 	ldw	r4,0(r17)
 400dd9c:	80ffffcc 	andi	r3,r16,65535
 400dda0:	8020d43a 	srli	r16,r16,16
 400dda4:	217fffcc 	andi	r5,r4,65535
 400dda8:	28cbc83a 	sub	r5,r5,r3
 400ddac:	d8c00117 	ldw	r3,4(sp)
 400ddb0:	2008d43a 	srli	r4,r4,16
 400ddb4:	1405883a 	add	r2,r2,r16
 400ddb8:	28cb883a 	add	r5,r5,r3
 400ddbc:	280dd43a 	srai	r6,r5,16
 400ddc0:	10ffffcc 	andi	r3,r2,65535
 400ddc4:	20c9c83a 	sub	r4,r4,r3
 400ddc8:	2189883a 	add	r4,r4,r6
 400ddcc:	8900008d 	sth	r4,2(r17)
 400ddd0:	2009d43a 	srai	r4,r4,16
 400ddd4:	8940000d 	sth	r5,0(r17)
 400ddd8:	102ad43a 	srli	r21,r2,16
 400dddc:	8c400104 	addi	r17,r17,4
 400dde0:	d9000115 	stw	r4,4(sp)
 400dde4:	b4bfe32e 	bgeu	r22,r18,400dd74 <quorem+0x188>
 400dde8:	d9000217 	ldw	r4,8(sp)
 400ddec:	203fa01e 	bne	r4,zero,400dc70 <quorem+0x84>
 400ddf0:	d8800017 	ldw	r2,0(sp)
 400ddf4:	10ffff04 	addi	r3,r2,-4
 400ddf8:	b8c0082e 	bgeu	r23,r3,400de1c <quorem+0x230>
 400ddfc:	10bfff17 	ldw	r2,-4(r2)
 400de00:	10000326 	beq	r2,zero,400de10 <quorem+0x224>
 400de04:	00000506 	br	400de1c <quorem+0x230>
 400de08:	18800017 	ldw	r2,0(r3)
 400de0c:	1000031e 	bne	r2,zero,400de1c <quorem+0x230>
 400de10:	18ffff04 	addi	r3,r3,-4
 400de14:	a53fffc4 	addi	r20,r20,-1
 400de18:	b8fffb36 	bltu	r23,r3,400de08 <quorem+0x21c>
 400de1c:	d8c00317 	ldw	r3,12(sp)
 400de20:	1d000415 	stw	r20,16(r3)
 400de24:	003f9206 	br	400dc70 <quorem+0x84>
 400de28:	0005883a 	mov	r2,zero
 400de2c:	003fc106 	br	400dd34 <quorem+0x148>

0400de30 <_dtoa_r>:
 400de30:	22001017 	ldw	r8,64(r4)
 400de34:	deffda04 	addi	sp,sp,-152
 400de38:	dd402115 	stw	r21,132(sp)
 400de3c:	dd002015 	stw	r20,128(sp)
 400de40:	dc801e15 	stw	r18,120(sp)
 400de44:	dc401d15 	stw	r17,116(sp)
 400de48:	dfc02515 	stw	ra,148(sp)
 400de4c:	df002415 	stw	fp,144(sp)
 400de50:	ddc02315 	stw	r23,140(sp)
 400de54:	dd802215 	stw	r22,136(sp)
 400de58:	dcc01f15 	stw	r19,124(sp)
 400de5c:	dc001c15 	stw	r16,112(sp)
 400de60:	d9001615 	stw	r4,88(sp)
 400de64:	3023883a 	mov	r17,r6
 400de68:	2829883a 	mov	r20,r5
 400de6c:	d9c01715 	stw	r7,92(sp)
 400de70:	dc802817 	ldw	r18,160(sp)
 400de74:	302b883a 	mov	r21,r6
 400de78:	40000a26 	beq	r8,zero,400dea4 <_dtoa_r+0x74>
 400de7c:	20801117 	ldw	r2,68(r4)
 400de80:	400b883a 	mov	r5,r8
 400de84:	40800115 	stw	r2,4(r8)
 400de88:	20c01117 	ldw	r3,68(r4)
 400de8c:	00800044 	movi	r2,1
 400de90:	10c4983a 	sll	r2,r2,r3
 400de94:	40800215 	stw	r2,8(r8)
 400de98:	4010c300 	call	4010c30 <_Bfree>
 400de9c:	d8c01617 	ldw	r3,88(sp)
 400dea0:	18001015 	stw	zero,64(r3)
 400dea4:	8800a316 	blt	r17,zero,400e134 <_dtoa_r+0x304>
 400dea8:	90000015 	stw	zero,0(r18)
 400deac:	a8dffc2c 	andhi	r3,r21,32752
 400deb0:	009ffc34 	movhi	r2,32752
 400deb4:	18809126 	beq	r3,r2,400e0fc <_dtoa_r+0x2cc>
 400deb8:	000d883a 	mov	r6,zero
 400debc:	000f883a 	mov	r7,zero
 400dec0:	a009883a 	mov	r4,r20
 400dec4:	a80b883a 	mov	r5,r21
 400dec8:	dd001215 	stw	r20,72(sp)
 400decc:	dd401315 	stw	r21,76(sp)
 400ded0:	4016c980 	call	4016c98 <__nedf2>
 400ded4:	1000171e 	bne	r2,zero,400df34 <_dtoa_r+0x104>
 400ded8:	d9802717 	ldw	r6,156(sp)
 400dedc:	00800044 	movi	r2,1
 400dee0:	30800015 	stw	r2,0(r6)
 400dee4:	d8802917 	ldw	r2,164(sp)
 400dee8:	10029b26 	beq	r2,zero,400e958 <_dtoa_r+0xb28>
 400deec:	d9002917 	ldw	r4,164(sp)
 400def0:	008100b4 	movhi	r2,1026
 400def4:	10918744 	addi	r2,r2,17949
 400def8:	10ffffc4 	addi	r3,r2,-1
 400defc:	20800015 	stw	r2,0(r4)
 400df00:	1805883a 	mov	r2,r3
 400df04:	dfc02517 	ldw	ra,148(sp)
 400df08:	df002417 	ldw	fp,144(sp)
 400df0c:	ddc02317 	ldw	r23,140(sp)
 400df10:	dd802217 	ldw	r22,136(sp)
 400df14:	dd402117 	ldw	r21,132(sp)
 400df18:	dd002017 	ldw	r20,128(sp)
 400df1c:	dcc01f17 	ldw	r19,124(sp)
 400df20:	dc801e17 	ldw	r18,120(sp)
 400df24:	dc401d17 	ldw	r17,116(sp)
 400df28:	dc001c17 	ldw	r16,112(sp)
 400df2c:	dec02604 	addi	sp,sp,152
 400df30:	f800283a 	ret
 400df34:	d9001617 	ldw	r4,88(sp)
 400df38:	d9401217 	ldw	r5,72(sp)
 400df3c:	d8800104 	addi	r2,sp,4
 400df40:	a80d883a 	mov	r6,r21
 400df44:	d9c00204 	addi	r7,sp,8
 400df48:	d8800015 	stw	r2,0(sp)
 400df4c:	401126c0 	call	401126c <__d2b>
 400df50:	d8800715 	stw	r2,28(sp)
 400df54:	a804d53a 	srli	r2,r21,20
 400df58:	1101ffcc 	andi	r4,r2,2047
 400df5c:	20008626 	beq	r4,zero,400e178 <_dtoa_r+0x348>
 400df60:	d8c01217 	ldw	r3,72(sp)
 400df64:	00800434 	movhi	r2,16
 400df68:	10bfffc4 	addi	r2,r2,-1
 400df6c:	ddc00117 	ldw	r23,4(sp)
 400df70:	a884703a 	and	r2,r21,r2
 400df74:	1811883a 	mov	r8,r3
 400df78:	124ffc34 	orhi	r9,r2,16368
 400df7c:	25bf0044 	addi	r22,r4,-1023
 400df80:	d8000815 	stw	zero,32(sp)
 400df84:	0005883a 	mov	r2,zero
 400df88:	00cffe34 	movhi	r3,16376
 400df8c:	480b883a 	mov	r5,r9
 400df90:	4009883a 	mov	r4,r8
 400df94:	180f883a 	mov	r7,r3
 400df98:	100d883a 	mov	r6,r2
 400df9c:	40083000 	call	4008300 <__subdf3>
 400dfa0:	0218dbf4 	movhi	r8,25455
 400dfa4:	4210d844 	addi	r8,r8,17249
 400dfa8:	024ff4f4 	movhi	r9,16339
 400dfac:	4a61e9c4 	addi	r9,r9,-30809
 400dfb0:	480f883a 	mov	r7,r9
 400dfb4:	400d883a 	mov	r6,r8
 400dfb8:	180b883a 	mov	r5,r3
 400dfbc:	1009883a 	mov	r4,r2
 400dfc0:	40083f40 	call	40083f4 <__muldf3>
 400dfc4:	0222d874 	movhi	r8,35681
 400dfc8:	42322cc4 	addi	r8,r8,-14157
 400dfcc:	024ff1f4 	movhi	r9,16327
 400dfd0:	4a628a04 	addi	r9,r9,-30168
 400dfd4:	480f883a 	mov	r7,r9
 400dfd8:	400d883a 	mov	r6,r8
 400dfdc:	180b883a 	mov	r5,r3
 400dfe0:	1009883a 	mov	r4,r2
 400dfe4:	40083800 	call	4008380 <__adddf3>
 400dfe8:	b009883a 	mov	r4,r22
 400dfec:	1021883a 	mov	r16,r2
 400dff0:	1823883a 	mov	r17,r3
 400dff4:	4008c300 	call	4008c30 <__floatsidf>
 400dff8:	021427f4 	movhi	r8,20639
 400dffc:	421e7ec4 	addi	r8,r8,31227
 400e000:	024ff4f4 	movhi	r9,16339
 400e004:	4a5104c4 	addi	r9,r9,17427
 400e008:	480f883a 	mov	r7,r9
 400e00c:	400d883a 	mov	r6,r8
 400e010:	180b883a 	mov	r5,r3
 400e014:	1009883a 	mov	r4,r2
 400e018:	40083f40 	call	40083f4 <__muldf3>
 400e01c:	180f883a 	mov	r7,r3
 400e020:	880b883a 	mov	r5,r17
 400e024:	100d883a 	mov	r6,r2
 400e028:	8009883a 	mov	r4,r16
 400e02c:	40083800 	call	4008380 <__adddf3>
 400e030:	1009883a 	mov	r4,r2
 400e034:	180b883a 	mov	r5,r3
 400e038:	1021883a 	mov	r16,r2
 400e03c:	1823883a 	mov	r17,r3
 400e040:	4008d280 	call	4008d28 <__fixdfsi>
 400e044:	000d883a 	mov	r6,zero
 400e048:	000f883a 	mov	r7,zero
 400e04c:	8009883a 	mov	r4,r16
 400e050:	880b883a 	mov	r5,r17
 400e054:	d8800d15 	stw	r2,52(sp)
 400e058:	4008b200 	call	4008b20 <__ltdf2>
 400e05c:	10031716 	blt	r2,zero,400ecbc <_dtoa_r+0xe8c>
 400e060:	d8c00d17 	ldw	r3,52(sp)
 400e064:	00800584 	movi	r2,22
 400e068:	10c1482e 	bgeu	r2,r3,400e58c <_dtoa_r+0x75c>
 400e06c:	01000044 	movi	r4,1
 400e070:	d9000c15 	stw	r4,48(sp)
 400e074:	bd85c83a 	sub	r2,r23,r22
 400e078:	11bfffc4 	addi	r6,r2,-1
 400e07c:	30030b16 	blt	r6,zero,400ecac <_dtoa_r+0xe7c>
 400e080:	d9800a15 	stw	r6,40(sp)
 400e084:	d8001115 	stw	zero,68(sp)
 400e088:	d8c00d17 	ldw	r3,52(sp)
 400e08c:	1802ff16 	blt	r3,zero,400ec8c <_dtoa_r+0xe5c>
 400e090:	d9000a17 	ldw	r4,40(sp)
 400e094:	d8c00915 	stw	r3,36(sp)
 400e098:	d8001015 	stw	zero,64(sp)
 400e09c:	20c9883a 	add	r4,r4,r3
 400e0a0:	d9000a15 	stw	r4,40(sp)
 400e0a4:	d9001717 	ldw	r4,92(sp)
 400e0a8:	00800244 	movi	r2,9
 400e0ac:	11004636 	bltu	r2,r4,400e1c8 <_dtoa_r+0x398>
 400e0b0:	00800144 	movi	r2,5
 400e0b4:	11020416 	blt	r2,r4,400e8c8 <_dtoa_r+0xa98>
 400e0b8:	04400044 	movi	r17,1
 400e0bc:	d8c01717 	ldw	r3,92(sp)
 400e0c0:	00800144 	movi	r2,5
 400e0c4:	10c1ed36 	bltu	r2,r3,400e87c <_dtoa_r+0xa4c>
 400e0c8:	18c5883a 	add	r2,r3,r3
 400e0cc:	1085883a 	add	r2,r2,r2
 400e0d0:	00c10074 	movhi	r3,1025
 400e0d4:	18f83904 	addi	r3,r3,-7964
 400e0d8:	10c5883a 	add	r2,r2,r3
 400e0dc:	11000017 	ldw	r4,0(r2)
 400e0e0:	2000683a 	jmp	r4
 400e0e4:	0400e1d0 	cmplti	r16,zero,903
 400e0e8:	0400e1d0 	cmplti	r16,zero,903
 400e0ec:	0400ebd0 	cmplti	r16,zero,943
 400e0f0:	0400eba8 	cmpgeui	r16,zero,942
 400e0f4:	0400ebec 	andhi	r16,zero,943
 400e0f8:	0400ebf8 	rdprs	r16,zero,943
 400e0fc:	d9002717 	ldw	r4,156(sp)
 400e100:	0089c3c4 	movi	r2,9999
 400e104:	20800015 	stw	r2,0(r4)
 400e108:	a0001026 	beq	r20,zero,400e14c <_dtoa_r+0x31c>
 400e10c:	00c100b4 	movhi	r3,1026
 400e110:	18d23e04 	addi	r3,r3,18680
 400e114:	d9802917 	ldw	r6,164(sp)
 400e118:	303f7926 	beq	r6,zero,400df00 <_dtoa_r+0xd0>
 400e11c:	188000c7 	ldb	r2,3(r3)
 400e120:	190000c4 	addi	r4,r3,3
 400e124:	1000101e 	bne	r2,zero,400e168 <_dtoa_r+0x338>
 400e128:	d8802917 	ldw	r2,164(sp)
 400e12c:	11000015 	stw	r4,0(r2)
 400e130:	003f7306 	br	400df00 <_dtoa_r+0xd0>
 400e134:	00a00034 	movhi	r2,32768
 400e138:	10bfffc4 	addi	r2,r2,-1
 400e13c:	00c00044 	movi	r3,1
 400e140:	88aa703a 	and	r21,r17,r2
 400e144:	90c00015 	stw	r3,0(r18)
 400e148:	003f5806 	br	400deac <_dtoa_r+0x7c>
 400e14c:	00800434 	movhi	r2,16
 400e150:	10bfffc4 	addi	r2,r2,-1
 400e154:	a884703a 	and	r2,r21,r2
 400e158:	103fec1e 	bne	r2,zero,400e10c <_dtoa_r+0x2dc>
 400e15c:	00c100b4 	movhi	r3,1026
 400e160:	18d23b04 	addi	r3,r3,18668
 400e164:	003feb06 	br	400e114 <_dtoa_r+0x2e4>
 400e168:	d8802917 	ldw	r2,164(sp)
 400e16c:	19000204 	addi	r4,r3,8
 400e170:	11000015 	stw	r4,0(r2)
 400e174:	003f6206 	br	400df00 <_dtoa_r+0xd0>
 400e178:	ddc00117 	ldw	r23,4(sp)
 400e17c:	d8800217 	ldw	r2,8(sp)
 400e180:	01000804 	movi	r4,32
 400e184:	b8c10c84 	addi	r3,r23,1074
 400e188:	18a3883a 	add	r17,r3,r2
 400e18c:	2441b80e 	bge	r4,r17,400e870 <_dtoa_r+0xa40>
 400e190:	00c01004 	movi	r3,64
 400e194:	1c47c83a 	sub	r3,r3,r17
 400e198:	88bff804 	addi	r2,r17,-32
 400e19c:	a8c6983a 	sll	r3,r21,r3
 400e1a0:	a084d83a 	srl	r2,r20,r2
 400e1a4:	1888b03a 	or	r4,r3,r2
 400e1a8:	4016d200 	call	4016d20 <__floatunsidf>
 400e1ac:	1011883a 	mov	r8,r2
 400e1b0:	00bf8434 	movhi	r2,65040
 400e1b4:	01000044 	movi	r4,1
 400e1b8:	10d3883a 	add	r9,r2,r3
 400e1bc:	8dbef344 	addi	r22,r17,-1075
 400e1c0:	d9000815 	stw	r4,32(sp)
 400e1c4:	003f6f06 	br	400df84 <_dtoa_r+0x154>
 400e1c8:	d8001715 	stw	zero,92(sp)
 400e1cc:	04400044 	movi	r17,1
 400e1d0:	00bfffc4 	movi	r2,-1
 400e1d4:	00c00044 	movi	r3,1
 400e1d8:	d8800e15 	stw	r2,56(sp)
 400e1dc:	d8002615 	stw	zero,152(sp)
 400e1e0:	d8800f15 	stw	r2,60(sp)
 400e1e4:	d8c00b15 	stw	r3,44(sp)
 400e1e8:	1021883a 	mov	r16,r2
 400e1ec:	d8801617 	ldw	r2,88(sp)
 400e1f0:	10001115 	stw	zero,68(r2)
 400e1f4:	d8801617 	ldw	r2,88(sp)
 400e1f8:	11401117 	ldw	r5,68(r2)
 400e1fc:	1009883a 	mov	r4,r2
 400e200:	40111b00 	call	40111b0 <_Balloc>
 400e204:	d8c01617 	ldw	r3,88(sp)
 400e208:	d8800515 	stw	r2,20(sp)
 400e20c:	18801015 	stw	r2,64(r3)
 400e210:	00800384 	movi	r2,14
 400e214:	14006836 	bltu	r2,r16,400e3b8 <_dtoa_r+0x588>
 400e218:	8805003a 	cmpeq	r2,r17,zero
 400e21c:	1000661e 	bne	r2,zero,400e3b8 <_dtoa_r+0x588>
 400e220:	d9000d17 	ldw	r4,52(sp)
 400e224:	0102300e 	bge	zero,r4,400eae8 <_dtoa_r+0xcb8>
 400e228:	208003cc 	andi	r2,r4,15
 400e22c:	100490fa 	slli	r2,r2,3
 400e230:	2025d13a 	srai	r18,r4,4
 400e234:	00c100b4 	movhi	r3,1026
 400e238:	18d24f04 	addi	r3,r3,18748
 400e23c:	10c5883a 	add	r2,r2,r3
 400e240:	90c0040c 	andi	r3,r18,16
 400e244:	14000017 	ldw	r16,0(r2)
 400e248:	14400117 	ldw	r17,4(r2)
 400e24c:	18036a1e 	bne	r3,zero,400eff8 <_dtoa_r+0x11c8>
 400e250:	05800084 	movi	r22,2
 400e254:	90001026 	beq	r18,zero,400e298 <_dtoa_r+0x468>
 400e258:	04c100b4 	movhi	r19,1026
 400e25c:	9cd28104 	addi	r19,r19,18948
 400e260:	9080004c 	andi	r2,r18,1
 400e264:	1005003a 	cmpeq	r2,r2,zero
 400e268:	1000081e 	bne	r2,zero,400e28c <_dtoa_r+0x45c>
 400e26c:	99800017 	ldw	r6,0(r19)
 400e270:	99c00117 	ldw	r7,4(r19)
 400e274:	880b883a 	mov	r5,r17
 400e278:	8009883a 	mov	r4,r16
 400e27c:	40083f40 	call	40083f4 <__muldf3>
 400e280:	1021883a 	mov	r16,r2
 400e284:	b5800044 	addi	r22,r22,1
 400e288:	1823883a 	mov	r17,r3
 400e28c:	9025d07a 	srai	r18,r18,1
 400e290:	9cc00204 	addi	r19,r19,8
 400e294:	903ff21e 	bne	r18,zero,400e260 <_dtoa_r+0x430>
 400e298:	a80b883a 	mov	r5,r21
 400e29c:	a009883a 	mov	r4,r20
 400e2a0:	880f883a 	mov	r7,r17
 400e2a4:	800d883a 	mov	r6,r16
 400e2a8:	40087b80 	call	40087b8 <__divdf3>
 400e2ac:	1029883a 	mov	r20,r2
 400e2b0:	182b883a 	mov	r21,r3
 400e2b4:	d8c00c17 	ldw	r3,48(sp)
 400e2b8:	1805003a 	cmpeq	r2,r3,zero
 400e2bc:	1000081e 	bne	r2,zero,400e2e0 <_dtoa_r+0x4b0>
 400e2c0:	0005883a 	mov	r2,zero
 400e2c4:	00cffc34 	movhi	r3,16368
 400e2c8:	180f883a 	mov	r7,r3
 400e2cc:	a009883a 	mov	r4,r20
 400e2d0:	a80b883a 	mov	r5,r21
 400e2d4:	100d883a 	mov	r6,r2
 400e2d8:	4008b200 	call	4008b20 <__ltdf2>
 400e2dc:	1003fe16 	blt	r2,zero,400f2d8 <_dtoa_r+0x14a8>
 400e2e0:	b009883a 	mov	r4,r22
 400e2e4:	4008c300 	call	4008c30 <__floatsidf>
 400e2e8:	180b883a 	mov	r5,r3
 400e2ec:	1009883a 	mov	r4,r2
 400e2f0:	a00d883a 	mov	r6,r20
 400e2f4:	a80f883a 	mov	r7,r21
 400e2f8:	40083f40 	call	40083f4 <__muldf3>
 400e2fc:	0011883a 	mov	r8,zero
 400e300:	02500734 	movhi	r9,16412
 400e304:	1009883a 	mov	r4,r2
 400e308:	180b883a 	mov	r5,r3
 400e30c:	480f883a 	mov	r7,r9
 400e310:	400d883a 	mov	r6,r8
 400e314:	40083800 	call	4008380 <__adddf3>
 400e318:	d9000f17 	ldw	r4,60(sp)
 400e31c:	102d883a 	mov	r22,r2
 400e320:	00bf3034 	movhi	r2,64704
 400e324:	18b9883a 	add	fp,r3,r2
 400e328:	e02f883a 	mov	r23,fp
 400e32c:	20028f1e 	bne	r4,zero,400ed6c <_dtoa_r+0xf3c>
 400e330:	0005883a 	mov	r2,zero
 400e334:	00d00534 	movhi	r3,16404
 400e338:	a009883a 	mov	r4,r20
 400e33c:	a80b883a 	mov	r5,r21
 400e340:	180f883a 	mov	r7,r3
 400e344:	100d883a 	mov	r6,r2
 400e348:	40083000 	call	4008300 <__subdf3>
 400e34c:	1009883a 	mov	r4,r2
 400e350:	e00f883a 	mov	r7,fp
 400e354:	180b883a 	mov	r5,r3
 400e358:	b00d883a 	mov	r6,r22
 400e35c:	1025883a 	mov	r18,r2
 400e360:	1827883a 	mov	r19,r3
 400e364:	4008a100 	call	4008a10 <__gtdf2>
 400e368:	00834f16 	blt	zero,r2,400f0a8 <_dtoa_r+0x1278>
 400e36c:	e0e0003c 	xorhi	r3,fp,32768
 400e370:	9009883a 	mov	r4,r18
 400e374:	980b883a 	mov	r5,r19
 400e378:	180f883a 	mov	r7,r3
 400e37c:	b00d883a 	mov	r6,r22
 400e380:	4008b200 	call	4008b20 <__ltdf2>
 400e384:	1000080e 	bge	r2,zero,400e3a8 <_dtoa_r+0x578>
 400e388:	0027883a 	mov	r19,zero
 400e38c:	0025883a 	mov	r18,zero
 400e390:	d8802617 	ldw	r2,152(sp)
 400e394:	df000517 	ldw	fp,20(sp)
 400e398:	d8000615 	stw	zero,24(sp)
 400e39c:	0084303a 	nor	r2,zero,r2
 400e3a0:	d8800d15 	stw	r2,52(sp)
 400e3a4:	00019b06 	br	400ea14 <_dtoa_r+0xbe4>
 400e3a8:	d9801217 	ldw	r6,72(sp)
 400e3ac:	d8801317 	ldw	r2,76(sp)
 400e3b0:	3029883a 	mov	r20,r6
 400e3b4:	102b883a 	mov	r21,r2
 400e3b8:	d8c00217 	ldw	r3,8(sp)
 400e3bc:	18008516 	blt	r3,zero,400e5d4 <_dtoa_r+0x7a4>
 400e3c0:	d9000d17 	ldw	r4,52(sp)
 400e3c4:	00800384 	movi	r2,14
 400e3c8:	11008216 	blt	r2,r4,400e5d4 <_dtoa_r+0x7a4>
 400e3cc:	200490fa 	slli	r2,r4,3
 400e3d0:	d9802617 	ldw	r6,152(sp)
 400e3d4:	00c100b4 	movhi	r3,1026
 400e3d8:	18d24f04 	addi	r3,r3,18748
 400e3dc:	10c5883a 	add	r2,r2,r3
 400e3e0:	14800017 	ldw	r18,0(r2)
 400e3e4:	14c00117 	ldw	r19,4(r2)
 400e3e8:	30031e16 	blt	r6,zero,400f064 <_dtoa_r+0x1234>
 400e3ec:	d9000517 	ldw	r4,20(sp)
 400e3f0:	d8c00f17 	ldw	r3,60(sp)
 400e3f4:	a823883a 	mov	r17,r21
 400e3f8:	a021883a 	mov	r16,r20
 400e3fc:	192b883a 	add	r21,r3,r4
 400e400:	2039883a 	mov	fp,r4
 400e404:	00000f06 	br	400e444 <_dtoa_r+0x614>
 400e408:	0005883a 	mov	r2,zero
 400e40c:	00d00934 	movhi	r3,16420
 400e410:	5009883a 	mov	r4,r10
 400e414:	580b883a 	mov	r5,r11
 400e418:	180f883a 	mov	r7,r3
 400e41c:	100d883a 	mov	r6,r2
 400e420:	40083f40 	call	40083f4 <__muldf3>
 400e424:	180b883a 	mov	r5,r3
 400e428:	000d883a 	mov	r6,zero
 400e42c:	000f883a 	mov	r7,zero
 400e430:	1009883a 	mov	r4,r2
 400e434:	1021883a 	mov	r16,r2
 400e438:	1823883a 	mov	r17,r3
 400e43c:	4016c980 	call	4016c98 <__nedf2>
 400e440:	10004526 	beq	r2,zero,400e558 <_dtoa_r+0x728>
 400e444:	900d883a 	mov	r6,r18
 400e448:	980f883a 	mov	r7,r19
 400e44c:	8009883a 	mov	r4,r16
 400e450:	880b883a 	mov	r5,r17
 400e454:	40087b80 	call	40087b8 <__divdf3>
 400e458:	180b883a 	mov	r5,r3
 400e45c:	1009883a 	mov	r4,r2
 400e460:	4008d280 	call	4008d28 <__fixdfsi>
 400e464:	1009883a 	mov	r4,r2
 400e468:	1029883a 	mov	r20,r2
 400e46c:	4008c300 	call	4008c30 <__floatsidf>
 400e470:	180f883a 	mov	r7,r3
 400e474:	9009883a 	mov	r4,r18
 400e478:	980b883a 	mov	r5,r19
 400e47c:	100d883a 	mov	r6,r2
 400e480:	40083f40 	call	40083f4 <__muldf3>
 400e484:	180f883a 	mov	r7,r3
 400e488:	880b883a 	mov	r5,r17
 400e48c:	8009883a 	mov	r4,r16
 400e490:	100d883a 	mov	r6,r2
 400e494:	40083000 	call	4008300 <__subdf3>
 400e498:	1015883a 	mov	r10,r2
 400e49c:	a0800c04 	addi	r2,r20,48
 400e4a0:	e0800005 	stb	r2,0(fp)
 400e4a4:	e7000044 	addi	fp,fp,1
 400e4a8:	1817883a 	mov	r11,r3
 400e4ac:	e57fd61e 	bne	fp,r21,400e408 <_dtoa_r+0x5d8>
 400e4b0:	500d883a 	mov	r6,r10
 400e4b4:	180f883a 	mov	r7,r3
 400e4b8:	5009883a 	mov	r4,r10
 400e4bc:	180b883a 	mov	r5,r3
 400e4c0:	40083800 	call	4008380 <__adddf3>
 400e4c4:	100d883a 	mov	r6,r2
 400e4c8:	9009883a 	mov	r4,r18
 400e4cc:	980b883a 	mov	r5,r19
 400e4d0:	180f883a 	mov	r7,r3
 400e4d4:	1021883a 	mov	r16,r2
 400e4d8:	1823883a 	mov	r17,r3
 400e4dc:	4008b200 	call	4008b20 <__ltdf2>
 400e4e0:	10000816 	blt	r2,zero,400e504 <_dtoa_r+0x6d4>
 400e4e4:	980b883a 	mov	r5,r19
 400e4e8:	800d883a 	mov	r6,r16
 400e4ec:	880f883a 	mov	r7,r17
 400e4f0:	9009883a 	mov	r4,r18
 400e4f4:	4016c100 	call	4016c10 <__eqdf2>
 400e4f8:	1000171e 	bne	r2,zero,400e558 <_dtoa_r+0x728>
 400e4fc:	a080004c 	andi	r2,r20,1
 400e500:	10001526 	beq	r2,zero,400e558 <_dtoa_r+0x728>
 400e504:	d8800d17 	ldw	r2,52(sp)
 400e508:	d8800415 	stw	r2,16(sp)
 400e50c:	e009883a 	mov	r4,fp
 400e510:	213fffc4 	addi	r4,r4,-1
 400e514:	20c00007 	ldb	r3,0(r4)
 400e518:	00800e44 	movi	r2,57
 400e51c:	1880081e 	bne	r3,r2,400e540 <_dtoa_r+0x710>
 400e520:	d8800517 	ldw	r2,20(sp)
 400e524:	113ffa1e 	bne	r2,r4,400e510 <_dtoa_r+0x6e0>
 400e528:	d8c00417 	ldw	r3,16(sp)
 400e52c:	d9800517 	ldw	r6,20(sp)
 400e530:	00800c04 	movi	r2,48
 400e534:	18c00044 	addi	r3,r3,1
 400e538:	d8c00415 	stw	r3,16(sp)
 400e53c:	30800005 	stb	r2,0(r6)
 400e540:	20800003 	ldbu	r2,0(r4)
 400e544:	d8c00417 	ldw	r3,16(sp)
 400e548:	27000044 	addi	fp,r4,1
 400e54c:	10800044 	addi	r2,r2,1
 400e550:	d8c00d15 	stw	r3,52(sp)
 400e554:	20800005 	stb	r2,0(r4)
 400e558:	d9001617 	ldw	r4,88(sp)
 400e55c:	d9400717 	ldw	r5,28(sp)
 400e560:	4010c300 	call	4010c30 <_Bfree>
 400e564:	e0000005 	stb	zero,0(fp)
 400e568:	d9800d17 	ldw	r6,52(sp)
 400e56c:	d8c02717 	ldw	r3,156(sp)
 400e570:	d9002917 	ldw	r4,164(sp)
 400e574:	30800044 	addi	r2,r6,1
 400e578:	18800015 	stw	r2,0(r3)
 400e57c:	20029c26 	beq	r4,zero,400eff0 <_dtoa_r+0x11c0>
 400e580:	d8c00517 	ldw	r3,20(sp)
 400e584:	27000015 	stw	fp,0(r4)
 400e588:	003e5d06 	br	400df00 <_dtoa_r+0xd0>
 400e58c:	d9800d17 	ldw	r6,52(sp)
 400e590:	00c100b4 	movhi	r3,1026
 400e594:	18d24f04 	addi	r3,r3,18748
 400e598:	d9001217 	ldw	r4,72(sp)
 400e59c:	300490fa 	slli	r2,r6,3
 400e5a0:	d9401317 	ldw	r5,76(sp)
 400e5a4:	10c5883a 	add	r2,r2,r3
 400e5a8:	12000017 	ldw	r8,0(r2)
 400e5ac:	12400117 	ldw	r9,4(r2)
 400e5b0:	400d883a 	mov	r6,r8
 400e5b4:	480f883a 	mov	r7,r9
 400e5b8:	4008b200 	call	4008b20 <__ltdf2>
 400e5bc:	1000030e 	bge	r2,zero,400e5cc <_dtoa_r+0x79c>
 400e5c0:	d8800d17 	ldw	r2,52(sp)
 400e5c4:	10bfffc4 	addi	r2,r2,-1
 400e5c8:	d8800d15 	stw	r2,52(sp)
 400e5cc:	d8000c15 	stw	zero,48(sp)
 400e5d0:	003ea806 	br	400e074 <_dtoa_r+0x244>
 400e5d4:	d9000b17 	ldw	r4,44(sp)
 400e5d8:	202cc03a 	cmpne	r22,r4,zero
 400e5dc:	b000c71e 	bne	r22,zero,400e8fc <_dtoa_r+0xacc>
 400e5e0:	dc001117 	ldw	r16,68(sp)
 400e5e4:	dc801017 	ldw	r18,64(sp)
 400e5e8:	0027883a 	mov	r19,zero
 400e5ec:	04000b0e 	bge	zero,r16,400e61c <_dtoa_r+0x7ec>
 400e5f0:	d8c00a17 	ldw	r3,40(sp)
 400e5f4:	00c0090e 	bge	zero,r3,400e61c <_dtoa_r+0x7ec>
 400e5f8:	8005883a 	mov	r2,r16
 400e5fc:	1c011316 	blt	r3,r16,400ea4c <_dtoa_r+0xc1c>
 400e600:	d9000a17 	ldw	r4,40(sp)
 400e604:	d9801117 	ldw	r6,68(sp)
 400e608:	80a1c83a 	sub	r16,r16,r2
 400e60c:	2089c83a 	sub	r4,r4,r2
 400e610:	308dc83a 	sub	r6,r6,r2
 400e614:	d9000a15 	stw	r4,40(sp)
 400e618:	d9801115 	stw	r6,68(sp)
 400e61c:	d8801017 	ldw	r2,64(sp)
 400e620:	0080150e 	bge	zero,r2,400e678 <_dtoa_r+0x848>
 400e624:	d8c00b17 	ldw	r3,44(sp)
 400e628:	1805003a 	cmpeq	r2,r3,zero
 400e62c:	1001c91e 	bne	r2,zero,400ed54 <_dtoa_r+0xf24>
 400e630:	04800e0e 	bge	zero,r18,400e66c <_dtoa_r+0x83c>
 400e634:	d9001617 	ldw	r4,88(sp)
 400e638:	980b883a 	mov	r5,r19
 400e63c:	900d883a 	mov	r6,r18
 400e640:	4011a7c0 	call	4011a7c <__pow5mult>
 400e644:	d9001617 	ldw	r4,88(sp)
 400e648:	d9800717 	ldw	r6,28(sp)
 400e64c:	100b883a 	mov	r5,r2
 400e650:	1027883a 	mov	r19,r2
 400e654:	40116c00 	call	40116c0 <__multiply>
 400e658:	d9001617 	ldw	r4,88(sp)
 400e65c:	d9400717 	ldw	r5,28(sp)
 400e660:	1023883a 	mov	r17,r2
 400e664:	4010c300 	call	4010c30 <_Bfree>
 400e668:	dc400715 	stw	r17,28(sp)
 400e66c:	d9001017 	ldw	r4,64(sp)
 400e670:	248dc83a 	sub	r6,r4,r18
 400e674:	30010e1e 	bne	r6,zero,400eab0 <_dtoa_r+0xc80>
 400e678:	d9001617 	ldw	r4,88(sp)
 400e67c:	04400044 	movi	r17,1
 400e680:	880b883a 	mov	r5,r17
 400e684:	40119140 	call	4011914 <__i2b>
 400e688:	d9800917 	ldw	r6,36(sp)
 400e68c:	1025883a 	mov	r18,r2
 400e690:	0180040e 	bge	zero,r6,400e6a4 <_dtoa_r+0x874>
 400e694:	d9001617 	ldw	r4,88(sp)
 400e698:	100b883a 	mov	r5,r2
 400e69c:	4011a7c0 	call	4011a7c <__pow5mult>
 400e6a0:	1025883a 	mov	r18,r2
 400e6a4:	d8801717 	ldw	r2,92(sp)
 400e6a8:	8880f30e 	bge	r17,r2,400ea78 <_dtoa_r+0xc48>
 400e6ac:	0023883a 	mov	r17,zero
 400e6b0:	d9800917 	ldw	r6,36(sp)
 400e6b4:	30019e1e 	bne	r6,zero,400ed30 <_dtoa_r+0xf00>
 400e6b8:	00c00044 	movi	r3,1
 400e6bc:	d9000a17 	ldw	r4,40(sp)
 400e6c0:	20c5883a 	add	r2,r4,r3
 400e6c4:	10c007cc 	andi	r3,r2,31
 400e6c8:	1800841e 	bne	r3,zero,400e8dc <_dtoa_r+0xaac>
 400e6cc:	00800704 	movi	r2,28
 400e6d0:	d9000a17 	ldw	r4,40(sp)
 400e6d4:	d9801117 	ldw	r6,68(sp)
 400e6d8:	80a1883a 	add	r16,r16,r2
 400e6dc:	2089883a 	add	r4,r4,r2
 400e6e0:	308d883a 	add	r6,r6,r2
 400e6e4:	d9000a15 	stw	r4,40(sp)
 400e6e8:	d9801115 	stw	r6,68(sp)
 400e6ec:	d8801117 	ldw	r2,68(sp)
 400e6f0:	0080050e 	bge	zero,r2,400e708 <_dtoa_r+0x8d8>
 400e6f4:	d9400717 	ldw	r5,28(sp)
 400e6f8:	d9001617 	ldw	r4,88(sp)
 400e6fc:	100d883a 	mov	r6,r2
 400e700:	40115740 	call	4011574 <__lshift>
 400e704:	d8800715 	stw	r2,28(sp)
 400e708:	d8c00a17 	ldw	r3,40(sp)
 400e70c:	00c0050e 	bge	zero,r3,400e724 <_dtoa_r+0x8f4>
 400e710:	d9001617 	ldw	r4,88(sp)
 400e714:	900b883a 	mov	r5,r18
 400e718:	180d883a 	mov	r6,r3
 400e71c:	40115740 	call	4011574 <__lshift>
 400e720:	1025883a 	mov	r18,r2
 400e724:	d9000c17 	ldw	r4,48(sp)
 400e728:	2005003a 	cmpeq	r2,r4,zero
 400e72c:	10016f26 	beq	r2,zero,400ecec <_dtoa_r+0xebc>
 400e730:	d9000f17 	ldw	r4,60(sp)
 400e734:	0102170e 	bge	zero,r4,400ef94 <_dtoa_r+0x1164>
 400e738:	d9800b17 	ldw	r6,44(sp)
 400e73c:	3005003a 	cmpeq	r2,r6,zero
 400e740:	1000881e 	bne	r2,zero,400e964 <_dtoa_r+0xb34>
 400e744:	0400050e 	bge	zero,r16,400e75c <_dtoa_r+0x92c>
 400e748:	d9001617 	ldw	r4,88(sp)
 400e74c:	980b883a 	mov	r5,r19
 400e750:	800d883a 	mov	r6,r16
 400e754:	40115740 	call	4011574 <__lshift>
 400e758:	1027883a 	mov	r19,r2
 400e75c:	8804c03a 	cmpne	r2,r17,zero
 400e760:	1002541e 	bne	r2,zero,400f0b4 <_dtoa_r+0x1284>
 400e764:	980b883a 	mov	r5,r19
 400e768:	dd800517 	ldw	r22,20(sp)
 400e76c:	dcc00615 	stw	r19,24(sp)
 400e770:	a700004c 	andi	fp,r20,1
 400e774:	2827883a 	mov	r19,r5
 400e778:	d9000717 	ldw	r4,28(sp)
 400e77c:	900b883a 	mov	r5,r18
 400e780:	400dbec0 	call	400dbec <quorem>
 400e784:	d9000717 	ldw	r4,28(sp)
 400e788:	d9400617 	ldw	r5,24(sp)
 400e78c:	1023883a 	mov	r17,r2
 400e790:	8dc00c04 	addi	r23,r17,48
 400e794:	4010d8c0 	call	4010d8c <__mcmp>
 400e798:	d9001617 	ldw	r4,88(sp)
 400e79c:	900b883a 	mov	r5,r18
 400e7a0:	980d883a 	mov	r6,r19
 400e7a4:	1029883a 	mov	r20,r2
 400e7a8:	40113e80 	call	40113e8 <__mdiff>
 400e7ac:	102b883a 	mov	r21,r2
 400e7b0:	10800317 	ldw	r2,12(r2)
 400e7b4:	1001281e 	bne	r2,zero,400ec58 <_dtoa_r+0xe28>
 400e7b8:	d9000717 	ldw	r4,28(sp)
 400e7bc:	a80b883a 	mov	r5,r21
 400e7c0:	4010d8c0 	call	4010d8c <__mcmp>
 400e7c4:	d9001617 	ldw	r4,88(sp)
 400e7c8:	1021883a 	mov	r16,r2
 400e7cc:	a80b883a 	mov	r5,r21
 400e7d0:	4010c300 	call	4010c30 <_Bfree>
 400e7d4:	8000041e 	bne	r16,zero,400e7e8 <_dtoa_r+0x9b8>
 400e7d8:	d8801717 	ldw	r2,92(sp)
 400e7dc:	1000021e 	bne	r2,zero,400e7e8 <_dtoa_r+0x9b8>
 400e7e0:	e004c03a 	cmpne	r2,fp,zero
 400e7e4:	10011726 	beq	r2,zero,400ec44 <_dtoa_r+0xe14>
 400e7e8:	a0010616 	blt	r20,zero,400ec04 <_dtoa_r+0xdd4>
 400e7ec:	a000041e 	bne	r20,zero,400e800 <_dtoa_r+0x9d0>
 400e7f0:	d8c01717 	ldw	r3,92(sp)
 400e7f4:	1800021e 	bne	r3,zero,400e800 <_dtoa_r+0x9d0>
 400e7f8:	e004c03a 	cmpne	r2,fp,zero
 400e7fc:	10010126 	beq	r2,zero,400ec04 <_dtoa_r+0xdd4>
 400e800:	04023d16 	blt	zero,r16,400f0f8 <_dtoa_r+0x12c8>
 400e804:	b5c00005 	stb	r23,0(r22)
 400e808:	d9800517 	ldw	r6,20(sp)
 400e80c:	d9000f17 	ldw	r4,60(sp)
 400e810:	b5800044 	addi	r22,r22,1
 400e814:	3105883a 	add	r2,r6,r4
 400e818:	b0806526 	beq	r22,r2,400e9b0 <_dtoa_r+0xb80>
 400e81c:	d9400717 	ldw	r5,28(sp)
 400e820:	d9001617 	ldw	r4,88(sp)
 400e824:	01800284 	movi	r6,10
 400e828:	000f883a 	mov	r7,zero
 400e82c:	40119500 	call	4011950 <__multadd>
 400e830:	d8800715 	stw	r2,28(sp)
 400e834:	d8800617 	ldw	r2,24(sp)
 400e838:	14c10c26 	beq	r2,r19,400ec6c <_dtoa_r+0xe3c>
 400e83c:	d9400617 	ldw	r5,24(sp)
 400e840:	d9001617 	ldw	r4,88(sp)
 400e844:	01800284 	movi	r6,10
 400e848:	000f883a 	mov	r7,zero
 400e84c:	40119500 	call	4011950 <__multadd>
 400e850:	d9001617 	ldw	r4,88(sp)
 400e854:	980b883a 	mov	r5,r19
 400e858:	01800284 	movi	r6,10
 400e85c:	000f883a 	mov	r7,zero
 400e860:	d8800615 	stw	r2,24(sp)
 400e864:	40119500 	call	4011950 <__multadd>
 400e868:	1027883a 	mov	r19,r2
 400e86c:	003fc206 	br	400e778 <_dtoa_r+0x948>
 400e870:	2445c83a 	sub	r2,r4,r17
 400e874:	a088983a 	sll	r4,r20,r2
 400e878:	003e4b06 	br	400e1a8 <_dtoa_r+0x378>
 400e87c:	01bfffc4 	movi	r6,-1
 400e880:	00800044 	movi	r2,1
 400e884:	d9800e15 	stw	r6,56(sp)
 400e888:	d9800f15 	stw	r6,60(sp)
 400e88c:	d8800b15 	stw	r2,44(sp)
 400e890:	d8c01617 	ldw	r3,88(sp)
 400e894:	008005c4 	movi	r2,23
 400e898:	18001115 	stw	zero,68(r3)
 400e89c:	1580082e 	bgeu	r2,r22,400e8c0 <_dtoa_r+0xa90>
 400e8a0:	00c00104 	movi	r3,4
 400e8a4:	0009883a 	mov	r4,zero
 400e8a8:	18c7883a 	add	r3,r3,r3
 400e8ac:	18800504 	addi	r2,r3,20
 400e8b0:	21000044 	addi	r4,r4,1
 400e8b4:	b0bffc2e 	bgeu	r22,r2,400e8a8 <_dtoa_r+0xa78>
 400e8b8:	d9801617 	ldw	r6,88(sp)
 400e8bc:	31001115 	stw	r4,68(r6)
 400e8c0:	dc000f17 	ldw	r16,60(sp)
 400e8c4:	003e4b06 	br	400e1f4 <_dtoa_r+0x3c4>
 400e8c8:	d9801717 	ldw	r6,92(sp)
 400e8cc:	0023883a 	mov	r17,zero
 400e8d0:	31bfff04 	addi	r6,r6,-4
 400e8d4:	d9801715 	stw	r6,92(sp)
 400e8d8:	003df806 	br	400e0bc <_dtoa_r+0x28c>
 400e8dc:	00800804 	movi	r2,32
 400e8e0:	10c9c83a 	sub	r4,r2,r3
 400e8e4:	00c00104 	movi	r3,4
 400e8e8:	19005a16 	blt	r3,r4,400ea54 <_dtoa_r+0xc24>
 400e8ec:	008000c4 	movi	r2,3
 400e8f0:	113f7e16 	blt	r2,r4,400e6ec <_dtoa_r+0x8bc>
 400e8f4:	20800704 	addi	r2,r4,28
 400e8f8:	003f7506 	br	400e6d0 <_dtoa_r+0x8a0>
 400e8fc:	d9801717 	ldw	r6,92(sp)
 400e900:	00800044 	movi	r2,1
 400e904:	1180a10e 	bge	r2,r6,400eb8c <_dtoa_r+0xd5c>
 400e908:	d9800f17 	ldw	r6,60(sp)
 400e90c:	d8c01017 	ldw	r3,64(sp)
 400e910:	30bfffc4 	addi	r2,r6,-1
 400e914:	1881c616 	blt	r3,r2,400f030 <_dtoa_r+0x1200>
 400e918:	18a5c83a 	sub	r18,r3,r2
 400e91c:	d8800f17 	ldw	r2,60(sp)
 400e920:	10026216 	blt	r2,zero,400f2ac <_dtoa_r+0x147c>
 400e924:	dc001117 	ldw	r16,68(sp)
 400e928:	1007883a 	mov	r3,r2
 400e92c:	d9800a17 	ldw	r6,40(sp)
 400e930:	d8801117 	ldw	r2,68(sp)
 400e934:	d9001617 	ldw	r4,88(sp)
 400e938:	30cd883a 	add	r6,r6,r3
 400e93c:	10c5883a 	add	r2,r2,r3
 400e940:	01400044 	movi	r5,1
 400e944:	d9800a15 	stw	r6,40(sp)
 400e948:	d8801115 	stw	r2,68(sp)
 400e94c:	40119140 	call	4011914 <__i2b>
 400e950:	1027883a 	mov	r19,r2
 400e954:	003f2506 	br	400e5ec <_dtoa_r+0x7bc>
 400e958:	00c100b4 	movhi	r3,1026
 400e95c:	18d18704 	addi	r3,r3,17948
 400e960:	003d6706 	br	400df00 <_dtoa_r+0xd0>
 400e964:	dd800517 	ldw	r22,20(sp)
 400e968:	04000044 	movi	r16,1
 400e96c:	00000706 	br	400e98c <_dtoa_r+0xb5c>
 400e970:	d9400717 	ldw	r5,28(sp)
 400e974:	d9001617 	ldw	r4,88(sp)
 400e978:	01800284 	movi	r6,10
 400e97c:	000f883a 	mov	r7,zero
 400e980:	40119500 	call	4011950 <__multadd>
 400e984:	d8800715 	stw	r2,28(sp)
 400e988:	84000044 	addi	r16,r16,1
 400e98c:	d9000717 	ldw	r4,28(sp)
 400e990:	900b883a 	mov	r5,r18
 400e994:	400dbec0 	call	400dbec <quorem>
 400e998:	15c00c04 	addi	r23,r2,48
 400e99c:	b5c00005 	stb	r23,0(r22)
 400e9a0:	d8c00f17 	ldw	r3,60(sp)
 400e9a4:	b5800044 	addi	r22,r22,1
 400e9a8:	80fff116 	blt	r16,r3,400e970 <_dtoa_r+0xb40>
 400e9ac:	d8000615 	stw	zero,24(sp)
 400e9b0:	d9400717 	ldw	r5,28(sp)
 400e9b4:	d9001617 	ldw	r4,88(sp)
 400e9b8:	01800044 	movi	r6,1
 400e9bc:	40115740 	call	4011574 <__lshift>
 400e9c0:	1009883a 	mov	r4,r2
 400e9c4:	900b883a 	mov	r5,r18
 400e9c8:	d8800715 	stw	r2,28(sp)
 400e9cc:	4010d8c0 	call	4010d8c <__mcmp>
 400e9d0:	00803c0e 	bge	zero,r2,400eac4 <_dtoa_r+0xc94>
 400e9d4:	b009883a 	mov	r4,r22
 400e9d8:	213fffc4 	addi	r4,r4,-1
 400e9dc:	21400003 	ldbu	r5,0(r4)
 400e9e0:	00800e44 	movi	r2,57
 400e9e4:	28c03fcc 	andi	r3,r5,255
 400e9e8:	18c0201c 	xori	r3,r3,128
 400e9ec:	18ffe004 	addi	r3,r3,-128
 400e9f0:	1881981e 	bne	r3,r2,400f054 <_dtoa_r+0x1224>
 400e9f4:	d9800517 	ldw	r6,20(sp)
 400e9f8:	21bff71e 	bne	r4,r6,400e9d8 <_dtoa_r+0xba8>
 400e9fc:	d8800d17 	ldw	r2,52(sp)
 400ea00:	37000044 	addi	fp,r6,1
 400ea04:	10800044 	addi	r2,r2,1
 400ea08:	d8800d15 	stw	r2,52(sp)
 400ea0c:	00800c44 	movi	r2,49
 400ea10:	30800005 	stb	r2,0(r6)
 400ea14:	d9001617 	ldw	r4,88(sp)
 400ea18:	900b883a 	mov	r5,r18
 400ea1c:	4010c300 	call	4010c30 <_Bfree>
 400ea20:	983ecd26 	beq	r19,zero,400e558 <_dtoa_r+0x728>
 400ea24:	d8c00617 	ldw	r3,24(sp)
 400ea28:	18000426 	beq	r3,zero,400ea3c <_dtoa_r+0xc0c>
 400ea2c:	1cc00326 	beq	r3,r19,400ea3c <_dtoa_r+0xc0c>
 400ea30:	d9001617 	ldw	r4,88(sp)
 400ea34:	180b883a 	mov	r5,r3
 400ea38:	4010c300 	call	4010c30 <_Bfree>
 400ea3c:	d9001617 	ldw	r4,88(sp)
 400ea40:	980b883a 	mov	r5,r19
 400ea44:	4010c300 	call	4010c30 <_Bfree>
 400ea48:	003ec306 	br	400e558 <_dtoa_r+0x728>
 400ea4c:	1805883a 	mov	r2,r3
 400ea50:	003eeb06 	br	400e600 <_dtoa_r+0x7d0>
 400ea54:	d9800a17 	ldw	r6,40(sp)
 400ea58:	d8c01117 	ldw	r3,68(sp)
 400ea5c:	20bfff04 	addi	r2,r4,-4
 400ea60:	308d883a 	add	r6,r6,r2
 400ea64:	1887883a 	add	r3,r3,r2
 400ea68:	80a1883a 	add	r16,r16,r2
 400ea6c:	d9800a15 	stw	r6,40(sp)
 400ea70:	d8c01115 	stw	r3,68(sp)
 400ea74:	003f1d06 	br	400e6ec <_dtoa_r+0x8bc>
 400ea78:	a03f0c1e 	bne	r20,zero,400e6ac <_dtoa_r+0x87c>
 400ea7c:	00800434 	movhi	r2,16
 400ea80:	10bfffc4 	addi	r2,r2,-1
 400ea84:	a884703a 	and	r2,r21,r2
 400ea88:	103f081e 	bne	r2,zero,400e6ac <_dtoa_r+0x87c>
 400ea8c:	a89ffc2c 	andhi	r2,r21,32752
 400ea90:	103f0626 	beq	r2,zero,400e6ac <_dtoa_r+0x87c>
 400ea94:	d8c01117 	ldw	r3,68(sp)
 400ea98:	d9000a17 	ldw	r4,40(sp)
 400ea9c:	18c00044 	addi	r3,r3,1
 400eaa0:	21000044 	addi	r4,r4,1
 400eaa4:	d8c01115 	stw	r3,68(sp)
 400eaa8:	d9000a15 	stw	r4,40(sp)
 400eaac:	003f0006 	br	400e6b0 <_dtoa_r+0x880>
 400eab0:	d9400717 	ldw	r5,28(sp)
 400eab4:	d9001617 	ldw	r4,88(sp)
 400eab8:	4011a7c0 	call	4011a7c <__pow5mult>
 400eabc:	d8800715 	stw	r2,28(sp)
 400eac0:	003eed06 	br	400e678 <_dtoa_r+0x848>
 400eac4:	1000021e 	bne	r2,zero,400ead0 <_dtoa_r+0xca0>
 400eac8:	b880004c 	andi	r2,r23,1
 400eacc:	103fc11e 	bne	r2,zero,400e9d4 <_dtoa_r+0xba4>
 400ead0:	b5bfffc4 	addi	r22,r22,-1
 400ead4:	b0c00007 	ldb	r3,0(r22)
 400ead8:	00800c04 	movi	r2,48
 400eadc:	18bffc26 	beq	r3,r2,400ead0 <_dtoa_r+0xca0>
 400eae0:	b7000044 	addi	fp,r22,1
 400eae4:	003fcb06 	br	400ea14 <_dtoa_r+0xbe4>
 400eae8:	d9800d17 	ldw	r6,52(sp)
 400eaec:	018fc83a 	sub	r7,zero,r6
 400eaf0:	3801f726 	beq	r7,zero,400f2d0 <_dtoa_r+0x14a0>
 400eaf4:	398003cc 	andi	r6,r7,15
 400eaf8:	300c90fa 	slli	r6,r6,3
 400eafc:	014100b4 	movhi	r5,1026
 400eb00:	29524f04 	addi	r5,r5,18748
 400eb04:	d9001217 	ldw	r4,72(sp)
 400eb08:	314d883a 	add	r6,r6,r5
 400eb0c:	30c00117 	ldw	r3,4(r6)
 400eb10:	30800017 	ldw	r2,0(r6)
 400eb14:	d9401317 	ldw	r5,76(sp)
 400eb18:	3821d13a 	srai	r16,r7,4
 400eb1c:	100d883a 	mov	r6,r2
 400eb20:	180f883a 	mov	r7,r3
 400eb24:	40083f40 	call	40083f4 <__muldf3>
 400eb28:	1011883a 	mov	r8,r2
 400eb2c:	1813883a 	mov	r9,r3
 400eb30:	1029883a 	mov	r20,r2
 400eb34:	182b883a 	mov	r21,r3
 400eb38:	8001e526 	beq	r16,zero,400f2d0 <_dtoa_r+0x14a0>
 400eb3c:	05800084 	movi	r22,2
 400eb40:	044100b4 	movhi	r17,1026
 400eb44:	8c528104 	addi	r17,r17,18948
 400eb48:	8080004c 	andi	r2,r16,1
 400eb4c:	1005003a 	cmpeq	r2,r2,zero
 400eb50:	1000081e 	bne	r2,zero,400eb74 <_dtoa_r+0xd44>
 400eb54:	89800017 	ldw	r6,0(r17)
 400eb58:	89c00117 	ldw	r7,4(r17)
 400eb5c:	480b883a 	mov	r5,r9
 400eb60:	4009883a 	mov	r4,r8
 400eb64:	40083f40 	call	40083f4 <__muldf3>
 400eb68:	1011883a 	mov	r8,r2
 400eb6c:	b5800044 	addi	r22,r22,1
 400eb70:	1813883a 	mov	r9,r3
 400eb74:	8021d07a 	srai	r16,r16,1
 400eb78:	8c400204 	addi	r17,r17,8
 400eb7c:	803ff21e 	bne	r16,zero,400eb48 <_dtoa_r+0xd18>
 400eb80:	4029883a 	mov	r20,r8
 400eb84:	482b883a 	mov	r21,r9
 400eb88:	003dca06 	br	400e2b4 <_dtoa_r+0x484>
 400eb8c:	d9000817 	ldw	r4,32(sp)
 400eb90:	2005003a 	cmpeq	r2,r4,zero
 400eb94:	1001f61e 	bne	r2,zero,400f370 <_dtoa_r+0x1540>
 400eb98:	dc001117 	ldw	r16,68(sp)
 400eb9c:	dc801017 	ldw	r18,64(sp)
 400eba0:	18c10cc4 	addi	r3,r3,1075
 400eba4:	003f6106 	br	400e92c <_dtoa_r+0xafc>
 400eba8:	d8000b15 	stw	zero,44(sp)
 400ebac:	d9802617 	ldw	r6,152(sp)
 400ebb0:	d8c00d17 	ldw	r3,52(sp)
 400ebb4:	30800044 	addi	r2,r6,1
 400ebb8:	18ad883a 	add	r22,r3,r2
 400ebbc:	b13fffc4 	addi	r4,r22,-1
 400ebc0:	d9000e15 	stw	r4,56(sp)
 400ebc4:	0581f60e 	bge	zero,r22,400f3a0 <_dtoa_r+0x1570>
 400ebc8:	dd800f15 	stw	r22,60(sp)
 400ebcc:	003f3006 	br	400e890 <_dtoa_r+0xa60>
 400ebd0:	d8000b15 	stw	zero,44(sp)
 400ebd4:	d9002617 	ldw	r4,152(sp)
 400ebd8:	0101eb0e 	bge	zero,r4,400f388 <_dtoa_r+0x1558>
 400ebdc:	202d883a 	mov	r22,r4
 400ebe0:	d9000e15 	stw	r4,56(sp)
 400ebe4:	d9000f15 	stw	r4,60(sp)
 400ebe8:	003f2906 	br	400e890 <_dtoa_r+0xa60>
 400ebec:	01800044 	movi	r6,1
 400ebf0:	d9800b15 	stw	r6,44(sp)
 400ebf4:	003ff706 	br	400ebd4 <_dtoa_r+0xda4>
 400ebf8:	01000044 	movi	r4,1
 400ebfc:	d9000b15 	stw	r4,44(sp)
 400ec00:	003fea06 	br	400ebac <_dtoa_r+0xd7c>
 400ec04:	04000c0e 	bge	zero,r16,400ec38 <_dtoa_r+0xe08>
 400ec08:	d9400717 	ldw	r5,28(sp)
 400ec0c:	d9001617 	ldw	r4,88(sp)
 400ec10:	01800044 	movi	r6,1
 400ec14:	40115740 	call	4011574 <__lshift>
 400ec18:	1009883a 	mov	r4,r2
 400ec1c:	900b883a 	mov	r5,r18
 400ec20:	d8800715 	stw	r2,28(sp)
 400ec24:	4010d8c0 	call	4010d8c <__mcmp>
 400ec28:	0081e00e 	bge	zero,r2,400f3ac <_dtoa_r+0x157c>
 400ec2c:	bdc00044 	addi	r23,r23,1
 400ec30:	00800e84 	movi	r2,58
 400ec34:	b881a226 	beq	r23,r2,400f2c0 <_dtoa_r+0x1490>
 400ec38:	b7000044 	addi	fp,r22,1
 400ec3c:	b5c00005 	stb	r23,0(r22)
 400ec40:	003f7406 	br	400ea14 <_dtoa_r+0xbe4>
 400ec44:	00800e44 	movi	r2,57
 400ec48:	b8819d26 	beq	r23,r2,400f2c0 <_dtoa_r+0x1490>
 400ec4c:	053ffa0e 	bge	zero,r20,400ec38 <_dtoa_r+0xe08>
 400ec50:	8dc00c44 	addi	r23,r17,49
 400ec54:	003ff806 	br	400ec38 <_dtoa_r+0xe08>
 400ec58:	d9001617 	ldw	r4,88(sp)
 400ec5c:	a80b883a 	mov	r5,r21
 400ec60:	04000044 	movi	r16,1
 400ec64:	4010c300 	call	4010c30 <_Bfree>
 400ec68:	003edf06 	br	400e7e8 <_dtoa_r+0x9b8>
 400ec6c:	d9001617 	ldw	r4,88(sp)
 400ec70:	980b883a 	mov	r5,r19
 400ec74:	01800284 	movi	r6,10
 400ec78:	000f883a 	mov	r7,zero
 400ec7c:	40119500 	call	4011950 <__multadd>
 400ec80:	1027883a 	mov	r19,r2
 400ec84:	d8800615 	stw	r2,24(sp)
 400ec88:	003ebb06 	br	400e778 <_dtoa_r+0x948>
 400ec8c:	d9801117 	ldw	r6,68(sp)
 400ec90:	d8800d17 	ldw	r2,52(sp)
 400ec94:	d8000915 	stw	zero,36(sp)
 400ec98:	308dc83a 	sub	r6,r6,r2
 400ec9c:	0087c83a 	sub	r3,zero,r2
 400eca0:	d9801115 	stw	r6,68(sp)
 400eca4:	d8c01015 	stw	r3,64(sp)
 400eca8:	003cfe06 	br	400e0a4 <_dtoa_r+0x274>
 400ecac:	018dc83a 	sub	r6,zero,r6
 400ecb0:	d9801115 	stw	r6,68(sp)
 400ecb4:	d8000a15 	stw	zero,40(sp)
 400ecb8:	003cf306 	br	400e088 <_dtoa_r+0x258>
 400ecbc:	d9000d17 	ldw	r4,52(sp)
 400ecc0:	4008c300 	call	4008c30 <__floatsidf>
 400ecc4:	880b883a 	mov	r5,r17
 400ecc8:	8009883a 	mov	r4,r16
 400eccc:	180f883a 	mov	r7,r3
 400ecd0:	100d883a 	mov	r6,r2
 400ecd4:	4016c980 	call	4016c98 <__nedf2>
 400ecd8:	103ce126 	beq	r2,zero,400e060 <_dtoa_r+0x230>
 400ecdc:	d9800d17 	ldw	r6,52(sp)
 400ece0:	31bfffc4 	addi	r6,r6,-1
 400ece4:	d9800d15 	stw	r6,52(sp)
 400ece8:	003cdd06 	br	400e060 <_dtoa_r+0x230>
 400ecec:	d9000717 	ldw	r4,28(sp)
 400ecf0:	900b883a 	mov	r5,r18
 400ecf4:	4010d8c0 	call	4010d8c <__mcmp>
 400ecf8:	103e8d0e 	bge	r2,zero,400e730 <_dtoa_r+0x900>
 400ecfc:	d9400717 	ldw	r5,28(sp)
 400ed00:	d9001617 	ldw	r4,88(sp)
 400ed04:	01800284 	movi	r6,10
 400ed08:	000f883a 	mov	r7,zero
 400ed0c:	40119500 	call	4011950 <__multadd>
 400ed10:	d9800d17 	ldw	r6,52(sp)
 400ed14:	d8800715 	stw	r2,28(sp)
 400ed18:	31bfffc4 	addi	r6,r6,-1
 400ed1c:	d9800d15 	stw	r6,52(sp)
 400ed20:	b001a71e 	bne	r22,zero,400f3c0 <_dtoa_r+0x1590>
 400ed24:	d8800e17 	ldw	r2,56(sp)
 400ed28:	d8800f15 	stw	r2,60(sp)
 400ed2c:	003e8006 	br	400e730 <_dtoa_r+0x900>
 400ed30:	90800417 	ldw	r2,16(r18)
 400ed34:	1085883a 	add	r2,r2,r2
 400ed38:	1085883a 	add	r2,r2,r2
 400ed3c:	1485883a 	add	r2,r2,r18
 400ed40:	11000417 	ldw	r4,16(r2)
 400ed44:	4010c580 	call	4010c58 <__hi0bits>
 400ed48:	00c00804 	movi	r3,32
 400ed4c:	1887c83a 	sub	r3,r3,r2
 400ed50:	003e5a06 	br	400e6bc <_dtoa_r+0x88c>
 400ed54:	d9400717 	ldw	r5,28(sp)
 400ed58:	d9801017 	ldw	r6,64(sp)
 400ed5c:	d9001617 	ldw	r4,88(sp)
 400ed60:	4011a7c0 	call	4011a7c <__pow5mult>
 400ed64:	d8800715 	stw	r2,28(sp)
 400ed68:	003e4306 	br	400e678 <_dtoa_r+0x848>
 400ed6c:	d9800f17 	ldw	r6,60(sp)
 400ed70:	d8800d17 	ldw	r2,52(sp)
 400ed74:	d9800315 	stw	r6,12(sp)
 400ed78:	d8800415 	stw	r2,16(sp)
 400ed7c:	d8c00b17 	ldw	r3,44(sp)
 400ed80:	1805003a 	cmpeq	r2,r3,zero
 400ed84:	1000e21e 	bne	r2,zero,400f110 <_dtoa_r+0x12e0>
 400ed88:	d9000317 	ldw	r4,12(sp)
 400ed8c:	0005883a 	mov	r2,zero
 400ed90:	00cff834 	movhi	r3,16352
 400ed94:	200c90fa 	slli	r6,r4,3
 400ed98:	010100b4 	movhi	r4,1026
 400ed9c:	21124f04 	addi	r4,r4,18748
 400eda0:	180b883a 	mov	r5,r3
 400eda4:	310d883a 	add	r6,r6,r4
 400eda8:	327fff17 	ldw	r9,-4(r6)
 400edac:	323ffe17 	ldw	r8,-8(r6)
 400edb0:	1009883a 	mov	r4,r2
 400edb4:	480f883a 	mov	r7,r9
 400edb8:	400d883a 	mov	r6,r8
 400edbc:	40087b80 	call	40087b8 <__divdf3>
 400edc0:	180b883a 	mov	r5,r3
 400edc4:	b00d883a 	mov	r6,r22
 400edc8:	b80f883a 	mov	r7,r23
 400edcc:	1009883a 	mov	r4,r2
 400edd0:	40083000 	call	4008300 <__subdf3>
 400edd4:	a80b883a 	mov	r5,r21
 400edd8:	a009883a 	mov	r4,r20
 400eddc:	d8c01915 	stw	r3,100(sp)
 400ede0:	d8801815 	stw	r2,96(sp)
 400ede4:	4008d280 	call	4008d28 <__fixdfsi>
 400ede8:	1009883a 	mov	r4,r2
 400edec:	1027883a 	mov	r19,r2
 400edf0:	4008c300 	call	4008c30 <__floatsidf>
 400edf4:	a80b883a 	mov	r5,r21
 400edf8:	a009883a 	mov	r4,r20
 400edfc:	180f883a 	mov	r7,r3
 400ee00:	100d883a 	mov	r6,r2
 400ee04:	40083000 	call	4008300 <__subdf3>
 400ee08:	d9801817 	ldw	r6,96(sp)
 400ee0c:	1823883a 	mov	r17,r3
 400ee10:	d8801415 	stw	r2,80(sp)
 400ee14:	302d883a 	mov	r22,r6
 400ee18:	d9800517 	ldw	r6,20(sp)
 400ee1c:	9cc00c04 	addi	r19,r19,48
 400ee20:	dc401515 	stw	r17,84(sp)
 400ee24:	d8c01917 	ldw	r3,100(sp)
 400ee28:	34c00005 	stb	r19,0(r6)
 400ee2c:	d8800517 	ldw	r2,20(sp)
 400ee30:	d9401917 	ldw	r5,100(sp)
 400ee34:	d9801417 	ldw	r6,80(sp)
 400ee38:	b009883a 	mov	r4,r22
 400ee3c:	880f883a 	mov	r7,r17
 400ee40:	182f883a 	mov	r23,r3
 400ee44:	17000044 	addi	fp,r2,1
 400ee48:	4008a100 	call	4008a10 <__gtdf2>
 400ee4c:	00804e16 	blt	zero,r2,400ef88 <_dtoa_r+0x1158>
 400ee50:	d9801417 	ldw	r6,80(sp)
 400ee54:	0005883a 	mov	r2,zero
 400ee58:	00cffc34 	movhi	r3,16368
 400ee5c:	180b883a 	mov	r5,r3
 400ee60:	880f883a 	mov	r7,r17
 400ee64:	1009883a 	mov	r4,r2
 400ee68:	40083000 	call	4008300 <__subdf3>
 400ee6c:	d9401917 	ldw	r5,100(sp)
 400ee70:	180f883a 	mov	r7,r3
 400ee74:	b009883a 	mov	r4,r22
 400ee78:	100d883a 	mov	r6,r2
 400ee7c:	4008a100 	call	4008a10 <__gtdf2>
 400ee80:	00bda216 	blt	zero,r2,400e50c <_dtoa_r+0x6dc>
 400ee84:	d8c00317 	ldw	r3,12(sp)
 400ee88:	00800044 	movi	r2,1
 400ee8c:	10c01216 	blt	r2,r3,400eed8 <_dtoa_r+0x10a8>
 400ee90:	003d4506 	br	400e3a8 <_dtoa_r+0x578>
 400ee94:	d9801417 	ldw	r6,80(sp)
 400ee98:	0005883a 	mov	r2,zero
 400ee9c:	00cffc34 	movhi	r3,16368
 400eea0:	180b883a 	mov	r5,r3
 400eea4:	880f883a 	mov	r7,r17
 400eea8:	1009883a 	mov	r4,r2
 400eeac:	40083000 	call	4008300 <__subdf3>
 400eeb0:	d9c01b17 	ldw	r7,108(sp)
 400eeb4:	180b883a 	mov	r5,r3
 400eeb8:	1009883a 	mov	r4,r2
 400eebc:	b00d883a 	mov	r6,r22
 400eec0:	4008b200 	call	4008b20 <__ltdf2>
 400eec4:	103d9116 	blt	r2,zero,400e50c <_dtoa_r+0x6dc>
 400eec8:	d9800517 	ldw	r6,20(sp)
 400eecc:	d9000317 	ldw	r4,12(sp)
 400eed0:	3105883a 	add	r2,r6,r4
 400eed4:	e0bd3426 	beq	fp,r2,400e3a8 <_dtoa_r+0x578>
 400eed8:	04500934 	movhi	r17,16420
 400eedc:	0021883a 	mov	r16,zero
 400eee0:	b80b883a 	mov	r5,r23
 400eee4:	b009883a 	mov	r4,r22
 400eee8:	800d883a 	mov	r6,r16
 400eeec:	880f883a 	mov	r7,r17
 400eef0:	40083f40 	call	40083f4 <__muldf3>
 400eef4:	d9401517 	ldw	r5,84(sp)
 400eef8:	d9001417 	ldw	r4,80(sp)
 400eefc:	880f883a 	mov	r7,r17
 400ef00:	000d883a 	mov	r6,zero
 400ef04:	d8801a15 	stw	r2,104(sp)
 400ef08:	d8c01b15 	stw	r3,108(sp)
 400ef0c:	40083f40 	call	40083f4 <__muldf3>
 400ef10:	180b883a 	mov	r5,r3
 400ef14:	1009883a 	mov	r4,r2
 400ef18:	1823883a 	mov	r17,r3
 400ef1c:	1021883a 	mov	r16,r2
 400ef20:	4008d280 	call	4008d28 <__fixdfsi>
 400ef24:	1009883a 	mov	r4,r2
 400ef28:	102b883a 	mov	r21,r2
 400ef2c:	4008c300 	call	4008c30 <__floatsidf>
 400ef30:	880b883a 	mov	r5,r17
 400ef34:	8009883a 	mov	r4,r16
 400ef38:	180f883a 	mov	r7,r3
 400ef3c:	100d883a 	mov	r6,r2
 400ef40:	40083000 	call	4008300 <__subdf3>
 400ef44:	1021883a 	mov	r16,r2
 400ef48:	d9001b17 	ldw	r4,108(sp)
 400ef4c:	1823883a 	mov	r17,r3
 400ef50:	dc001415 	stw	r16,80(sp)
 400ef54:	ad400c04 	addi	r21,r21,48
 400ef58:	dc401515 	stw	r17,84(sp)
 400ef5c:	d8801a17 	ldw	r2,104(sp)
 400ef60:	e5400005 	stb	r21,0(fp)
 400ef64:	202f883a 	mov	r23,r4
 400ef68:	d9c01b17 	ldw	r7,108(sp)
 400ef6c:	d9001417 	ldw	r4,80(sp)
 400ef70:	880b883a 	mov	r5,r17
 400ef74:	100d883a 	mov	r6,r2
 400ef78:	102d883a 	mov	r22,r2
 400ef7c:	e7000044 	addi	fp,fp,1
 400ef80:	4008b200 	call	4008b20 <__ltdf2>
 400ef84:	103fc30e 	bge	r2,zero,400ee94 <_dtoa_r+0x1064>
 400ef88:	d9000417 	ldw	r4,16(sp)
 400ef8c:	d9000d15 	stw	r4,52(sp)
 400ef90:	003d7106 	br	400e558 <_dtoa_r+0x728>
 400ef94:	d9801717 	ldw	r6,92(sp)
 400ef98:	00800084 	movi	r2,2
 400ef9c:	11bde60e 	bge	r2,r6,400e738 <_dtoa_r+0x908>
 400efa0:	203cfb1e 	bne	r4,zero,400e390 <_dtoa_r+0x560>
 400efa4:	d9001617 	ldw	r4,88(sp)
 400efa8:	900b883a 	mov	r5,r18
 400efac:	01800144 	movi	r6,5
 400efb0:	000f883a 	mov	r7,zero
 400efb4:	40119500 	call	4011950 <__multadd>
 400efb8:	d9000717 	ldw	r4,28(sp)
 400efbc:	100b883a 	mov	r5,r2
 400efc0:	1025883a 	mov	r18,r2
 400efc4:	4010d8c0 	call	4010d8c <__mcmp>
 400efc8:	00bcf10e 	bge	zero,r2,400e390 <_dtoa_r+0x560>
 400efcc:	d8c00d17 	ldw	r3,52(sp)
 400efd0:	d9000517 	ldw	r4,20(sp)
 400efd4:	d8000615 	stw	zero,24(sp)
 400efd8:	18c00044 	addi	r3,r3,1
 400efdc:	d8c00d15 	stw	r3,52(sp)
 400efe0:	00800c44 	movi	r2,49
 400efe4:	27000044 	addi	fp,r4,1
 400efe8:	20800005 	stb	r2,0(r4)
 400efec:	003e8906 	br	400ea14 <_dtoa_r+0xbe4>
 400eff0:	d8c00517 	ldw	r3,20(sp)
 400eff4:	003bc206 	br	400df00 <_dtoa_r+0xd0>
 400eff8:	018100b4 	movhi	r6,1026
 400effc:	31928104 	addi	r6,r6,18948
 400f000:	30c00917 	ldw	r3,36(r6)
 400f004:	30800817 	ldw	r2,32(r6)
 400f008:	d9001217 	ldw	r4,72(sp)
 400f00c:	d9401317 	ldw	r5,76(sp)
 400f010:	180f883a 	mov	r7,r3
 400f014:	100d883a 	mov	r6,r2
 400f018:	40087b80 	call	40087b8 <__divdf3>
 400f01c:	948003cc 	andi	r18,r18,15
 400f020:	058000c4 	movi	r22,3
 400f024:	1029883a 	mov	r20,r2
 400f028:	182b883a 	mov	r21,r3
 400f02c:	003c8906 	br	400e254 <_dtoa_r+0x424>
 400f030:	d9001017 	ldw	r4,64(sp)
 400f034:	d9800917 	ldw	r6,36(sp)
 400f038:	0025883a 	mov	r18,zero
 400f03c:	1105c83a 	sub	r2,r2,r4
 400f040:	2089883a 	add	r4,r4,r2
 400f044:	308d883a 	add	r6,r6,r2
 400f048:	d9001015 	stw	r4,64(sp)
 400f04c:	d9800915 	stw	r6,36(sp)
 400f050:	003e3206 	br	400e91c <_dtoa_r+0xaec>
 400f054:	28800044 	addi	r2,r5,1
 400f058:	27000044 	addi	fp,r4,1
 400f05c:	20800005 	stb	r2,0(r4)
 400f060:	003e6c06 	br	400ea14 <_dtoa_r+0xbe4>
 400f064:	d8800f17 	ldw	r2,60(sp)
 400f068:	00bce016 	blt	zero,r2,400e3ec <_dtoa_r+0x5bc>
 400f06c:	d9800f17 	ldw	r6,60(sp)
 400f070:	303cc51e 	bne	r6,zero,400e388 <_dtoa_r+0x558>
 400f074:	0005883a 	mov	r2,zero
 400f078:	00d00534 	movhi	r3,16404
 400f07c:	980b883a 	mov	r5,r19
 400f080:	180f883a 	mov	r7,r3
 400f084:	9009883a 	mov	r4,r18
 400f088:	100d883a 	mov	r6,r2
 400f08c:	40083f40 	call	40083f4 <__muldf3>
 400f090:	180b883a 	mov	r5,r3
 400f094:	a80f883a 	mov	r7,r21
 400f098:	1009883a 	mov	r4,r2
 400f09c:	a00d883a 	mov	r6,r20
 400f0a0:	4008a980 	call	4008a98 <__gedf2>
 400f0a4:	103cb80e 	bge	r2,zero,400e388 <_dtoa_r+0x558>
 400f0a8:	0027883a 	mov	r19,zero
 400f0ac:	0025883a 	mov	r18,zero
 400f0b0:	003fc606 	br	400efcc <_dtoa_r+0x119c>
 400f0b4:	99400117 	ldw	r5,4(r19)
 400f0b8:	d9001617 	ldw	r4,88(sp)
 400f0bc:	40111b00 	call	40111b0 <_Balloc>
 400f0c0:	99800417 	ldw	r6,16(r19)
 400f0c4:	11000304 	addi	r4,r2,12
 400f0c8:	99400304 	addi	r5,r19,12
 400f0cc:	318d883a 	add	r6,r6,r6
 400f0d0:	318d883a 	add	r6,r6,r6
 400f0d4:	31800204 	addi	r6,r6,8
 400f0d8:	1023883a 	mov	r17,r2
 400f0dc:	4010a180 	call	4010a18 <memcpy>
 400f0e0:	d9001617 	ldw	r4,88(sp)
 400f0e4:	880b883a 	mov	r5,r17
 400f0e8:	01800044 	movi	r6,1
 400f0ec:	40115740 	call	4011574 <__lshift>
 400f0f0:	100b883a 	mov	r5,r2
 400f0f4:	003d9c06 	br	400e768 <_dtoa_r+0x938>
 400f0f8:	00800e44 	movi	r2,57
 400f0fc:	b8807026 	beq	r23,r2,400f2c0 <_dtoa_r+0x1490>
 400f100:	b8800044 	addi	r2,r23,1
 400f104:	b7000044 	addi	fp,r22,1
 400f108:	b0800005 	stb	r2,0(r22)
 400f10c:	003e4106 	br	400ea14 <_dtoa_r+0xbe4>
 400f110:	d8800317 	ldw	r2,12(sp)
 400f114:	018100b4 	movhi	r6,1026
 400f118:	31924f04 	addi	r6,r6,18748
 400f11c:	b009883a 	mov	r4,r22
 400f120:	100e90fa 	slli	r7,r2,3
 400f124:	b80b883a 	mov	r5,r23
 400f128:	398f883a 	add	r7,r7,r6
 400f12c:	38bffe17 	ldw	r2,-8(r7)
 400f130:	d9800517 	ldw	r6,20(sp)
 400f134:	38ffff17 	ldw	r3,-4(r7)
 400f138:	37000044 	addi	fp,r6,1
 400f13c:	180f883a 	mov	r7,r3
 400f140:	100d883a 	mov	r6,r2
 400f144:	40083f40 	call	40083f4 <__muldf3>
 400f148:	a80b883a 	mov	r5,r21
 400f14c:	a009883a 	mov	r4,r20
 400f150:	182f883a 	mov	r23,r3
 400f154:	102d883a 	mov	r22,r2
 400f158:	4008d280 	call	4008d28 <__fixdfsi>
 400f15c:	1009883a 	mov	r4,r2
 400f160:	1027883a 	mov	r19,r2
 400f164:	4008c300 	call	4008c30 <__floatsidf>
 400f168:	a80b883a 	mov	r5,r21
 400f16c:	a009883a 	mov	r4,r20
 400f170:	180f883a 	mov	r7,r3
 400f174:	100d883a 	mov	r6,r2
 400f178:	40083000 	call	4008300 <__subdf3>
 400f17c:	180b883a 	mov	r5,r3
 400f180:	d8c00517 	ldw	r3,20(sp)
 400f184:	9cc00c04 	addi	r19,r19,48
 400f188:	1009883a 	mov	r4,r2
 400f18c:	1cc00005 	stb	r19,0(r3)
 400f190:	2021883a 	mov	r16,r4
 400f194:	d9000317 	ldw	r4,12(sp)
 400f198:	00800044 	movi	r2,1
 400f19c:	2823883a 	mov	r17,r5
 400f1a0:	20802226 	beq	r4,r2,400f22c <_dtoa_r+0x13fc>
 400f1a4:	1029883a 	mov	r20,r2
 400f1a8:	0005883a 	mov	r2,zero
 400f1ac:	00d00934 	movhi	r3,16420
 400f1b0:	180f883a 	mov	r7,r3
 400f1b4:	100d883a 	mov	r6,r2
 400f1b8:	880b883a 	mov	r5,r17
 400f1bc:	8009883a 	mov	r4,r16
 400f1c0:	40083f40 	call	40083f4 <__muldf3>
 400f1c4:	180b883a 	mov	r5,r3
 400f1c8:	1009883a 	mov	r4,r2
 400f1cc:	1823883a 	mov	r17,r3
 400f1d0:	1021883a 	mov	r16,r2
 400f1d4:	4008d280 	call	4008d28 <__fixdfsi>
 400f1d8:	1009883a 	mov	r4,r2
 400f1dc:	102b883a 	mov	r21,r2
 400f1e0:	4008c300 	call	4008c30 <__floatsidf>
 400f1e4:	880b883a 	mov	r5,r17
 400f1e8:	8009883a 	mov	r4,r16
 400f1ec:	180f883a 	mov	r7,r3
 400f1f0:	100d883a 	mov	r6,r2
 400f1f4:	40083000 	call	4008300 <__subdf3>
 400f1f8:	180b883a 	mov	r5,r3
 400f1fc:	d8c00517 	ldw	r3,20(sp)
 400f200:	1009883a 	mov	r4,r2
 400f204:	ad400c04 	addi	r21,r21,48
 400f208:	1d05883a 	add	r2,r3,r20
 400f20c:	15400005 	stb	r21,0(r2)
 400f210:	2021883a 	mov	r16,r4
 400f214:	d9000317 	ldw	r4,12(sp)
 400f218:	a5000044 	addi	r20,r20,1
 400f21c:	2823883a 	mov	r17,r5
 400f220:	a13fe11e 	bne	r20,r4,400f1a8 <_dtoa_r+0x1378>
 400f224:	e505883a 	add	r2,fp,r20
 400f228:	173fffc4 	addi	fp,r2,-1
 400f22c:	0025883a 	mov	r18,zero
 400f230:	04cff834 	movhi	r19,16352
 400f234:	b009883a 	mov	r4,r22
 400f238:	b80b883a 	mov	r5,r23
 400f23c:	900d883a 	mov	r6,r18
 400f240:	980f883a 	mov	r7,r19
 400f244:	40083800 	call	4008380 <__adddf3>
 400f248:	180b883a 	mov	r5,r3
 400f24c:	1009883a 	mov	r4,r2
 400f250:	800d883a 	mov	r6,r16
 400f254:	880f883a 	mov	r7,r17
 400f258:	4008b200 	call	4008b20 <__ltdf2>
 400f25c:	103cab16 	blt	r2,zero,400e50c <_dtoa_r+0x6dc>
 400f260:	0009883a 	mov	r4,zero
 400f264:	980b883a 	mov	r5,r19
 400f268:	b80f883a 	mov	r7,r23
 400f26c:	b00d883a 	mov	r6,r22
 400f270:	40083000 	call	4008300 <__subdf3>
 400f274:	180b883a 	mov	r5,r3
 400f278:	880f883a 	mov	r7,r17
 400f27c:	1009883a 	mov	r4,r2
 400f280:	800d883a 	mov	r6,r16
 400f284:	4008a100 	call	4008a10 <__gtdf2>
 400f288:	00bc470e 	bge	zero,r2,400e3a8 <_dtoa_r+0x578>
 400f28c:	00c00c04 	movi	r3,48
 400f290:	e73fffc4 	addi	fp,fp,-1
 400f294:	e0800007 	ldb	r2,0(fp)
 400f298:	10fffd26 	beq	r2,r3,400f290 <_dtoa_r+0x1460>
 400f29c:	d9800417 	ldw	r6,16(sp)
 400f2a0:	e7000044 	addi	fp,fp,1
 400f2a4:	d9800d15 	stw	r6,52(sp)
 400f2a8:	003cab06 	br	400e558 <_dtoa_r+0x728>
 400f2ac:	d8c00f17 	ldw	r3,60(sp)
 400f2b0:	d9001117 	ldw	r4,68(sp)
 400f2b4:	20e1c83a 	sub	r16,r4,r3
 400f2b8:	0007883a 	mov	r3,zero
 400f2bc:	003d9b06 	br	400e92c <_dtoa_r+0xafc>
 400f2c0:	00800e44 	movi	r2,57
 400f2c4:	b0800005 	stb	r2,0(r22)
 400f2c8:	b5800044 	addi	r22,r22,1
 400f2cc:	003dc106 	br	400e9d4 <_dtoa_r+0xba4>
 400f2d0:	05800084 	movi	r22,2
 400f2d4:	003bf706 	br	400e2b4 <_dtoa_r+0x484>
 400f2d8:	d9000f17 	ldw	r4,60(sp)
 400f2dc:	013c000e 	bge	zero,r4,400e2e0 <_dtoa_r+0x4b0>
 400f2e0:	d9800e17 	ldw	r6,56(sp)
 400f2e4:	01bc300e 	bge	zero,r6,400e3a8 <_dtoa_r+0x578>
 400f2e8:	0005883a 	mov	r2,zero
 400f2ec:	00d00934 	movhi	r3,16420
 400f2f0:	a80b883a 	mov	r5,r21
 400f2f4:	180f883a 	mov	r7,r3
 400f2f8:	a009883a 	mov	r4,r20
 400f2fc:	100d883a 	mov	r6,r2
 400f300:	40083f40 	call	40083f4 <__muldf3>
 400f304:	b1000044 	addi	r4,r22,1
 400f308:	1021883a 	mov	r16,r2
 400f30c:	1823883a 	mov	r17,r3
 400f310:	4008c300 	call	4008c30 <__floatsidf>
 400f314:	880b883a 	mov	r5,r17
 400f318:	8009883a 	mov	r4,r16
 400f31c:	180f883a 	mov	r7,r3
 400f320:	100d883a 	mov	r6,r2
 400f324:	40083f40 	call	40083f4 <__muldf3>
 400f328:	0011883a 	mov	r8,zero
 400f32c:	02500734 	movhi	r9,16412
 400f330:	180b883a 	mov	r5,r3
 400f334:	480f883a 	mov	r7,r9
 400f338:	1009883a 	mov	r4,r2
 400f33c:	400d883a 	mov	r6,r8
 400f340:	40083800 	call	4008380 <__adddf3>
 400f344:	102d883a 	mov	r22,r2
 400f348:	00bf3034 	movhi	r2,64704
 400f34c:	10ef883a 	add	r23,r2,r3
 400f350:	d8800d17 	ldw	r2,52(sp)
 400f354:	d8c00e17 	ldw	r3,56(sp)
 400f358:	8029883a 	mov	r20,r16
 400f35c:	10bfffc4 	addi	r2,r2,-1
 400f360:	882b883a 	mov	r21,r17
 400f364:	d8800415 	stw	r2,16(sp)
 400f368:	d8c00315 	stw	r3,12(sp)
 400f36c:	003e8306 	br	400ed7c <_dtoa_r+0xf4c>
 400f370:	d8800117 	ldw	r2,4(sp)
 400f374:	dc001117 	ldw	r16,68(sp)
 400f378:	dc801017 	ldw	r18,64(sp)
 400f37c:	00c00d84 	movi	r3,54
 400f380:	1887c83a 	sub	r3,r3,r2
 400f384:	003d6906 	br	400e92c <_dtoa_r+0xafc>
 400f388:	01800044 	movi	r6,1
 400f38c:	3021883a 	mov	r16,r6
 400f390:	d9800f15 	stw	r6,60(sp)
 400f394:	d9802615 	stw	r6,152(sp)
 400f398:	d9800e15 	stw	r6,56(sp)
 400f39c:	003b9306 	br	400e1ec <_dtoa_r+0x3bc>
 400f3a0:	b021883a 	mov	r16,r22
 400f3a4:	dd800f15 	stw	r22,60(sp)
 400f3a8:	003b9006 	br	400e1ec <_dtoa_r+0x3bc>
 400f3ac:	103e221e 	bne	r2,zero,400ec38 <_dtoa_r+0xe08>
 400f3b0:	b880004c 	andi	r2,r23,1
 400f3b4:	1005003a 	cmpeq	r2,r2,zero
 400f3b8:	103e1f1e 	bne	r2,zero,400ec38 <_dtoa_r+0xe08>
 400f3bc:	003e1b06 	br	400ec2c <_dtoa_r+0xdfc>
 400f3c0:	d9001617 	ldw	r4,88(sp)
 400f3c4:	980b883a 	mov	r5,r19
 400f3c8:	01800284 	movi	r6,10
 400f3cc:	000f883a 	mov	r7,zero
 400f3d0:	40119500 	call	4011950 <__multadd>
 400f3d4:	d8c00e17 	ldw	r3,56(sp)
 400f3d8:	1027883a 	mov	r19,r2
 400f3dc:	d8c00f15 	stw	r3,60(sp)
 400f3e0:	003cd306 	br	400e730 <_dtoa_r+0x900>

0400f3e4 <_fflush_r>:
 400f3e4:	defffb04 	addi	sp,sp,-20
 400f3e8:	dcc00315 	stw	r19,12(sp)
 400f3ec:	dc800215 	stw	r18,8(sp)
 400f3f0:	dfc00415 	stw	ra,16(sp)
 400f3f4:	dc400115 	stw	r17,4(sp)
 400f3f8:	dc000015 	stw	r16,0(sp)
 400f3fc:	2027883a 	mov	r19,r4
 400f400:	2825883a 	mov	r18,r5
 400f404:	20000226 	beq	r4,zero,400f410 <_fflush_r+0x2c>
 400f408:	20800e17 	ldw	r2,56(r4)
 400f40c:	10005626 	beq	r2,zero,400f568 <_fflush_r+0x184>
 400f410:	9100030b 	ldhu	r4,12(r18)
 400f414:	20ffffcc 	andi	r3,r4,65535
 400f418:	18e0001c 	xori	r3,r3,32768
 400f41c:	18e00004 	addi	r3,r3,-32768
 400f420:	1880020c 	andi	r2,r3,8
 400f424:	1000261e 	bne	r2,zero,400f4c0 <_fflush_r+0xdc>
 400f428:	90c00117 	ldw	r3,4(r18)
 400f42c:	20820014 	ori	r2,r4,2048
 400f430:	9080030d 	sth	r2,12(r18)
 400f434:	1009883a 	mov	r4,r2
 400f438:	00c0400e 	bge	zero,r3,400f53c <_fflush_r+0x158>
 400f43c:	92000a17 	ldw	r8,40(r18)
 400f440:	40004026 	beq	r8,zero,400f544 <_fflush_r+0x160>
 400f444:	2084000c 	andi	r2,r4,4096
 400f448:	10005326 	beq	r2,zero,400f598 <_fflush_r+0x1b4>
 400f44c:	94001417 	ldw	r16,80(r18)
 400f450:	9080030b 	ldhu	r2,12(r18)
 400f454:	1080010c 	andi	r2,r2,4
 400f458:	1000481e 	bne	r2,zero,400f57c <_fflush_r+0x198>
 400f45c:	91400717 	ldw	r5,28(r18)
 400f460:	9809883a 	mov	r4,r19
 400f464:	800d883a 	mov	r6,r16
 400f468:	000f883a 	mov	r7,zero
 400f46c:	403ee83a 	callr	r8
 400f470:	8080261e 	bne	r16,r2,400f50c <_fflush_r+0x128>
 400f474:	9080030b 	ldhu	r2,12(r18)
 400f478:	91000417 	ldw	r4,16(r18)
 400f47c:	90000115 	stw	zero,4(r18)
 400f480:	10bdffcc 	andi	r2,r2,63487
 400f484:	10ffffcc 	andi	r3,r2,65535
 400f488:	18c4000c 	andi	r3,r3,4096
 400f48c:	9080030d 	sth	r2,12(r18)
 400f490:	91000015 	stw	r4,0(r18)
 400f494:	18002b26 	beq	r3,zero,400f544 <_fflush_r+0x160>
 400f498:	0007883a 	mov	r3,zero
 400f49c:	1805883a 	mov	r2,r3
 400f4a0:	94001415 	stw	r16,80(r18)
 400f4a4:	dfc00417 	ldw	ra,16(sp)
 400f4a8:	dcc00317 	ldw	r19,12(sp)
 400f4ac:	dc800217 	ldw	r18,8(sp)
 400f4b0:	dc400117 	ldw	r17,4(sp)
 400f4b4:	dc000017 	ldw	r16,0(sp)
 400f4b8:	dec00504 	addi	sp,sp,20
 400f4bc:	f800283a 	ret
 400f4c0:	94400417 	ldw	r17,16(r18)
 400f4c4:	88001f26 	beq	r17,zero,400f544 <_fflush_r+0x160>
 400f4c8:	90800017 	ldw	r2,0(r18)
 400f4cc:	18c000cc 	andi	r3,r3,3
 400f4d0:	94400015 	stw	r17,0(r18)
 400f4d4:	1461c83a 	sub	r16,r2,r17
 400f4d8:	18002526 	beq	r3,zero,400f570 <_fflush_r+0x18c>
 400f4dc:	0005883a 	mov	r2,zero
 400f4e0:	90800215 	stw	r2,8(r18)
 400f4e4:	0400170e 	bge	zero,r16,400f544 <_fflush_r+0x160>
 400f4e8:	90c00917 	ldw	r3,36(r18)
 400f4ec:	91400717 	ldw	r5,28(r18)
 400f4f0:	880d883a 	mov	r6,r17
 400f4f4:	800f883a 	mov	r7,r16
 400f4f8:	9809883a 	mov	r4,r19
 400f4fc:	183ee83a 	callr	r3
 400f500:	88a3883a 	add	r17,r17,r2
 400f504:	80a1c83a 	sub	r16,r16,r2
 400f508:	00bff616 	blt	zero,r2,400f4e4 <_fflush_r+0x100>
 400f50c:	9080030b 	ldhu	r2,12(r18)
 400f510:	00ffffc4 	movi	r3,-1
 400f514:	10801014 	ori	r2,r2,64
 400f518:	9080030d 	sth	r2,12(r18)
 400f51c:	1805883a 	mov	r2,r3
 400f520:	dfc00417 	ldw	ra,16(sp)
 400f524:	dcc00317 	ldw	r19,12(sp)
 400f528:	dc800217 	ldw	r18,8(sp)
 400f52c:	dc400117 	ldw	r17,4(sp)
 400f530:	dc000017 	ldw	r16,0(sp)
 400f534:	dec00504 	addi	sp,sp,20
 400f538:	f800283a 	ret
 400f53c:	90800f17 	ldw	r2,60(r18)
 400f540:	00bfbe16 	blt	zero,r2,400f43c <_fflush_r+0x58>
 400f544:	0007883a 	mov	r3,zero
 400f548:	1805883a 	mov	r2,r3
 400f54c:	dfc00417 	ldw	ra,16(sp)
 400f550:	dcc00317 	ldw	r19,12(sp)
 400f554:	dc800217 	ldw	r18,8(sp)
 400f558:	dc400117 	ldw	r17,4(sp)
 400f55c:	dc000017 	ldw	r16,0(sp)
 400f560:	dec00504 	addi	sp,sp,20
 400f564:	f800283a 	ret
 400f568:	400f67c0 	call	400f67c <__sinit>
 400f56c:	003fa806 	br	400f410 <_fflush_r+0x2c>
 400f570:	90800517 	ldw	r2,20(r18)
 400f574:	90800215 	stw	r2,8(r18)
 400f578:	003fda06 	br	400f4e4 <_fflush_r+0x100>
 400f57c:	90800117 	ldw	r2,4(r18)
 400f580:	90c00c17 	ldw	r3,48(r18)
 400f584:	80a1c83a 	sub	r16,r16,r2
 400f588:	183fb426 	beq	r3,zero,400f45c <_fflush_r+0x78>
 400f58c:	90800f17 	ldw	r2,60(r18)
 400f590:	80a1c83a 	sub	r16,r16,r2
 400f594:	003fb106 	br	400f45c <_fflush_r+0x78>
 400f598:	91400717 	ldw	r5,28(r18)
 400f59c:	9809883a 	mov	r4,r19
 400f5a0:	000d883a 	mov	r6,zero
 400f5a4:	01c00044 	movi	r7,1
 400f5a8:	403ee83a 	callr	r8
 400f5ac:	1021883a 	mov	r16,r2
 400f5b0:	00bfffc4 	movi	r2,-1
 400f5b4:	80800226 	beq	r16,r2,400f5c0 <_fflush_r+0x1dc>
 400f5b8:	92000a17 	ldw	r8,40(r18)
 400f5bc:	003fa406 	br	400f450 <_fflush_r+0x6c>
 400f5c0:	98c00017 	ldw	r3,0(r19)
 400f5c4:	00800744 	movi	r2,29
 400f5c8:	18bfde26 	beq	r3,r2,400f544 <_fflush_r+0x160>
 400f5cc:	9080030b 	ldhu	r2,12(r18)
 400f5d0:	8007883a 	mov	r3,r16
 400f5d4:	10801014 	ori	r2,r2,64
 400f5d8:	9080030d 	sth	r2,12(r18)
 400f5dc:	003fcf06 	br	400f51c <_fflush_r+0x138>

0400f5e0 <fflush>:
 400f5e0:	01410074 	movhi	r5,1025
 400f5e4:	297cf904 	addi	r5,r5,-3100
 400f5e8:	2007883a 	mov	r3,r4
 400f5ec:	20000526 	beq	r4,zero,400f604 <fflush+0x24>
 400f5f0:	008100b4 	movhi	r2,1026
 400f5f4:	109a4904 	addi	r2,r2,26916
 400f5f8:	11000017 	ldw	r4,0(r2)
 400f5fc:	180b883a 	mov	r5,r3
 400f600:	400f3e41 	jmpi	400f3e4 <_fflush_r>
 400f604:	008100b4 	movhi	r2,1026
 400f608:	109a4a04 	addi	r2,r2,26920
 400f60c:	11000017 	ldw	r4,0(r2)
 400f610:	40104301 	jmpi	4010430 <_fwalk_reent>

0400f614 <std>:
 400f614:	00810074 	movhi	r2,1025
 400f618:	10899b04 	addi	r2,r2,9836
 400f61c:	20800b15 	stw	r2,44(r4)
 400f620:	00810074 	movhi	r2,1025
 400f624:	1089d604 	addi	r2,r2,10072
 400f628:	20800815 	stw	r2,32(r4)
 400f62c:	00c10074 	movhi	r3,1025
 400f630:	18c9b704 	addi	r3,r3,9948
 400f634:	00810074 	movhi	r2,1025
 400f638:	10899d04 	addi	r2,r2,9844
 400f63c:	2140030d 	sth	r5,12(r4)
 400f640:	2180038d 	sth	r6,14(r4)
 400f644:	20c00915 	stw	r3,36(r4)
 400f648:	20800a15 	stw	r2,40(r4)
 400f64c:	20000015 	stw	zero,0(r4)
 400f650:	20000115 	stw	zero,4(r4)
 400f654:	20000215 	stw	zero,8(r4)
 400f658:	20000415 	stw	zero,16(r4)
 400f65c:	20000515 	stw	zero,20(r4)
 400f660:	20000615 	stw	zero,24(r4)
 400f664:	21000715 	stw	r4,28(r4)
 400f668:	f800283a 	ret

0400f66c <__sfp_lock_acquire>:
 400f66c:	f800283a 	ret

0400f670 <__sfp_lock_release>:
 400f670:	f800283a 	ret

0400f674 <__sinit_lock_acquire>:
 400f674:	f800283a 	ret

0400f678 <__sinit_lock_release>:
 400f678:	f800283a 	ret

0400f67c <__sinit>:
 400f67c:	20800e17 	ldw	r2,56(r4)
 400f680:	defffd04 	addi	sp,sp,-12
 400f684:	dc400115 	stw	r17,4(sp)
 400f688:	dc000015 	stw	r16,0(sp)
 400f68c:	dfc00215 	stw	ra,8(sp)
 400f690:	04400044 	movi	r17,1
 400f694:	01400104 	movi	r5,4
 400f698:	000d883a 	mov	r6,zero
 400f69c:	2021883a 	mov	r16,r4
 400f6a0:	2200bb04 	addi	r8,r4,748
 400f6a4:	200f883a 	mov	r7,r4
 400f6a8:	10000526 	beq	r2,zero,400f6c0 <__sinit+0x44>
 400f6ac:	dfc00217 	ldw	ra,8(sp)
 400f6b0:	dc400117 	ldw	r17,4(sp)
 400f6b4:	dc000017 	ldw	r16,0(sp)
 400f6b8:	dec00304 	addi	sp,sp,12
 400f6bc:	f800283a 	ret
 400f6c0:	21000117 	ldw	r4,4(r4)
 400f6c4:	00810074 	movhi	r2,1025
 400f6c8:	10bdd804 	addi	r2,r2,-2208
 400f6cc:	00c000c4 	movi	r3,3
 400f6d0:	80800f15 	stw	r2,60(r16)
 400f6d4:	80c0b915 	stw	r3,740(r16)
 400f6d8:	8200ba15 	stw	r8,744(r16)
 400f6dc:	84400e15 	stw	r17,56(r16)
 400f6e0:	8000b815 	stw	zero,736(r16)
 400f6e4:	400f6140 	call	400f614 <std>
 400f6e8:	81000217 	ldw	r4,8(r16)
 400f6ec:	880d883a 	mov	r6,r17
 400f6f0:	800f883a 	mov	r7,r16
 400f6f4:	01400284 	movi	r5,10
 400f6f8:	400f6140 	call	400f614 <std>
 400f6fc:	81000317 	ldw	r4,12(r16)
 400f700:	800f883a 	mov	r7,r16
 400f704:	01400484 	movi	r5,18
 400f708:	01800084 	movi	r6,2
 400f70c:	dfc00217 	ldw	ra,8(sp)
 400f710:	dc400117 	ldw	r17,4(sp)
 400f714:	dc000017 	ldw	r16,0(sp)
 400f718:	dec00304 	addi	sp,sp,12
 400f71c:	400f6141 	jmpi	400f614 <std>

0400f720 <__fp_lock>:
 400f720:	0005883a 	mov	r2,zero
 400f724:	f800283a 	ret

0400f728 <__fp_unlock>:
 400f728:	0005883a 	mov	r2,zero
 400f72c:	f800283a 	ret

0400f730 <__fp_unlock_all>:
 400f730:	008100b4 	movhi	r2,1026
 400f734:	109a4904 	addi	r2,r2,26916
 400f738:	11000017 	ldw	r4,0(r2)
 400f73c:	01410074 	movhi	r5,1025
 400f740:	297dca04 	addi	r5,r5,-2264
 400f744:	40104f81 	jmpi	40104f8 <_fwalk>

0400f748 <__fp_lock_all>:
 400f748:	008100b4 	movhi	r2,1026
 400f74c:	109a4904 	addi	r2,r2,26916
 400f750:	11000017 	ldw	r4,0(r2)
 400f754:	01410074 	movhi	r5,1025
 400f758:	297dc804 	addi	r5,r5,-2272
 400f75c:	40104f81 	jmpi	40104f8 <_fwalk>

0400f760 <_cleanup_r>:
 400f760:	01410074 	movhi	r5,1025
 400f764:	2953ff04 	addi	r5,r5,20476
 400f768:	40104f81 	jmpi	40104f8 <_fwalk>

0400f76c <_cleanup>:
 400f76c:	008100b4 	movhi	r2,1026
 400f770:	109a4a04 	addi	r2,r2,26920
 400f774:	11000017 	ldw	r4,0(r2)
 400f778:	400f7601 	jmpi	400f760 <_cleanup_r>

0400f77c <__sfmoreglue>:
 400f77c:	defffc04 	addi	sp,sp,-16
 400f780:	dc000015 	stw	r16,0(sp)
 400f784:	2821883a 	mov	r16,r5
 400f788:	dc400115 	stw	r17,4(sp)
 400f78c:	01401704 	movi	r5,92
 400f790:	2023883a 	mov	r17,r4
 400f794:	8009883a 	mov	r4,r16
 400f798:	dfc00315 	stw	ra,12(sp)
 400f79c:	dcc00215 	stw	r19,8(sp)
 400f7a0:	4008ff80 	call	4008ff8 <__mulsi3>
 400f7a4:	11400304 	addi	r5,r2,12
 400f7a8:	8809883a 	mov	r4,r17
 400f7ac:	1027883a 	mov	r19,r2
 400f7b0:	4009a1c0 	call	4009a1c <_malloc_r>
 400f7b4:	10c00304 	addi	r3,r2,12
 400f7b8:	1023883a 	mov	r17,r2
 400f7bc:	1809883a 	mov	r4,r3
 400f7c0:	980d883a 	mov	r6,r19
 400f7c4:	000b883a 	mov	r5,zero
 400f7c8:	10000b26 	beq	r2,zero,400f7f8 <__sfmoreglue+0x7c>
 400f7cc:	14000115 	stw	r16,4(r2)
 400f7d0:	10c00215 	stw	r3,8(r2)
 400f7d4:	10000015 	stw	zero,0(r2)
 400f7d8:	4010b980 	call	4010b98 <memset>
 400f7dc:	8805883a 	mov	r2,r17
 400f7e0:	dfc00317 	ldw	ra,12(sp)
 400f7e4:	dcc00217 	ldw	r19,8(sp)
 400f7e8:	dc400117 	ldw	r17,4(sp)
 400f7ec:	dc000017 	ldw	r16,0(sp)
 400f7f0:	dec00404 	addi	sp,sp,16
 400f7f4:	f800283a 	ret
 400f7f8:	0023883a 	mov	r17,zero
 400f7fc:	8805883a 	mov	r2,r17
 400f800:	dfc00317 	ldw	ra,12(sp)
 400f804:	dcc00217 	ldw	r19,8(sp)
 400f808:	dc400117 	ldw	r17,4(sp)
 400f80c:	dc000017 	ldw	r16,0(sp)
 400f810:	dec00404 	addi	sp,sp,16
 400f814:	f800283a 	ret

0400f818 <__sfp>:
 400f818:	defffd04 	addi	sp,sp,-12
 400f81c:	008100b4 	movhi	r2,1026
 400f820:	109a4a04 	addi	r2,r2,26920
 400f824:	dc000015 	stw	r16,0(sp)
 400f828:	14000017 	ldw	r16,0(r2)
 400f82c:	dc400115 	stw	r17,4(sp)
 400f830:	dfc00215 	stw	ra,8(sp)
 400f834:	80800e17 	ldw	r2,56(r16)
 400f838:	2023883a 	mov	r17,r4
 400f83c:	10002626 	beq	r2,zero,400f8d8 <__sfp+0xc0>
 400f840:	8400b804 	addi	r16,r16,736
 400f844:	80800117 	ldw	r2,4(r16)
 400f848:	81000217 	ldw	r4,8(r16)
 400f84c:	10ffffc4 	addi	r3,r2,-1
 400f850:	18000916 	blt	r3,zero,400f878 <__sfp+0x60>
 400f854:	2080030f 	ldh	r2,12(r4)
 400f858:	10000b26 	beq	r2,zero,400f888 <__sfp+0x70>
 400f85c:	017fffc4 	movi	r5,-1
 400f860:	00000206 	br	400f86c <__sfp+0x54>
 400f864:	2080030f 	ldh	r2,12(r4)
 400f868:	10000726 	beq	r2,zero,400f888 <__sfp+0x70>
 400f86c:	18ffffc4 	addi	r3,r3,-1
 400f870:	21001704 	addi	r4,r4,92
 400f874:	197ffb1e 	bne	r3,r5,400f864 <__sfp+0x4c>
 400f878:	80800017 	ldw	r2,0(r16)
 400f87c:	10001926 	beq	r2,zero,400f8e4 <__sfp+0xcc>
 400f880:	1021883a 	mov	r16,r2
 400f884:	003fef06 	br	400f844 <__sfp+0x2c>
 400f888:	00bfffc4 	movi	r2,-1
 400f88c:	00c00044 	movi	r3,1
 400f890:	2080038d 	sth	r2,14(r4)
 400f894:	20c0030d 	sth	r3,12(r4)
 400f898:	20000015 	stw	zero,0(r4)
 400f89c:	20000215 	stw	zero,8(r4)
 400f8a0:	20000115 	stw	zero,4(r4)
 400f8a4:	20000415 	stw	zero,16(r4)
 400f8a8:	20000515 	stw	zero,20(r4)
 400f8ac:	20000615 	stw	zero,24(r4)
 400f8b0:	20000c15 	stw	zero,48(r4)
 400f8b4:	20000d15 	stw	zero,52(r4)
 400f8b8:	20001115 	stw	zero,68(r4)
 400f8bc:	20001215 	stw	zero,72(r4)
 400f8c0:	2005883a 	mov	r2,r4
 400f8c4:	dfc00217 	ldw	ra,8(sp)
 400f8c8:	dc400117 	ldw	r17,4(sp)
 400f8cc:	dc000017 	ldw	r16,0(sp)
 400f8d0:	dec00304 	addi	sp,sp,12
 400f8d4:	f800283a 	ret
 400f8d8:	8009883a 	mov	r4,r16
 400f8dc:	400f67c0 	call	400f67c <__sinit>
 400f8e0:	003fd706 	br	400f840 <__sfp+0x28>
 400f8e4:	8809883a 	mov	r4,r17
 400f8e8:	01400104 	movi	r5,4
 400f8ec:	400f77c0 	call	400f77c <__sfmoreglue>
 400f8f0:	80800015 	stw	r2,0(r16)
 400f8f4:	103fe21e 	bne	r2,zero,400f880 <__sfp+0x68>
 400f8f8:	00800304 	movi	r2,12
 400f8fc:	0009883a 	mov	r4,zero
 400f900:	88800015 	stw	r2,0(r17)
 400f904:	003fee06 	br	400f8c0 <__sfp+0xa8>

0400f908 <_fread_r>:
 400f908:	defff504 	addi	sp,sp,-44
 400f90c:	dd800715 	stw	r22,28(sp)
 400f910:	dc000115 	stw	r16,4(sp)
 400f914:	202d883a 	mov	r22,r4
 400f918:	2821883a 	mov	r16,r5
 400f91c:	3809883a 	mov	r4,r7
 400f920:	300b883a 	mov	r5,r6
 400f924:	df000915 	stw	fp,36(sp)
 400f928:	ddc00815 	stw	r23,32(sp)
 400f92c:	dcc00415 	stw	r19,16(sp)
 400f930:	dfc00a15 	stw	ra,40(sp)
 400f934:	dd400615 	stw	r21,24(sp)
 400f938:	dd000515 	stw	r20,20(sp)
 400f93c:	dc800315 	stw	r18,12(sp)
 400f940:	dc400215 	stw	r17,8(sp)
 400f944:	d9800015 	stw	r6,0(sp)
 400f948:	3839883a 	mov	fp,r7
 400f94c:	4008ff80 	call	4008ff8 <__mulsi3>
 400f950:	102f883a 	mov	r23,r2
 400f954:	dcc00b17 	ldw	r19,44(sp)
 400f958:	10005926 	beq	r2,zero,400fac0 <_fread_r+0x1b8>
 400f95c:	b0000226 	beq	r22,zero,400f968 <_fread_r+0x60>
 400f960:	b0800e17 	ldw	r2,56(r22)
 400f964:	10005826 	beq	r2,zero,400fac8 <_fread_r+0x1c0>
 400f968:	9c400117 	ldw	r17,4(r19)
 400f96c:	88005a16 	blt	r17,zero,400fad8 <_fread_r+0x1d0>
 400f970:	9880030b 	ldhu	r2,12(r19)
 400f974:	8029883a 	mov	r20,r16
 400f978:	1080008c 	andi	r2,r2,2
 400f97c:	1000221e 	bne	r2,zero,400fa08 <_fread_r+0x100>
 400f980:	b825883a 	mov	r18,r23
 400f984:	00000106 	br	400f98c <_fread_r+0x84>
 400f988:	9c400117 	ldw	r17,4(r19)
 400f98c:	a009883a 	mov	r4,r20
 400f990:	880d883a 	mov	r6,r17
 400f994:	8c80552e 	bgeu	r17,r18,400faec <_fread_r+0x1e4>
 400f998:	99400017 	ldw	r5,0(r19)
 400f99c:	a469883a 	add	r20,r20,r17
 400f9a0:	9465c83a 	sub	r18,r18,r17
 400f9a4:	4010a180 	call	4010a18 <memcpy>
 400f9a8:	98800017 	ldw	r2,0(r19)
 400f9ac:	b009883a 	mov	r4,r22
 400f9b0:	980b883a 	mov	r5,r19
 400f9b4:	1461883a 	add	r16,r2,r17
 400f9b8:	9c000015 	stw	r16,0(r19)
 400f9bc:	40122b00 	call	40122b0 <__srefill_r>
 400f9c0:	103ff126 	beq	r2,zero,400f988 <_fread_r+0x80>
 400f9c4:	d9400017 	ldw	r5,0(sp)
 400f9c8:	bc89c83a 	sub	r4,r23,r18
 400f9cc:	4008fe80 	call	4008fe8 <__udivsi3>
 400f9d0:	1039883a 	mov	fp,r2
 400f9d4:	e005883a 	mov	r2,fp
 400f9d8:	dfc00a17 	ldw	ra,40(sp)
 400f9dc:	df000917 	ldw	fp,36(sp)
 400f9e0:	ddc00817 	ldw	r23,32(sp)
 400f9e4:	dd800717 	ldw	r22,28(sp)
 400f9e8:	dd400617 	ldw	r21,24(sp)
 400f9ec:	dd000517 	ldw	r20,20(sp)
 400f9f0:	dcc00417 	ldw	r19,16(sp)
 400f9f4:	dc800317 	ldw	r18,12(sp)
 400f9f8:	dc400217 	ldw	r17,8(sp)
 400f9fc:	dc000117 	ldw	r16,4(sp)
 400fa00:	dec00b04 	addi	sp,sp,44
 400fa04:	f800283a 	ret
 400fa08:	b825883a 	mov	r18,r23
 400fa0c:	8dc03536 	bltu	r17,r23,400fae4 <_fread_r+0x1dc>
 400fa10:	99400017 	ldw	r5,0(r19)
 400fa14:	a009883a 	mov	r4,r20
 400fa18:	900d883a 	mov	r6,r18
 400fa1c:	4010a180 	call	4010a18 <memcpy>
 400fa20:	9c000017 	ldw	r16,0(r19)
 400fa24:	98800117 	ldw	r2,4(r19)
 400fa28:	99400c17 	ldw	r5,48(r19)
 400fa2c:	84a1883a 	add	r16,r16,r18
 400fa30:	14a3c83a 	sub	r17,r2,r18
 400fa34:	a4ab883a 	add	r21,r20,r18
 400fa38:	9c400115 	stw	r17,4(r19)
 400fa3c:	9c000015 	stw	r16,0(r19)
 400fa40:	bca9c83a 	sub	r20,r23,r18
 400fa44:	28000826 	beq	r5,zero,400fa68 <_fread_r+0x160>
 400fa48:	a03fe226 	beq	r20,zero,400f9d4 <_fread_r+0xcc>
 400fa4c:	98801004 	addi	r2,r19,64
 400fa50:	28800326 	beq	r5,r2,400fa60 <_fread_r+0x158>
 400fa54:	b009883a 	mov	r4,r22
 400fa58:	400fc800 	call	400fc80 <_free_r>
 400fa5c:	9c000017 	ldw	r16,0(r19)
 400fa60:	98000c15 	stw	zero,48(r19)
 400fa64:	00000106 	br	400fa6c <_fread_r+0x164>
 400fa68:	a03fda26 	beq	r20,zero,400f9d4 <_fread_r+0xcc>
 400fa6c:	9c800417 	ldw	r18,16(r19)
 400fa70:	9c400517 	ldw	r17,20(r19)
 400fa74:	9d400015 	stw	r21,0(r19)
 400fa78:	9d400415 	stw	r21,16(r19)
 400fa7c:	9d000515 	stw	r20,20(r19)
 400fa80:	b009883a 	mov	r4,r22
 400fa84:	980b883a 	mov	r5,r19
 400fa88:	40122b00 	call	40122b0 <__srefill_r>
 400fa8c:	98c00117 	ldw	r3,4(r19)
 400fa90:	9c800415 	stw	r18,16(r19)
 400fa94:	9c400515 	stw	r17,20(r19)
 400fa98:	a8eb883a 	add	r21,r21,r3
 400fa9c:	9c000015 	stw	r16,0(r19)
 400faa0:	a0e9c83a 	sub	r20,r20,r3
 400faa4:	98000115 	stw	zero,4(r19)
 400faa8:	103fef26 	beq	r2,zero,400fa68 <_fread_r+0x160>
 400faac:	d9400017 	ldw	r5,0(sp)
 400fab0:	bd09c83a 	sub	r4,r23,r20
 400fab4:	4008fe80 	call	4008fe8 <__udivsi3>
 400fab8:	1039883a 	mov	fp,r2
 400fabc:	003fc506 	br	400f9d4 <_fread_r+0xcc>
 400fac0:	0039883a 	mov	fp,zero
 400fac4:	003fc306 	br	400f9d4 <_fread_r+0xcc>
 400fac8:	b009883a 	mov	r4,r22
 400facc:	400f67c0 	call	400f67c <__sinit>
 400fad0:	9c400117 	ldw	r17,4(r19)
 400fad4:	883fa60e 	bge	r17,zero,400f970 <_fread_r+0x68>
 400fad8:	0023883a 	mov	r17,zero
 400fadc:	98000115 	stw	zero,4(r19)
 400fae0:	003fa306 	br	400f970 <_fread_r+0x68>
 400fae4:	8825883a 	mov	r18,r17
 400fae8:	003fc906 	br	400fa10 <_fread_r+0x108>
 400faec:	99400017 	ldw	r5,0(r19)
 400faf0:	900d883a 	mov	r6,r18
 400faf4:	4010a180 	call	4010a18 <memcpy>
 400faf8:	98c00117 	ldw	r3,4(r19)
 400fafc:	98800017 	ldw	r2,0(r19)
 400fb00:	1c87c83a 	sub	r3,r3,r18
 400fb04:	1485883a 	add	r2,r2,r18
 400fb08:	98800015 	stw	r2,0(r19)
 400fb0c:	98c00115 	stw	r3,4(r19)
 400fb10:	003fb006 	br	400f9d4 <_fread_r+0xcc>

0400fb14 <fread>:
 400fb14:	008100b4 	movhi	r2,1026
 400fb18:	109a4904 	addi	r2,r2,26916
 400fb1c:	2017883a 	mov	r11,r4
 400fb20:	11000017 	ldw	r4,0(r2)
 400fb24:	defffe04 	addi	sp,sp,-8
 400fb28:	3013883a 	mov	r9,r6
 400fb2c:	2805883a 	mov	r2,r5
 400fb30:	d9c00015 	stw	r7,0(sp)
 400fb34:	580b883a 	mov	r5,r11
 400fb38:	100d883a 	mov	r6,r2
 400fb3c:	480f883a 	mov	r7,r9
 400fb40:	dfc00115 	stw	ra,4(sp)
 400fb44:	400f9080 	call	400f908 <_fread_r>
 400fb48:	dfc00117 	ldw	ra,4(sp)
 400fb4c:	dec00204 	addi	sp,sp,8
 400fb50:	f800283a 	ret

0400fb54 <_malloc_trim_r>:
 400fb54:	defffb04 	addi	sp,sp,-20
 400fb58:	dcc00315 	stw	r19,12(sp)
 400fb5c:	04c100b4 	movhi	r19,1026
 400fb60:	9cd48204 	addi	r19,r19,21000
 400fb64:	dc800215 	stw	r18,8(sp)
 400fb68:	dc400115 	stw	r17,4(sp)
 400fb6c:	dc000015 	stw	r16,0(sp)
 400fb70:	2823883a 	mov	r17,r5
 400fb74:	2025883a 	mov	r18,r4
 400fb78:	dfc00415 	stw	ra,16(sp)
 400fb7c:	4017dd40 	call	4017dd4 <__malloc_lock>
 400fb80:	98800217 	ldw	r2,8(r19)
 400fb84:	9009883a 	mov	r4,r18
 400fb88:	000b883a 	mov	r5,zero
 400fb8c:	10c00117 	ldw	r3,4(r2)
 400fb90:	00bfff04 	movi	r2,-4
 400fb94:	18a0703a 	and	r16,r3,r2
 400fb98:	8463c83a 	sub	r17,r16,r17
 400fb9c:	8c43fbc4 	addi	r17,r17,4079
 400fba0:	8822d33a 	srli	r17,r17,12
 400fba4:	0083ffc4 	movi	r2,4095
 400fba8:	8c7fffc4 	addi	r17,r17,-1
 400fbac:	8822933a 	slli	r17,r17,12
 400fbb0:	1440060e 	bge	r2,r17,400fbcc <_malloc_trim_r+0x78>
 400fbb4:	400a2880 	call	400a288 <_sbrk_r>
 400fbb8:	98c00217 	ldw	r3,8(r19)
 400fbbc:	9009883a 	mov	r4,r18
 400fbc0:	044bc83a 	sub	r5,zero,r17
 400fbc4:	80c7883a 	add	r3,r16,r3
 400fbc8:	10c00926 	beq	r2,r3,400fbf0 <_malloc_trim_r+0x9c>
 400fbcc:	4017edc0 	call	4017edc <__malloc_unlock>
 400fbd0:	0005883a 	mov	r2,zero
 400fbd4:	dfc00417 	ldw	ra,16(sp)
 400fbd8:	dcc00317 	ldw	r19,12(sp)
 400fbdc:	dc800217 	ldw	r18,8(sp)
 400fbe0:	dc400117 	ldw	r17,4(sp)
 400fbe4:	dc000017 	ldw	r16,0(sp)
 400fbe8:	dec00504 	addi	sp,sp,20
 400fbec:	f800283a 	ret
 400fbf0:	9009883a 	mov	r4,r18
 400fbf4:	400a2880 	call	400a288 <_sbrk_r>
 400fbf8:	844dc83a 	sub	r6,r16,r17
 400fbfc:	00ffffc4 	movi	r3,-1
 400fc00:	9009883a 	mov	r4,r18
 400fc04:	000b883a 	mov	r5,zero
 400fc08:	01c100b4 	movhi	r7,1026
 400fc0c:	39dab904 	addi	r7,r7,27364
 400fc10:	31800054 	ori	r6,r6,1
 400fc14:	10c00926 	beq	r2,r3,400fc3c <_malloc_trim_r+0xe8>
 400fc18:	38800017 	ldw	r2,0(r7)
 400fc1c:	98c00217 	ldw	r3,8(r19)
 400fc20:	9009883a 	mov	r4,r18
 400fc24:	1445c83a 	sub	r2,r2,r17
 400fc28:	38800015 	stw	r2,0(r7)
 400fc2c:	19800115 	stw	r6,4(r3)
 400fc30:	4017edc0 	call	4017edc <__malloc_unlock>
 400fc34:	00800044 	movi	r2,1
 400fc38:	003fe606 	br	400fbd4 <_malloc_trim_r+0x80>
 400fc3c:	400a2880 	call	400a288 <_sbrk_r>
 400fc40:	99800217 	ldw	r6,8(r19)
 400fc44:	100f883a 	mov	r7,r2
 400fc48:	9009883a 	mov	r4,r18
 400fc4c:	1187c83a 	sub	r3,r2,r6
 400fc50:	008003c4 	movi	r2,15
 400fc54:	19400054 	ori	r5,r3,1
 400fc58:	10ffdc0e 	bge	r2,r3,400fbcc <_malloc_trim_r+0x78>
 400fc5c:	008100b4 	movhi	r2,1026
 400fc60:	109a4c04 	addi	r2,r2,26928
 400fc64:	10c00017 	ldw	r3,0(r2)
 400fc68:	008100b4 	movhi	r2,1026
 400fc6c:	109ab904 	addi	r2,r2,27364
 400fc70:	31400115 	stw	r5,4(r6)
 400fc74:	38c7c83a 	sub	r3,r7,r3
 400fc78:	10c00015 	stw	r3,0(r2)
 400fc7c:	003fd306 	br	400fbcc <_malloc_trim_r+0x78>

0400fc80 <_free_r>:
 400fc80:	defffd04 	addi	sp,sp,-12
 400fc84:	dc400115 	stw	r17,4(sp)
 400fc88:	dc000015 	stw	r16,0(sp)
 400fc8c:	dfc00215 	stw	ra,8(sp)
 400fc90:	2821883a 	mov	r16,r5
 400fc94:	2023883a 	mov	r17,r4
 400fc98:	28005a26 	beq	r5,zero,400fe04 <_free_r+0x184>
 400fc9c:	4017dd40 	call	4017dd4 <__malloc_lock>
 400fca0:	823ffe04 	addi	r8,r16,-8
 400fca4:	41400117 	ldw	r5,4(r8)
 400fca8:	00bfff84 	movi	r2,-2
 400fcac:	028100b4 	movhi	r10,1026
 400fcb0:	52948204 	addi	r10,r10,21000
 400fcb4:	288e703a 	and	r7,r5,r2
 400fcb8:	41cd883a 	add	r6,r8,r7
 400fcbc:	30c00117 	ldw	r3,4(r6)
 400fcc0:	51000217 	ldw	r4,8(r10)
 400fcc4:	00bfff04 	movi	r2,-4
 400fcc8:	1892703a 	and	r9,r3,r2
 400fccc:	5017883a 	mov	r11,r10
 400fcd0:	31006726 	beq	r6,r4,400fe70 <_free_r+0x1f0>
 400fcd4:	2880004c 	andi	r2,r5,1
 400fcd8:	1005003a 	cmpeq	r2,r2,zero
 400fcdc:	32400115 	stw	r9,4(r6)
 400fce0:	10001a1e 	bne	r2,zero,400fd4c <_free_r+0xcc>
 400fce4:	000b883a 	mov	r5,zero
 400fce8:	3247883a 	add	r3,r6,r9
 400fcec:	18800117 	ldw	r2,4(r3)
 400fcf0:	1080004c 	andi	r2,r2,1
 400fcf4:	1000231e 	bne	r2,zero,400fd84 <_free_r+0x104>
 400fcf8:	280ac03a 	cmpne	r5,r5,zero
 400fcfc:	3a4f883a 	add	r7,r7,r9
 400fd00:	2800451e 	bne	r5,zero,400fe18 <_free_r+0x198>
 400fd04:	31000217 	ldw	r4,8(r6)
 400fd08:	008100b4 	movhi	r2,1026
 400fd0c:	10948404 	addi	r2,r2,21008
 400fd10:	20807b26 	beq	r4,r2,400ff00 <_free_r+0x280>
 400fd14:	30800317 	ldw	r2,12(r6)
 400fd18:	3a07883a 	add	r3,r7,r8
 400fd1c:	19c00015 	stw	r7,0(r3)
 400fd20:	11000215 	stw	r4,8(r2)
 400fd24:	20800315 	stw	r2,12(r4)
 400fd28:	38800054 	ori	r2,r7,1
 400fd2c:	40800115 	stw	r2,4(r8)
 400fd30:	28001a26 	beq	r5,zero,400fd9c <_free_r+0x11c>
 400fd34:	8809883a 	mov	r4,r17
 400fd38:	dfc00217 	ldw	ra,8(sp)
 400fd3c:	dc400117 	ldw	r17,4(sp)
 400fd40:	dc000017 	ldw	r16,0(sp)
 400fd44:	dec00304 	addi	sp,sp,12
 400fd48:	4017edc1 	jmpi	4017edc <__malloc_unlock>
 400fd4c:	80bffe17 	ldw	r2,-8(r16)
 400fd50:	50c00204 	addi	r3,r10,8
 400fd54:	4091c83a 	sub	r8,r8,r2
 400fd58:	41000217 	ldw	r4,8(r8)
 400fd5c:	388f883a 	add	r7,r7,r2
 400fd60:	20c06126 	beq	r4,r3,400fee8 <_free_r+0x268>
 400fd64:	40800317 	ldw	r2,12(r8)
 400fd68:	3247883a 	add	r3,r6,r9
 400fd6c:	000b883a 	mov	r5,zero
 400fd70:	11000215 	stw	r4,8(r2)
 400fd74:	20800315 	stw	r2,12(r4)
 400fd78:	18800117 	ldw	r2,4(r3)
 400fd7c:	1080004c 	andi	r2,r2,1
 400fd80:	103fdd26 	beq	r2,zero,400fcf8 <_free_r+0x78>
 400fd84:	38800054 	ori	r2,r7,1
 400fd88:	3a07883a 	add	r3,r7,r8
 400fd8c:	280ac03a 	cmpne	r5,r5,zero
 400fd90:	40800115 	stw	r2,4(r8)
 400fd94:	19c00015 	stw	r7,0(r3)
 400fd98:	283fe61e 	bne	r5,zero,400fd34 <_free_r+0xb4>
 400fd9c:	00807fc4 	movi	r2,511
 400fda0:	11c01f2e 	bgeu	r2,r7,400fe20 <_free_r+0x1a0>
 400fda4:	3806d27a 	srli	r3,r7,9
 400fda8:	1800481e 	bne	r3,zero,400fecc <_free_r+0x24c>
 400fdac:	3804d0fa 	srli	r2,r7,3
 400fdb0:	100690fa 	slli	r3,r2,3
 400fdb4:	1acd883a 	add	r6,r3,r11
 400fdb8:	31400217 	ldw	r5,8(r6)
 400fdbc:	31405926 	beq	r6,r5,400ff24 <_free_r+0x2a4>
 400fdc0:	28800117 	ldw	r2,4(r5)
 400fdc4:	00ffff04 	movi	r3,-4
 400fdc8:	10c4703a 	and	r2,r2,r3
 400fdcc:	3880022e 	bgeu	r7,r2,400fdd8 <_free_r+0x158>
 400fdd0:	29400217 	ldw	r5,8(r5)
 400fdd4:	317ffa1e 	bne	r6,r5,400fdc0 <_free_r+0x140>
 400fdd8:	29800317 	ldw	r6,12(r5)
 400fddc:	41800315 	stw	r6,12(r8)
 400fde0:	41400215 	stw	r5,8(r8)
 400fde4:	8809883a 	mov	r4,r17
 400fde8:	2a000315 	stw	r8,12(r5)
 400fdec:	32000215 	stw	r8,8(r6)
 400fdf0:	dfc00217 	ldw	ra,8(sp)
 400fdf4:	dc400117 	ldw	r17,4(sp)
 400fdf8:	dc000017 	ldw	r16,0(sp)
 400fdfc:	dec00304 	addi	sp,sp,12
 400fe00:	4017edc1 	jmpi	4017edc <__malloc_unlock>
 400fe04:	dfc00217 	ldw	ra,8(sp)
 400fe08:	dc400117 	ldw	r17,4(sp)
 400fe0c:	dc000017 	ldw	r16,0(sp)
 400fe10:	dec00304 	addi	sp,sp,12
 400fe14:	f800283a 	ret
 400fe18:	31000217 	ldw	r4,8(r6)
 400fe1c:	003fbd06 	br	400fd14 <_free_r+0x94>
 400fe20:	3806d0fa 	srli	r3,r7,3
 400fe24:	00800044 	movi	r2,1
 400fe28:	51400117 	ldw	r5,4(r10)
 400fe2c:	180890fa 	slli	r4,r3,3
 400fe30:	1807d0ba 	srai	r3,r3,2
 400fe34:	22c9883a 	add	r4,r4,r11
 400fe38:	21800217 	ldw	r6,8(r4)
 400fe3c:	10c4983a 	sll	r2,r2,r3
 400fe40:	41000315 	stw	r4,12(r8)
 400fe44:	41800215 	stw	r6,8(r8)
 400fe48:	288ab03a 	or	r5,r5,r2
 400fe4c:	22000215 	stw	r8,8(r4)
 400fe50:	8809883a 	mov	r4,r17
 400fe54:	51400115 	stw	r5,4(r10)
 400fe58:	32000315 	stw	r8,12(r6)
 400fe5c:	dfc00217 	ldw	ra,8(sp)
 400fe60:	dc400117 	ldw	r17,4(sp)
 400fe64:	dc000017 	ldw	r16,0(sp)
 400fe68:	dec00304 	addi	sp,sp,12
 400fe6c:	4017edc1 	jmpi	4017edc <__malloc_unlock>
 400fe70:	2880004c 	andi	r2,r5,1
 400fe74:	3a4d883a 	add	r6,r7,r9
 400fe78:	1000071e 	bne	r2,zero,400fe98 <_free_r+0x218>
 400fe7c:	80bffe17 	ldw	r2,-8(r16)
 400fe80:	4091c83a 	sub	r8,r8,r2
 400fe84:	41000317 	ldw	r4,12(r8)
 400fe88:	40c00217 	ldw	r3,8(r8)
 400fe8c:	308d883a 	add	r6,r6,r2
 400fe90:	20c00215 	stw	r3,8(r4)
 400fe94:	19000315 	stw	r4,12(r3)
 400fe98:	008100b4 	movhi	r2,1026
 400fe9c:	109a4b04 	addi	r2,r2,26924
 400fea0:	11000017 	ldw	r4,0(r2)
 400fea4:	30c00054 	ori	r3,r6,1
 400fea8:	52000215 	stw	r8,8(r10)
 400feac:	40c00115 	stw	r3,4(r8)
 400feb0:	313fa036 	bltu	r6,r4,400fd34 <_free_r+0xb4>
 400feb4:	008100b4 	movhi	r2,1026
 400feb8:	109a9304 	addi	r2,r2,27212
 400febc:	11400017 	ldw	r5,0(r2)
 400fec0:	8809883a 	mov	r4,r17
 400fec4:	400fb540 	call	400fb54 <_malloc_trim_r>
 400fec8:	003f9a06 	br	400fd34 <_free_r+0xb4>
 400fecc:	00800104 	movi	r2,4
 400fed0:	10c0072e 	bgeu	r2,r3,400fef0 <_free_r+0x270>
 400fed4:	00800504 	movi	r2,20
 400fed8:	10c01936 	bltu	r2,r3,400ff40 <_free_r+0x2c0>
 400fedc:	188016c4 	addi	r2,r3,91
 400fee0:	100690fa 	slli	r3,r2,3
 400fee4:	003fb306 	br	400fdb4 <_free_r+0x134>
 400fee8:	01400044 	movi	r5,1
 400feec:	003f7e06 	br	400fce8 <_free_r+0x68>
 400fef0:	3804d1ba 	srli	r2,r7,6
 400fef4:	10800e04 	addi	r2,r2,56
 400fef8:	100690fa 	slli	r3,r2,3
 400fefc:	003fad06 	br	400fdb4 <_free_r+0x134>
 400ff00:	22000315 	stw	r8,12(r4)
 400ff04:	22000215 	stw	r8,8(r4)
 400ff08:	3a05883a 	add	r2,r7,r8
 400ff0c:	38c00054 	ori	r3,r7,1
 400ff10:	11c00015 	stw	r7,0(r2)
 400ff14:	41000215 	stw	r4,8(r8)
 400ff18:	40c00115 	stw	r3,4(r8)
 400ff1c:	41000315 	stw	r4,12(r8)
 400ff20:	003f8406 	br	400fd34 <_free_r+0xb4>
 400ff24:	1005d0ba 	srai	r2,r2,2
 400ff28:	00c00044 	movi	r3,1
 400ff2c:	51000117 	ldw	r4,4(r10)
 400ff30:	1886983a 	sll	r3,r3,r2
 400ff34:	20c8b03a 	or	r4,r4,r3
 400ff38:	51000115 	stw	r4,4(r10)
 400ff3c:	003fa706 	br	400fddc <_free_r+0x15c>
 400ff40:	00801504 	movi	r2,84
 400ff44:	10c00436 	bltu	r2,r3,400ff58 <_free_r+0x2d8>
 400ff48:	3804d33a 	srli	r2,r7,12
 400ff4c:	10801b84 	addi	r2,r2,110
 400ff50:	100690fa 	slli	r3,r2,3
 400ff54:	003f9706 	br	400fdb4 <_free_r+0x134>
 400ff58:	00805504 	movi	r2,340
 400ff5c:	10c00436 	bltu	r2,r3,400ff70 <_free_r+0x2f0>
 400ff60:	3804d3fa 	srli	r2,r7,15
 400ff64:	10801dc4 	addi	r2,r2,119
 400ff68:	100690fa 	slli	r3,r2,3
 400ff6c:	003f9106 	br	400fdb4 <_free_r+0x134>
 400ff70:	00815504 	movi	r2,1364
 400ff74:	10c0032e 	bgeu	r2,r3,400ff84 <_free_r+0x304>
 400ff78:	00801f84 	movi	r2,126
 400ff7c:	00c0fc04 	movi	r3,1008
 400ff80:	003f8c06 	br	400fdb4 <_free_r+0x134>
 400ff84:	3804d4ba 	srli	r2,r7,18
 400ff88:	10801f04 	addi	r2,r2,124
 400ff8c:	100690fa 	slli	r3,r2,3
 400ff90:	003f8806 	br	400fdb4 <_free_r+0x134>

0400ff94 <__sfvwrite_r>:
 400ff94:	30800217 	ldw	r2,8(r6)
 400ff98:	defff504 	addi	sp,sp,-44
 400ff9c:	df000915 	stw	fp,36(sp)
 400ffa0:	dd800715 	stw	r22,28(sp)
 400ffa4:	dc800315 	stw	r18,12(sp)
 400ffa8:	dfc00a15 	stw	ra,40(sp)
 400ffac:	ddc00815 	stw	r23,32(sp)
 400ffb0:	dd400615 	stw	r21,24(sp)
 400ffb4:	dd000515 	stw	r20,20(sp)
 400ffb8:	dcc00415 	stw	r19,16(sp)
 400ffbc:	dc400215 	stw	r17,8(sp)
 400ffc0:	dc000115 	stw	r16,4(sp)
 400ffc4:	302d883a 	mov	r22,r6
 400ffc8:	2039883a 	mov	fp,r4
 400ffcc:	2825883a 	mov	r18,r5
 400ffd0:	10001c26 	beq	r2,zero,4010044 <__sfvwrite_r+0xb0>
 400ffd4:	29c0030b 	ldhu	r7,12(r5)
 400ffd8:	3880020c 	andi	r2,r7,8
 400ffdc:	10002726 	beq	r2,zero,401007c <__sfvwrite_r+0xe8>
 400ffe0:	28800417 	ldw	r2,16(r5)
 400ffe4:	10002526 	beq	r2,zero,401007c <__sfvwrite_r+0xe8>
 400ffe8:	3880008c 	andi	r2,r7,2
 400ffec:	b5400017 	ldw	r21,0(r22)
 400fff0:	10002826 	beq	r2,zero,4010094 <__sfvwrite_r+0x100>
 400fff4:	0021883a 	mov	r16,zero
 400fff8:	0023883a 	mov	r17,zero
 400fffc:	880d883a 	mov	r6,r17
 4010000:	e009883a 	mov	r4,fp
 4010004:	00810004 	movi	r2,1024
 4010008:	80006e26 	beq	r16,zero,40101c4 <__sfvwrite_r+0x230>
 401000c:	800f883a 	mov	r7,r16
 4010010:	91400717 	ldw	r5,28(r18)
 4010014:	1400012e 	bgeu	r2,r16,401001c <__sfvwrite_r+0x88>
 4010018:	100f883a 	mov	r7,r2
 401001c:	90c00917 	ldw	r3,36(r18)
 4010020:	183ee83a 	callr	r3
 4010024:	1007883a 	mov	r3,r2
 4010028:	80a1c83a 	sub	r16,r16,r2
 401002c:	88a3883a 	add	r17,r17,r2
 4010030:	00806d0e 	bge	zero,r2,40101e8 <__sfvwrite_r+0x254>
 4010034:	b0800217 	ldw	r2,8(r22)
 4010038:	10c5c83a 	sub	r2,r2,r3
 401003c:	b0800215 	stw	r2,8(r22)
 4010040:	103fee1e 	bne	r2,zero,400fffc <__sfvwrite_r+0x68>
 4010044:	0009883a 	mov	r4,zero
 4010048:	2005883a 	mov	r2,r4
 401004c:	dfc00a17 	ldw	ra,40(sp)
 4010050:	df000917 	ldw	fp,36(sp)
 4010054:	ddc00817 	ldw	r23,32(sp)
 4010058:	dd800717 	ldw	r22,28(sp)
 401005c:	dd400617 	ldw	r21,24(sp)
 4010060:	dd000517 	ldw	r20,20(sp)
 4010064:	dcc00417 	ldw	r19,16(sp)
 4010068:	dc800317 	ldw	r18,12(sp)
 401006c:	dc400217 	ldw	r17,8(sp)
 4010070:	dc000117 	ldw	r16,4(sp)
 4010074:	dec00b04 	addi	sp,sp,44
 4010078:	f800283a 	ret
 401007c:	400dab00 	call	400dab0 <__swsetup_r>
 4010080:	1000e41e 	bne	r2,zero,4010414 <__sfvwrite_r+0x480>
 4010084:	91c0030b 	ldhu	r7,12(r18)
 4010088:	b5400017 	ldw	r21,0(r22)
 401008c:	3880008c 	andi	r2,r7,2
 4010090:	103fd81e 	bne	r2,zero,400fff4 <__sfvwrite_r+0x60>
 4010094:	3880004c 	andi	r2,r7,1
 4010098:	1005003a 	cmpeq	r2,r2,zero
 401009c:	10005726 	beq	r2,zero,40101fc <__sfvwrite_r+0x268>
 40100a0:	0029883a 	mov	r20,zero
 40100a4:	002f883a 	mov	r23,zero
 40100a8:	a0004226 	beq	r20,zero,40101b4 <__sfvwrite_r+0x220>
 40100ac:	3880800c 	andi	r2,r7,512
 40100b0:	94000217 	ldw	r16,8(r18)
 40100b4:	10008b26 	beq	r2,zero,40102e4 <__sfvwrite_r+0x350>
 40100b8:	800d883a 	mov	r6,r16
 40100bc:	a400a536 	bltu	r20,r16,4010354 <__sfvwrite_r+0x3c0>
 40100c0:	3881200c 	andi	r2,r7,1152
 40100c4:	10002726 	beq	r2,zero,4010164 <__sfvwrite_r+0x1d0>
 40100c8:	90800517 	ldw	r2,20(r18)
 40100cc:	92000417 	ldw	r8,16(r18)
 40100d0:	91400017 	ldw	r5,0(r18)
 40100d4:	1087883a 	add	r3,r2,r2
 40100d8:	1887883a 	add	r3,r3,r2
 40100dc:	1808d7fa 	srli	r4,r3,31
 40100e0:	2a21c83a 	sub	r16,r5,r8
 40100e4:	80800044 	addi	r2,r16,1
 40100e8:	20c9883a 	add	r4,r4,r3
 40100ec:	2027d07a 	srai	r19,r4,1
 40100f0:	a085883a 	add	r2,r20,r2
 40100f4:	980d883a 	mov	r6,r19
 40100f8:	9880022e 	bgeu	r19,r2,4010104 <__sfvwrite_r+0x170>
 40100fc:	1027883a 	mov	r19,r2
 4010100:	100d883a 	mov	r6,r2
 4010104:	3881000c 	andi	r2,r7,1024
 4010108:	1000b826 	beq	r2,zero,40103ec <__sfvwrite_r+0x458>
 401010c:	300b883a 	mov	r5,r6
 4010110:	e009883a 	mov	r4,fp
 4010114:	4009a1c0 	call	4009a1c <_malloc_r>
 4010118:	10003126 	beq	r2,zero,40101e0 <__sfvwrite_r+0x24c>
 401011c:	91400417 	ldw	r5,16(r18)
 4010120:	1009883a 	mov	r4,r2
 4010124:	800d883a 	mov	r6,r16
 4010128:	1023883a 	mov	r17,r2
 401012c:	4010a180 	call	4010a18 <memcpy>
 4010130:	90c0030b 	ldhu	r3,12(r18)
 4010134:	00beffc4 	movi	r2,-1025
 4010138:	1886703a 	and	r3,r3,r2
 401013c:	18c02014 	ori	r3,r3,128
 4010140:	90c0030d 	sth	r3,12(r18)
 4010144:	9c07c83a 	sub	r3,r19,r16
 4010148:	8c05883a 	add	r2,r17,r16
 401014c:	a00d883a 	mov	r6,r20
 4010150:	a021883a 	mov	r16,r20
 4010154:	90800015 	stw	r2,0(r18)
 4010158:	90c00215 	stw	r3,8(r18)
 401015c:	94400415 	stw	r17,16(r18)
 4010160:	94c00515 	stw	r19,20(r18)
 4010164:	91000017 	ldw	r4,0(r18)
 4010168:	b80b883a 	mov	r5,r23
 401016c:	a023883a 	mov	r17,r20
 4010170:	4010ab80 	call	4010ab8 <memmove>
 4010174:	90c00217 	ldw	r3,8(r18)
 4010178:	90800017 	ldw	r2,0(r18)
 401017c:	a027883a 	mov	r19,r20
 4010180:	1c07c83a 	sub	r3,r3,r16
 4010184:	1405883a 	add	r2,r2,r16
 4010188:	90c00215 	stw	r3,8(r18)
 401018c:	a021883a 	mov	r16,r20
 4010190:	90800015 	stw	r2,0(r18)
 4010194:	b0800217 	ldw	r2,8(r22)
 4010198:	1405c83a 	sub	r2,r2,r16
 401019c:	b0800215 	stw	r2,8(r22)
 40101a0:	103fa826 	beq	r2,zero,4010044 <__sfvwrite_r+0xb0>
 40101a4:	a469c83a 	sub	r20,r20,r17
 40101a8:	91c0030b 	ldhu	r7,12(r18)
 40101ac:	bcef883a 	add	r23,r23,r19
 40101b0:	a03fbe1e 	bne	r20,zero,40100ac <__sfvwrite_r+0x118>
 40101b4:	adc00017 	ldw	r23,0(r21)
 40101b8:	ad000117 	ldw	r20,4(r21)
 40101bc:	ad400204 	addi	r21,r21,8
 40101c0:	003fb906 	br	40100a8 <__sfvwrite_r+0x114>
 40101c4:	ac400017 	ldw	r17,0(r21)
 40101c8:	ac000117 	ldw	r16,4(r21)
 40101cc:	ad400204 	addi	r21,r21,8
 40101d0:	003f8a06 	br	400fffc <__sfvwrite_r+0x68>
 40101d4:	91400417 	ldw	r5,16(r18)
 40101d8:	e009883a 	mov	r4,fp
 40101dc:	400fc800 	call	400fc80 <_free_r>
 40101e0:	00800304 	movi	r2,12
 40101e4:	e0800015 	stw	r2,0(fp)
 40101e8:	9080030b 	ldhu	r2,12(r18)
 40101ec:	013fffc4 	movi	r4,-1
 40101f0:	10801014 	ori	r2,r2,64
 40101f4:	9080030d 	sth	r2,12(r18)
 40101f8:	003f9306 	br	4010048 <__sfvwrite_r+0xb4>
 40101fc:	0027883a 	mov	r19,zero
 4010200:	002f883a 	mov	r23,zero
 4010204:	d8000015 	stw	zero,0(sp)
 4010208:	0029883a 	mov	r20,zero
 401020c:	98001e26 	beq	r19,zero,4010288 <__sfvwrite_r+0x2f4>
 4010210:	d8c00017 	ldw	r3,0(sp)
 4010214:	1804c03a 	cmpne	r2,r3,zero
 4010218:	10005e26 	beq	r2,zero,4010394 <__sfvwrite_r+0x400>
 401021c:	9821883a 	mov	r16,r19
 4010220:	a4c0012e 	bgeu	r20,r19,4010228 <__sfvwrite_r+0x294>
 4010224:	a021883a 	mov	r16,r20
 4010228:	91000017 	ldw	r4,0(r18)
 401022c:	90800417 	ldw	r2,16(r18)
 4010230:	91800217 	ldw	r6,8(r18)
 4010234:	91c00517 	ldw	r7,20(r18)
 4010238:	1100022e 	bgeu	r2,r4,4010244 <__sfvwrite_r+0x2b0>
 401023c:	31e3883a 	add	r17,r6,r7
 4010240:	8c001616 	blt	r17,r16,401029c <__sfvwrite_r+0x308>
 4010244:	81c03816 	blt	r16,r7,4010328 <__sfvwrite_r+0x394>
 4010248:	90c00917 	ldw	r3,36(r18)
 401024c:	91400717 	ldw	r5,28(r18)
 4010250:	e009883a 	mov	r4,fp
 4010254:	b80d883a 	mov	r6,r23
 4010258:	183ee83a 	callr	r3
 401025c:	1023883a 	mov	r17,r2
 4010260:	00bfe10e 	bge	zero,r2,40101e8 <__sfvwrite_r+0x254>
 4010264:	a469c83a 	sub	r20,r20,r17
 4010268:	a0001826 	beq	r20,zero,40102cc <__sfvwrite_r+0x338>
 401026c:	b0800217 	ldw	r2,8(r22)
 4010270:	1445c83a 	sub	r2,r2,r17
 4010274:	b0800215 	stw	r2,8(r22)
 4010278:	103f7226 	beq	r2,zero,4010044 <__sfvwrite_r+0xb0>
 401027c:	9c67c83a 	sub	r19,r19,r17
 4010280:	bc6f883a 	add	r23,r23,r17
 4010284:	983fe21e 	bne	r19,zero,4010210 <__sfvwrite_r+0x27c>
 4010288:	adc00017 	ldw	r23,0(r21)
 401028c:	acc00117 	ldw	r19,4(r21)
 4010290:	ad400204 	addi	r21,r21,8
 4010294:	d8000015 	stw	zero,0(sp)
 4010298:	003fdc06 	br	401020c <__sfvwrite_r+0x278>
 401029c:	b80b883a 	mov	r5,r23
 40102a0:	880d883a 	mov	r6,r17
 40102a4:	4010ab80 	call	4010ab8 <memmove>
 40102a8:	90c00017 	ldw	r3,0(r18)
 40102ac:	e009883a 	mov	r4,fp
 40102b0:	900b883a 	mov	r5,r18
 40102b4:	1c47883a 	add	r3,r3,r17
 40102b8:	90c00015 	stw	r3,0(r18)
 40102bc:	400f3e40 	call	400f3e4 <_fflush_r>
 40102c0:	103fc91e 	bne	r2,zero,40101e8 <__sfvwrite_r+0x254>
 40102c4:	a469c83a 	sub	r20,r20,r17
 40102c8:	a03fe81e 	bne	r20,zero,401026c <__sfvwrite_r+0x2d8>
 40102cc:	e009883a 	mov	r4,fp
 40102d0:	900b883a 	mov	r5,r18
 40102d4:	400f3e40 	call	400f3e4 <_fflush_r>
 40102d8:	103fc31e 	bne	r2,zero,40101e8 <__sfvwrite_r+0x254>
 40102dc:	d8000015 	stw	zero,0(sp)
 40102e0:	003fe206 	br	401026c <__sfvwrite_r+0x2d8>
 40102e4:	91000017 	ldw	r4,0(r18)
 40102e8:	90800417 	ldw	r2,16(r18)
 40102ec:	1100022e 	bgeu	r2,r4,40102f8 <__sfvwrite_r+0x364>
 40102f0:	8023883a 	mov	r17,r16
 40102f4:	85003136 	bltu	r16,r20,40103bc <__sfvwrite_r+0x428>
 40102f8:	91c00517 	ldw	r7,20(r18)
 40102fc:	a1c01836 	bltu	r20,r7,4010360 <__sfvwrite_r+0x3cc>
 4010300:	90c00917 	ldw	r3,36(r18)
 4010304:	91400717 	ldw	r5,28(r18)
 4010308:	e009883a 	mov	r4,fp
 401030c:	b80d883a 	mov	r6,r23
 4010310:	183ee83a 	callr	r3
 4010314:	1021883a 	mov	r16,r2
 4010318:	00bfb30e 	bge	zero,r2,40101e8 <__sfvwrite_r+0x254>
 401031c:	1023883a 	mov	r17,r2
 4010320:	1027883a 	mov	r19,r2
 4010324:	003f9b06 	br	4010194 <__sfvwrite_r+0x200>
 4010328:	b80b883a 	mov	r5,r23
 401032c:	800d883a 	mov	r6,r16
 4010330:	4010ab80 	call	4010ab8 <memmove>
 4010334:	90c00217 	ldw	r3,8(r18)
 4010338:	90800017 	ldw	r2,0(r18)
 401033c:	8023883a 	mov	r17,r16
 4010340:	1c07c83a 	sub	r3,r3,r16
 4010344:	1405883a 	add	r2,r2,r16
 4010348:	90c00215 	stw	r3,8(r18)
 401034c:	90800015 	stw	r2,0(r18)
 4010350:	003fc406 	br	4010264 <__sfvwrite_r+0x2d0>
 4010354:	a00d883a 	mov	r6,r20
 4010358:	a021883a 	mov	r16,r20
 401035c:	003f8106 	br	4010164 <__sfvwrite_r+0x1d0>
 4010360:	b80b883a 	mov	r5,r23
 4010364:	a00d883a 	mov	r6,r20
 4010368:	4010ab80 	call	4010ab8 <memmove>
 401036c:	90c00217 	ldw	r3,8(r18)
 4010370:	90800017 	ldw	r2,0(r18)
 4010374:	a021883a 	mov	r16,r20
 4010378:	1d07c83a 	sub	r3,r3,r20
 401037c:	1505883a 	add	r2,r2,r20
 4010380:	a023883a 	mov	r17,r20
 4010384:	a027883a 	mov	r19,r20
 4010388:	90c00215 	stw	r3,8(r18)
 401038c:	90800015 	stw	r2,0(r18)
 4010390:	003f8006 	br	4010194 <__sfvwrite_r+0x200>
 4010394:	b809883a 	mov	r4,r23
 4010398:	01400284 	movi	r5,10
 401039c:	980d883a 	mov	r6,r19
 40103a0:	40109340 	call	4010934 <memchr>
 40103a4:	10001726 	beq	r2,zero,4010404 <__sfvwrite_r+0x470>
 40103a8:	15c5c83a 	sub	r2,r2,r23
 40103ac:	15000044 	addi	r20,r2,1
 40103b0:	00800044 	movi	r2,1
 40103b4:	d8800015 	stw	r2,0(sp)
 40103b8:	003f9806 	br	401021c <__sfvwrite_r+0x288>
 40103bc:	b80b883a 	mov	r5,r23
 40103c0:	800d883a 	mov	r6,r16
 40103c4:	4010ab80 	call	4010ab8 <memmove>
 40103c8:	90c00017 	ldw	r3,0(r18)
 40103cc:	e009883a 	mov	r4,fp
 40103d0:	900b883a 	mov	r5,r18
 40103d4:	1c07883a 	add	r3,r3,r16
 40103d8:	90c00015 	stw	r3,0(r18)
 40103dc:	8027883a 	mov	r19,r16
 40103e0:	400f3e40 	call	400f3e4 <_fflush_r>
 40103e4:	103f6b26 	beq	r2,zero,4010194 <__sfvwrite_r+0x200>
 40103e8:	003f7f06 	br	40101e8 <__sfvwrite_r+0x254>
 40103ec:	400b883a 	mov	r5,r8
 40103f0:	e009883a 	mov	r4,fp
 40103f4:	4011cbc0 	call	4011cbc <_realloc_r>
 40103f8:	103f7626 	beq	r2,zero,40101d4 <__sfvwrite_r+0x240>
 40103fc:	1023883a 	mov	r17,r2
 4010400:	003f5006 	br	4010144 <__sfvwrite_r+0x1b0>
 4010404:	00c00044 	movi	r3,1
 4010408:	9d000044 	addi	r20,r19,1
 401040c:	d8c00015 	stw	r3,0(sp)
 4010410:	003f8206 	br	401021c <__sfvwrite_r+0x288>
 4010414:	9080030b 	ldhu	r2,12(r18)
 4010418:	00c00244 	movi	r3,9
 401041c:	013fffc4 	movi	r4,-1
 4010420:	10801014 	ori	r2,r2,64
 4010424:	9080030d 	sth	r2,12(r18)
 4010428:	e0c00015 	stw	r3,0(fp)
 401042c:	003f0606 	br	4010048 <__sfvwrite_r+0xb4>

04010430 <_fwalk_reent>:
 4010430:	defff704 	addi	sp,sp,-36
 4010434:	dcc00315 	stw	r19,12(sp)
 4010438:	24c0b804 	addi	r19,r4,736
 401043c:	dd800615 	stw	r22,24(sp)
 4010440:	dd400515 	stw	r21,20(sp)
 4010444:	dfc00815 	stw	ra,32(sp)
 4010448:	ddc00715 	stw	r23,28(sp)
 401044c:	dd000415 	stw	r20,16(sp)
 4010450:	dc800215 	stw	r18,8(sp)
 4010454:	dc400115 	stw	r17,4(sp)
 4010458:	dc000015 	stw	r16,0(sp)
 401045c:	202b883a 	mov	r21,r4
 4010460:	282d883a 	mov	r22,r5
 4010464:	400f66c0 	call	400f66c <__sfp_lock_acquire>
 4010468:	98002126 	beq	r19,zero,40104f0 <_fwalk_reent+0xc0>
 401046c:	002f883a 	mov	r23,zero
 4010470:	9c800117 	ldw	r18,4(r19)
 4010474:	9c000217 	ldw	r16,8(r19)
 4010478:	90bfffc4 	addi	r2,r18,-1
 401047c:	10000d16 	blt	r2,zero,40104b4 <_fwalk_reent+0x84>
 4010480:	0023883a 	mov	r17,zero
 4010484:	053fffc4 	movi	r20,-1
 4010488:	8080030f 	ldh	r2,12(r16)
 401048c:	8c400044 	addi	r17,r17,1
 4010490:	10000626 	beq	r2,zero,40104ac <_fwalk_reent+0x7c>
 4010494:	8080038f 	ldh	r2,14(r16)
 4010498:	800b883a 	mov	r5,r16
 401049c:	a809883a 	mov	r4,r21
 40104a0:	15000226 	beq	r2,r20,40104ac <_fwalk_reent+0x7c>
 40104a4:	b03ee83a 	callr	r22
 40104a8:	b8aeb03a 	or	r23,r23,r2
 40104ac:	84001704 	addi	r16,r16,92
 40104b0:	947ff51e 	bne	r18,r17,4010488 <_fwalk_reent+0x58>
 40104b4:	9cc00017 	ldw	r19,0(r19)
 40104b8:	983fed1e 	bne	r19,zero,4010470 <_fwalk_reent+0x40>
 40104bc:	400f6700 	call	400f670 <__sfp_lock_release>
 40104c0:	b805883a 	mov	r2,r23
 40104c4:	dfc00817 	ldw	ra,32(sp)
 40104c8:	ddc00717 	ldw	r23,28(sp)
 40104cc:	dd800617 	ldw	r22,24(sp)
 40104d0:	dd400517 	ldw	r21,20(sp)
 40104d4:	dd000417 	ldw	r20,16(sp)
 40104d8:	dcc00317 	ldw	r19,12(sp)
 40104dc:	dc800217 	ldw	r18,8(sp)
 40104e0:	dc400117 	ldw	r17,4(sp)
 40104e4:	dc000017 	ldw	r16,0(sp)
 40104e8:	dec00904 	addi	sp,sp,36
 40104ec:	f800283a 	ret
 40104f0:	002f883a 	mov	r23,zero
 40104f4:	003ff106 	br	40104bc <_fwalk_reent+0x8c>

040104f8 <_fwalk>:
 40104f8:	defff804 	addi	sp,sp,-32
 40104fc:	dcc00315 	stw	r19,12(sp)
 4010500:	24c0b804 	addi	r19,r4,736
 4010504:	dd400515 	stw	r21,20(sp)
 4010508:	dfc00715 	stw	ra,28(sp)
 401050c:	dd800615 	stw	r22,24(sp)
 4010510:	dd000415 	stw	r20,16(sp)
 4010514:	dc800215 	stw	r18,8(sp)
 4010518:	dc400115 	stw	r17,4(sp)
 401051c:	dc000015 	stw	r16,0(sp)
 4010520:	282b883a 	mov	r21,r5
 4010524:	400f66c0 	call	400f66c <__sfp_lock_acquire>
 4010528:	98001f26 	beq	r19,zero,40105a8 <_fwalk+0xb0>
 401052c:	002d883a 	mov	r22,zero
 4010530:	9c800117 	ldw	r18,4(r19)
 4010534:	9c000217 	ldw	r16,8(r19)
 4010538:	90bfffc4 	addi	r2,r18,-1
 401053c:	10000c16 	blt	r2,zero,4010570 <_fwalk+0x78>
 4010540:	0023883a 	mov	r17,zero
 4010544:	053fffc4 	movi	r20,-1
 4010548:	8080030f 	ldh	r2,12(r16)
 401054c:	8c400044 	addi	r17,r17,1
 4010550:	10000526 	beq	r2,zero,4010568 <_fwalk+0x70>
 4010554:	8080038f 	ldh	r2,14(r16)
 4010558:	8009883a 	mov	r4,r16
 401055c:	15000226 	beq	r2,r20,4010568 <_fwalk+0x70>
 4010560:	a83ee83a 	callr	r21
 4010564:	b0acb03a 	or	r22,r22,r2
 4010568:	84001704 	addi	r16,r16,92
 401056c:	947ff61e 	bne	r18,r17,4010548 <_fwalk+0x50>
 4010570:	9cc00017 	ldw	r19,0(r19)
 4010574:	983fee1e 	bne	r19,zero,4010530 <_fwalk+0x38>
 4010578:	400f6700 	call	400f670 <__sfp_lock_release>
 401057c:	b005883a 	mov	r2,r22
 4010580:	dfc00717 	ldw	ra,28(sp)
 4010584:	dd800617 	ldw	r22,24(sp)
 4010588:	dd400517 	ldw	r21,20(sp)
 401058c:	dd000417 	ldw	r20,16(sp)
 4010590:	dcc00317 	ldw	r19,12(sp)
 4010594:	dc800217 	ldw	r18,8(sp)
 4010598:	dc400117 	ldw	r17,4(sp)
 401059c:	dc000017 	ldw	r16,0(sp)
 40105a0:	dec00804 	addi	sp,sp,32
 40105a4:	f800283a 	ret
 40105a8:	002d883a 	mov	r22,zero
 40105ac:	003ff206 	br	4010578 <_fwalk+0x80>

040105b0 <iswspace>:
 40105b0:	00803fc4 	movi	r2,255
 40105b4:	0007883a 	mov	r3,zero
 40105b8:	11000636 	bltu	r2,r4,40105d4 <iswspace+0x24>
 40105bc:	008100b4 	movhi	r2,1026
 40105c0:	109a4d04 	addi	r2,r2,26932
 40105c4:	10c00017 	ldw	r3,0(r2)
 40105c8:	1907883a 	add	r3,r3,r4
 40105cc:	18800003 	ldbu	r2,0(r3)
 40105d0:	10c0020c 	andi	r3,r2,8
 40105d4:	1805883a 	mov	r2,r3
 40105d8:	f800283a 	ret

040105dc <__locale_charset>:
 40105dc:	d0a00717 	ldw	r2,-32740(gp)
 40105e0:	f800283a 	ret

040105e4 <_localeconv_r>:
 40105e4:	008100b4 	movhi	r2,1026
 40105e8:	10924304 	addi	r2,r2,18700
 40105ec:	f800283a 	ret

040105f0 <localeconv>:
 40105f0:	008100b4 	movhi	r2,1026
 40105f4:	109a4904 	addi	r2,r2,26916
 40105f8:	11000017 	ldw	r4,0(r2)
 40105fc:	40105e41 	jmpi	40105e4 <_localeconv_r>

04010600 <_setlocale_r>:
 4010600:	defffc04 	addi	sp,sp,-16
 4010604:	00c100b4 	movhi	r3,1026
 4010608:	18d16e04 	addi	r3,r3,17848
 401060c:	dc800215 	stw	r18,8(sp)
 4010610:	dc400115 	stw	r17,4(sp)
 4010614:	dc000015 	stw	r16,0(sp)
 4010618:	2023883a 	mov	r17,r4
 401061c:	2825883a 	mov	r18,r5
 4010620:	dfc00315 	stw	ra,12(sp)
 4010624:	3021883a 	mov	r16,r6
 4010628:	3009883a 	mov	r4,r6
 401062c:	180b883a 	mov	r5,r3
 4010630:	30000926 	beq	r6,zero,4010658 <_setlocale_r+0x58>
 4010634:	40127b80 	call	40127b8 <strcmp>
 4010638:	8009883a 	mov	r4,r16
 401063c:	014100b4 	movhi	r5,1026
 4010640:	29517f04 	addi	r5,r5,17916
 4010644:	10000b1e 	bne	r2,zero,4010674 <_setlocale_r+0x74>
 4010648:	8c000d15 	stw	r16,52(r17)
 401064c:	8c800c15 	stw	r18,48(r17)
 4010650:	00c100b4 	movhi	r3,1026
 4010654:	18d16e04 	addi	r3,r3,17848
 4010658:	1805883a 	mov	r2,r3
 401065c:	dfc00317 	ldw	ra,12(sp)
 4010660:	dc800217 	ldw	r18,8(sp)
 4010664:	dc400117 	ldw	r17,4(sp)
 4010668:	dc000017 	ldw	r16,0(sp)
 401066c:	dec00404 	addi	sp,sp,16
 4010670:	f800283a 	ret
 4010674:	40127b80 	call	40127b8 <strcmp>
 4010678:	0007883a 	mov	r3,zero
 401067c:	103ff226 	beq	r2,zero,4010648 <_setlocale_r+0x48>
 4010680:	003ff506 	br	4010658 <_setlocale_r+0x58>

04010684 <setlocale>:
 4010684:	018100b4 	movhi	r6,1026
 4010688:	319a4904 	addi	r6,r6,26916
 401068c:	2007883a 	mov	r3,r4
 4010690:	31000017 	ldw	r4,0(r6)
 4010694:	280d883a 	mov	r6,r5
 4010698:	180b883a 	mov	r5,r3
 401069c:	40106001 	jmpi	4010600 <_setlocale_r>

040106a0 <__smakebuf_r>:
 40106a0:	2880030b 	ldhu	r2,12(r5)
 40106a4:	deffed04 	addi	sp,sp,-76
 40106a8:	dc401015 	stw	r17,64(sp)
 40106ac:	1080008c 	andi	r2,r2,2
 40106b0:	dc000f15 	stw	r16,60(sp)
 40106b4:	dfc01215 	stw	ra,72(sp)
 40106b8:	dc801115 	stw	r18,68(sp)
 40106bc:	2821883a 	mov	r16,r5
 40106c0:	2023883a 	mov	r17,r4
 40106c4:	10000b26 	beq	r2,zero,40106f4 <__smakebuf_r+0x54>
 40106c8:	28c010c4 	addi	r3,r5,67
 40106cc:	00800044 	movi	r2,1
 40106d0:	28800515 	stw	r2,20(r5)
 40106d4:	28c00415 	stw	r3,16(r5)
 40106d8:	28c00015 	stw	r3,0(r5)
 40106dc:	dfc01217 	ldw	ra,72(sp)
 40106e0:	dc801117 	ldw	r18,68(sp)
 40106e4:	dc401017 	ldw	r17,64(sp)
 40106e8:	dc000f17 	ldw	r16,60(sp)
 40106ec:	dec01304 	addi	sp,sp,76
 40106f0:	f800283a 	ret
 40106f4:	2940038f 	ldh	r5,14(r5)
 40106f8:	28002116 	blt	r5,zero,4010780 <__smakebuf_r+0xe0>
 40106fc:	d80d883a 	mov	r6,sp
 4010700:	40150100 	call	4015010 <_fstat_r>
 4010704:	10001e16 	blt	r2,zero,4010780 <__smakebuf_r+0xe0>
 4010708:	d8800117 	ldw	r2,4(sp)
 401070c:	00e00014 	movui	r3,32768
 4010710:	113c000c 	andi	r4,r2,61440
 4010714:	20c03126 	beq	r4,r3,40107dc <__smakebuf_r+0x13c>
 4010718:	8080030b 	ldhu	r2,12(r16)
 401071c:	00c80004 	movi	r3,8192
 4010720:	10820014 	ori	r2,r2,2048
 4010724:	8080030d 	sth	r2,12(r16)
 4010728:	20c01e26 	beq	r4,r3,40107a4 <__smakebuf_r+0x104>
 401072c:	04810004 	movi	r18,1024
 4010730:	8809883a 	mov	r4,r17
 4010734:	900b883a 	mov	r5,r18
 4010738:	4009a1c0 	call	4009a1c <_malloc_r>
 401073c:	1009883a 	mov	r4,r2
 4010740:	10003126 	beq	r2,zero,4010808 <__smakebuf_r+0x168>
 4010744:	80c0030b 	ldhu	r3,12(r16)
 4010748:	00810074 	movhi	r2,1025
 401074c:	10bdd804 	addi	r2,r2,-2208
 4010750:	88800f15 	stw	r2,60(r17)
 4010754:	18c02014 	ori	r3,r3,128
 4010758:	84800515 	stw	r18,20(r16)
 401075c:	80c0030d 	sth	r3,12(r16)
 4010760:	81000415 	stw	r4,16(r16)
 4010764:	81000015 	stw	r4,0(r16)
 4010768:	dfc01217 	ldw	ra,72(sp)
 401076c:	dc801117 	ldw	r18,68(sp)
 4010770:	dc401017 	ldw	r17,64(sp)
 4010774:	dc000f17 	ldw	r16,60(sp)
 4010778:	dec01304 	addi	sp,sp,76
 401077c:	f800283a 	ret
 4010780:	80c0030b 	ldhu	r3,12(r16)
 4010784:	1880200c 	andi	r2,r3,128
 4010788:	10000426 	beq	r2,zero,401079c <__smakebuf_r+0xfc>
 401078c:	04801004 	movi	r18,64
 4010790:	18820014 	ori	r2,r3,2048
 4010794:	8080030d 	sth	r2,12(r16)
 4010798:	003fe506 	br	4010730 <__smakebuf_r+0x90>
 401079c:	04810004 	movi	r18,1024
 40107a0:	003ffb06 	br	4010790 <__smakebuf_r+0xf0>
 40107a4:	8140038f 	ldh	r5,14(r16)
 40107a8:	8809883a 	mov	r4,r17
 40107ac:	4015c500 	call	4015c50 <_isatty_r>
 40107b0:	103fde26 	beq	r2,zero,401072c <__smakebuf_r+0x8c>
 40107b4:	8080030b 	ldhu	r2,12(r16)
 40107b8:	80c010c4 	addi	r3,r16,67
 40107bc:	04810004 	movi	r18,1024
 40107c0:	10800054 	ori	r2,r2,1
 40107c4:	8080030d 	sth	r2,12(r16)
 40107c8:	00800044 	movi	r2,1
 40107cc:	80c00415 	stw	r3,16(r16)
 40107d0:	80800515 	stw	r2,20(r16)
 40107d4:	80c00015 	stw	r3,0(r16)
 40107d8:	003fd506 	br	4010730 <__smakebuf_r+0x90>
 40107dc:	80c00a17 	ldw	r3,40(r16)
 40107e0:	00810074 	movhi	r2,1025
 40107e4:	10899d04 	addi	r2,r2,9844
 40107e8:	18bfcb1e 	bne	r3,r2,4010718 <__smakebuf_r+0x78>
 40107ec:	8080030b 	ldhu	r2,12(r16)
 40107f0:	00c10004 	movi	r3,1024
 40107f4:	1825883a 	mov	r18,r3
 40107f8:	10c4b03a 	or	r2,r2,r3
 40107fc:	8080030d 	sth	r2,12(r16)
 4010800:	80c01315 	stw	r3,76(r16)
 4010804:	003fca06 	br	4010730 <__smakebuf_r+0x90>
 4010808:	8100030b 	ldhu	r4,12(r16)
 401080c:	2080800c 	andi	r2,r4,512
 4010810:	103fb21e 	bne	r2,zero,40106dc <__smakebuf_r+0x3c>
 4010814:	80c010c4 	addi	r3,r16,67
 4010818:	21000094 	ori	r4,r4,2
 401081c:	00800044 	movi	r2,1
 4010820:	80800515 	stw	r2,20(r16)
 4010824:	8100030d 	sth	r4,12(r16)
 4010828:	80c00415 	stw	r3,16(r16)
 401082c:	80c00015 	stw	r3,0(r16)
 4010830:	003faa06 	br	40106dc <__smakebuf_r+0x3c>

04010834 <_mbrtowc_r>:
 4010834:	defffc04 	addi	sp,sp,-16
 4010838:	dc400215 	stw	r17,8(sp)
 401083c:	dc000115 	stw	r16,4(sp)
 4010840:	dfc00315 	stw	ra,12(sp)
 4010844:	dc000417 	ldw	r16,16(sp)
 4010848:	2023883a 	mov	r17,r4
 401084c:	30000f26 	beq	r6,zero,401088c <_mbrtowc_r+0x58>
 4010850:	dc000015 	stw	r16,0(sp)
 4010854:	40108f40 	call	40108f4 <_mbtowc_r>
 4010858:	1007883a 	mov	r3,r2
 401085c:	00bfffc4 	movi	r2,-1
 4010860:	1809883a 	mov	r4,r3
 4010864:	1880111e 	bne	r3,r2,40108ac <_mbrtowc_r+0x78>
 4010868:	80000015 	stw	zero,0(r16)
 401086c:	00802284 	movi	r2,138
 4010870:	88800015 	stw	r2,0(r17)
 4010874:	2005883a 	mov	r2,r4
 4010878:	dfc00317 	ldw	ra,12(sp)
 401087c:	dc400217 	ldw	r17,8(sp)
 4010880:	dc000117 	ldw	r16,4(sp)
 4010884:	dec00404 	addi	sp,sp,16
 4010888:	f800283a 	ret
 401088c:	000b883a 	mov	r5,zero
 4010890:	018100b4 	movhi	r6,1026
 4010894:	31917f04 	addi	r6,r6,17916
 4010898:	01c00044 	movi	r7,1
 401089c:	dc000015 	stw	r16,0(sp)
 40108a0:	40108f40 	call	40108f4 <_mbtowc_r>
 40108a4:	1007883a 	mov	r3,r2
 40108a8:	003fec06 	br	401085c <_mbrtowc_r+0x28>
 40108ac:	1809883a 	mov	r4,r3
 40108b0:	003ff006 	br	4010874 <_mbrtowc_r+0x40>

040108b4 <mbrtowc>:
 40108b4:	008100b4 	movhi	r2,1026
 40108b8:	109a4904 	addi	r2,r2,26916
 40108bc:	2017883a 	mov	r11,r4
 40108c0:	11000017 	ldw	r4,0(r2)
 40108c4:	defffe04 	addi	sp,sp,-8
 40108c8:	3013883a 	mov	r9,r6
 40108cc:	2805883a 	mov	r2,r5
 40108d0:	d9c00015 	stw	r7,0(sp)
 40108d4:	580b883a 	mov	r5,r11
 40108d8:	100d883a 	mov	r6,r2
 40108dc:	480f883a 	mov	r7,r9
 40108e0:	dfc00115 	stw	ra,4(sp)
 40108e4:	40108340 	call	4010834 <_mbrtowc_r>
 40108e8:	dfc00117 	ldw	ra,4(sp)
 40108ec:	dec00204 	addi	sp,sp,8
 40108f0:	f800283a 	ret

040108f4 <_mbtowc_r>:
 40108f4:	deffff04 	addi	sp,sp,-4
 40108f8:	0005883a 	mov	r2,zero
 40108fc:	28000326 	beq	r5,zero,401090c <_mbtowc_r+0x18>
 4010900:	3000041e 	bne	r6,zero,4010914 <_mbtowc_r+0x20>
 4010904:	dec00104 	addi	sp,sp,4
 4010908:	f800283a 	ret
 401090c:	d80b883a 	mov	r5,sp
 4010910:	303ffc26 	beq	r6,zero,4010904 <_mbtowc_r+0x10>
 4010914:	00bfff84 	movi	r2,-2
 4010918:	383ffa26 	beq	r7,zero,4010904 <_mbtowc_r+0x10>
 401091c:	30800003 	ldbu	r2,0(r6)
 4010920:	28800015 	stw	r2,0(r5)
 4010924:	30c00003 	ldbu	r3,0(r6)
 4010928:	1804c03a 	cmpne	r2,r3,zero
 401092c:	dec00104 	addi	sp,sp,4
 4010930:	f800283a 	ret

04010934 <memchr>:
 4010934:	008000c4 	movi	r2,3
 4010938:	29403fcc 	andi	r5,r5,255
 401093c:	2007883a 	mov	r3,r4
 4010940:	1180022e 	bgeu	r2,r6,401094c <memchr+0x18>
 4010944:	2084703a 	and	r2,r4,r2
 4010948:	10000b26 	beq	r2,zero,4010978 <memchr+0x44>
 401094c:	313fffc4 	addi	r4,r6,-1
 4010950:	3000051e 	bne	r6,zero,4010968 <memchr+0x34>
 4010954:	00002c06 	br	4010a08 <memchr+0xd4>
 4010958:	213fffc4 	addi	r4,r4,-1
 401095c:	00bfffc4 	movi	r2,-1
 4010960:	18c00044 	addi	r3,r3,1
 4010964:	20802826 	beq	r4,r2,4010a08 <memchr+0xd4>
 4010968:	18800003 	ldbu	r2,0(r3)
 401096c:	28bffa1e 	bne	r5,r2,4010958 <memchr+0x24>
 4010970:	1805883a 	mov	r2,r3
 4010974:	f800283a 	ret
 4010978:	0011883a 	mov	r8,zero
 401097c:	0007883a 	mov	r3,zero
 4010980:	01c00104 	movi	r7,4
 4010984:	4004923a 	slli	r2,r8,8
 4010988:	18c00044 	addi	r3,r3,1
 401098c:	1151883a 	add	r8,r2,r5
 4010990:	19fffc1e 	bne	r3,r7,4010984 <memchr+0x50>
 4010994:	02bfbff4 	movhi	r10,65279
 4010998:	52bfbfc4 	addi	r10,r10,-257
 401099c:	02602074 	movhi	r9,32897
 40109a0:	4a602004 	addi	r9,r9,-32640
 40109a4:	02c000c4 	movi	r11,3
 40109a8:	20800017 	ldw	r2,0(r4)
 40109ac:	31bfff04 	addi	r6,r6,-4
 40109b0:	200f883a 	mov	r7,r4
 40109b4:	1204f03a 	xor	r2,r2,r8
 40109b8:	1287883a 	add	r3,r2,r10
 40109bc:	1a46703a 	and	r3,r3,r9
 40109c0:	0084303a 	nor	r2,zero,r2
 40109c4:	10c4703a 	and	r2,r2,r3
 40109c8:	10000b26 	beq	r2,zero,40109f8 <memchr+0xc4>
 40109cc:	20800003 	ldbu	r2,0(r4)
 40109d0:	28800f26 	beq	r5,r2,4010a10 <memchr+0xdc>
 40109d4:	20800043 	ldbu	r2,1(r4)
 40109d8:	21c00044 	addi	r7,r4,1
 40109dc:	28800c26 	beq	r5,r2,4010a10 <memchr+0xdc>
 40109e0:	20800083 	ldbu	r2,2(r4)
 40109e4:	21c00084 	addi	r7,r4,2
 40109e8:	28800926 	beq	r5,r2,4010a10 <memchr+0xdc>
 40109ec:	208000c3 	ldbu	r2,3(r4)
 40109f0:	21c000c4 	addi	r7,r4,3
 40109f4:	28800626 	beq	r5,r2,4010a10 <memchr+0xdc>
 40109f8:	21000104 	addi	r4,r4,4
 40109fc:	59bfea36 	bltu	r11,r6,40109a8 <memchr+0x74>
 4010a00:	2007883a 	mov	r3,r4
 4010a04:	003fd106 	br	401094c <memchr+0x18>
 4010a08:	0005883a 	mov	r2,zero
 4010a0c:	f800283a 	ret
 4010a10:	3805883a 	mov	r2,r7
 4010a14:	f800283a 	ret

04010a18 <memcpy>:
 4010a18:	01c003c4 	movi	r7,15
 4010a1c:	2007883a 	mov	r3,r4
 4010a20:	3980032e 	bgeu	r7,r6,4010a30 <memcpy+0x18>
 4010a24:	2904b03a 	or	r2,r5,r4
 4010a28:	108000cc 	andi	r2,r2,3
 4010a2c:	10000926 	beq	r2,zero,4010a54 <memcpy+0x3c>
 4010a30:	30000626 	beq	r6,zero,4010a4c <memcpy+0x34>
 4010a34:	30cd883a 	add	r6,r6,r3
 4010a38:	28800003 	ldbu	r2,0(r5)
 4010a3c:	29400044 	addi	r5,r5,1
 4010a40:	18800005 	stb	r2,0(r3)
 4010a44:	18c00044 	addi	r3,r3,1
 4010a48:	30fffb1e 	bne	r6,r3,4010a38 <memcpy+0x20>
 4010a4c:	2005883a 	mov	r2,r4
 4010a50:	f800283a 	ret
 4010a54:	3811883a 	mov	r8,r7
 4010a58:	200f883a 	mov	r7,r4
 4010a5c:	28c00017 	ldw	r3,0(r5)
 4010a60:	31bffc04 	addi	r6,r6,-16
 4010a64:	38c00015 	stw	r3,0(r7)
 4010a68:	28800117 	ldw	r2,4(r5)
 4010a6c:	38800115 	stw	r2,4(r7)
 4010a70:	28c00217 	ldw	r3,8(r5)
 4010a74:	38c00215 	stw	r3,8(r7)
 4010a78:	28800317 	ldw	r2,12(r5)
 4010a7c:	29400404 	addi	r5,r5,16
 4010a80:	38800315 	stw	r2,12(r7)
 4010a84:	39c00404 	addi	r7,r7,16
 4010a88:	41bff436 	bltu	r8,r6,4010a5c <memcpy+0x44>
 4010a8c:	008000c4 	movi	r2,3
 4010a90:	1180072e 	bgeu	r2,r6,4010ab0 <memcpy+0x98>
 4010a94:	1007883a 	mov	r3,r2
 4010a98:	28800017 	ldw	r2,0(r5)
 4010a9c:	31bfff04 	addi	r6,r6,-4
 4010aa0:	29400104 	addi	r5,r5,4
 4010aa4:	38800015 	stw	r2,0(r7)
 4010aa8:	39c00104 	addi	r7,r7,4
 4010aac:	19bffa36 	bltu	r3,r6,4010a98 <memcpy+0x80>
 4010ab0:	3807883a 	mov	r3,r7
 4010ab4:	003fde06 	br	4010a30 <memcpy+0x18>

04010ab8 <memmove>:
 4010ab8:	2807883a 	mov	r3,r5
 4010abc:	2011883a 	mov	r8,r4
 4010ac0:	29000c2e 	bgeu	r5,r4,4010af4 <memmove+0x3c>
 4010ac4:	298f883a 	add	r7,r5,r6
 4010ac8:	21c00a2e 	bgeu	r4,r7,4010af4 <memmove+0x3c>
 4010acc:	30000726 	beq	r6,zero,4010aec <memmove+0x34>
 4010ad0:	2187883a 	add	r3,r4,r6
 4010ad4:	198dc83a 	sub	r6,r3,r6
 4010ad8:	39ffffc4 	addi	r7,r7,-1
 4010adc:	38800003 	ldbu	r2,0(r7)
 4010ae0:	18ffffc4 	addi	r3,r3,-1
 4010ae4:	18800005 	stb	r2,0(r3)
 4010ae8:	19bffb1e 	bne	r3,r6,4010ad8 <memmove+0x20>
 4010aec:	2005883a 	mov	r2,r4
 4010af0:	f800283a 	ret
 4010af4:	01c003c4 	movi	r7,15
 4010af8:	39800a36 	bltu	r7,r6,4010b24 <memmove+0x6c>
 4010afc:	303ffb26 	beq	r6,zero,4010aec <memmove+0x34>
 4010b00:	400f883a 	mov	r7,r8
 4010b04:	320d883a 	add	r6,r6,r8
 4010b08:	28800003 	ldbu	r2,0(r5)
 4010b0c:	29400044 	addi	r5,r5,1
 4010b10:	38800005 	stb	r2,0(r7)
 4010b14:	39c00044 	addi	r7,r7,1
 4010b18:	39bffb1e 	bne	r7,r6,4010b08 <memmove+0x50>
 4010b1c:	2005883a 	mov	r2,r4
 4010b20:	f800283a 	ret
 4010b24:	1904b03a 	or	r2,r3,r4
 4010b28:	108000cc 	andi	r2,r2,3
 4010b2c:	103ff31e 	bne	r2,zero,4010afc <memmove+0x44>
 4010b30:	3811883a 	mov	r8,r7
 4010b34:	180b883a 	mov	r5,r3
 4010b38:	200f883a 	mov	r7,r4
 4010b3c:	28c00017 	ldw	r3,0(r5)
 4010b40:	31bffc04 	addi	r6,r6,-16
 4010b44:	38c00015 	stw	r3,0(r7)
 4010b48:	28800117 	ldw	r2,4(r5)
 4010b4c:	38800115 	stw	r2,4(r7)
 4010b50:	28c00217 	ldw	r3,8(r5)
 4010b54:	38c00215 	stw	r3,8(r7)
 4010b58:	28800317 	ldw	r2,12(r5)
 4010b5c:	29400404 	addi	r5,r5,16
 4010b60:	38800315 	stw	r2,12(r7)
 4010b64:	39c00404 	addi	r7,r7,16
 4010b68:	41bff436 	bltu	r8,r6,4010b3c <memmove+0x84>
 4010b6c:	008000c4 	movi	r2,3
 4010b70:	1180072e 	bgeu	r2,r6,4010b90 <memmove+0xd8>
 4010b74:	1007883a 	mov	r3,r2
 4010b78:	28800017 	ldw	r2,0(r5)
 4010b7c:	31bfff04 	addi	r6,r6,-4
 4010b80:	29400104 	addi	r5,r5,4
 4010b84:	38800015 	stw	r2,0(r7)
 4010b88:	39c00104 	addi	r7,r7,4
 4010b8c:	19bffa36 	bltu	r3,r6,4010b78 <memmove+0xc0>
 4010b90:	3811883a 	mov	r8,r7
 4010b94:	003fd906 	br	4010afc <memmove+0x44>

04010b98 <memset>:
 4010b98:	008000c4 	movi	r2,3
 4010b9c:	29403fcc 	andi	r5,r5,255
 4010ba0:	2007883a 	mov	r3,r4
 4010ba4:	1180022e 	bgeu	r2,r6,4010bb0 <memset+0x18>
 4010ba8:	2084703a 	and	r2,r4,r2
 4010bac:	10000826 	beq	r2,zero,4010bd0 <memset+0x38>
 4010bb0:	30000526 	beq	r6,zero,4010bc8 <memset+0x30>
 4010bb4:	2805883a 	mov	r2,r5
 4010bb8:	30cd883a 	add	r6,r6,r3
 4010bbc:	18800005 	stb	r2,0(r3)
 4010bc0:	18c00044 	addi	r3,r3,1
 4010bc4:	19bffd1e 	bne	r3,r6,4010bbc <memset+0x24>
 4010bc8:	2005883a 	mov	r2,r4
 4010bcc:	f800283a 	ret
 4010bd0:	2804923a 	slli	r2,r5,8
 4010bd4:	020003c4 	movi	r8,15
 4010bd8:	200f883a 	mov	r7,r4
 4010bdc:	2884b03a 	or	r2,r5,r2
 4010be0:	1006943a 	slli	r3,r2,16
 4010be4:	10c6b03a 	or	r3,r2,r3
 4010be8:	41800a2e 	bgeu	r8,r6,4010c14 <memset+0x7c>
 4010bec:	4005883a 	mov	r2,r8
 4010bf0:	31bffc04 	addi	r6,r6,-16
 4010bf4:	38c00015 	stw	r3,0(r7)
 4010bf8:	38c00115 	stw	r3,4(r7)
 4010bfc:	38c00215 	stw	r3,8(r7)
 4010c00:	38c00315 	stw	r3,12(r7)
 4010c04:	39c00404 	addi	r7,r7,16
 4010c08:	11bff936 	bltu	r2,r6,4010bf0 <memset+0x58>
 4010c0c:	008000c4 	movi	r2,3
 4010c10:	1180052e 	bgeu	r2,r6,4010c28 <memset+0x90>
 4010c14:	31bfff04 	addi	r6,r6,-4
 4010c18:	008000c4 	movi	r2,3
 4010c1c:	38c00015 	stw	r3,0(r7)
 4010c20:	39c00104 	addi	r7,r7,4
 4010c24:	11bffb36 	bltu	r2,r6,4010c14 <memset+0x7c>
 4010c28:	3807883a 	mov	r3,r7
 4010c2c:	003fe006 	br	4010bb0 <memset+0x18>

04010c30 <_Bfree>:
 4010c30:	28000826 	beq	r5,zero,4010c54 <_Bfree+0x24>
 4010c34:	28800117 	ldw	r2,4(r5)
 4010c38:	21001317 	ldw	r4,76(r4)
 4010c3c:	1085883a 	add	r2,r2,r2
 4010c40:	1085883a 	add	r2,r2,r2
 4010c44:	1105883a 	add	r2,r2,r4
 4010c48:	10c00017 	ldw	r3,0(r2)
 4010c4c:	28c00015 	stw	r3,0(r5)
 4010c50:	11400015 	stw	r5,0(r2)
 4010c54:	f800283a 	ret

04010c58 <__hi0bits>:
 4010c58:	20bfffec 	andhi	r2,r4,65535
 4010c5c:	10001426 	beq	r2,zero,4010cb0 <__hi0bits+0x58>
 4010c60:	0007883a 	mov	r3,zero
 4010c64:	20bfc02c 	andhi	r2,r4,65280
 4010c68:	1000021e 	bne	r2,zero,4010c74 <__hi0bits+0x1c>
 4010c6c:	2008923a 	slli	r4,r4,8
 4010c70:	18c00204 	addi	r3,r3,8
 4010c74:	20bc002c 	andhi	r2,r4,61440
 4010c78:	1000021e 	bne	r2,zero,4010c84 <__hi0bits+0x2c>
 4010c7c:	2008913a 	slli	r4,r4,4
 4010c80:	18c00104 	addi	r3,r3,4
 4010c84:	20b0002c 	andhi	r2,r4,49152
 4010c88:	1000031e 	bne	r2,zero,4010c98 <__hi0bits+0x40>
 4010c8c:	2105883a 	add	r2,r4,r4
 4010c90:	18c00084 	addi	r3,r3,2
 4010c94:	1089883a 	add	r4,r2,r2
 4010c98:	20000316 	blt	r4,zero,4010ca8 <__hi0bits+0x50>
 4010c9c:	2090002c 	andhi	r2,r4,16384
 4010ca0:	10000626 	beq	r2,zero,4010cbc <__hi0bits+0x64>
 4010ca4:	18c00044 	addi	r3,r3,1
 4010ca8:	1805883a 	mov	r2,r3
 4010cac:	f800283a 	ret
 4010cb0:	2008943a 	slli	r4,r4,16
 4010cb4:	00c00404 	movi	r3,16
 4010cb8:	003fea06 	br	4010c64 <__hi0bits+0xc>
 4010cbc:	00c00804 	movi	r3,32
 4010cc0:	1805883a 	mov	r2,r3
 4010cc4:	f800283a 	ret

04010cc8 <__lo0bits>:
 4010cc8:	20c00017 	ldw	r3,0(r4)
 4010ccc:	188001cc 	andi	r2,r3,7
 4010cd0:	10000a26 	beq	r2,zero,4010cfc <__lo0bits+0x34>
 4010cd4:	1880004c 	andi	r2,r3,1
 4010cd8:	1005003a 	cmpeq	r2,r2,zero
 4010cdc:	10002126 	beq	r2,zero,4010d64 <__lo0bits+0x9c>
 4010ce0:	1880008c 	andi	r2,r3,2
 4010ce4:	1000251e 	bne	r2,zero,4010d7c <__lo0bits+0xb4>
 4010ce8:	1804d0ba 	srli	r2,r3,2
 4010cec:	01400084 	movi	r5,2
 4010cf0:	20800015 	stw	r2,0(r4)
 4010cf4:	2805883a 	mov	r2,r5
 4010cf8:	f800283a 	ret
 4010cfc:	18bfffcc 	andi	r2,r3,65535
 4010d00:	10001526 	beq	r2,zero,4010d58 <__lo0bits+0x90>
 4010d04:	000b883a 	mov	r5,zero
 4010d08:	18803fcc 	andi	r2,r3,255
 4010d0c:	1000021e 	bne	r2,zero,4010d18 <__lo0bits+0x50>
 4010d10:	1806d23a 	srli	r3,r3,8
 4010d14:	29400204 	addi	r5,r5,8
 4010d18:	188003cc 	andi	r2,r3,15
 4010d1c:	1000021e 	bne	r2,zero,4010d28 <__lo0bits+0x60>
 4010d20:	1806d13a 	srli	r3,r3,4
 4010d24:	29400104 	addi	r5,r5,4
 4010d28:	188000cc 	andi	r2,r3,3
 4010d2c:	1000021e 	bne	r2,zero,4010d38 <__lo0bits+0x70>
 4010d30:	1806d0ba 	srli	r3,r3,2
 4010d34:	29400084 	addi	r5,r5,2
 4010d38:	1880004c 	andi	r2,r3,1
 4010d3c:	1000031e 	bne	r2,zero,4010d4c <__lo0bits+0x84>
 4010d40:	1806d07a 	srli	r3,r3,1
 4010d44:	18000a26 	beq	r3,zero,4010d70 <__lo0bits+0xa8>
 4010d48:	29400044 	addi	r5,r5,1
 4010d4c:	2805883a 	mov	r2,r5
 4010d50:	20c00015 	stw	r3,0(r4)
 4010d54:	f800283a 	ret
 4010d58:	1806d43a 	srli	r3,r3,16
 4010d5c:	01400404 	movi	r5,16
 4010d60:	003fe906 	br	4010d08 <__lo0bits+0x40>
 4010d64:	000b883a 	mov	r5,zero
 4010d68:	2805883a 	mov	r2,r5
 4010d6c:	f800283a 	ret
 4010d70:	01400804 	movi	r5,32
 4010d74:	2805883a 	mov	r2,r5
 4010d78:	f800283a 	ret
 4010d7c:	1804d07a 	srli	r2,r3,1
 4010d80:	01400044 	movi	r5,1
 4010d84:	20800015 	stw	r2,0(r4)
 4010d88:	003fda06 	br	4010cf4 <__lo0bits+0x2c>

04010d8c <__mcmp>:
 4010d8c:	20800417 	ldw	r2,16(r4)
 4010d90:	28c00417 	ldw	r3,16(r5)
 4010d94:	10cfc83a 	sub	r7,r2,r3
 4010d98:	38000c1e 	bne	r7,zero,4010dcc <__mcmp+0x40>
 4010d9c:	18c5883a 	add	r2,r3,r3
 4010da0:	1085883a 	add	r2,r2,r2
 4010da4:	10c00504 	addi	r3,r2,20
 4010da8:	21000504 	addi	r4,r4,20
 4010dac:	28cb883a 	add	r5,r5,r3
 4010db0:	2085883a 	add	r2,r4,r2
 4010db4:	10bfff04 	addi	r2,r2,-4
 4010db8:	297fff04 	addi	r5,r5,-4
 4010dbc:	11800017 	ldw	r6,0(r2)
 4010dc0:	28c00017 	ldw	r3,0(r5)
 4010dc4:	30c0031e 	bne	r6,r3,4010dd4 <__mcmp+0x48>
 4010dc8:	20bffa36 	bltu	r4,r2,4010db4 <__mcmp+0x28>
 4010dcc:	3805883a 	mov	r2,r7
 4010dd0:	f800283a 	ret
 4010dd4:	30c00336 	bltu	r6,r3,4010de4 <__mcmp+0x58>
 4010dd8:	01c00044 	movi	r7,1
 4010ddc:	3805883a 	mov	r2,r7
 4010de0:	f800283a 	ret
 4010de4:	01ffffc4 	movi	r7,-1
 4010de8:	003ff806 	br	4010dcc <__mcmp+0x40>

04010dec <__ulp>:
 4010dec:	295ffc2c 	andhi	r5,r5,32752
 4010df0:	013f3034 	movhi	r4,64704
 4010df4:	290b883a 	add	r5,r5,r4
 4010df8:	0145c83a 	sub	r2,zero,r5
 4010dfc:	1007d53a 	srai	r3,r2,20
 4010e00:	000d883a 	mov	r6,zero
 4010e04:	0140040e 	bge	zero,r5,4010e18 <__ulp+0x2c>
 4010e08:	280f883a 	mov	r7,r5
 4010e0c:	3807883a 	mov	r3,r7
 4010e10:	3005883a 	mov	r2,r6
 4010e14:	f800283a 	ret
 4010e18:	008004c4 	movi	r2,19
 4010e1c:	193ffb04 	addi	r4,r3,-20
 4010e20:	10c00c0e 	bge	r2,r3,4010e54 <__ulp+0x68>
 4010e24:	008007c4 	movi	r2,31
 4010e28:	1107c83a 	sub	r3,r2,r4
 4010e2c:	00800784 	movi	r2,30
 4010e30:	01400044 	movi	r5,1
 4010e34:	11000216 	blt	r2,r4,4010e40 <__ulp+0x54>
 4010e38:	00800044 	movi	r2,1
 4010e3c:	10ca983a 	sll	r5,r2,r3
 4010e40:	000f883a 	mov	r7,zero
 4010e44:	280d883a 	mov	r6,r5
 4010e48:	3807883a 	mov	r3,r7
 4010e4c:	3005883a 	mov	r2,r6
 4010e50:	f800283a 	ret
 4010e54:	00800234 	movhi	r2,8
 4010e58:	10cfd83a 	sra	r7,r2,r3
 4010e5c:	000d883a 	mov	r6,zero
 4010e60:	3005883a 	mov	r2,r6
 4010e64:	3807883a 	mov	r3,r7
 4010e68:	f800283a 	ret

04010e6c <__b2d>:
 4010e6c:	20800417 	ldw	r2,16(r4)
 4010e70:	defff904 	addi	sp,sp,-28
 4010e74:	dd000415 	stw	r20,16(sp)
 4010e78:	1085883a 	add	r2,r2,r2
 4010e7c:	25000504 	addi	r20,r4,20
 4010e80:	1085883a 	add	r2,r2,r2
 4010e84:	dc000015 	stw	r16,0(sp)
 4010e88:	a0a1883a 	add	r16,r20,r2
 4010e8c:	dd400515 	stw	r21,20(sp)
 4010e90:	857fff17 	ldw	r21,-4(r16)
 4010e94:	dc400115 	stw	r17,4(sp)
 4010e98:	dfc00615 	stw	ra,24(sp)
 4010e9c:	a809883a 	mov	r4,r21
 4010ea0:	2823883a 	mov	r17,r5
 4010ea4:	dcc00315 	stw	r19,12(sp)
 4010ea8:	dc800215 	stw	r18,8(sp)
 4010eac:	4010c580 	call	4010c58 <__hi0bits>
 4010eb0:	100b883a 	mov	r5,r2
 4010eb4:	00800804 	movi	r2,32
 4010eb8:	1145c83a 	sub	r2,r2,r5
 4010ebc:	88800015 	stw	r2,0(r17)
 4010ec0:	00800284 	movi	r2,10
 4010ec4:	80ffff04 	addi	r3,r16,-4
 4010ec8:	11401416 	blt	r2,r5,4010f1c <__b2d+0xb0>
 4010ecc:	008002c4 	movi	r2,11
 4010ed0:	1149c83a 	sub	r4,r2,r5
 4010ed4:	a0c02736 	bltu	r20,r3,4010f74 <__b2d+0x108>
 4010ed8:	000d883a 	mov	r6,zero
 4010edc:	28800544 	addi	r2,r5,21
 4010ee0:	a906d83a 	srl	r3,r21,r4
 4010ee4:	a884983a 	sll	r2,r21,r2
 4010ee8:	1ccffc34 	orhi	r19,r3,16368
 4010eec:	11a4b03a 	or	r18,r2,r6
 4010ef0:	9005883a 	mov	r2,r18
 4010ef4:	9807883a 	mov	r3,r19
 4010ef8:	dfc00617 	ldw	ra,24(sp)
 4010efc:	dd400517 	ldw	r21,20(sp)
 4010f00:	dd000417 	ldw	r20,16(sp)
 4010f04:	dcc00317 	ldw	r19,12(sp)
 4010f08:	dc800217 	ldw	r18,8(sp)
 4010f0c:	dc400117 	ldw	r17,4(sp)
 4010f10:	dc000017 	ldw	r16,0(sp)
 4010f14:	dec00704 	addi	sp,sp,28
 4010f18:	f800283a 	ret
 4010f1c:	a0c00e36 	bltu	r20,r3,4010f58 <__b2d+0xec>
 4010f20:	293ffd44 	addi	r4,r5,-11
 4010f24:	000d883a 	mov	r6,zero
 4010f28:	20000f26 	beq	r4,zero,4010f68 <__b2d+0xfc>
 4010f2c:	00800804 	movi	r2,32
 4010f30:	110bc83a 	sub	r5,r2,r4
 4010f34:	a0c01236 	bltu	r20,r3,4010f80 <__b2d+0x114>
 4010f38:	000f883a 	mov	r7,zero
 4010f3c:	a904983a 	sll	r2,r21,r4
 4010f40:	3146d83a 	srl	r3,r6,r5
 4010f44:	3108983a 	sll	r4,r6,r4
 4010f48:	108ffc34 	orhi	r2,r2,16368
 4010f4c:	18a6b03a 	or	r19,r3,r2
 4010f50:	3924b03a 	or	r18,r7,r4
 4010f54:	003fe606 	br	4010ef0 <__b2d+0x84>
 4010f58:	293ffd44 	addi	r4,r5,-11
 4010f5c:	81bffe17 	ldw	r6,-8(r16)
 4010f60:	80fffe04 	addi	r3,r16,-8
 4010f64:	203ff11e 	bne	r4,zero,4010f2c <__b2d+0xc0>
 4010f68:	accffc34 	orhi	r19,r21,16368
 4010f6c:	3025883a 	mov	r18,r6
 4010f70:	003fdf06 	br	4010ef0 <__b2d+0x84>
 4010f74:	18bfff17 	ldw	r2,-4(r3)
 4010f78:	110cd83a 	srl	r6,r2,r4
 4010f7c:	003fd706 	br	4010edc <__b2d+0x70>
 4010f80:	18bfff17 	ldw	r2,-4(r3)
 4010f84:	114ed83a 	srl	r7,r2,r5
 4010f88:	003fec06 	br	4010f3c <__b2d+0xd0>

04010f8c <__ratio>:
 4010f8c:	defff904 	addi	sp,sp,-28
 4010f90:	dc400215 	stw	r17,8(sp)
 4010f94:	2823883a 	mov	r17,r5
 4010f98:	d80b883a 	mov	r5,sp
 4010f9c:	dfc00615 	stw	ra,24(sp)
 4010fa0:	dd000515 	stw	r20,20(sp)
 4010fa4:	dcc00415 	stw	r19,16(sp)
 4010fa8:	dc800315 	stw	r18,12(sp)
 4010fac:	2025883a 	mov	r18,r4
 4010fb0:	4010e6c0 	call	4010e6c <__b2d>
 4010fb4:	8809883a 	mov	r4,r17
 4010fb8:	d9400104 	addi	r5,sp,4
 4010fbc:	1027883a 	mov	r19,r2
 4010fc0:	1829883a 	mov	r20,r3
 4010fc4:	4010e6c0 	call	4010e6c <__b2d>
 4010fc8:	89000417 	ldw	r4,16(r17)
 4010fcc:	91c00417 	ldw	r7,16(r18)
 4010fd0:	d9800117 	ldw	r6,4(sp)
 4010fd4:	180b883a 	mov	r5,r3
 4010fd8:	390fc83a 	sub	r7,r7,r4
 4010fdc:	1009883a 	mov	r4,r2
 4010fe0:	d8800017 	ldw	r2,0(sp)
 4010fe4:	380e917a 	slli	r7,r7,5
 4010fe8:	2011883a 	mov	r8,r4
 4010fec:	1185c83a 	sub	r2,r2,r6
 4010ff0:	11c5883a 	add	r2,r2,r7
 4010ff4:	1006953a 	slli	r3,r2,20
 4010ff8:	2813883a 	mov	r9,r5
 4010ffc:	00800d0e 	bge	zero,r2,4011034 <__ratio+0xa8>
 4011000:	1d29883a 	add	r20,r3,r20
 4011004:	a00b883a 	mov	r5,r20
 4011008:	480f883a 	mov	r7,r9
 401100c:	9809883a 	mov	r4,r19
 4011010:	400d883a 	mov	r6,r8
 4011014:	40087b80 	call	40087b8 <__divdf3>
 4011018:	dfc00617 	ldw	ra,24(sp)
 401101c:	dd000517 	ldw	r20,20(sp)
 4011020:	dcc00417 	ldw	r19,16(sp)
 4011024:	dc800317 	ldw	r18,12(sp)
 4011028:	dc400217 	ldw	r17,8(sp)
 401102c:	dec00704 	addi	sp,sp,28
 4011030:	f800283a 	ret
 4011034:	28d3c83a 	sub	r9,r5,r3
 4011038:	003ff206 	br	4011004 <__ratio+0x78>

0401103c <_mprec_log10>:
 401103c:	defffe04 	addi	sp,sp,-8
 4011040:	008005c4 	movi	r2,23
 4011044:	dc000015 	stw	r16,0(sp)
 4011048:	dfc00115 	stw	ra,4(sp)
 401104c:	2021883a 	mov	r16,r4
 4011050:	11000c16 	blt	r2,r4,4011084 <_mprec_log10+0x48>
 4011054:	200490fa 	slli	r2,r4,3
 4011058:	00c100b4 	movhi	r3,1026
 401105c:	18d24f04 	addi	r3,r3,18748
 4011060:	10c5883a 	add	r2,r2,r3
 4011064:	12400117 	ldw	r9,4(r2)
 4011068:	12000017 	ldw	r8,0(r2)
 401106c:	4807883a 	mov	r3,r9
 4011070:	4005883a 	mov	r2,r8
 4011074:	dfc00117 	ldw	ra,4(sp)
 4011078:	dc000017 	ldw	r16,0(sp)
 401107c:	dec00204 	addi	sp,sp,8
 4011080:	f800283a 	ret
 4011084:	0011883a 	mov	r8,zero
 4011088:	024ffc34 	movhi	r9,16368
 401108c:	0005883a 	mov	r2,zero
 4011090:	00d00934 	movhi	r3,16420
 4011094:	480b883a 	mov	r5,r9
 4011098:	4009883a 	mov	r4,r8
 401109c:	180f883a 	mov	r7,r3
 40110a0:	100d883a 	mov	r6,r2
 40110a4:	40083f40 	call	40083f4 <__muldf3>
 40110a8:	843fffc4 	addi	r16,r16,-1
 40110ac:	1011883a 	mov	r8,r2
 40110b0:	1813883a 	mov	r9,r3
 40110b4:	803ff51e 	bne	r16,zero,401108c <_mprec_log10+0x50>
 40110b8:	4005883a 	mov	r2,r8
 40110bc:	4807883a 	mov	r3,r9
 40110c0:	dfc00117 	ldw	ra,4(sp)
 40110c4:	dc000017 	ldw	r16,0(sp)
 40110c8:	dec00204 	addi	sp,sp,8
 40110cc:	f800283a 	ret

040110d0 <__copybits>:
 40110d0:	297fffc4 	addi	r5,r5,-1
 40110d4:	30800417 	ldw	r2,16(r6)
 40110d8:	280bd17a 	srai	r5,r5,5
 40110dc:	31800504 	addi	r6,r6,20
 40110e0:	1085883a 	add	r2,r2,r2
 40110e4:	294b883a 	add	r5,r5,r5
 40110e8:	294b883a 	add	r5,r5,r5
 40110ec:	1085883a 	add	r2,r2,r2
 40110f0:	290b883a 	add	r5,r5,r4
 40110f4:	3087883a 	add	r3,r6,r2
 40110f8:	29400104 	addi	r5,r5,4
 40110fc:	30c0052e 	bgeu	r6,r3,4011114 <__copybits+0x44>
 4011100:	30800017 	ldw	r2,0(r6)
 4011104:	31800104 	addi	r6,r6,4
 4011108:	20800015 	stw	r2,0(r4)
 401110c:	21000104 	addi	r4,r4,4
 4011110:	30fffb36 	bltu	r6,r3,4011100 <__copybits+0x30>
 4011114:	2140032e 	bgeu	r4,r5,4011124 <__copybits+0x54>
 4011118:	20000015 	stw	zero,0(r4)
 401111c:	21000104 	addi	r4,r4,4
 4011120:	217ffd36 	bltu	r4,r5,4011118 <__copybits+0x48>
 4011124:	f800283a 	ret

04011128 <__any_on>:
 4011128:	20800417 	ldw	r2,16(r4)
 401112c:	2807d17a 	srai	r3,r5,5
 4011130:	21000504 	addi	r4,r4,20
 4011134:	10c00d0e 	bge	r2,r3,401116c <__any_on+0x44>
 4011138:	1085883a 	add	r2,r2,r2
 401113c:	1085883a 	add	r2,r2,r2
 4011140:	208d883a 	add	r6,r4,r2
 4011144:	2180182e 	bgeu	r4,r6,40111a8 <__any_on+0x80>
 4011148:	30bfff17 	ldw	r2,-4(r6)
 401114c:	30ffff04 	addi	r3,r6,-4
 4011150:	1000041e 	bne	r2,zero,4011164 <__any_on+0x3c>
 4011154:	20c0142e 	bgeu	r4,r3,40111a8 <__any_on+0x80>
 4011158:	18ffff04 	addi	r3,r3,-4
 401115c:	18800017 	ldw	r2,0(r3)
 4011160:	103ffc26 	beq	r2,zero,4011154 <__any_on+0x2c>
 4011164:	00800044 	movi	r2,1
 4011168:	f800283a 	ret
 401116c:	18800a0e 	bge	r3,r2,4011198 <__any_on+0x70>
 4011170:	294007cc 	andi	r5,r5,31
 4011174:	28000826 	beq	r5,zero,4011198 <__any_on+0x70>
 4011178:	18c5883a 	add	r2,r3,r3
 401117c:	1085883a 	add	r2,r2,r2
 4011180:	208d883a 	add	r6,r4,r2
 4011184:	30c00017 	ldw	r3,0(r6)
 4011188:	1944d83a 	srl	r2,r3,r5
 401118c:	1144983a 	sll	r2,r2,r5
 4011190:	18bff41e 	bne	r3,r2,4011164 <__any_on+0x3c>
 4011194:	003feb06 	br	4011144 <__any_on+0x1c>
 4011198:	18c5883a 	add	r2,r3,r3
 401119c:	1085883a 	add	r2,r2,r2
 40111a0:	208d883a 	add	r6,r4,r2
 40111a4:	003fe706 	br	4011144 <__any_on+0x1c>
 40111a8:	0005883a 	mov	r2,zero
 40111ac:	f800283a 	ret

040111b0 <_Balloc>:
 40111b0:	20c01317 	ldw	r3,76(r4)
 40111b4:	defffb04 	addi	sp,sp,-20
 40111b8:	dcc00315 	stw	r19,12(sp)
 40111bc:	dc800215 	stw	r18,8(sp)
 40111c0:	dfc00415 	stw	ra,16(sp)
 40111c4:	2825883a 	mov	r18,r5
 40111c8:	dc400115 	stw	r17,4(sp)
 40111cc:	dc000015 	stw	r16,0(sp)
 40111d0:	2027883a 	mov	r19,r4
 40111d4:	01800404 	movi	r6,16
 40111d8:	01400104 	movi	r5,4
 40111dc:	18001726 	beq	r3,zero,401123c <_Balloc+0x8c>
 40111e0:	01400044 	movi	r5,1
 40111e4:	9485883a 	add	r2,r18,r18
 40111e8:	2ca2983a 	sll	r17,r5,r18
 40111ec:	1085883a 	add	r2,r2,r2
 40111f0:	10c7883a 	add	r3,r2,r3
 40111f4:	1c000017 	ldw	r16,0(r3)
 40111f8:	8c4d883a 	add	r6,r17,r17
 40111fc:	318d883a 	add	r6,r6,r6
 4011200:	9809883a 	mov	r4,r19
 4011204:	31800504 	addi	r6,r6,20
 4011208:	80001226 	beq	r16,zero,4011254 <_Balloc+0xa4>
 401120c:	80800017 	ldw	r2,0(r16)
 4011210:	18800015 	stw	r2,0(r3)
 4011214:	80000415 	stw	zero,16(r16)
 4011218:	80000315 	stw	zero,12(r16)
 401121c:	8005883a 	mov	r2,r16
 4011220:	dfc00417 	ldw	ra,16(sp)
 4011224:	dcc00317 	ldw	r19,12(sp)
 4011228:	dc800217 	ldw	r18,8(sp)
 401122c:	dc400117 	ldw	r17,4(sp)
 4011230:	dc000017 	ldw	r16,0(sp)
 4011234:	dec00504 	addi	sp,sp,20
 4011238:	f800283a 	ret
 401123c:	4014db40 	call	4014db4 <_calloc_r>
 4011240:	1007883a 	mov	r3,r2
 4011244:	0021883a 	mov	r16,zero
 4011248:	98801315 	stw	r2,76(r19)
 401124c:	103fe41e 	bne	r2,zero,40111e0 <_Balloc+0x30>
 4011250:	003ff206 	br	401121c <_Balloc+0x6c>
 4011254:	4014db40 	call	4014db4 <_calloc_r>
 4011258:	103ff026 	beq	r2,zero,401121c <_Balloc+0x6c>
 401125c:	1021883a 	mov	r16,r2
 4011260:	14800115 	stw	r18,4(r2)
 4011264:	14400215 	stw	r17,8(r2)
 4011268:	003fea06 	br	4011214 <_Balloc+0x64>

0401126c <__d2b>:
 401126c:	defff504 	addi	sp,sp,-44
 4011270:	dcc00515 	stw	r19,20(sp)
 4011274:	04c00044 	movi	r19,1
 4011278:	dc000215 	stw	r16,8(sp)
 401127c:	2821883a 	mov	r16,r5
 4011280:	980b883a 	mov	r5,r19
 4011284:	ddc00915 	stw	r23,36(sp)
 4011288:	dd800815 	stw	r22,32(sp)
 401128c:	dd400715 	stw	r21,28(sp)
 4011290:	dd000615 	stw	r20,24(sp)
 4011294:	dc800415 	stw	r18,16(sp)
 4011298:	dc400315 	stw	r17,12(sp)
 401129c:	dfc00a15 	stw	ra,40(sp)
 40112a0:	3023883a 	mov	r17,r6
 40112a4:	382d883a 	mov	r22,r7
 40112a8:	ddc00b17 	ldw	r23,44(sp)
 40112ac:	40111b00 	call	40111b0 <_Balloc>
 40112b0:	1025883a 	mov	r18,r2
 40112b4:	00a00034 	movhi	r2,32768
 40112b8:	10bfffc4 	addi	r2,r2,-1
 40112bc:	8888703a 	and	r4,r17,r2
 40112c0:	202ad53a 	srli	r21,r4,20
 40112c4:	00800434 	movhi	r2,16
 40112c8:	10bfffc4 	addi	r2,r2,-1
 40112cc:	8886703a 	and	r3,r17,r2
 40112d0:	a829003a 	cmpeq	r20,r21,zero
 40112d4:	800b883a 	mov	r5,r16
 40112d8:	d8c00115 	stw	r3,4(sp)
 40112dc:	94000504 	addi	r16,r18,20
 40112e0:	a000021e 	bne	r20,zero,40112ec <__d2b+0x80>
 40112e4:	18c00434 	orhi	r3,r3,16
 40112e8:	d8c00115 	stw	r3,4(sp)
 40112ec:	28002726 	beq	r5,zero,401138c <__d2b+0x120>
 40112f0:	d809883a 	mov	r4,sp
 40112f4:	d9400015 	stw	r5,0(sp)
 40112f8:	4010cc80 	call	4010cc8 <__lo0bits>
 40112fc:	100d883a 	mov	r6,r2
 4011300:	10003526 	beq	r2,zero,40113d8 <__d2b+0x16c>
 4011304:	d8c00117 	ldw	r3,4(sp)
 4011308:	00800804 	movi	r2,32
 401130c:	1185c83a 	sub	r2,r2,r6
 4011310:	d9000017 	ldw	r4,0(sp)
 4011314:	1886983a 	sll	r3,r3,r2
 4011318:	1906b03a 	or	r3,r3,r4
 401131c:	90c00515 	stw	r3,20(r18)
 4011320:	d8c00117 	ldw	r3,4(sp)
 4011324:	1986d83a 	srl	r3,r3,r6
 4011328:	d8c00115 	stw	r3,4(sp)
 401132c:	180b003a 	cmpeq	r5,r3,zero
 4011330:	00800084 	movi	r2,2
 4011334:	114bc83a 	sub	r5,r2,r5
 4011338:	80c00115 	stw	r3,4(r16)
 401133c:	91400415 	stw	r5,16(r18)
 4011340:	a0001a1e 	bne	r20,zero,40113ac <__d2b+0x140>
 4011344:	3545883a 	add	r2,r6,r21
 4011348:	10bef344 	addi	r2,r2,-1075
 401134c:	00c00d44 	movi	r3,53
 4011350:	b0800015 	stw	r2,0(r22)
 4011354:	1987c83a 	sub	r3,r3,r6
 4011358:	b8c00015 	stw	r3,0(r23)
 401135c:	9005883a 	mov	r2,r18
 4011360:	dfc00a17 	ldw	ra,40(sp)
 4011364:	ddc00917 	ldw	r23,36(sp)
 4011368:	dd800817 	ldw	r22,32(sp)
 401136c:	dd400717 	ldw	r21,28(sp)
 4011370:	dd000617 	ldw	r20,24(sp)
 4011374:	dcc00517 	ldw	r19,20(sp)
 4011378:	dc800417 	ldw	r18,16(sp)
 401137c:	dc400317 	ldw	r17,12(sp)
 4011380:	dc000217 	ldw	r16,8(sp)
 4011384:	dec00b04 	addi	sp,sp,44
 4011388:	f800283a 	ret
 401138c:	d9000104 	addi	r4,sp,4
 4011390:	4010cc80 	call	4010cc8 <__lo0bits>
 4011394:	11800804 	addi	r6,r2,32
 4011398:	d8800117 	ldw	r2,4(sp)
 401139c:	94c00415 	stw	r19,16(r18)
 40113a0:	980b883a 	mov	r5,r19
 40113a4:	90800515 	stw	r2,20(r18)
 40113a8:	a03fe626 	beq	r20,zero,4011344 <__d2b+0xd8>
 40113ac:	2945883a 	add	r2,r5,r5
 40113b0:	1085883a 	add	r2,r2,r2
 40113b4:	1405883a 	add	r2,r2,r16
 40113b8:	113fff17 	ldw	r4,-4(r2)
 40113bc:	30fef384 	addi	r3,r6,-1074
 40113c0:	2820917a 	slli	r16,r5,5
 40113c4:	b0c00015 	stw	r3,0(r22)
 40113c8:	4010c580 	call	4010c58 <__hi0bits>
 40113cc:	80a1c83a 	sub	r16,r16,r2
 40113d0:	bc000015 	stw	r16,0(r23)
 40113d4:	003fe106 	br	401135c <__d2b+0xf0>
 40113d8:	d8800017 	ldw	r2,0(sp)
 40113dc:	90800515 	stw	r2,20(r18)
 40113e0:	d8c00117 	ldw	r3,4(sp)
 40113e4:	003fd106 	br	401132c <__d2b+0xc0>

040113e8 <__mdiff>:
 40113e8:	defffb04 	addi	sp,sp,-20
 40113ec:	dc000015 	stw	r16,0(sp)
 40113f0:	2821883a 	mov	r16,r5
 40113f4:	dc800215 	stw	r18,8(sp)
 40113f8:	300b883a 	mov	r5,r6
 40113fc:	2025883a 	mov	r18,r4
 4011400:	8009883a 	mov	r4,r16
 4011404:	dc400115 	stw	r17,4(sp)
 4011408:	dfc00415 	stw	ra,16(sp)
 401140c:	dcc00315 	stw	r19,12(sp)
 4011410:	3023883a 	mov	r17,r6
 4011414:	4010d8c0 	call	4010d8c <__mcmp>
 4011418:	10004226 	beq	r2,zero,4011524 <__mdiff+0x13c>
 401141c:	10005016 	blt	r2,zero,4011560 <__mdiff+0x178>
 4011420:	0027883a 	mov	r19,zero
 4011424:	81400117 	ldw	r5,4(r16)
 4011428:	9009883a 	mov	r4,r18
 401142c:	40111b00 	call	40111b0 <_Balloc>
 4011430:	1019883a 	mov	r12,r2
 4011434:	82800417 	ldw	r10,16(r16)
 4011438:	88800417 	ldw	r2,16(r17)
 401143c:	81800504 	addi	r6,r16,20
 4011440:	5287883a 	add	r3,r10,r10
 4011444:	1085883a 	add	r2,r2,r2
 4011448:	18c7883a 	add	r3,r3,r3
 401144c:	1085883a 	add	r2,r2,r2
 4011450:	8a000504 	addi	r8,r17,20
 4011454:	64c00315 	stw	r19,12(r12)
 4011458:	30db883a 	add	r13,r6,r3
 401145c:	4097883a 	add	r11,r8,r2
 4011460:	61c00504 	addi	r7,r12,20
 4011464:	0013883a 	mov	r9,zero
 4011468:	31000017 	ldw	r4,0(r6)
 401146c:	41400017 	ldw	r5,0(r8)
 4011470:	42000104 	addi	r8,r8,4
 4011474:	20bfffcc 	andi	r2,r4,65535
 4011478:	28ffffcc 	andi	r3,r5,65535
 401147c:	10c5c83a 	sub	r2,r2,r3
 4011480:	1245883a 	add	r2,r2,r9
 4011484:	2008d43a 	srli	r4,r4,16
 4011488:	280ad43a 	srli	r5,r5,16
 401148c:	1007d43a 	srai	r3,r2,16
 4011490:	3880000d 	sth	r2,0(r7)
 4011494:	2149c83a 	sub	r4,r4,r5
 4011498:	20c9883a 	add	r4,r4,r3
 401149c:	3900008d 	sth	r4,2(r7)
 40114a0:	31800104 	addi	r6,r6,4
 40114a4:	39c00104 	addi	r7,r7,4
 40114a8:	2013d43a 	srai	r9,r4,16
 40114ac:	42ffee36 	bltu	r8,r11,4011468 <__mdiff+0x80>
 40114b0:	33400c2e 	bgeu	r6,r13,40114e4 <__mdiff+0xfc>
 40114b4:	30800017 	ldw	r2,0(r6)
 40114b8:	31800104 	addi	r6,r6,4
 40114bc:	10ffffcc 	andi	r3,r2,65535
 40114c0:	1a47883a 	add	r3,r3,r9
 40114c4:	1004d43a 	srli	r2,r2,16
 40114c8:	1809d43a 	srai	r4,r3,16
 40114cc:	38c0000d 	sth	r3,0(r7)
 40114d0:	1105883a 	add	r2,r2,r4
 40114d4:	3880008d 	sth	r2,2(r7)
 40114d8:	1013d43a 	srai	r9,r2,16
 40114dc:	39c00104 	addi	r7,r7,4
 40114e0:	337ff436 	bltu	r6,r13,40114b4 <__mdiff+0xcc>
 40114e4:	38bfff17 	ldw	r2,-4(r7)
 40114e8:	38ffff04 	addi	r3,r7,-4
 40114ec:	1000041e 	bne	r2,zero,4011500 <__mdiff+0x118>
 40114f0:	18ffff04 	addi	r3,r3,-4
 40114f4:	18800017 	ldw	r2,0(r3)
 40114f8:	52bfffc4 	addi	r10,r10,-1
 40114fc:	103ffc26 	beq	r2,zero,40114f0 <__mdiff+0x108>
 4011500:	6005883a 	mov	r2,r12
 4011504:	62800415 	stw	r10,16(r12)
 4011508:	dfc00417 	ldw	ra,16(sp)
 401150c:	dcc00317 	ldw	r19,12(sp)
 4011510:	dc800217 	ldw	r18,8(sp)
 4011514:	dc400117 	ldw	r17,4(sp)
 4011518:	dc000017 	ldw	r16,0(sp)
 401151c:	dec00504 	addi	sp,sp,20
 4011520:	f800283a 	ret
 4011524:	9009883a 	mov	r4,r18
 4011528:	000b883a 	mov	r5,zero
 401152c:	40111b00 	call	40111b0 <_Balloc>
 4011530:	1019883a 	mov	r12,r2
 4011534:	00800044 	movi	r2,1
 4011538:	60800415 	stw	r2,16(r12)
 401153c:	6005883a 	mov	r2,r12
 4011540:	60000515 	stw	zero,20(r12)
 4011544:	dfc00417 	ldw	ra,16(sp)
 4011548:	dcc00317 	ldw	r19,12(sp)
 401154c:	dc800217 	ldw	r18,8(sp)
 4011550:	dc400117 	ldw	r17,4(sp)
 4011554:	dc000017 	ldw	r16,0(sp)
 4011558:	dec00504 	addi	sp,sp,20
 401155c:	f800283a 	ret
 4011560:	880d883a 	mov	r6,r17
 4011564:	04c00044 	movi	r19,1
 4011568:	8023883a 	mov	r17,r16
 401156c:	3021883a 	mov	r16,r6
 4011570:	003fac06 	br	4011424 <__mdiff+0x3c>

04011574 <__lshift>:
 4011574:	defff904 	addi	sp,sp,-28
 4011578:	28800417 	ldw	r2,16(r5)
 401157c:	dc000015 	stw	r16,0(sp)
 4011580:	3021d17a 	srai	r16,r6,5
 4011584:	28c00217 	ldw	r3,8(r5)
 4011588:	10800044 	addi	r2,r2,1
 401158c:	dc400115 	stw	r17,4(sp)
 4011590:	80a3883a 	add	r17,r16,r2
 4011594:	dd400515 	stw	r21,20(sp)
 4011598:	dd000415 	stw	r20,16(sp)
 401159c:	dc800215 	stw	r18,8(sp)
 40115a0:	dfc00615 	stw	ra,24(sp)
 40115a4:	2825883a 	mov	r18,r5
 40115a8:	dcc00315 	stw	r19,12(sp)
 40115ac:	3029883a 	mov	r20,r6
 40115b0:	202b883a 	mov	r21,r4
 40115b4:	29400117 	ldw	r5,4(r5)
 40115b8:	1c40030e 	bge	r3,r17,40115c8 <__lshift+0x54>
 40115bc:	18c7883a 	add	r3,r3,r3
 40115c0:	29400044 	addi	r5,r5,1
 40115c4:	1c7ffd16 	blt	r3,r17,40115bc <__lshift+0x48>
 40115c8:	a809883a 	mov	r4,r21
 40115cc:	40111b00 	call	40111b0 <_Balloc>
 40115d0:	1027883a 	mov	r19,r2
 40115d4:	11400504 	addi	r5,r2,20
 40115d8:	0400090e 	bge	zero,r16,4011600 <__lshift+0x8c>
 40115dc:	2805883a 	mov	r2,r5
 40115e0:	0007883a 	mov	r3,zero
 40115e4:	18c00044 	addi	r3,r3,1
 40115e8:	10000015 	stw	zero,0(r2)
 40115ec:	10800104 	addi	r2,r2,4
 40115f0:	80fffc1e 	bne	r16,r3,40115e4 <__lshift+0x70>
 40115f4:	8405883a 	add	r2,r16,r16
 40115f8:	1085883a 	add	r2,r2,r2
 40115fc:	288b883a 	add	r5,r5,r2
 4011600:	90800417 	ldw	r2,16(r18)
 4011604:	91000504 	addi	r4,r18,20
 4011608:	a18007cc 	andi	r6,r20,31
 401160c:	1085883a 	add	r2,r2,r2
 4011610:	1085883a 	add	r2,r2,r2
 4011614:	208f883a 	add	r7,r4,r2
 4011618:	30001e26 	beq	r6,zero,4011694 <__lshift+0x120>
 401161c:	00800804 	movi	r2,32
 4011620:	1191c83a 	sub	r8,r2,r6
 4011624:	0007883a 	mov	r3,zero
 4011628:	20800017 	ldw	r2,0(r4)
 401162c:	1184983a 	sll	r2,r2,r6
 4011630:	1884b03a 	or	r2,r3,r2
 4011634:	28800015 	stw	r2,0(r5)
 4011638:	20c00017 	ldw	r3,0(r4)
 401163c:	21000104 	addi	r4,r4,4
 4011640:	29400104 	addi	r5,r5,4
 4011644:	1a06d83a 	srl	r3,r3,r8
 4011648:	21fff736 	bltu	r4,r7,4011628 <__lshift+0xb4>
 401164c:	28c00015 	stw	r3,0(r5)
 4011650:	18000126 	beq	r3,zero,4011658 <__lshift+0xe4>
 4011654:	8c400044 	addi	r17,r17,1
 4011658:	88bfffc4 	addi	r2,r17,-1
 401165c:	98800415 	stw	r2,16(r19)
 4011660:	a809883a 	mov	r4,r21
 4011664:	900b883a 	mov	r5,r18
 4011668:	4010c300 	call	4010c30 <_Bfree>
 401166c:	9805883a 	mov	r2,r19
 4011670:	dfc00617 	ldw	ra,24(sp)
 4011674:	dd400517 	ldw	r21,20(sp)
 4011678:	dd000417 	ldw	r20,16(sp)
 401167c:	dcc00317 	ldw	r19,12(sp)
 4011680:	dc800217 	ldw	r18,8(sp)
 4011684:	dc400117 	ldw	r17,4(sp)
 4011688:	dc000017 	ldw	r16,0(sp)
 401168c:	dec00704 	addi	sp,sp,28
 4011690:	f800283a 	ret
 4011694:	20800017 	ldw	r2,0(r4)
 4011698:	21000104 	addi	r4,r4,4
 401169c:	28800015 	stw	r2,0(r5)
 40116a0:	29400104 	addi	r5,r5,4
 40116a4:	21ffec2e 	bgeu	r4,r7,4011658 <__lshift+0xe4>
 40116a8:	20800017 	ldw	r2,0(r4)
 40116ac:	21000104 	addi	r4,r4,4
 40116b0:	28800015 	stw	r2,0(r5)
 40116b4:	29400104 	addi	r5,r5,4
 40116b8:	21fff636 	bltu	r4,r7,4011694 <__lshift+0x120>
 40116bc:	003fe606 	br	4011658 <__lshift+0xe4>

040116c0 <__multiply>:
 40116c0:	defff004 	addi	sp,sp,-64
 40116c4:	dc800815 	stw	r18,32(sp)
 40116c8:	dc400715 	stw	r17,28(sp)
 40116cc:	2c800417 	ldw	r18,16(r5)
 40116d0:	34400417 	ldw	r17,16(r6)
 40116d4:	dcc00915 	stw	r19,36(sp)
 40116d8:	dc000615 	stw	r16,24(sp)
 40116dc:	dfc00f15 	stw	ra,60(sp)
 40116e0:	df000e15 	stw	fp,56(sp)
 40116e4:	ddc00d15 	stw	r23,52(sp)
 40116e8:	dd800c15 	stw	r22,48(sp)
 40116ec:	dd400b15 	stw	r21,44(sp)
 40116f0:	dd000a15 	stw	r20,40(sp)
 40116f4:	2821883a 	mov	r16,r5
 40116f8:	3027883a 	mov	r19,r6
 40116fc:	9440040e 	bge	r18,r17,4011710 <__multiply+0x50>
 4011700:	8825883a 	mov	r18,r17
 4011704:	2c400417 	ldw	r17,16(r5)
 4011708:	2827883a 	mov	r19,r5
 401170c:	3021883a 	mov	r16,r6
 4011710:	80800217 	ldw	r2,8(r16)
 4011714:	9447883a 	add	r3,r18,r17
 4011718:	d8c00415 	stw	r3,16(sp)
 401171c:	81400117 	ldw	r5,4(r16)
 4011720:	10c0010e 	bge	r2,r3,4011728 <__multiply+0x68>
 4011724:	29400044 	addi	r5,r5,1
 4011728:	40111b00 	call	40111b0 <_Balloc>
 401172c:	d8800515 	stw	r2,20(sp)
 4011730:	d9000417 	ldw	r4,16(sp)
 4011734:	d8c00517 	ldw	r3,20(sp)
 4011738:	2105883a 	add	r2,r4,r4
 401173c:	1085883a 	add	r2,r2,r2
 4011740:	19000504 	addi	r4,r3,20
 4011744:	2085883a 	add	r2,r4,r2
 4011748:	d8800315 	stw	r2,12(sp)
 401174c:	2080052e 	bgeu	r4,r2,4011764 <__multiply+0xa4>
 4011750:	2005883a 	mov	r2,r4
 4011754:	d8c00317 	ldw	r3,12(sp)
 4011758:	10000015 	stw	zero,0(r2)
 401175c:	10800104 	addi	r2,r2,4
 4011760:	10fffc36 	bltu	r2,r3,4011754 <__multiply+0x94>
 4011764:	8c45883a 	add	r2,r17,r17
 4011768:	9487883a 	add	r3,r18,r18
 401176c:	9dc00504 	addi	r23,r19,20
 4011770:	1085883a 	add	r2,r2,r2
 4011774:	84000504 	addi	r16,r16,20
 4011778:	18c7883a 	add	r3,r3,r3
 401177c:	b885883a 	add	r2,r23,r2
 4011780:	dc000015 	stw	r16,0(sp)
 4011784:	d8800215 	stw	r2,8(sp)
 4011788:	80f9883a 	add	fp,r16,r3
 401178c:	b880432e 	bgeu	r23,r2,401189c <__multiply+0x1dc>
 4011790:	d9000115 	stw	r4,4(sp)
 4011794:	b9000017 	ldw	r4,0(r23)
 4011798:	253fffcc 	andi	r20,r4,65535
 401179c:	a0001a26 	beq	r20,zero,4011808 <__multiply+0x148>
 40117a0:	dcc00017 	ldw	r19,0(sp)
 40117a4:	dc800117 	ldw	r18,4(sp)
 40117a8:	002b883a 	mov	r21,zero
 40117ac:	9c400017 	ldw	r17,0(r19)
 40117b0:	94000017 	ldw	r16,0(r18)
 40117b4:	a009883a 	mov	r4,r20
 40117b8:	897fffcc 	andi	r5,r17,65535
 40117bc:	4008ff80 	call	4008ff8 <__mulsi3>
 40117c0:	880ad43a 	srli	r5,r17,16
 40117c4:	80ffffcc 	andi	r3,r16,65535
 40117c8:	a8c7883a 	add	r3,r21,r3
 40117cc:	a009883a 	mov	r4,r20
 40117d0:	10e3883a 	add	r17,r2,r3
 40117d4:	8020d43a 	srli	r16,r16,16
 40117d8:	4008ff80 	call	4008ff8 <__mulsi3>
 40117dc:	8806d43a 	srli	r3,r17,16
 40117e0:	1405883a 	add	r2,r2,r16
 40117e4:	9cc00104 	addi	r19,r19,4
 40117e8:	1887883a 	add	r3,r3,r2
 40117ec:	90c0008d 	sth	r3,2(r18)
 40117f0:	9440000d 	sth	r17,0(r18)
 40117f4:	182ad43a 	srli	r21,r3,16
 40117f8:	94800104 	addi	r18,r18,4
 40117fc:	9f3feb36 	bltu	r19,fp,40117ac <__multiply+0xec>
 4011800:	95400015 	stw	r21,0(r18)
 4011804:	b9000017 	ldw	r4,0(r23)
 4011808:	202ad43a 	srli	r21,r4,16
 401180c:	a8001c26 	beq	r21,zero,4011880 <__multiply+0x1c0>
 4011810:	d9000117 	ldw	r4,4(sp)
 4011814:	dd000017 	ldw	r20,0(sp)
 4011818:	002d883a 	mov	r22,zero
 401181c:	24c00017 	ldw	r19,0(r4)
 4011820:	2025883a 	mov	r18,r4
 4011824:	9823883a 	mov	r17,r19
 4011828:	a4000017 	ldw	r16,0(r20)
 401182c:	a809883a 	mov	r4,r21
 4011830:	a5000104 	addi	r20,r20,4
 4011834:	817fffcc 	andi	r5,r16,65535
 4011838:	4008ff80 	call	4008ff8 <__mulsi3>
 401183c:	8806d43a 	srli	r3,r17,16
 4011840:	800ad43a 	srli	r5,r16,16
 4011844:	94c0000d 	sth	r19,0(r18)
 4011848:	b0c7883a 	add	r3,r22,r3
 401184c:	10e1883a 	add	r16,r2,r3
 4011850:	9400008d 	sth	r16,2(r18)
 4011854:	a809883a 	mov	r4,r21
 4011858:	94800104 	addi	r18,r18,4
 401185c:	4008ff80 	call	4008ff8 <__mulsi3>
 4011860:	94400017 	ldw	r17,0(r18)
 4011864:	8020d43a 	srli	r16,r16,16
 4011868:	88ffffcc 	andi	r3,r17,65535
 401186c:	10c5883a 	add	r2,r2,r3
 4011870:	80a7883a 	add	r19,r16,r2
 4011874:	982cd43a 	srli	r22,r19,16
 4011878:	a73feb36 	bltu	r20,fp,4011828 <__multiply+0x168>
 401187c:	94c00015 	stw	r19,0(r18)
 4011880:	d8800217 	ldw	r2,8(sp)
 4011884:	bdc00104 	addi	r23,r23,4
 4011888:	b880042e 	bgeu	r23,r2,401189c <__multiply+0x1dc>
 401188c:	d8c00117 	ldw	r3,4(sp)
 4011890:	18c00104 	addi	r3,r3,4
 4011894:	d8c00115 	stw	r3,4(sp)
 4011898:	003fbe06 	br	4011794 <__multiply+0xd4>
 401189c:	d9000417 	ldw	r4,16(sp)
 40118a0:	01000c0e 	bge	zero,r4,40118d4 <__multiply+0x214>
 40118a4:	d8c00317 	ldw	r3,12(sp)
 40118a8:	18bfff17 	ldw	r2,-4(r3)
 40118ac:	18ffff04 	addi	r3,r3,-4
 40118b0:	10000326 	beq	r2,zero,40118c0 <__multiply+0x200>
 40118b4:	00000706 	br	40118d4 <__multiply+0x214>
 40118b8:	18800017 	ldw	r2,0(r3)
 40118bc:	1000051e 	bne	r2,zero,40118d4 <__multiply+0x214>
 40118c0:	d9000417 	ldw	r4,16(sp)
 40118c4:	18ffff04 	addi	r3,r3,-4
 40118c8:	213fffc4 	addi	r4,r4,-1
 40118cc:	d9000415 	stw	r4,16(sp)
 40118d0:	203ff91e 	bne	r4,zero,40118b8 <__multiply+0x1f8>
 40118d4:	d8800417 	ldw	r2,16(sp)
 40118d8:	d8c00517 	ldw	r3,20(sp)
 40118dc:	18800415 	stw	r2,16(r3)
 40118e0:	1805883a 	mov	r2,r3
 40118e4:	dfc00f17 	ldw	ra,60(sp)
 40118e8:	df000e17 	ldw	fp,56(sp)
 40118ec:	ddc00d17 	ldw	r23,52(sp)
 40118f0:	dd800c17 	ldw	r22,48(sp)
 40118f4:	dd400b17 	ldw	r21,44(sp)
 40118f8:	dd000a17 	ldw	r20,40(sp)
 40118fc:	dcc00917 	ldw	r19,36(sp)
 4011900:	dc800817 	ldw	r18,32(sp)
 4011904:	dc400717 	ldw	r17,28(sp)
 4011908:	dc000617 	ldw	r16,24(sp)
 401190c:	dec01004 	addi	sp,sp,64
 4011910:	f800283a 	ret

04011914 <__i2b>:
 4011914:	defffd04 	addi	sp,sp,-12
 4011918:	dc000015 	stw	r16,0(sp)
 401191c:	04000044 	movi	r16,1
 4011920:	dc800115 	stw	r18,4(sp)
 4011924:	2825883a 	mov	r18,r5
 4011928:	800b883a 	mov	r5,r16
 401192c:	dfc00215 	stw	ra,8(sp)
 4011930:	40111b00 	call	40111b0 <_Balloc>
 4011934:	14000415 	stw	r16,16(r2)
 4011938:	14800515 	stw	r18,20(r2)
 401193c:	dfc00217 	ldw	ra,8(sp)
 4011940:	dc800117 	ldw	r18,4(sp)
 4011944:	dc000017 	ldw	r16,0(sp)
 4011948:	dec00304 	addi	sp,sp,12
 401194c:	f800283a 	ret

04011950 <__multadd>:
 4011950:	defff604 	addi	sp,sp,-40
 4011954:	dd800615 	stw	r22,24(sp)
 4011958:	2d800417 	ldw	r22,16(r5)
 401195c:	df000815 	stw	fp,32(sp)
 4011960:	ddc00715 	stw	r23,28(sp)
 4011964:	dd400515 	stw	r21,20(sp)
 4011968:	dd000415 	stw	r20,16(sp)
 401196c:	dcc00315 	stw	r19,12(sp)
 4011970:	dc800215 	stw	r18,8(sp)
 4011974:	dfc00915 	stw	ra,36(sp)
 4011978:	dc400115 	stw	r17,4(sp)
 401197c:	dc000015 	stw	r16,0(sp)
 4011980:	282f883a 	mov	r23,r5
 4011984:	2039883a 	mov	fp,r4
 4011988:	302b883a 	mov	r21,r6
 401198c:	3829883a 	mov	r20,r7
 4011990:	2c800504 	addi	r18,r5,20
 4011994:	0027883a 	mov	r19,zero
 4011998:	94400017 	ldw	r17,0(r18)
 401199c:	a80b883a 	mov	r5,r21
 40119a0:	9cc00044 	addi	r19,r19,1
 40119a4:	893fffcc 	andi	r4,r17,65535
 40119a8:	4008ff80 	call	4008ff8 <__mulsi3>
 40119ac:	8808d43a 	srli	r4,r17,16
 40119b0:	1521883a 	add	r16,r2,r20
 40119b4:	a80b883a 	mov	r5,r21
 40119b8:	4008ff80 	call	4008ff8 <__mulsi3>
 40119bc:	8008d43a 	srli	r4,r16,16
 40119c0:	843fffcc 	andi	r16,r16,65535
 40119c4:	1105883a 	add	r2,r2,r4
 40119c8:	1006943a 	slli	r3,r2,16
 40119cc:	1028d43a 	srli	r20,r2,16
 40119d0:	1c07883a 	add	r3,r3,r16
 40119d4:	90c00015 	stw	r3,0(r18)
 40119d8:	94800104 	addi	r18,r18,4
 40119dc:	9dbfee16 	blt	r19,r22,4011998 <__multadd+0x48>
 40119e0:	a0000826 	beq	r20,zero,4011a04 <__multadd+0xb4>
 40119e4:	b8800217 	ldw	r2,8(r23)
 40119e8:	b080130e 	bge	r22,r2,4011a38 <__multadd+0xe8>
 40119ec:	b585883a 	add	r2,r22,r22
 40119f0:	1085883a 	add	r2,r2,r2
 40119f4:	15c5883a 	add	r2,r2,r23
 40119f8:	b0c00044 	addi	r3,r22,1
 40119fc:	15000515 	stw	r20,20(r2)
 4011a00:	b8c00415 	stw	r3,16(r23)
 4011a04:	b805883a 	mov	r2,r23
 4011a08:	dfc00917 	ldw	ra,36(sp)
 4011a0c:	df000817 	ldw	fp,32(sp)
 4011a10:	ddc00717 	ldw	r23,28(sp)
 4011a14:	dd800617 	ldw	r22,24(sp)
 4011a18:	dd400517 	ldw	r21,20(sp)
 4011a1c:	dd000417 	ldw	r20,16(sp)
 4011a20:	dcc00317 	ldw	r19,12(sp)
 4011a24:	dc800217 	ldw	r18,8(sp)
 4011a28:	dc400117 	ldw	r17,4(sp)
 4011a2c:	dc000017 	ldw	r16,0(sp)
 4011a30:	dec00a04 	addi	sp,sp,40
 4011a34:	f800283a 	ret
 4011a38:	b9400117 	ldw	r5,4(r23)
 4011a3c:	e009883a 	mov	r4,fp
 4011a40:	29400044 	addi	r5,r5,1
 4011a44:	40111b00 	call	40111b0 <_Balloc>
 4011a48:	b9800417 	ldw	r6,16(r23)
 4011a4c:	b9400304 	addi	r5,r23,12
 4011a50:	11000304 	addi	r4,r2,12
 4011a54:	318d883a 	add	r6,r6,r6
 4011a58:	318d883a 	add	r6,r6,r6
 4011a5c:	31800204 	addi	r6,r6,8
 4011a60:	1023883a 	mov	r17,r2
 4011a64:	4010a180 	call	4010a18 <memcpy>
 4011a68:	b80b883a 	mov	r5,r23
 4011a6c:	e009883a 	mov	r4,fp
 4011a70:	4010c300 	call	4010c30 <_Bfree>
 4011a74:	882f883a 	mov	r23,r17
 4011a78:	003fdc06 	br	40119ec <__multadd+0x9c>

04011a7c <__pow5mult>:
 4011a7c:	defffa04 	addi	sp,sp,-24
 4011a80:	308000cc 	andi	r2,r6,3
 4011a84:	dd000415 	stw	r20,16(sp)
 4011a88:	dcc00315 	stw	r19,12(sp)
 4011a8c:	dc000015 	stw	r16,0(sp)
 4011a90:	dfc00515 	stw	ra,20(sp)
 4011a94:	dc800215 	stw	r18,8(sp)
 4011a98:	dc400115 	stw	r17,4(sp)
 4011a9c:	3021883a 	mov	r16,r6
 4011aa0:	2027883a 	mov	r19,r4
 4011aa4:	2829883a 	mov	r20,r5
 4011aa8:	10002b1e 	bne	r2,zero,4011b58 <__pow5mult+0xdc>
 4011aac:	8025d0ba 	srai	r18,r16,2
 4011ab0:	90001b26 	beq	r18,zero,4011b20 <__pow5mult+0xa4>
 4011ab4:	9c001217 	ldw	r16,72(r19)
 4011ab8:	8000081e 	bne	r16,zero,4011adc <__pow5mult+0x60>
 4011abc:	00003006 	br	4011b80 <__pow5mult+0x104>
 4011ac0:	800b883a 	mov	r5,r16
 4011ac4:	800d883a 	mov	r6,r16
 4011ac8:	9809883a 	mov	r4,r19
 4011acc:	90001426 	beq	r18,zero,4011b20 <__pow5mult+0xa4>
 4011ad0:	80800017 	ldw	r2,0(r16)
 4011ad4:	10001b26 	beq	r2,zero,4011b44 <__pow5mult+0xc8>
 4011ad8:	1021883a 	mov	r16,r2
 4011adc:	9080004c 	andi	r2,r18,1
 4011ae0:	1005003a 	cmpeq	r2,r2,zero
 4011ae4:	9025d07a 	srai	r18,r18,1
 4011ae8:	800d883a 	mov	r6,r16
 4011aec:	9809883a 	mov	r4,r19
 4011af0:	a00b883a 	mov	r5,r20
 4011af4:	103ff21e 	bne	r2,zero,4011ac0 <__pow5mult+0x44>
 4011af8:	40116c00 	call	40116c0 <__multiply>
 4011afc:	a00b883a 	mov	r5,r20
 4011b00:	9809883a 	mov	r4,r19
 4011b04:	1023883a 	mov	r17,r2
 4011b08:	4010c300 	call	4010c30 <_Bfree>
 4011b0c:	8829883a 	mov	r20,r17
 4011b10:	800b883a 	mov	r5,r16
 4011b14:	800d883a 	mov	r6,r16
 4011b18:	9809883a 	mov	r4,r19
 4011b1c:	903fec1e 	bne	r18,zero,4011ad0 <__pow5mult+0x54>
 4011b20:	a005883a 	mov	r2,r20
 4011b24:	dfc00517 	ldw	ra,20(sp)
 4011b28:	dd000417 	ldw	r20,16(sp)
 4011b2c:	dcc00317 	ldw	r19,12(sp)
 4011b30:	dc800217 	ldw	r18,8(sp)
 4011b34:	dc400117 	ldw	r17,4(sp)
 4011b38:	dc000017 	ldw	r16,0(sp)
 4011b3c:	dec00604 	addi	sp,sp,24
 4011b40:	f800283a 	ret
 4011b44:	40116c00 	call	40116c0 <__multiply>
 4011b48:	80800015 	stw	r2,0(r16)
 4011b4c:	1021883a 	mov	r16,r2
 4011b50:	10000015 	stw	zero,0(r2)
 4011b54:	003fe106 	br	4011adc <__pow5mult+0x60>
 4011b58:	1085883a 	add	r2,r2,r2
 4011b5c:	00c100b4 	movhi	r3,1026
 4011b60:	18d29504 	addi	r3,r3,19028
 4011b64:	1085883a 	add	r2,r2,r2
 4011b68:	10c5883a 	add	r2,r2,r3
 4011b6c:	11bfff17 	ldw	r6,-4(r2)
 4011b70:	000f883a 	mov	r7,zero
 4011b74:	40119500 	call	4011950 <__multadd>
 4011b78:	1029883a 	mov	r20,r2
 4011b7c:	003fcb06 	br	4011aac <__pow5mult+0x30>
 4011b80:	9809883a 	mov	r4,r19
 4011b84:	01409c44 	movi	r5,625
 4011b88:	40119140 	call	4011914 <__i2b>
 4011b8c:	98801215 	stw	r2,72(r19)
 4011b90:	1021883a 	mov	r16,r2
 4011b94:	10000015 	stw	zero,0(r2)
 4011b98:	003fd006 	br	4011adc <__pow5mult+0x60>

04011b9c <__s2b>:
 4011b9c:	defff904 	addi	sp,sp,-28
 4011ba0:	dcc00315 	stw	r19,12(sp)
 4011ba4:	dc800215 	stw	r18,8(sp)
 4011ba8:	2827883a 	mov	r19,r5
 4011bac:	2025883a 	mov	r18,r4
 4011bb0:	01400244 	movi	r5,9
 4011bb4:	39000204 	addi	r4,r7,8
 4011bb8:	dd000415 	stw	r20,16(sp)
 4011bbc:	dc400115 	stw	r17,4(sp)
 4011bc0:	dfc00615 	stw	ra,24(sp)
 4011bc4:	dd400515 	stw	r21,20(sp)
 4011bc8:	dc000015 	stw	r16,0(sp)
 4011bcc:	3829883a 	mov	r20,r7
 4011bd0:	3023883a 	mov	r17,r6
 4011bd4:	4008f280 	call	4008f28 <__divsi3>
 4011bd8:	00c00044 	movi	r3,1
 4011bdc:	1880350e 	bge	r3,r2,4011cb4 <__s2b+0x118>
 4011be0:	000b883a 	mov	r5,zero
 4011be4:	18c7883a 	add	r3,r3,r3
 4011be8:	29400044 	addi	r5,r5,1
 4011bec:	18bffd16 	blt	r3,r2,4011be4 <__s2b+0x48>
 4011bf0:	9009883a 	mov	r4,r18
 4011bf4:	40111b00 	call	40111b0 <_Balloc>
 4011bf8:	1011883a 	mov	r8,r2
 4011bfc:	d8800717 	ldw	r2,28(sp)
 4011c00:	00c00044 	movi	r3,1
 4011c04:	01800244 	movi	r6,9
 4011c08:	40800515 	stw	r2,20(r8)
 4011c0c:	40c00415 	stw	r3,16(r8)
 4011c10:	3440260e 	bge	r6,r17,4011cac <__s2b+0x110>
 4011c14:	3021883a 	mov	r16,r6
 4011c18:	99ab883a 	add	r21,r19,r6
 4011c1c:	9c05883a 	add	r2,r19,r16
 4011c20:	11c00007 	ldb	r7,0(r2)
 4011c24:	400b883a 	mov	r5,r8
 4011c28:	9009883a 	mov	r4,r18
 4011c2c:	39fff404 	addi	r7,r7,-48
 4011c30:	01800284 	movi	r6,10
 4011c34:	40119500 	call	4011950 <__multadd>
 4011c38:	84000044 	addi	r16,r16,1
 4011c3c:	1011883a 	mov	r8,r2
 4011c40:	8c3ff61e 	bne	r17,r16,4011c1c <__s2b+0x80>
 4011c44:	ac45883a 	add	r2,r21,r17
 4011c48:	117ffe04 	addi	r5,r2,-8
 4011c4c:	880d883a 	mov	r6,r17
 4011c50:	35000c0e 	bge	r6,r20,4011c84 <__s2b+0xe8>
 4011c54:	a185c83a 	sub	r2,r20,r6
 4011c58:	2821883a 	mov	r16,r5
 4011c5c:	28a3883a 	add	r17,r5,r2
 4011c60:	81c00007 	ldb	r7,0(r16)
 4011c64:	400b883a 	mov	r5,r8
 4011c68:	9009883a 	mov	r4,r18
 4011c6c:	39fff404 	addi	r7,r7,-48
 4011c70:	01800284 	movi	r6,10
 4011c74:	40119500 	call	4011950 <__multadd>
 4011c78:	84000044 	addi	r16,r16,1
 4011c7c:	1011883a 	mov	r8,r2
 4011c80:	847ff71e 	bne	r16,r17,4011c60 <__s2b+0xc4>
 4011c84:	4005883a 	mov	r2,r8
 4011c88:	dfc00617 	ldw	ra,24(sp)
 4011c8c:	dd400517 	ldw	r21,20(sp)
 4011c90:	dd000417 	ldw	r20,16(sp)
 4011c94:	dcc00317 	ldw	r19,12(sp)
 4011c98:	dc800217 	ldw	r18,8(sp)
 4011c9c:	dc400117 	ldw	r17,4(sp)
 4011ca0:	dc000017 	ldw	r16,0(sp)
 4011ca4:	dec00704 	addi	sp,sp,28
 4011ca8:	f800283a 	ret
 4011cac:	99400284 	addi	r5,r19,10
 4011cb0:	003fe706 	br	4011c50 <__s2b+0xb4>
 4011cb4:	000b883a 	mov	r5,zero
 4011cb8:	003fcd06 	br	4011bf0 <__s2b+0x54>

04011cbc <_realloc_r>:
 4011cbc:	defff404 	addi	sp,sp,-48
 4011cc0:	dd800815 	stw	r22,32(sp)
 4011cc4:	dc800415 	stw	r18,16(sp)
 4011cc8:	dc400315 	stw	r17,12(sp)
 4011ccc:	dfc00b15 	stw	ra,44(sp)
 4011cd0:	df000a15 	stw	fp,40(sp)
 4011cd4:	ddc00915 	stw	r23,36(sp)
 4011cd8:	dd400715 	stw	r21,28(sp)
 4011cdc:	dd000615 	stw	r20,24(sp)
 4011ce0:	dcc00515 	stw	r19,20(sp)
 4011ce4:	dc000215 	stw	r16,8(sp)
 4011ce8:	2825883a 	mov	r18,r5
 4011cec:	3023883a 	mov	r17,r6
 4011cf0:	202d883a 	mov	r22,r4
 4011cf4:	2800c926 	beq	r5,zero,401201c <_realloc_r+0x360>
 4011cf8:	4017dd40 	call	4017dd4 <__malloc_lock>
 4011cfc:	943ffe04 	addi	r16,r18,-8
 4011d00:	88c002c4 	addi	r3,r17,11
 4011d04:	00800584 	movi	r2,22
 4011d08:	82000117 	ldw	r8,4(r16)
 4011d0c:	10c01b2e 	bgeu	r2,r3,4011d7c <_realloc_r+0xc0>
 4011d10:	00bffe04 	movi	r2,-8
 4011d14:	188e703a 	and	r7,r3,r2
 4011d18:	3839883a 	mov	fp,r7
 4011d1c:	38001a16 	blt	r7,zero,4011d88 <_realloc_r+0xcc>
 4011d20:	e4401936 	bltu	fp,r17,4011d88 <_realloc_r+0xcc>
 4011d24:	013fff04 	movi	r4,-4
 4011d28:	4126703a 	and	r19,r8,r4
 4011d2c:	99c02616 	blt	r19,r7,4011dc8 <_realloc_r+0x10c>
 4011d30:	802b883a 	mov	r21,r16
 4011d34:	9829883a 	mov	r20,r19
 4011d38:	84000204 	addi	r16,r16,8
 4011d3c:	a80f883a 	mov	r7,r21
 4011d40:	a70dc83a 	sub	r6,r20,fp
 4011d44:	008003c4 	movi	r2,15
 4011d48:	1180c136 	bltu	r2,r6,4012050 <_realloc_r+0x394>
 4011d4c:	38800117 	ldw	r2,4(r7)
 4011d50:	a549883a 	add	r4,r20,r21
 4011d54:	1080004c 	andi	r2,r2,1
 4011d58:	a084b03a 	or	r2,r20,r2
 4011d5c:	38800115 	stw	r2,4(r7)
 4011d60:	20c00117 	ldw	r3,4(r4)
 4011d64:	18c00054 	ori	r3,r3,1
 4011d68:	20c00115 	stw	r3,4(r4)
 4011d6c:	b009883a 	mov	r4,r22
 4011d70:	4017edc0 	call	4017edc <__malloc_unlock>
 4011d74:	8023883a 	mov	r17,r16
 4011d78:	00000606 	br	4011d94 <_realloc_r+0xd8>
 4011d7c:	01c00404 	movi	r7,16
 4011d80:	3839883a 	mov	fp,r7
 4011d84:	e47fe72e 	bgeu	fp,r17,4011d24 <_realloc_r+0x68>
 4011d88:	00800304 	movi	r2,12
 4011d8c:	0023883a 	mov	r17,zero
 4011d90:	b0800015 	stw	r2,0(r22)
 4011d94:	8805883a 	mov	r2,r17
 4011d98:	dfc00b17 	ldw	ra,44(sp)
 4011d9c:	df000a17 	ldw	fp,40(sp)
 4011da0:	ddc00917 	ldw	r23,36(sp)
 4011da4:	dd800817 	ldw	r22,32(sp)
 4011da8:	dd400717 	ldw	r21,28(sp)
 4011dac:	dd000617 	ldw	r20,24(sp)
 4011db0:	dcc00517 	ldw	r19,20(sp)
 4011db4:	dc800417 	ldw	r18,16(sp)
 4011db8:	dc400317 	ldw	r17,12(sp)
 4011dbc:	dc000217 	ldw	r16,8(sp)
 4011dc0:	dec00c04 	addi	sp,sp,48
 4011dc4:	f800283a 	ret
 4011dc8:	008100b4 	movhi	r2,1026
 4011dcc:	10948204 	addi	r2,r2,21000
 4011dd0:	12400217 	ldw	r9,8(r2)
 4011dd4:	84cd883a 	add	r6,r16,r19
 4011dd8:	802b883a 	mov	r21,r16
 4011ddc:	3240b926 	beq	r6,r9,40120c4 <_realloc_r+0x408>
 4011de0:	31400117 	ldw	r5,4(r6)
 4011de4:	00bfff84 	movi	r2,-2
 4011de8:	2884703a 	and	r2,r5,r2
 4011dec:	1185883a 	add	r2,r2,r6
 4011df0:	10c00117 	ldw	r3,4(r2)
 4011df4:	18c0004c 	andi	r3,r3,1
 4011df8:	1807003a 	cmpeq	r3,r3,zero
 4011dfc:	1800a326 	beq	r3,zero,401208c <_realloc_r+0x3d0>
 4011e00:	2908703a 	and	r4,r5,r4
 4011e04:	9929883a 	add	r20,r19,r4
 4011e08:	a1c0a30e 	bge	r20,r7,4012098 <_realloc_r+0x3dc>
 4011e0c:	4080004c 	andi	r2,r8,1
 4011e10:	1000551e 	bne	r2,zero,4011f68 <_realloc_r+0x2ac>
 4011e14:	80800017 	ldw	r2,0(r16)
 4011e18:	80afc83a 	sub	r23,r16,r2
 4011e1c:	b8c00117 	ldw	r3,4(r23)
 4011e20:	00bfff04 	movi	r2,-4
 4011e24:	1884703a 	and	r2,r3,r2
 4011e28:	30002e26 	beq	r6,zero,4011ee4 <_realloc_r+0x228>
 4011e2c:	3240b926 	beq	r6,r9,4012114 <_realloc_r+0x458>
 4011e30:	98a9883a 	add	r20,r19,r2
 4011e34:	2509883a 	add	r4,r4,r20
 4011e38:	d9000015 	stw	r4,0(sp)
 4011e3c:	21c02a16 	blt	r4,r7,4011ee8 <_realloc_r+0x22c>
 4011e40:	30800317 	ldw	r2,12(r6)
 4011e44:	30c00217 	ldw	r3,8(r6)
 4011e48:	01400904 	movi	r5,36
 4011e4c:	99bfff04 	addi	r6,r19,-4
 4011e50:	18800315 	stw	r2,12(r3)
 4011e54:	10c00215 	stw	r3,8(r2)
 4011e58:	b9000317 	ldw	r4,12(r23)
 4011e5c:	b8800217 	ldw	r2,8(r23)
 4011e60:	b82b883a 	mov	r21,r23
 4011e64:	bc000204 	addi	r16,r23,8
 4011e68:	20800215 	stw	r2,8(r4)
 4011e6c:	11000315 	stw	r4,12(r2)
 4011e70:	2980e436 	bltu	r5,r6,4012204 <_realloc_r+0x548>
 4011e74:	008004c4 	movi	r2,19
 4011e78:	9009883a 	mov	r4,r18
 4011e7c:	8011883a 	mov	r8,r16
 4011e80:	11800f2e 	bgeu	r2,r6,4011ec0 <_realloc_r+0x204>
 4011e84:	90800017 	ldw	r2,0(r18)
 4011e88:	ba000404 	addi	r8,r23,16
 4011e8c:	91000204 	addi	r4,r18,8
 4011e90:	b8800215 	stw	r2,8(r23)
 4011e94:	90c00117 	ldw	r3,4(r18)
 4011e98:	008006c4 	movi	r2,27
 4011e9c:	b8c00315 	stw	r3,12(r23)
 4011ea0:	1180072e 	bgeu	r2,r6,4011ec0 <_realloc_r+0x204>
 4011ea4:	90c00217 	ldw	r3,8(r18)
 4011ea8:	ba000604 	addi	r8,r23,24
 4011eac:	91000404 	addi	r4,r18,16
 4011eb0:	b8c00415 	stw	r3,16(r23)
 4011eb4:	90800317 	ldw	r2,12(r18)
 4011eb8:	b8800515 	stw	r2,20(r23)
 4011ebc:	3140e726 	beq	r6,r5,401225c <_realloc_r+0x5a0>
 4011ec0:	20800017 	ldw	r2,0(r4)
 4011ec4:	dd000017 	ldw	r20,0(sp)
 4011ec8:	b80f883a 	mov	r7,r23
 4011ecc:	40800015 	stw	r2,0(r8)
 4011ed0:	20c00117 	ldw	r3,4(r4)
 4011ed4:	40c00115 	stw	r3,4(r8)
 4011ed8:	20800217 	ldw	r2,8(r4)
 4011edc:	40800215 	stw	r2,8(r8)
 4011ee0:	003f9706 	br	4011d40 <_realloc_r+0x84>
 4011ee4:	98a9883a 	add	r20,r19,r2
 4011ee8:	a1c01f16 	blt	r20,r7,4011f68 <_realloc_r+0x2ac>
 4011eec:	b8c00317 	ldw	r3,12(r23)
 4011ef0:	b8800217 	ldw	r2,8(r23)
 4011ef4:	99bfff04 	addi	r6,r19,-4
 4011ef8:	01400904 	movi	r5,36
 4011efc:	b82b883a 	mov	r21,r23
 4011f00:	18800215 	stw	r2,8(r3)
 4011f04:	10c00315 	stw	r3,12(r2)
 4011f08:	bc000204 	addi	r16,r23,8
 4011f0c:	2980c336 	bltu	r5,r6,401221c <_realloc_r+0x560>
 4011f10:	008004c4 	movi	r2,19
 4011f14:	9009883a 	mov	r4,r18
 4011f18:	8011883a 	mov	r8,r16
 4011f1c:	11800f2e 	bgeu	r2,r6,4011f5c <_realloc_r+0x2a0>
 4011f20:	90800017 	ldw	r2,0(r18)
 4011f24:	ba000404 	addi	r8,r23,16
 4011f28:	91000204 	addi	r4,r18,8
 4011f2c:	b8800215 	stw	r2,8(r23)
 4011f30:	90c00117 	ldw	r3,4(r18)
 4011f34:	008006c4 	movi	r2,27
 4011f38:	b8c00315 	stw	r3,12(r23)
 4011f3c:	1180072e 	bgeu	r2,r6,4011f5c <_realloc_r+0x2a0>
 4011f40:	90c00217 	ldw	r3,8(r18)
 4011f44:	ba000604 	addi	r8,r23,24
 4011f48:	91000404 	addi	r4,r18,16
 4011f4c:	b8c00415 	stw	r3,16(r23)
 4011f50:	90800317 	ldw	r2,12(r18)
 4011f54:	b8800515 	stw	r2,20(r23)
 4011f58:	3140c726 	beq	r6,r5,4012278 <_realloc_r+0x5bc>
 4011f5c:	20800017 	ldw	r2,0(r4)
 4011f60:	b80f883a 	mov	r7,r23
 4011f64:	003fd906 	br	4011ecc <_realloc_r+0x210>
 4011f68:	880b883a 	mov	r5,r17
 4011f6c:	b009883a 	mov	r4,r22
 4011f70:	4009a1c0 	call	4009a1c <_malloc_r>
 4011f74:	1023883a 	mov	r17,r2
 4011f78:	10002526 	beq	r2,zero,4012010 <_realloc_r+0x354>
 4011f7c:	80800117 	ldw	r2,4(r16)
 4011f80:	00ffff84 	movi	r3,-2
 4011f84:	893ffe04 	addi	r4,r17,-8
 4011f88:	10c4703a 	and	r2,r2,r3
 4011f8c:	8085883a 	add	r2,r16,r2
 4011f90:	20809526 	beq	r4,r2,40121e8 <_realloc_r+0x52c>
 4011f94:	99bfff04 	addi	r6,r19,-4
 4011f98:	01c00904 	movi	r7,36
 4011f9c:	39804536 	bltu	r7,r6,40120b4 <_realloc_r+0x3f8>
 4011fa0:	008004c4 	movi	r2,19
 4011fa4:	9009883a 	mov	r4,r18
 4011fa8:	880b883a 	mov	r5,r17
 4011fac:	11800f2e 	bgeu	r2,r6,4011fec <_realloc_r+0x330>
 4011fb0:	90800017 	ldw	r2,0(r18)
 4011fb4:	89400204 	addi	r5,r17,8
 4011fb8:	91000204 	addi	r4,r18,8
 4011fbc:	88800015 	stw	r2,0(r17)
 4011fc0:	90c00117 	ldw	r3,4(r18)
 4011fc4:	008006c4 	movi	r2,27
 4011fc8:	88c00115 	stw	r3,4(r17)
 4011fcc:	1180072e 	bgeu	r2,r6,4011fec <_realloc_r+0x330>
 4011fd0:	90c00217 	ldw	r3,8(r18)
 4011fd4:	89400404 	addi	r5,r17,16
 4011fd8:	91000404 	addi	r4,r18,16
 4011fdc:	88c00215 	stw	r3,8(r17)
 4011fe0:	90800317 	ldw	r2,12(r18)
 4011fe4:	88800315 	stw	r2,12(r17)
 4011fe8:	31c09126 	beq	r6,r7,4012230 <_realloc_r+0x574>
 4011fec:	20800017 	ldw	r2,0(r4)
 4011ff0:	28800015 	stw	r2,0(r5)
 4011ff4:	20c00117 	ldw	r3,4(r4)
 4011ff8:	28c00115 	stw	r3,4(r5)
 4011ffc:	20800217 	ldw	r2,8(r4)
 4012000:	28800215 	stw	r2,8(r5)
 4012004:	900b883a 	mov	r5,r18
 4012008:	b009883a 	mov	r4,r22
 401200c:	400fc800 	call	400fc80 <_free_r>
 4012010:	b009883a 	mov	r4,r22
 4012014:	4017edc0 	call	4017edc <__malloc_unlock>
 4012018:	003f5e06 	br	4011d94 <_realloc_r+0xd8>
 401201c:	300b883a 	mov	r5,r6
 4012020:	dfc00b17 	ldw	ra,44(sp)
 4012024:	df000a17 	ldw	fp,40(sp)
 4012028:	ddc00917 	ldw	r23,36(sp)
 401202c:	dd800817 	ldw	r22,32(sp)
 4012030:	dd400717 	ldw	r21,28(sp)
 4012034:	dd000617 	ldw	r20,24(sp)
 4012038:	dcc00517 	ldw	r19,20(sp)
 401203c:	dc800417 	ldw	r18,16(sp)
 4012040:	dc400317 	ldw	r17,12(sp)
 4012044:	dc000217 	ldw	r16,8(sp)
 4012048:	dec00c04 	addi	sp,sp,48
 401204c:	4009a1c1 	jmpi	4009a1c <_malloc_r>
 4012050:	38800117 	ldw	r2,4(r7)
 4012054:	e54b883a 	add	r5,fp,r21
 4012058:	31000054 	ori	r4,r6,1
 401205c:	1080004c 	andi	r2,r2,1
 4012060:	1704b03a 	or	r2,r2,fp
 4012064:	38800115 	stw	r2,4(r7)
 4012068:	29000115 	stw	r4,4(r5)
 401206c:	2987883a 	add	r3,r5,r6
 4012070:	18800117 	ldw	r2,4(r3)
 4012074:	29400204 	addi	r5,r5,8
 4012078:	b009883a 	mov	r4,r22
 401207c:	10800054 	ori	r2,r2,1
 4012080:	18800115 	stw	r2,4(r3)
 4012084:	400fc800 	call	400fc80 <_free_r>
 4012088:	003f3806 	br	4011d6c <_realloc_r+0xb0>
 401208c:	000d883a 	mov	r6,zero
 4012090:	0009883a 	mov	r4,zero
 4012094:	003f5d06 	br	4011e0c <_realloc_r+0x150>
 4012098:	30c00217 	ldw	r3,8(r6)
 401209c:	30800317 	ldw	r2,12(r6)
 40120a0:	800f883a 	mov	r7,r16
 40120a4:	84000204 	addi	r16,r16,8
 40120a8:	10c00215 	stw	r3,8(r2)
 40120ac:	18800315 	stw	r2,12(r3)
 40120b0:	003f2306 	br	4011d40 <_realloc_r+0x84>
 40120b4:	8809883a 	mov	r4,r17
 40120b8:	900b883a 	mov	r5,r18
 40120bc:	4010ab80 	call	4010ab8 <memmove>
 40120c0:	003fd006 	br	4012004 <_realloc_r+0x348>
 40120c4:	30800117 	ldw	r2,4(r6)
 40120c8:	e0c00404 	addi	r3,fp,16
 40120cc:	1108703a 	and	r4,r2,r4
 40120d0:	9905883a 	add	r2,r19,r4
 40120d4:	10ff4d16 	blt	r2,r3,4011e0c <_realloc_r+0x150>
 40120d8:	1705c83a 	sub	r2,r2,fp
 40120dc:	870b883a 	add	r5,r16,fp
 40120e0:	10800054 	ori	r2,r2,1
 40120e4:	28800115 	stw	r2,4(r5)
 40120e8:	80c00117 	ldw	r3,4(r16)
 40120ec:	008100b4 	movhi	r2,1026
 40120f0:	10948204 	addi	r2,r2,21000
 40120f4:	b009883a 	mov	r4,r22
 40120f8:	18c0004c 	andi	r3,r3,1
 40120fc:	e0c6b03a 	or	r3,fp,r3
 4012100:	11400215 	stw	r5,8(r2)
 4012104:	80c00115 	stw	r3,4(r16)
 4012108:	4017edc0 	call	4017edc <__malloc_unlock>
 401210c:	84400204 	addi	r17,r16,8
 4012110:	003f2006 	br	4011d94 <_realloc_r+0xd8>
 4012114:	98a9883a 	add	r20,r19,r2
 4012118:	2509883a 	add	r4,r4,r20
 401211c:	e0800404 	addi	r2,fp,16
 4012120:	d9000115 	stw	r4,4(sp)
 4012124:	20bf7016 	blt	r4,r2,4011ee8 <_realloc_r+0x22c>
 4012128:	b8c00317 	ldw	r3,12(r23)
 401212c:	b8800217 	ldw	r2,8(r23)
 4012130:	99bfff04 	addi	r6,r19,-4
 4012134:	01400904 	movi	r5,36
 4012138:	18800215 	stw	r2,8(r3)
 401213c:	10c00315 	stw	r3,12(r2)
 4012140:	bc400204 	addi	r17,r23,8
 4012144:	29804136 	bltu	r5,r6,401224c <_realloc_r+0x590>
 4012148:	008004c4 	movi	r2,19
 401214c:	9009883a 	mov	r4,r18
 4012150:	880f883a 	mov	r7,r17
 4012154:	11800f2e 	bgeu	r2,r6,4012194 <_realloc_r+0x4d8>
 4012158:	90800017 	ldw	r2,0(r18)
 401215c:	b9c00404 	addi	r7,r23,16
 4012160:	91000204 	addi	r4,r18,8
 4012164:	b8800215 	stw	r2,8(r23)
 4012168:	90c00117 	ldw	r3,4(r18)
 401216c:	008006c4 	movi	r2,27
 4012170:	b8c00315 	stw	r3,12(r23)
 4012174:	1180072e 	bgeu	r2,r6,4012194 <_realloc_r+0x4d8>
 4012178:	90c00217 	ldw	r3,8(r18)
 401217c:	b9c00604 	addi	r7,r23,24
 4012180:	91000404 	addi	r4,r18,16
 4012184:	b8c00415 	stw	r3,16(r23)
 4012188:	90800317 	ldw	r2,12(r18)
 401218c:	b8800515 	stw	r2,20(r23)
 4012190:	31404026 	beq	r6,r5,4012294 <_realloc_r+0x5d8>
 4012194:	20800017 	ldw	r2,0(r4)
 4012198:	38800015 	stw	r2,0(r7)
 401219c:	20c00117 	ldw	r3,4(r4)
 40121a0:	38c00115 	stw	r3,4(r7)
 40121a4:	20800217 	ldw	r2,8(r4)
 40121a8:	38800215 	stw	r2,8(r7)
 40121ac:	d8c00117 	ldw	r3,4(sp)
 40121b0:	bf0b883a 	add	r5,r23,fp
 40121b4:	b009883a 	mov	r4,r22
 40121b8:	1f05c83a 	sub	r2,r3,fp
 40121bc:	10800054 	ori	r2,r2,1
 40121c0:	28800115 	stw	r2,4(r5)
 40121c4:	b8c00117 	ldw	r3,4(r23)
 40121c8:	008100b4 	movhi	r2,1026
 40121cc:	10948204 	addi	r2,r2,21000
 40121d0:	11400215 	stw	r5,8(r2)
 40121d4:	18c0004c 	andi	r3,r3,1
 40121d8:	e0c6b03a 	or	r3,fp,r3
 40121dc:	b8c00115 	stw	r3,4(r23)
 40121e0:	4017edc0 	call	4017edc <__malloc_unlock>
 40121e4:	003eeb06 	br	4011d94 <_realloc_r+0xd8>
 40121e8:	20800117 	ldw	r2,4(r4)
 40121ec:	00ffff04 	movi	r3,-4
 40121f0:	800f883a 	mov	r7,r16
 40121f4:	10c4703a 	and	r2,r2,r3
 40121f8:	98a9883a 	add	r20,r19,r2
 40121fc:	84000204 	addi	r16,r16,8
 4012200:	003ecf06 	br	4011d40 <_realloc_r+0x84>
 4012204:	900b883a 	mov	r5,r18
 4012208:	8009883a 	mov	r4,r16
 401220c:	4010ab80 	call	4010ab8 <memmove>
 4012210:	dd000017 	ldw	r20,0(sp)
 4012214:	b80f883a 	mov	r7,r23
 4012218:	003ec906 	br	4011d40 <_realloc_r+0x84>
 401221c:	900b883a 	mov	r5,r18
 4012220:	8009883a 	mov	r4,r16
 4012224:	4010ab80 	call	4010ab8 <memmove>
 4012228:	b80f883a 	mov	r7,r23
 401222c:	003ec406 	br	4011d40 <_realloc_r+0x84>
 4012230:	90c00417 	ldw	r3,16(r18)
 4012234:	89400604 	addi	r5,r17,24
 4012238:	91000604 	addi	r4,r18,24
 401223c:	88c00415 	stw	r3,16(r17)
 4012240:	90800517 	ldw	r2,20(r18)
 4012244:	88800515 	stw	r2,20(r17)
 4012248:	003f6806 	br	4011fec <_realloc_r+0x330>
 401224c:	900b883a 	mov	r5,r18
 4012250:	8809883a 	mov	r4,r17
 4012254:	4010ab80 	call	4010ab8 <memmove>
 4012258:	003fd406 	br	40121ac <_realloc_r+0x4f0>
 401225c:	90c00417 	ldw	r3,16(r18)
 4012260:	91000604 	addi	r4,r18,24
 4012264:	ba000804 	addi	r8,r23,32
 4012268:	b8c00615 	stw	r3,24(r23)
 401226c:	90800517 	ldw	r2,20(r18)
 4012270:	b8800715 	stw	r2,28(r23)
 4012274:	003f1206 	br	4011ec0 <_realloc_r+0x204>
 4012278:	90c00417 	ldw	r3,16(r18)
 401227c:	91000604 	addi	r4,r18,24
 4012280:	ba000804 	addi	r8,r23,32
 4012284:	b8c00615 	stw	r3,24(r23)
 4012288:	90800517 	ldw	r2,20(r18)
 401228c:	b8800715 	stw	r2,28(r23)
 4012290:	003f3206 	br	4011f5c <_realloc_r+0x2a0>
 4012294:	90c00417 	ldw	r3,16(r18)
 4012298:	91000604 	addi	r4,r18,24
 401229c:	b9c00804 	addi	r7,r23,32
 40122a0:	b8c00615 	stw	r3,24(r23)
 40122a4:	90800517 	ldw	r2,20(r18)
 40122a8:	b8800715 	stw	r2,28(r23)
 40122ac:	003fb906 	br	4012194 <_realloc_r+0x4d8>

040122b0 <__srefill_r>:
 40122b0:	defffd04 	addi	sp,sp,-12
 40122b4:	dc400115 	stw	r17,4(sp)
 40122b8:	dc000015 	stw	r16,0(sp)
 40122bc:	dfc00215 	stw	ra,8(sp)
 40122c0:	2023883a 	mov	r17,r4
 40122c4:	2821883a 	mov	r16,r5
 40122c8:	20000226 	beq	r4,zero,40122d4 <__srefill_r+0x24>
 40122cc:	20800e17 	ldw	r2,56(r4)
 40122d0:	10004126 	beq	r2,zero,40123d8 <__srefill_r+0x128>
 40122d4:	80c0030b 	ldhu	r3,12(r16)
 40122d8:	80000115 	stw	zero,4(r16)
 40122dc:	1880080c 	andi	r2,r3,32
 40122e0:	1000361e 	bne	r2,zero,40123bc <__srefill_r+0x10c>
 40122e4:	1880010c 	andi	r2,r3,4
 40122e8:	1000211e 	bne	r2,zero,4012370 <__srefill_r+0xc0>
 40122ec:	1880040c 	andi	r2,r3,16
 40122f0:	10005026 	beq	r2,zero,4012434 <__srefill_r+0x184>
 40122f4:	1880020c 	andi	r2,r3,8
 40122f8:	1000541e 	bne	r2,zero,401244c <__srefill_r+0x19c>
 40122fc:	8080030b 	ldhu	r2,12(r16)
 4012300:	10800114 	ori	r2,r2,4
 4012304:	8080030d 	sth	r2,12(r16)
 4012308:	80800417 	ldw	r2,16(r16)
 401230c:	10004526 	beq	r2,zero,4012424 <__srefill_r+0x174>
 4012310:	8080030b 	ldhu	r2,12(r16)
 4012314:	108000cc 	andi	r2,r2,3
 4012318:	1000361e 	bne	r2,zero,40123f4 <__srefill_r+0x144>
 401231c:	81800417 	ldw	r6,16(r16)
 4012320:	80c00817 	ldw	r3,32(r16)
 4012324:	81400717 	ldw	r5,28(r16)
 4012328:	81c00517 	ldw	r7,20(r16)
 401232c:	8809883a 	mov	r4,r17
 4012330:	81800015 	stw	r6,0(r16)
 4012334:	183ee83a 	callr	r3
 4012338:	80c0030b 	ldhu	r3,12(r16)
 401233c:	1009883a 	mov	r4,r2
 4012340:	80800115 	stw	r2,4(r16)
 4012344:	00b7ffc4 	movi	r2,-8193
 4012348:	1884703a 	and	r2,r3,r2
 401234c:	8080030d 	sth	r2,12(r16)
 4012350:	0100230e 	bge	zero,r4,40123e0 <__srefill_r+0x130>
 4012354:	0009883a 	mov	r4,zero
 4012358:	2005883a 	mov	r2,r4
 401235c:	dfc00217 	ldw	ra,8(sp)
 4012360:	dc400117 	ldw	r17,4(sp)
 4012364:	dc000017 	ldw	r16,0(sp)
 4012368:	dec00304 	addi	sp,sp,12
 401236c:	f800283a 	ret
 4012370:	81400c17 	ldw	r5,48(r16)
 4012374:	283fe426 	beq	r5,zero,4012308 <__srefill_r+0x58>
 4012378:	80801004 	addi	r2,r16,64
 401237c:	28800226 	beq	r5,r2,4012388 <__srefill_r+0xd8>
 4012380:	8809883a 	mov	r4,r17
 4012384:	400fc800 	call	400fc80 <_free_r>
 4012388:	80800f17 	ldw	r2,60(r16)
 401238c:	80000c15 	stw	zero,48(r16)
 4012390:	80800115 	stw	r2,4(r16)
 4012394:	103fdc26 	beq	r2,zero,4012308 <__srefill_r+0x58>
 4012398:	80800e17 	ldw	r2,56(r16)
 401239c:	0009883a 	mov	r4,zero
 40123a0:	80800015 	stw	r2,0(r16)
 40123a4:	2005883a 	mov	r2,r4
 40123a8:	dfc00217 	ldw	ra,8(sp)
 40123ac:	dc400117 	ldw	r17,4(sp)
 40123b0:	dc000017 	ldw	r16,0(sp)
 40123b4:	dec00304 	addi	sp,sp,12
 40123b8:	f800283a 	ret
 40123bc:	013fffc4 	movi	r4,-1
 40123c0:	2005883a 	mov	r2,r4
 40123c4:	dfc00217 	ldw	ra,8(sp)
 40123c8:	dc400117 	ldw	r17,4(sp)
 40123cc:	dc000017 	ldw	r16,0(sp)
 40123d0:	dec00304 	addi	sp,sp,12
 40123d4:	f800283a 	ret
 40123d8:	400f67c0 	call	400f67c <__sinit>
 40123dc:	003fbd06 	br	40122d4 <__srefill_r+0x24>
 40123e0:	20000b1e 	bne	r4,zero,4012410 <__srefill_r+0x160>
 40123e4:	10800814 	ori	r2,r2,32
 40123e8:	013fffc4 	movi	r4,-1
 40123ec:	8080030d 	sth	r2,12(r16)
 40123f0:	003fd906 	br	4012358 <__srefill_r+0xa8>
 40123f4:	008100b4 	movhi	r2,1026
 40123f8:	109a4a04 	addi	r2,r2,26920
 40123fc:	11000017 	ldw	r4,0(r2)
 4012400:	01410074 	movhi	r5,1025
 4012404:	29491d04 	addi	r5,r5,9332
 4012408:	40104f80 	call	40104f8 <_fwalk>
 401240c:	003fc306 	br	401231c <__srefill_r+0x6c>
 4012410:	10801014 	ori	r2,r2,64
 4012414:	013fffc4 	movi	r4,-1
 4012418:	8080030d 	sth	r2,12(r16)
 401241c:	80000115 	stw	zero,4(r16)
 4012420:	003fcd06 	br	4012358 <__srefill_r+0xa8>
 4012424:	8809883a 	mov	r4,r17
 4012428:	800b883a 	mov	r5,r16
 401242c:	40106a00 	call	40106a0 <__smakebuf_r>
 4012430:	003fb706 	br	4012310 <__srefill_r+0x60>
 4012434:	18c01014 	ori	r3,r3,64
 4012438:	00800244 	movi	r2,9
 401243c:	013fffc4 	movi	r4,-1
 4012440:	88800015 	stw	r2,0(r17)
 4012444:	80c0030d 	sth	r3,12(r16)
 4012448:	003fc306 	br	4012358 <__srefill_r+0xa8>
 401244c:	8809883a 	mov	r4,r17
 4012450:	800b883a 	mov	r5,r16
 4012454:	400f3e40 	call	400f3e4 <_fflush_r>
 4012458:	103fd81e 	bne	r2,zero,40123bc <__srefill_r+0x10c>
 401245c:	8080030b 	ldhu	r2,12(r16)
 4012460:	80000215 	stw	zero,8(r16)
 4012464:	80000615 	stw	zero,24(r16)
 4012468:	10bffdcc 	andi	r2,r2,65527
 401246c:	8080030d 	sth	r2,12(r16)
 4012470:	003fa206 	br	40122fc <__srefill_r+0x4c>

04012474 <lflush>:
 4012474:	20c0030b 	ldhu	r3,12(r4)
 4012478:	01400244 	movi	r5,9
 401247c:	0005883a 	mov	r2,zero
 4012480:	18c0024c 	andi	r3,r3,9
 4012484:	19400126 	beq	r3,r5,401248c <lflush+0x18>
 4012488:	f800283a 	ret
 401248c:	400f5e01 	jmpi	400f5e0 <fflush>

04012490 <__isinfd>:
 4012490:	200d883a 	mov	r6,r4
 4012494:	0109c83a 	sub	r4,zero,r4
 4012498:	2188b03a 	or	r4,r4,r6
 401249c:	2008d7fa 	srli	r4,r4,31
 40124a0:	00a00034 	movhi	r2,32768
 40124a4:	10bfffc4 	addi	r2,r2,-1
 40124a8:	1144703a 	and	r2,r2,r5
 40124ac:	2088b03a 	or	r4,r4,r2
 40124b0:	009ffc34 	movhi	r2,32752
 40124b4:	1105c83a 	sub	r2,r2,r4
 40124b8:	0087c83a 	sub	r3,zero,r2
 40124bc:	10c4b03a 	or	r2,r2,r3
 40124c0:	1004d7fa 	srli	r2,r2,31
 40124c4:	00c00044 	movi	r3,1
 40124c8:	1885c83a 	sub	r2,r3,r2
 40124cc:	f800283a 	ret

040124d0 <__sccl>:
 40124d0:	28c00003 	ldbu	r3,0(r5)
 40124d4:	00801784 	movi	r2,94
 40124d8:	2a000044 	addi	r8,r5,1
 40124dc:	18802526 	beq	r3,r2,4012574 <__sccl+0xa4>
 40124e0:	180f883a 	mov	r7,r3
 40124e4:	0013883a 	mov	r9,zero
 40124e8:	000d883a 	mov	r6,zero
 40124ec:	0007883a 	mov	r3,zero
 40124f0:	01404004 	movi	r5,256
 40124f4:	1905883a 	add	r2,r3,r4
 40124f8:	18c00044 	addi	r3,r3,1
 40124fc:	11800005 	stb	r6,0(r2)
 4012500:	197ffc1e 	bne	r3,r5,40124f4 <__sccl+0x24>
 4012504:	38000c26 	beq	r7,zero,4012538 <__sccl+0x68>
 4012508:	00800044 	movi	r2,1
 401250c:	124dc83a 	sub	r6,r2,r9
 4012510:	3905883a 	add	r2,r7,r4
 4012514:	11800005 	stb	r6,0(r2)
 4012518:	41400044 	addi	r5,r8,1
 401251c:	02400b44 	movi	r9,45
 4012520:	02801744 	movi	r10,93
 4012524:	28bfffc3 	ldbu	r2,-1(r5)
 4012528:	2811883a 	mov	r8,r5
 401252c:	12400726 	beq	r2,r9,401254c <__sccl+0x7c>
 4012530:	12800226 	beq	r2,r10,401253c <__sccl+0x6c>
 4012534:	1000031e 	bne	r2,zero,4012544 <__sccl+0x74>
 4012538:	423fffc4 	addi	r8,r8,-1
 401253c:	4005883a 	mov	r2,r8
 4012540:	f800283a 	ret
 4012544:	100f883a 	mov	r7,r2
 4012548:	003ff106 	br	4012510 <__sccl+0x40>
 401254c:	28c00003 	ldbu	r3,0(r5)
 4012550:	1a800d26 	beq	r3,r10,4012588 <__sccl+0xb8>
 4012554:	19c00c16 	blt	r3,r7,4012588 <__sccl+0xb8>
 4012558:	21c5883a 	add	r2,r4,r7
 401255c:	39c00044 	addi	r7,r7,1
 4012560:	11800045 	stb	r6,1(r2)
 4012564:	10800044 	addi	r2,r2,1
 4012568:	38fffc16 	blt	r7,r3,401255c <__sccl+0x8c>
 401256c:	29400084 	addi	r5,r5,2
 4012570:	003fec06 	br	4012524 <__sccl+0x54>
 4012574:	29c00043 	ldbu	r7,1(r5)
 4012578:	02400044 	movi	r9,1
 401257c:	2a000084 	addi	r8,r5,2
 4012580:	480d883a 	mov	r6,r9
 4012584:	003fd906 	br	40124ec <__sccl+0x1c>
 4012588:	01c00b44 	movi	r7,45
 401258c:	003fe006 	br	4012510 <__sccl+0x40>

04012590 <nanf>:
 4012590:	009ff034 	movhi	r2,32704
 4012594:	f800283a 	ret

04012598 <sprintf>:
 4012598:	deffe504 	addi	sp,sp,-108
 401259c:	2013883a 	mov	r9,r4
 40125a0:	dfc01815 	stw	ra,96(sp)
 40125a4:	d9801915 	stw	r6,100(sp)
 40125a8:	d9c01a15 	stw	r7,104(sp)
 40125ac:	d8801904 	addi	r2,sp,100
 40125b0:	d8800015 	stw	r2,0(sp)
 40125b4:	008100b4 	movhi	r2,1026
 40125b8:	109a4904 	addi	r2,r2,26916
 40125bc:	11000017 	ldw	r4,0(r2)
 40125c0:	d9c00017 	ldw	r7,0(sp)
 40125c4:	00808204 	movi	r2,520
 40125c8:	00e00034 	movhi	r3,32768
 40125cc:	18ffffc4 	addi	r3,r3,-1
 40125d0:	280d883a 	mov	r6,r5
 40125d4:	d880040d 	sth	r2,16(sp)
 40125d8:	d9400104 	addi	r5,sp,4
 40125dc:	00bfffc4 	movi	r2,-1
 40125e0:	d8c00615 	stw	r3,24(sp)
 40125e4:	d8c00315 	stw	r3,12(sp)
 40125e8:	da400515 	stw	r9,20(sp)
 40125ec:	d880048d 	sth	r2,18(sp)
 40125f0:	da400115 	stw	r9,4(sp)
 40125f4:	400a4400 	call	400a440 <___vfprintf_internal_r>
 40125f8:	d8c00117 	ldw	r3,4(sp)
 40125fc:	18000005 	stb	zero,0(r3)
 4012600:	dfc01817 	ldw	ra,96(sp)
 4012604:	dec01b04 	addi	sp,sp,108
 4012608:	f800283a 	ret

0401260c <_sprintf_r>:
 401260c:	deffe604 	addi	sp,sp,-104
 4012610:	2813883a 	mov	r9,r5
 4012614:	dfc01815 	stw	ra,96(sp)
 4012618:	d9c01915 	stw	r7,100(sp)
 401261c:	d8801904 	addi	r2,sp,100
 4012620:	d8800015 	stw	r2,0(sp)
 4012624:	100f883a 	mov	r7,r2
 4012628:	00808204 	movi	r2,520
 401262c:	00e00034 	movhi	r3,32768
 4012630:	18ffffc4 	addi	r3,r3,-1
 4012634:	d880040d 	sth	r2,16(sp)
 4012638:	d9400104 	addi	r5,sp,4
 401263c:	00bfffc4 	movi	r2,-1
 4012640:	d8c00615 	stw	r3,24(sp)
 4012644:	d8c00315 	stw	r3,12(sp)
 4012648:	da400515 	stw	r9,20(sp)
 401264c:	d880048d 	sth	r2,18(sp)
 4012650:	da400115 	stw	r9,4(sp)
 4012654:	400a4400 	call	400a440 <___vfprintf_internal_r>
 4012658:	d8c00117 	ldw	r3,4(sp)
 401265c:	18000005 	stb	zero,0(r3)
 4012660:	dfc01817 	ldw	ra,96(sp)
 4012664:	dec01a04 	addi	sp,sp,104
 4012668:	f800283a 	ret

0401266c <__sclose>:
 401266c:	2940038f 	ldh	r5,14(r5)
 4012670:	4014e7c1 	jmpi	4014e7c <_close_r>

04012674 <__sseek>:
 4012674:	defffe04 	addi	sp,sp,-8
 4012678:	dc000015 	stw	r16,0(sp)
 401267c:	2821883a 	mov	r16,r5
 4012680:	2940038f 	ldh	r5,14(r5)
 4012684:	dfc00115 	stw	ra,4(sp)
 4012688:	4015cc00 	call	4015cc0 <_lseek_r>
 401268c:	1007883a 	mov	r3,r2
 4012690:	00bfffc4 	movi	r2,-1
 4012694:	18800926 	beq	r3,r2,40126bc <__sseek+0x48>
 4012698:	8080030b 	ldhu	r2,12(r16)
 401269c:	80c01415 	stw	r3,80(r16)
 40126a0:	10840014 	ori	r2,r2,4096
 40126a4:	8080030d 	sth	r2,12(r16)
 40126a8:	1805883a 	mov	r2,r3
 40126ac:	dfc00117 	ldw	ra,4(sp)
 40126b0:	dc000017 	ldw	r16,0(sp)
 40126b4:	dec00204 	addi	sp,sp,8
 40126b8:	f800283a 	ret
 40126bc:	8080030b 	ldhu	r2,12(r16)
 40126c0:	10bbffcc 	andi	r2,r2,61439
 40126c4:	8080030d 	sth	r2,12(r16)
 40126c8:	1805883a 	mov	r2,r3
 40126cc:	dfc00117 	ldw	ra,4(sp)
 40126d0:	dc000017 	ldw	r16,0(sp)
 40126d4:	dec00204 	addi	sp,sp,8
 40126d8:	f800283a 	ret

040126dc <__swrite>:
 40126dc:	2880030b 	ldhu	r2,12(r5)
 40126e0:	defffb04 	addi	sp,sp,-20
 40126e4:	dcc00315 	stw	r19,12(sp)
 40126e8:	1080400c 	andi	r2,r2,256
 40126ec:	dc800215 	stw	r18,8(sp)
 40126f0:	dc400115 	stw	r17,4(sp)
 40126f4:	dc000015 	stw	r16,0(sp)
 40126f8:	3027883a 	mov	r19,r6
 40126fc:	3825883a 	mov	r18,r7
 4012700:	dfc00415 	stw	ra,16(sp)
 4012704:	2821883a 	mov	r16,r5
 4012708:	000d883a 	mov	r6,zero
 401270c:	01c00084 	movi	r7,2
 4012710:	2023883a 	mov	r17,r4
 4012714:	10000226 	beq	r2,zero,4012720 <__swrite+0x44>
 4012718:	2940038f 	ldh	r5,14(r5)
 401271c:	4015cc00 	call	4015cc0 <_lseek_r>
 4012720:	8080030b 	ldhu	r2,12(r16)
 4012724:	8140038f 	ldh	r5,14(r16)
 4012728:	8809883a 	mov	r4,r17
 401272c:	10bbffcc 	andi	r2,r2,61439
 4012730:	980d883a 	mov	r6,r19
 4012734:	900f883a 	mov	r7,r18
 4012738:	8080030d 	sth	r2,12(r16)
 401273c:	dfc00417 	ldw	ra,16(sp)
 4012740:	dcc00317 	ldw	r19,12(sp)
 4012744:	dc800217 	ldw	r18,8(sp)
 4012748:	dc400117 	ldw	r17,4(sp)
 401274c:	dc000017 	ldw	r16,0(sp)
 4012750:	dec00504 	addi	sp,sp,20
 4012754:	4014d3c1 	jmpi	4014d3c <_write_r>

04012758 <__sread>:
 4012758:	defffe04 	addi	sp,sp,-8
 401275c:	dc000015 	stw	r16,0(sp)
 4012760:	2821883a 	mov	r16,r5
 4012764:	2940038f 	ldh	r5,14(r5)
 4012768:	dfc00115 	stw	ra,4(sp)
 401276c:	4015d380 	call	4015d38 <_read_r>
 4012770:	1007883a 	mov	r3,r2
 4012774:	10000816 	blt	r2,zero,4012798 <__sread+0x40>
 4012778:	80801417 	ldw	r2,80(r16)
 401277c:	10c5883a 	add	r2,r2,r3
 4012780:	80801415 	stw	r2,80(r16)
 4012784:	1805883a 	mov	r2,r3
 4012788:	dfc00117 	ldw	ra,4(sp)
 401278c:	dc000017 	ldw	r16,0(sp)
 4012790:	dec00204 	addi	sp,sp,8
 4012794:	f800283a 	ret
 4012798:	8080030b 	ldhu	r2,12(r16)
 401279c:	10bbffcc 	andi	r2,r2,61439
 40127a0:	8080030d 	sth	r2,12(r16)
 40127a4:	1805883a 	mov	r2,r3
 40127a8:	dfc00117 	ldw	ra,4(sp)
 40127ac:	dc000017 	ldw	r16,0(sp)
 40127b0:	dec00204 	addi	sp,sp,8
 40127b4:	f800283a 	ret

040127b8 <strcmp>:
 40127b8:	2144b03a 	or	r2,r4,r5
 40127bc:	108000cc 	andi	r2,r2,3
 40127c0:	10001d1e 	bne	r2,zero,4012838 <strcmp+0x80>
 40127c4:	200f883a 	mov	r7,r4
 40127c8:	28800017 	ldw	r2,0(r5)
 40127cc:	21000017 	ldw	r4,0(r4)
 40127d0:	280d883a 	mov	r6,r5
 40127d4:	2080161e 	bne	r4,r2,4012830 <strcmp+0x78>
 40127d8:	023fbff4 	movhi	r8,65279
 40127dc:	423fbfc4 	addi	r8,r8,-257
 40127e0:	2207883a 	add	r3,r4,r8
 40127e4:	01602074 	movhi	r5,32897
 40127e8:	29602004 	addi	r5,r5,-32640
 40127ec:	1946703a 	and	r3,r3,r5
 40127f0:	0104303a 	nor	r2,zero,r4
 40127f4:	10c4703a 	and	r2,r2,r3
 40127f8:	10001c1e 	bne	r2,zero,401286c <strcmp+0xb4>
 40127fc:	4013883a 	mov	r9,r8
 4012800:	2811883a 	mov	r8,r5
 4012804:	00000106 	br	401280c <strcmp+0x54>
 4012808:	1800181e 	bne	r3,zero,401286c <strcmp+0xb4>
 401280c:	39c00104 	addi	r7,r7,4
 4012810:	39000017 	ldw	r4,0(r7)
 4012814:	31800104 	addi	r6,r6,4
 4012818:	31400017 	ldw	r5,0(r6)
 401281c:	2245883a 	add	r2,r4,r9
 4012820:	1204703a 	and	r2,r2,r8
 4012824:	0106303a 	nor	r3,zero,r4
 4012828:	1886703a 	and	r3,r3,r2
 401282c:	217ff626 	beq	r4,r5,4012808 <strcmp+0x50>
 4012830:	3809883a 	mov	r4,r7
 4012834:	300b883a 	mov	r5,r6
 4012838:	20c00007 	ldb	r3,0(r4)
 401283c:	1800051e 	bne	r3,zero,4012854 <strcmp+0x9c>
 4012840:	00000606 	br	401285c <strcmp+0xa4>
 4012844:	21000044 	addi	r4,r4,1
 4012848:	20c00007 	ldb	r3,0(r4)
 401284c:	29400044 	addi	r5,r5,1
 4012850:	18000226 	beq	r3,zero,401285c <strcmp+0xa4>
 4012854:	28800007 	ldb	r2,0(r5)
 4012858:	18bffa26 	beq	r3,r2,4012844 <strcmp+0x8c>
 401285c:	20c00003 	ldbu	r3,0(r4)
 4012860:	28800003 	ldbu	r2,0(r5)
 4012864:	1885c83a 	sub	r2,r3,r2
 4012868:	f800283a 	ret
 401286c:	0005883a 	mov	r2,zero
 4012870:	f800283a 	ret

04012874 <match>:
 4012874:	21800017 	ldw	r6,0(r4)
 4012878:	01c01004 	movi	r7,64
 401287c:	02001684 	movi	r8,90
 4012880:	28800007 	ldb	r2,0(r5)
 4012884:	29400044 	addi	r5,r5,1
 4012888:	10000826 	beq	r2,zero,40128ac <match+0x38>
 401288c:	31800044 	addi	r6,r6,1
 4012890:	30c00007 	ldb	r3,0(r6)
 4012894:	38c0020e 	bge	r7,r3,40128a0 <match+0x2c>
 4012898:	40c00116 	blt	r8,r3,40128a0 <match+0x2c>
 401289c:	18c00804 	addi	r3,r3,32
 40128a0:	18bff726 	beq	r3,r2,4012880 <match+0xc>
 40128a4:	0005883a 	mov	r2,zero
 40128a8:	f800283a 	ret
 40128ac:	30800044 	addi	r2,r6,1
 40128b0:	20800015 	stw	r2,0(r4)
 40128b4:	00800044 	movi	r2,1
 40128b8:	f800283a 	ret

040128bc <_strtod_r>:
 40128bc:	deffd504 	addi	sp,sp,-172
 40128c0:	df002915 	stw	fp,164(sp)
 40128c4:	dd402615 	stw	r21,152(sp)
 40128c8:	dd002515 	stw	r20,148(sp)
 40128cc:	dfc02a15 	stw	ra,168(sp)
 40128d0:	ddc02815 	stw	r23,160(sp)
 40128d4:	dd802715 	stw	r22,156(sp)
 40128d8:	dcc02415 	stw	r19,144(sp)
 40128dc:	dc802315 	stw	r18,140(sp)
 40128e0:	dc402215 	stw	r17,136(sp)
 40128e4:	dc002115 	stw	r16,132(sp)
 40128e8:	2829883a 	mov	r20,r5
 40128ec:	202b883a 	mov	r21,r4
 40128f0:	d9801d15 	stw	r6,116(sp)
 40128f4:	d8000915 	stw	zero,36(sp)
 40128f8:	d8000a15 	stw	zero,40(sp)
 40128fc:	d9400415 	stw	r5,16(sp)
 4012900:	df000904 	addi	fp,sp,36
 4012904:	dc000417 	ldw	r16,16(sp)
 4012908:	00800b44 	movi	r2,45
 401290c:	80c00003 	ldbu	r3,0(r16)
 4012910:	10c03536 	bltu	r2,r3,40129e8 <_strtod_r+0x12c>
 4012914:	18c5883a 	add	r2,r3,r3
 4012918:	1085883a 	add	r2,r2,r2
 401291c:	00c10074 	movhi	r3,1025
 4012920:	18ca4c04 	addi	r3,r3,10544
 4012924:	10c5883a 	add	r2,r2,r3
 4012928:	11000017 	ldw	r4,0(r2)
 401292c:	2000683a 	jmp	r4
 4012930:	04012b68 	cmpgeui	r16,zero,1197
 4012934:	040129e8 	cmpgeui	r16,zero,1191
 4012938:	040129e8 	cmpgeui	r16,zero,1191
 401293c:	040129e8 	cmpgeui	r16,zero,1191
 4012940:	040129e8 	cmpgeui	r16,zero,1191
 4012944:	040129e8 	cmpgeui	r16,zero,1191
 4012948:	040129e8 	cmpgeui	r16,zero,1191
 401294c:	040129e8 	cmpgeui	r16,zero,1191
 4012950:	040129e8 	cmpgeui	r16,zero,1191
 4012954:	04012eb0 	cmpltui	r16,zero,1210
 4012958:	04012eb0 	cmpltui	r16,zero,1210
 401295c:	04012eb0 	cmpltui	r16,zero,1210
 4012960:	04012eb0 	cmpltui	r16,zero,1210
 4012964:	04012eb0 	cmpltui	r16,zero,1210
 4012968:	040129e8 	cmpgeui	r16,zero,1191
 401296c:	040129e8 	cmpgeui	r16,zero,1191
 4012970:	040129e8 	cmpgeui	r16,zero,1191
 4012974:	040129e8 	cmpgeui	r16,zero,1191
 4012978:	040129e8 	cmpgeui	r16,zero,1191
 401297c:	040129e8 	cmpgeui	r16,zero,1191
 4012980:	040129e8 	cmpgeui	r16,zero,1191
 4012984:	040129e8 	cmpgeui	r16,zero,1191
 4012988:	040129e8 	cmpgeui	r16,zero,1191
 401298c:	040129e8 	cmpgeui	r16,zero,1191
 4012990:	040129e8 	cmpgeui	r16,zero,1191
 4012994:	040129e8 	cmpgeui	r16,zero,1191
 4012998:	040129e8 	cmpgeui	r16,zero,1191
 401299c:	040129e8 	cmpgeui	r16,zero,1191
 40129a0:	040129e8 	cmpgeui	r16,zero,1191
 40129a4:	040129e8 	cmpgeui	r16,zero,1191
 40129a8:	040129e8 	cmpgeui	r16,zero,1191
 40129ac:	040129e8 	cmpgeui	r16,zero,1191
 40129b0:	04012eb0 	cmpltui	r16,zero,1210
 40129b4:	040129e8 	cmpgeui	r16,zero,1191
 40129b8:	040129e8 	cmpgeui	r16,zero,1191
 40129bc:	040129e8 	cmpgeui	r16,zero,1191
 40129c0:	040129e8 	cmpgeui	r16,zero,1191
 40129c4:	040129e8 	cmpgeui	r16,zero,1191
 40129c8:	040129e8 	cmpgeui	r16,zero,1191
 40129cc:	040129e8 	cmpgeui	r16,zero,1191
 40129d0:	040129e8 	cmpgeui	r16,zero,1191
 40129d4:	040129e8 	cmpgeui	r16,zero,1191
 40129d8:	040129e8 	cmpgeui	r16,zero,1191
 40129dc:	04012e90 	cmplti	r16,zero,1210
 40129e0:	040129e8 	cmpgeui	r16,zero,1191
 40129e4:	04012ebc 	xorhi	r16,zero,1210
 40129e8:	d8001515 	stw	zero,84(sp)
 40129ec:	80c00007 	ldb	r3,0(r16)
 40129f0:	00800c04 	movi	r2,48
 40129f4:	1880e926 	beq	r3,r2,4012d9c <_strtod_r+0x4e0>
 40129f8:	d8001615 	stw	zero,88(sp)
 40129fc:	dc001415 	stw	r16,80(sp)
 4012a00:	84400007 	ldb	r17,0(r16)
 4012a04:	00800bc4 	movi	r2,47
 4012a08:	1443760e 	bge	r2,r17,40137e4 <_strtod_r+0xf28>
 4012a0c:	00800e44 	movi	r2,57
 4012a10:	14437416 	blt	r2,r17,40137e4 <_strtod_r+0xf28>
 4012a14:	8025883a 	mov	r18,r16
 4012a18:	0027883a 	mov	r19,zero
 4012a1c:	d8001215 	stw	zero,72(sp)
 4012a20:	d8001115 	stw	zero,68(sp)
 4012a24:	00000f06 	br	4012a64 <_strtod_r+0x1a8>
 4012a28:	d9001217 	ldw	r4,72(sp)
 4012a2c:	01400284 	movi	r5,10
 4012a30:	4008ff80 	call	4008ff8 <__mulsi3>
 4012a34:	1445883a 	add	r2,r2,r17
 4012a38:	10bff404 	addi	r2,r2,-48
 4012a3c:	d8801215 	stw	r2,72(sp)
 4012a40:	94000044 	addi	r16,r18,1
 4012a44:	dc000415 	stw	r16,16(sp)
 4012a48:	84400007 	ldb	r17,0(r16)
 4012a4c:	00800bc4 	movi	r2,47
 4012a50:	9cc00044 	addi	r19,r19,1
 4012a54:	8025883a 	mov	r18,r16
 4012a58:	1440130e 	bge	r2,r17,4012aa8 <_strtod_r+0x1ec>
 4012a5c:	00800e44 	movi	r2,57
 4012a60:	14401116 	blt	r2,r17,4012aa8 <_strtod_r+0x1ec>
 4012a64:	00800204 	movi	r2,8
 4012a68:	14ffef0e 	bge	r2,r19,4012a28 <_strtod_r+0x16c>
 4012a6c:	008003c4 	movi	r2,15
 4012a70:	14fff316 	blt	r2,r19,4012a40 <_strtod_r+0x184>
 4012a74:	d9001117 	ldw	r4,68(sp)
 4012a78:	01400284 	movi	r5,10
 4012a7c:	94000044 	addi	r16,r18,1
 4012a80:	4008ff80 	call	4008ff8 <__mulsi3>
 4012a84:	1445883a 	add	r2,r2,r17
 4012a88:	10bff404 	addi	r2,r2,-48
 4012a8c:	d8801115 	stw	r2,68(sp)
 4012a90:	dc000415 	stw	r16,16(sp)
 4012a94:	84400007 	ldb	r17,0(r16)
 4012a98:	00800bc4 	movi	r2,47
 4012a9c:	9cc00044 	addi	r19,r19,1
 4012aa0:	8025883a 	mov	r18,r16
 4012aa4:	147fed16 	blt	r2,r17,4012a5c <_strtod_r+0x1a0>
 4012aa8:	00800b84 	movi	r2,46
 4012aac:	8880c926 	beq	r17,r2,4012dd4 <_strtod_r+0x518>
 4012ab0:	dcc01815 	stw	r19,96(sp)
 4012ab4:	d8001b15 	stw	zero,108(sp)
 4012ab8:	d8001715 	stw	zero,92(sp)
 4012abc:	000d883a 	mov	r6,zero
 4012ac0:	00801944 	movi	r2,101
 4012ac4:	88802126 	beq	r17,r2,4012b4c <_strtod_r+0x290>
 4012ac8:	00801144 	movi	r2,69
 4012acc:	88801f26 	beq	r17,r2,4012b4c <_strtod_r+0x290>
 4012ad0:	d9001817 	ldw	r4,96(sp)
 4012ad4:	2024c03a 	cmpne	r18,r4,zero
 4012ad8:	0009883a 	mov	r4,zero
 4012adc:	9000651e 	bne	r18,zero,4012c74 <_strtod_r+0x3b8>
 4012ae0:	3000c926 	beq	r6,zero,4012e08 <_strtod_r+0x54c>
 4012ae4:	d8801d17 	ldw	r2,116(sp)
 4012ae8:	10000326 	beq	r2,zero,4012af8 <_strtod_r+0x23c>
 4012aec:	d8800417 	ldw	r2,16(sp)
 4012af0:	d8c01d17 	ldw	r3,116(sp)
 4012af4:	18800015 	stw	r2,0(r3)
 4012af8:	d9001517 	ldw	r4,84(sp)
 4012afc:	2005003a 	cmpeq	r2,r4,zero
 4012b00:	10001c1e 	bne	r2,zero,4012b74 <_strtod_r+0x2b8>
 4012b04:	e0800017 	ldw	r2,0(fp)
 4012b08:	e0c00117 	ldw	r3,4(fp)
 4012b0c:	1009883a 	mov	r4,r2
 4012b10:	1960003c 	xorhi	r5,r3,32768
 4012b14:	2005883a 	mov	r2,r4
 4012b18:	2807883a 	mov	r3,r5
 4012b1c:	dfc02a17 	ldw	ra,168(sp)
 4012b20:	df002917 	ldw	fp,164(sp)
 4012b24:	ddc02817 	ldw	r23,160(sp)
 4012b28:	dd802717 	ldw	r22,156(sp)
 4012b2c:	dd402617 	ldw	r21,152(sp)
 4012b30:	dd002517 	ldw	r20,148(sp)
 4012b34:	dcc02417 	ldw	r19,144(sp)
 4012b38:	dc802317 	ldw	r18,140(sp)
 4012b3c:	dc402217 	ldw	r17,136(sp)
 4012b40:	dc002117 	ldw	r16,132(sp)
 4012b44:	dec02b04 	addi	sp,sp,172
 4012b48:	f800283a 	ret
 4012b4c:	d8801817 	ldw	r2,96(sp)
 4012b50:	1024c03a 	cmpne	r18,r2,zero
 4012b54:	90000a1e 	bne	r18,zero,4012b80 <_strtod_r+0x2c4>
 4012b58:	3000091e 	bne	r6,zero,4012b80 <_strtod_r+0x2c4>
 4012b5c:	d8c01617 	ldw	r3,88(sp)
 4012b60:	1805003a 	cmpeq	r2,r3,zero
 4012b64:	10000626 	beq	r2,zero,4012b80 <_strtod_r+0x2c4>
 4012b68:	d8001515 	stw	zero,84(sp)
 4012b6c:	dd000415 	stw	r20,16(sp)
 4012b70:	003fdc06 	br	4012ae4 <_strtod_r+0x228>
 4012b74:	e1000017 	ldw	r4,0(fp)
 4012b78:	e1400117 	ldw	r5,4(fp)
 4012b7c:	003fe506 	br	4012b14 <_strtod_r+0x258>
 4012b80:	dd000417 	ldw	r20,16(sp)
 4012b84:	00800ac4 	movi	r2,43
 4012b88:	a4000044 	addi	r16,r20,1
 4012b8c:	dc000415 	stw	r16,16(sp)
 4012b90:	a0c00047 	ldb	r3,1(r20)
 4012b94:	8009883a 	mov	r4,r16
 4012b98:	1880cb26 	beq	r3,r2,4012ec8 <_strtod_r+0x60c>
 4012b9c:	00800b44 	movi	r2,45
 4012ba0:	18838326 	beq	r3,r2,40139b0 <_strtod_r+0x10f4>
 4012ba4:	1823883a 	mov	r17,r3
 4012ba8:	88fff404 	addi	r3,r17,-48
 4012bac:	00800244 	movi	r2,9
 4012bb0:	d8001915 	stw	zero,100(sp)
 4012bb4:	10c0cb36 	bltu	r2,r3,4012ee4 <_strtod_r+0x628>
 4012bb8:	00800c04 	movi	r2,48
 4012bbc:	8880061e 	bne	r17,r2,4012bd8 <_strtod_r+0x31c>
 4012bc0:	dc000417 	ldw	r16,16(sp)
 4012bc4:	8805883a 	mov	r2,r17
 4012bc8:	84000044 	addi	r16,r16,1
 4012bcc:	dc000415 	stw	r16,16(sp)
 4012bd0:	84400007 	ldb	r17,0(r16)
 4012bd4:	88bffc26 	beq	r17,r2,4012bc8 <_strtod_r+0x30c>
 4012bd8:	88fff3c4 	addi	r3,r17,-49
 4012bdc:	00800204 	movi	r2,8
 4012be0:	10ffbd36 	bltu	r2,r3,4012ad8 <_strtod_r+0x21c>
 4012be4:	dc000417 	ldw	r16,16(sp)
 4012be8:	893ff404 	addi	r4,r17,-48
 4012bec:	00c00bc4 	movi	r3,47
 4012bf0:	dc001315 	stw	r16,76(sp)
 4012bf4:	84000044 	addi	r16,r16,1
 4012bf8:	dc000415 	stw	r16,16(sp)
 4012bfc:	84400007 	ldb	r17,0(r16)
 4012c00:	1c40100e 	bge	r3,r17,4012c44 <_strtod_r+0x388>
 4012c04:	00800e44 	movi	r2,57
 4012c08:	14400e16 	blt	r2,r17,4012c44 <_strtod_r+0x388>
 4012c0c:	182f883a 	mov	r23,r3
 4012c10:	102d883a 	mov	r22,r2
 4012c14:	00000106 	br	4012c1c <_strtod_r+0x360>
 4012c18:	b4400a16 	blt	r22,r17,4012c44 <_strtod_r+0x388>
 4012c1c:	84000044 	addi	r16,r16,1
 4012c20:	01400284 	movi	r5,10
 4012c24:	d9802015 	stw	r6,128(sp)
 4012c28:	4008ff80 	call	4008ff8 <__mulsi3>
 4012c2c:	dc000415 	stw	r16,16(sp)
 4012c30:	8885883a 	add	r2,r17,r2
 4012c34:	84400007 	ldb	r17,0(r16)
 4012c38:	113ff404 	addi	r4,r2,-48
 4012c3c:	d9802017 	ldw	r6,128(sp)
 4012c40:	bc7ff516 	blt	r23,r17,4012c18 <_strtod_r+0x35c>
 4012c44:	d8801317 	ldw	r2,76(sp)
 4012c48:	8087c83a 	sub	r3,r16,r2
 4012c4c:	00800204 	movi	r2,8
 4012c50:	10c2ff16 	blt	r2,r3,4013850 <_strtod_r+0xf94>
 4012c54:	009387c4 	movi	r2,19999
 4012c58:	1100010e 	bge	r2,r4,4012c60 <_strtod_r+0x3a4>
 4012c5c:	1009883a 	mov	r4,r2
 4012c60:	d8c01917 	ldw	r3,100(sp)
 4012c64:	1805003a 	cmpeq	r2,r3,zero
 4012c68:	103f9c1e 	bne	r2,zero,4012adc <_strtod_r+0x220>
 4012c6c:	0109c83a 	sub	r4,zero,r4
 4012c70:	903f9b26 	beq	r18,zero,4012ae0 <_strtod_r+0x224>
 4012c74:	d8801717 	ldw	r2,92(sp)
 4012c78:	2089c83a 	sub	r4,r4,r2
 4012c7c:	d9000f15 	stw	r4,60(sp)
 4012c80:	9800811e 	bne	r19,zero,4012e88 <_strtod_r+0x5cc>
 4012c84:	dd001817 	ldw	r20,96(sp)
 4012c88:	dc801817 	ldw	r18,96(sp)
 4012c8c:	00800404 	movi	r2,16
 4012c90:	1480010e 	bge	r2,r18,4012c98 <_strtod_r+0x3dc>
 4012c94:	1025883a 	mov	r18,r2
 4012c98:	d9001217 	ldw	r4,72(sp)
 4012c9c:	4016d200 	call	4016d20 <__floatunsidf>
 4012ca0:	100f883a 	mov	r7,r2
 4012ca4:	e0800015 	stw	r2,0(fp)
 4012ca8:	00800244 	movi	r2,9
 4012cac:	e0c00115 	stw	r3,4(fp)
 4012cb0:	1480160e 	bge	r2,r18,4012d0c <_strtod_r+0x450>
 4012cb4:	900c90fa 	slli	r6,r18,3
 4012cb8:	010100b4 	movhi	r4,1026
 4012cbc:	21124f04 	addi	r4,r4,18748
 4012cc0:	180b883a 	mov	r5,r3
 4012cc4:	310d883a 	add	r6,r6,r4
 4012cc8:	30ffef17 	ldw	r3,-68(r6)
 4012ccc:	30bfee17 	ldw	r2,-72(r6)
 4012cd0:	3809883a 	mov	r4,r7
 4012cd4:	180f883a 	mov	r7,r3
 4012cd8:	100d883a 	mov	r6,r2
 4012cdc:	40083f40 	call	40083f4 <__muldf3>
 4012ce0:	d9001117 	ldw	r4,68(sp)
 4012ce4:	1021883a 	mov	r16,r2
 4012ce8:	1823883a 	mov	r17,r3
 4012cec:	4016d200 	call	4016d20 <__floatunsidf>
 4012cf0:	880b883a 	mov	r5,r17
 4012cf4:	180f883a 	mov	r7,r3
 4012cf8:	8009883a 	mov	r4,r16
 4012cfc:	100d883a 	mov	r6,r2
 4012d00:	40083800 	call	4008380 <__adddf3>
 4012d04:	e0c00115 	stw	r3,4(fp)
 4012d08:	e0800015 	stw	r2,0(fp)
 4012d0c:	d8c01817 	ldw	r3,96(sp)
 4012d10:	010003c4 	movi	r4,15
 4012d14:	20c09e16 	blt	r4,r3,4012f90 <_strtod_r+0x6d4>
 4012d18:	d8800f17 	ldw	r2,60(sp)
 4012d1c:	103f7126 	beq	r2,zero,4012ae4 <_strtod_r+0x228>
 4012d20:	0083d90e 	bge	zero,r2,4013c88 <_strtod_r+0x13cc>
 4012d24:	d8c00f17 	ldw	r3,60(sp)
 4012d28:	00800584 	movi	r2,22
 4012d2c:	10c2ca0e 	bge	r2,r3,4013858 <_strtod_r+0xf9c>
 4012d30:	d8801817 	ldw	r2,96(sp)
 4012d34:	d8c00f17 	ldw	r3,60(sp)
 4012d38:	20a3c83a 	sub	r17,r4,r2
 4012d3c:	88800584 	addi	r2,r17,22
 4012d40:	10c09316 	blt	r2,r3,4012f90 <_strtod_r+0x6d4>
 4012d44:	880890fa 	slli	r4,r17,3
 4012d48:	040100b4 	movhi	r16,1026
 4012d4c:	84124f04 	addi	r16,r16,18748
 4012d50:	e0800017 	ldw	r2,0(fp)
 4012d54:	2409883a 	add	r4,r4,r16
 4012d58:	22000017 	ldw	r8,0(r4)
 4012d5c:	22400117 	ldw	r9,4(r4)
 4012d60:	e0c00117 	ldw	r3,4(fp)
 4012d64:	1009883a 	mov	r4,r2
 4012d68:	480f883a 	mov	r7,r9
 4012d6c:	180b883a 	mov	r5,r3
 4012d70:	400d883a 	mov	r6,r8
 4012d74:	40083f40 	call	40083f4 <__muldf3>
 4012d78:	d9000f17 	ldw	r4,60(sp)
 4012d7c:	180b883a 	mov	r5,r3
 4012d80:	2455c83a 	sub	r10,r4,r17
 4012d84:	501490fa 	slli	r10,r10,3
 4012d88:	1009883a 	mov	r4,r2
 4012d8c:	5415883a 	add	r10,r10,r16
 4012d90:	52000017 	ldw	r8,0(r10)
 4012d94:	52400117 	ldw	r9,4(r10)
 4012d98:	0002b906 	br	4013880 <_strtod_r+0xfc4>
 4012d9c:	80c00047 	ldb	r3,1(r16)
 4012da0:	00801604 	movi	r2,88
 4012da4:	18805226 	beq	r3,r2,4012ef0 <_strtod_r+0x634>
 4012da8:	00801e04 	movi	r2,120
 4012dac:	18805026 	beq	r3,r2,4012ef0 <_strtod_r+0x634>
 4012db0:	84000044 	addi	r16,r16,1
 4012db4:	dc000415 	stw	r16,16(sp)
 4012db8:	80c00007 	ldb	r3,0(r16)
 4012dbc:	00800c04 	movi	r2,48
 4012dc0:	18bffb26 	beq	r3,r2,4012db0 <_strtod_r+0x4f4>
 4012dc4:	183f4726 	beq	r3,zero,4012ae4 <_strtod_r+0x228>
 4012dc8:	01000044 	movi	r4,1
 4012dcc:	d9001615 	stw	r4,88(sp)
 4012dd0:	003f0a06 	br	40129fc <_strtod_r+0x140>
 4012dd4:	84000044 	addi	r16,r16,1
 4012dd8:	dc000415 	stw	r16,16(sp)
 4012ddc:	94400047 	ldb	r17,1(r18)
 4012de0:	9800ba26 	beq	r19,zero,40130cc <_strtod_r+0x810>
 4012de4:	dcc01815 	stw	r19,96(sp)
 4012de8:	d8001715 	stw	zero,92(sp)
 4012dec:	000d883a 	mov	r6,zero
 4012df0:	8dbff404 	addi	r22,r17,-48
 4012df4:	00800244 	movi	r2,9
 4012df8:	15826e2e 	bgeu	r2,r22,40137b4 <_strtod_r+0xef8>
 4012dfc:	01000044 	movi	r4,1
 4012e00:	d9001b15 	stw	r4,108(sp)
 4012e04:	003f2e06 	br	4012ac0 <_strtod_r+0x204>
 4012e08:	d8c01617 	ldw	r3,88(sp)
 4012e0c:	1804c03a 	cmpne	r2,r3,zero
 4012e10:	103f341e 	bne	r2,zero,4012ae4 <_strtod_r+0x228>
 4012e14:	d9001b17 	ldw	r4,108(sp)
 4012e18:	2004c03a 	cmpne	r2,r4,zero
 4012e1c:	103f521e 	bne	r2,zero,4012b68 <_strtod_r+0x2ac>
 4012e20:	00801384 	movi	r2,78
 4012e24:	8883b526 	beq	r17,r2,4013cfc <_strtod_r+0x1440>
 4012e28:	1443b016 	blt	r2,r17,4013cec <_strtod_r+0x1430>
 4012e2c:	00801244 	movi	r2,73
 4012e30:	88bf4d1e 	bne	r17,r2,4012b68 <_strtod_r+0x2ac>
 4012e34:	dc000404 	addi	r16,sp,16
 4012e38:	8009883a 	mov	r4,r16
 4012e3c:	014100b4 	movhi	r5,1026
 4012e40:	29529804 	addi	r5,r5,19040
 4012e44:	40128740 	call	4012874 <match>
 4012e48:	103f4726 	beq	r2,zero,4012b68 <_strtod_r+0x2ac>
 4012e4c:	d8800417 	ldw	r2,16(sp)
 4012e50:	8009883a 	mov	r4,r16
 4012e54:	014100b4 	movhi	r5,1026
 4012e58:	29529904 	addi	r5,r5,19044
 4012e5c:	143fffc4 	addi	r16,r2,-1
 4012e60:	dc000415 	stw	r16,16(sp)
 4012e64:	40128740 	call	4012874 <match>
 4012e68:	1000031e 	bne	r2,zero,4012e78 <_strtod_r+0x5bc>
 4012e6c:	d8800417 	ldw	r2,16(sp)
 4012e70:	14000044 	addi	r16,r2,1
 4012e74:	dc000415 	stw	r16,16(sp)
 4012e78:	019ffc34 	movhi	r6,32752
 4012e7c:	e1800115 	stw	r6,4(fp)
 4012e80:	e0000015 	stw	zero,0(fp)
 4012e84:	003f1706 	br	4012ae4 <_strtod_r+0x228>
 4012e88:	9829883a 	mov	r20,r19
 4012e8c:	003f7e06 	br	4012c88 <_strtod_r+0x3cc>
 4012e90:	d8001515 	stw	zero,84(sp)
 4012e94:	84000044 	addi	r16,r16,1
 4012e98:	dc000415 	stw	r16,16(sp)
 4012e9c:	80800007 	ldb	r2,0(r16)
 4012ea0:	103ed21e 	bne	r2,zero,40129ec <_strtod_r+0x130>
 4012ea4:	d8001515 	stw	zero,84(sp)
 4012ea8:	dd000415 	stw	r20,16(sp)
 4012eac:	003f0d06 	br	4012ae4 <_strtod_r+0x228>
 4012eb0:	84000044 	addi	r16,r16,1
 4012eb4:	dc000415 	stw	r16,16(sp)
 4012eb8:	003e9206 	br	4012904 <_strtod_r+0x48>
 4012ebc:	00800044 	movi	r2,1
 4012ec0:	d8801515 	stw	r2,84(sp)
 4012ec4:	003ff306 	br	4012e94 <_strtod_r+0x5d8>
 4012ec8:	d8001915 	stw	zero,100(sp)
 4012ecc:	84000044 	addi	r16,r16,1
 4012ed0:	dc000415 	stw	r16,16(sp)
 4012ed4:	24400047 	ldb	r17,1(r4)
 4012ed8:	00800244 	movi	r2,9
 4012edc:	88fff404 	addi	r3,r17,-48
 4012ee0:	10ff352e 	bgeu	r2,r3,4012bb8 <_strtod_r+0x2fc>
 4012ee4:	0009883a 	mov	r4,zero
 4012ee8:	dd000415 	stw	r20,16(sp)
 4012eec:	003efb06 	br	4012adc <_strtod_r+0x220>
 4012ef0:	d8c01517 	ldw	r3,84(sp)
 4012ef4:	044100b4 	movhi	r17,1026
 4012ef8:	8c558c04 	addi	r17,r17,22064
 4012efc:	d8800504 	addi	r2,sp,20
 4012f00:	a809883a 	mov	r4,r21
 4012f04:	d9400404 	addi	r5,sp,16
 4012f08:	880d883a 	mov	r6,r17
 4012f0c:	d9c00604 	addi	r7,sp,24
 4012f10:	d8800015 	stw	r2,0(sp)
 4012f14:	d8c00115 	stw	r3,4(sp)
 4012f18:	40151c00 	call	40151c0 <__gethex>
 4012f1c:	140001cc 	andi	r16,r2,7
 4012f20:	1025883a 	mov	r18,r2
 4012f24:	803eef26 	beq	r16,zero,4012ae4 <_strtod_r+0x228>
 4012f28:	04c00184 	movi	r19,6
 4012f2c:	84ff0e26 	beq	r16,r19,4012b68 <_strtod_r+0x2ac>
 4012f30:	d9800517 	ldw	r6,20(sp)
 4012f34:	30000626 	beq	r6,zero,4012f50 <_strtod_r+0x694>
 4012f38:	89400017 	ldw	r5,0(r17)
 4012f3c:	d9000d04 	addi	r4,sp,52
 4012f40:	40110d00 	call	40110d0 <__copybits>
 4012f44:	d9400517 	ldw	r5,20(sp)
 4012f48:	a809883a 	mov	r4,r21
 4012f4c:	4010c300 	call	4010c30 <_Bfree>
 4012f50:	d9400617 	ldw	r5,24(sp)
 4012f54:	9c025436 	bltu	r19,r16,40138a8 <_strtod_r+0xfec>
 4012f58:	8405883a 	add	r2,r16,r16
 4012f5c:	1085883a 	add	r2,r2,r2
 4012f60:	00c10074 	movhi	r3,1025
 4012f64:	18cbdd04 	addi	r3,r3,12148
 4012f68:	10c5883a 	add	r2,r2,r3
 4012f6c:	11000017 	ldw	r4,0(r2)
 4012f70:	2000683a 	jmp	r4
 4012f74:	040138e8 	cmpgeui	r16,zero,1251
 4012f78:	040138f4 	movhi	r16,1251
 4012f7c:	04013898 	cmpnei	r16,zero,1250
 4012f80:	040138c0 	call	40138c <__reset+0x3ffb8c>
 4012f84:	040138d0 	cmplti	r16,zero,1251
 4012f88:	040138f4 	movhi	r16,1251
 4012f8c:	040138e8 	cmpgeui	r16,zero,1251
 4012f90:	d9001817 	ldw	r4,96(sp)
 4012f94:	d8c00f17 	ldw	r3,60(sp)
 4012f98:	2485c83a 	sub	r2,r4,r18
 4012f9c:	18a1883a 	add	r16,r3,r2
 4012fa0:	0402e80e 	bge	zero,r16,4013b44 <_strtod_r+0x1288>
 4012fa4:	814003cc 	andi	r5,r16,15
 4012fa8:	28000f26 	beq	r5,zero,4012fe8 <_strtod_r+0x72c>
 4012fac:	280a90fa 	slli	r5,r5,3
 4012fb0:	010100b4 	movhi	r4,1026
 4012fb4:	21124f04 	addi	r4,r4,18748
 4012fb8:	e0800017 	ldw	r2,0(fp)
 4012fbc:	290b883a 	add	r5,r5,r4
 4012fc0:	2a000017 	ldw	r8,0(r5)
 4012fc4:	e0c00117 	ldw	r3,4(fp)
 4012fc8:	2a400117 	ldw	r9,4(r5)
 4012fcc:	1009883a 	mov	r4,r2
 4012fd0:	180b883a 	mov	r5,r3
 4012fd4:	480f883a 	mov	r7,r9
 4012fd8:	400d883a 	mov	r6,r8
 4012fdc:	40083f40 	call	40083f4 <__muldf3>
 4012fe0:	e0c00115 	stw	r3,4(fp)
 4012fe4:	e0800015 	stw	r2,0(fp)
 4012fe8:	00bffc04 	movi	r2,-16
 4012fec:	808c703a 	and	r6,r16,r2
 4012ff0:	30006726 	beq	r6,zero,4013190 <_strtod_r+0x8d4>
 4012ff4:	00804d04 	movi	r2,308
 4012ff8:	11820f16 	blt	r2,r6,4013838 <_strtod_r+0xf7c>
 4012ffc:	3021d13a 	srai	r16,r6,4
 4013000:	00800044 	movi	r2,1
 4013004:	14037f0e 	bge	r2,r16,4013e04 <_strtod_r+0x1548>
 4013008:	058100b4 	movhi	r22,1026
 401300c:	b5928104 	addi	r22,r22,18948
 4013010:	1027883a 	mov	r19,r2
 4013014:	0025883a 	mov	r18,zero
 4013018:	b023883a 	mov	r17,r22
 401301c:	8080004c 	andi	r2,r16,1
 4013020:	1005003a 	cmpeq	r2,r2,zero
 4013024:	1000091e 	bne	r2,zero,401304c <_strtod_r+0x790>
 4013028:	e0800017 	ldw	r2,0(fp)
 401302c:	e0c00117 	ldw	r3,4(fp)
 4013030:	89800017 	ldw	r6,0(r17)
 4013034:	89c00117 	ldw	r7,4(r17)
 4013038:	180b883a 	mov	r5,r3
 401303c:	1009883a 	mov	r4,r2
 4013040:	40083f40 	call	40083f4 <__muldf3>
 4013044:	e0c00115 	stw	r3,4(fp)
 4013048:	e0800015 	stw	r2,0(fp)
 401304c:	8021d07a 	srai	r16,r16,1
 4013050:	94800044 	addi	r18,r18,1
 4013054:	8c400204 	addi	r17,r17,8
 4013058:	9c3ff016 	blt	r19,r16,401301c <_strtod_r+0x760>
 401305c:	900e90fa 	slli	r7,r18,3
 4013060:	e2000117 	ldw	r8,4(fp)
 4013064:	e1000017 	ldw	r4,0(fp)
 4013068:	3d8f883a 	add	r7,r7,r22
 401306c:	38800017 	ldw	r2,0(r7)
 4013070:	38c00117 	ldw	r3,4(r7)
 4013074:	01bf2c34 	movhi	r6,64688
 4013078:	418d883a 	add	r6,r8,r6
 401307c:	300b883a 	mov	r5,r6
 4013080:	180f883a 	mov	r7,r3
 4013084:	100d883a 	mov	r6,r2
 4013088:	40083f40 	call	40083f4 <__muldf3>
 401308c:	1009883a 	mov	r4,r2
 4013090:	180b883a 	mov	r5,r3
 4013094:	199ffc2c 	andhi	r6,r3,32752
 4013098:	009f2834 	movhi	r2,31904
 401309c:	e1000015 	stw	r4,0(fp)
 40130a0:	e1400115 	stw	r5,4(fp)
 40130a4:	1181e436 	bltu	r2,r6,4013838 <_strtod_r+0xf7c>
 40130a8:	009f2434 	movhi	r2,31888
 40130ac:	11833f2e 	bgeu	r2,r6,4013dac <_strtod_r+0x14f0>
 40130b0:	d8001c15 	stw	zero,112(sp)
 40130b4:	019ffc34 	movhi	r6,32752
 40130b8:	31bfffc4 	addi	r6,r6,-1
 40130bc:	01ffffc4 	movi	r7,-1
 40130c0:	e1800115 	stw	r6,4(fp)
 40130c4:	e1c00015 	stw	r7,0(fp)
 40130c8:	00003206 	br	4013194 <_strtod_r+0x8d8>
 40130cc:	00800c04 	movi	r2,48
 40130d0:	8883221e 	bne	r17,r2,4013d5c <_strtod_r+0x14a0>
 40130d4:	8805883a 	mov	r2,r17
 40130d8:	000d883a 	mov	r6,zero
 40130dc:	84000044 	addi	r16,r16,1
 40130e0:	dc000415 	stw	r16,16(sp)
 40130e4:	84400007 	ldb	r17,0(r16)
 40130e8:	31800044 	addi	r6,r6,1
 40130ec:	88bffb26 	beq	r17,r2,40130dc <_strtod_r+0x820>
 40130f0:	88fff3c4 	addi	r3,r17,-49
 40130f4:	00800204 	movi	r2,8
 40130f8:	10c1ca36 	bltu	r2,r3,4013824 <_strtod_r+0xf68>
 40130fc:	d8c00417 	ldw	r3,16(sp)
 4013100:	d9801715 	stw	r6,92(sp)
 4013104:	8dbff404 	addi	r22,r17,-48
 4013108:	d8c01415 	stw	r3,80(sp)
 401310c:	1821883a 	mov	r16,r3
 4013110:	d8001815 	stw	zero,96(sp)
 4013114:	01800044 	movi	r6,1
 4013118:	b0023526 	beq	r22,zero,40139f0 <_strtod_r+0x1134>
 401311c:	d9001717 	ldw	r4,92(sp)
 4013120:	00800044 	movi	r2,1
 4013124:	2189883a 	add	r4,r4,r6
 4013128:	d9001715 	stw	r4,92(sp)
 401312c:	1183390e 	bge	r2,r6,4013e14 <_strtod_r+0x1558>
 4013130:	dc401817 	ldw	r17,96(sp)
 4013134:	1025883a 	mov	r18,r2
 4013138:	05c00204 	movi	r23,8
 401313c:	00000806 	br	4013160 <_strtod_r+0x8a4>
 4013140:	d9001217 	ldw	r4,72(sp)
 4013144:	01400284 	movi	r5,10
 4013148:	d9802015 	stw	r6,128(sp)
 401314c:	4008ff80 	call	4008ff8 <__mulsi3>
 4013150:	d9802017 	ldw	r6,128(sp)
 4013154:	d8801215 	stw	r2,72(sp)
 4013158:	94800044 	addi	r18,r18,1
 401315c:	91821726 	beq	r18,r6,40139bc <_strtod_r+0x1100>
 4013160:	8c400044 	addi	r17,r17,1
 4013164:	88bfffc4 	addi	r2,r17,-1
 4013168:	b8bff50e 	bge	r23,r2,4013140 <_strtod_r+0x884>
 401316c:	00800404 	movi	r2,16
 4013170:	147ff916 	blt	r2,r17,4013158 <_strtod_r+0x89c>
 4013174:	d9001117 	ldw	r4,68(sp)
 4013178:	01400284 	movi	r5,10
 401317c:	d9802015 	stw	r6,128(sp)
 4013180:	4008ff80 	call	4008ff8 <__mulsi3>
 4013184:	d9802017 	ldw	r6,128(sp)
 4013188:	d8801115 	stw	r2,68(sp)
 401318c:	003ff206 	br	4013158 <_strtod_r+0x89c>
 4013190:	d8001c15 	stw	zero,112(sp)
 4013194:	d8c01217 	ldw	r3,72(sp)
 4013198:	d9401417 	ldw	r5,80(sp)
 401319c:	d9c01817 	ldw	r7,96(sp)
 40131a0:	a809883a 	mov	r4,r21
 40131a4:	a00d883a 	mov	r6,r20
 40131a8:	d8c00015 	stw	r3,0(sp)
 40131ac:	4011b9c0 	call	4011b9c <__s2b>
 40131b0:	11000304 	addi	r4,r2,12
 40131b4:	d8801015 	stw	r2,64(sp)
 40131b8:	d8800f17 	ldw	r2,60(sp)
 40131bc:	d9001f15 	stw	r4,124(sp)
 40131c0:	1004803a 	cmplt	r2,r2,zero
 40131c4:	d8801e15 	stw	r2,120(sp)
 40131c8:	d8c01017 	ldw	r3,64(sp)
 40131cc:	a809883a 	mov	r4,r21
 40131d0:	19400117 	ldw	r5,4(r3)
 40131d4:	40111b00 	call	40111b0 <_Balloc>
 40131d8:	d9001017 	ldw	r4,64(sp)
 40131dc:	d9401f17 	ldw	r5,124(sp)
 40131e0:	102f883a 	mov	r23,r2
 40131e4:	21800417 	ldw	r6,16(r4)
 40131e8:	11000304 	addi	r4,r2,12
 40131ec:	318d883a 	add	r6,r6,r6
 40131f0:	318d883a 	add	r6,r6,r6
 40131f4:	31800204 	addi	r6,r6,8
 40131f8:	4010a180 	call	4010a18 <memcpy>
 40131fc:	e2000017 	ldw	r8,0(fp)
 4013200:	e2400117 	ldw	r9,4(fp)
 4013204:	a809883a 	mov	r4,r21
 4013208:	400b883a 	mov	r5,r8
 401320c:	d9c00204 	addi	r7,sp,8
 4013210:	d8800304 	addi	r2,sp,12
 4013214:	480d883a 	mov	r6,r9
 4013218:	d8800015 	stw	r2,0(sp)
 401321c:	401126c0 	call	401126c <__d2b>
 4013220:	a809883a 	mov	r4,r21
 4013224:	01400044 	movi	r5,1
 4013228:	d8800515 	stw	r2,20(sp)
 401322c:	40119140 	call	4011914 <__i2b>
 4013230:	d8c01e17 	ldw	r3,120(sp)
 4013234:	102d883a 	mov	r22,r2
 4013238:	1801091e 	bne	r3,zero,4013660 <_strtod_r+0xda4>
 401323c:	dd000f17 	ldw	r20,60(sp)
 4013240:	000f883a 	mov	r7,zero
 4013244:	0013883a 	mov	r9,zero
 4013248:	a011883a 	mov	r8,r20
 401324c:	d8800217 	ldw	r2,8(sp)
 4013250:	10010116 	blt	r2,zero,4013658 <_strtod_r+0xd9c>
 4013254:	388f883a 	add	r7,r7,r2
 4013258:	d8c01c17 	ldw	r3,112(sp)
 401325c:	d9400317 	ldw	r5,12(sp)
 4013260:	10c9c83a 	sub	r4,r2,r3
 4013264:	2145883a 	add	r2,r4,r5
 4013268:	10bfffc4 	addi	r2,r2,-1
 401326c:	00ff0084 	movi	r3,-1022
 4013270:	10c09f0e 	bge	r2,r3,40134f0 <_strtod_r+0xc34>
 4013274:	21810cc4 	addi	r6,r4,1075
 4013278:	d9001c17 	ldw	r4,112(sp)
 401327c:	4185883a 	add	r2,r8,r6
 4013280:	39a1883a 	add	r16,r7,r6
 4013284:	20a5883a 	add	r18,r4,r2
 4013288:	3807883a 	mov	r3,r7
 401328c:	81c0010e 	bge	r16,r7,4013294 <_strtod_r+0x9d8>
 4013290:	8007883a 	mov	r3,r16
 4013294:	9005883a 	mov	r2,r18
 4013298:	1c80010e 	bge	r3,r18,40132a0 <_strtod_r+0x9e4>
 401329c:	1805883a 	mov	r2,r3
 40132a0:	0080eb0e 	bge	zero,r2,4013650 <_strtod_r+0xd94>
 40132a4:	38a7c83a 	sub	r19,r7,r2
 40132a8:	80a1c83a 	sub	r16,r16,r2
 40132ac:	90a5c83a 	sub	r18,r18,r2
 40132b0:	02400e0e 	bge	zero,r9,40132ec <_strtod_r+0xa30>
 40132b4:	480d883a 	mov	r6,r9
 40132b8:	b00b883a 	mov	r5,r22
 40132bc:	a809883a 	mov	r4,r21
 40132c0:	4011a7c0 	call	4011a7c <__pow5mult>
 40132c4:	d9800517 	ldw	r6,20(sp)
 40132c8:	a809883a 	mov	r4,r21
 40132cc:	100b883a 	mov	r5,r2
 40132d0:	102d883a 	mov	r22,r2
 40132d4:	40116c00 	call	40116c0 <__multiply>
 40132d8:	d9400517 	ldw	r5,20(sp)
 40132dc:	1023883a 	mov	r17,r2
 40132e0:	a809883a 	mov	r4,r21
 40132e4:	4010c300 	call	4010c30 <_Bfree>
 40132e8:	dc400515 	stw	r17,20(sp)
 40132ec:	0400050e 	bge	zero,r16,4013304 <_strtod_r+0xa48>
 40132f0:	d9400517 	ldw	r5,20(sp)
 40132f4:	800d883a 	mov	r6,r16
 40132f8:	a809883a 	mov	r4,r21
 40132fc:	40115740 	call	4011574 <__lshift>
 4013300:	d8800515 	stw	r2,20(sp)
 4013304:	a000741e 	bne	r20,zero,40134d8 <_strtod_r+0xc1c>
 4013308:	0480050e 	bge	zero,r18,4013320 <_strtod_r+0xa64>
 401330c:	b80b883a 	mov	r5,r23
 4013310:	900d883a 	mov	r6,r18
 4013314:	a809883a 	mov	r4,r21
 4013318:	40115740 	call	4011574 <__lshift>
 401331c:	102f883a 	mov	r23,r2
 4013320:	04c0050e 	bge	zero,r19,4013338 <_strtod_r+0xa7c>
 4013324:	b00b883a 	mov	r5,r22
 4013328:	980d883a 	mov	r6,r19
 401332c:	a809883a 	mov	r4,r21
 4013330:	40115740 	call	4011574 <__lshift>
 4013334:	102d883a 	mov	r22,r2
 4013338:	d9400517 	ldw	r5,20(sp)
 401333c:	a809883a 	mov	r4,r21
 4013340:	b80d883a 	mov	r6,r23
 4013344:	40113e80 	call	40113e8 <__mdiff>
 4013348:	1029883a 	mov	r20,r2
 401334c:	10800317 	ldw	r2,12(r2)
 4013350:	a009883a 	mov	r4,r20
 4013354:	a0000315 	stw	zero,12(r20)
 4013358:	b00b883a 	mov	r5,r22
 401335c:	d8801a15 	stw	r2,104(sp)
 4013360:	4010d8c0 	call	4010d8c <__mcmp>
 4013364:	1001a616 	blt	r2,zero,4013a00 <_strtod_r+0x1144>
 4013368:	10016d26 	beq	r2,zero,4013920 <_strtod_r+0x1064>
 401336c:	a009883a 	mov	r4,r20
 4013370:	b00b883a 	mov	r5,r22
 4013374:	4010f8c0 	call	4010f8c <__ratio>
 4013378:	0011883a 	mov	r8,zero
 401337c:	02500034 	movhi	r9,16384
 4013380:	480f883a 	mov	r7,r9
 4013384:	1009883a 	mov	r4,r2
 4013388:	180b883a 	mov	r5,r3
 401338c:	400d883a 	mov	r6,r8
 4013390:	1021883a 	mov	r16,r2
 4013394:	1823883a 	mov	r17,r3
 4013398:	4008ba80 	call	4008ba8 <__ledf2>
 401339c:	00805716 	blt	zero,r2,40134fc <_strtod_r+0xc40>
 40133a0:	d8801a17 	ldw	r2,104(sp)
 40133a4:	1025003a 	cmpeq	r18,r2,zero
 40133a8:	90008c1e 	bne	r18,zero,40135dc <_strtod_r+0xd20>
 40133ac:	008ffc34 	movhi	r2,16368
 40133b0:	0021883a 	mov	r16,zero
 40133b4:	1023883a 	mov	r17,r2
 40133b8:	d8000715 	stw	zero,28(sp)
 40133bc:	d8800815 	stw	r2,32(sp)
 40133c0:	e1c00117 	ldw	r7,4(fp)
 40133c4:	009ff834 	movhi	r2,32736
 40133c8:	3cdffc2c 	andhi	r19,r7,32752
 40133cc:	98805f26 	beq	r19,r2,401354c <_strtod_r+0xc90>
 40133d0:	d8c01c17 	ldw	r3,112(sp)
 40133d4:	18001b26 	beq	r3,zero,4013444 <_strtod_r+0xb88>
 40133d8:	0081a834 	movhi	r2,1696
 40133dc:	14c01936 	bltu	r2,r19,4013444 <_strtod_r+0xb88>
 40133e0:	00bff034 	movhi	r2,65472
 40133e4:	00d07834 	movhi	r3,16864
 40133e8:	18ffffc4 	addi	r3,r3,-1
 40133ec:	180f883a 	mov	r7,r3
 40133f0:	8009883a 	mov	r4,r16
 40133f4:	880b883a 	mov	r5,r17
 40133f8:	100d883a 	mov	r6,r2
 40133fc:	4008ba80 	call	4008ba8 <__ledf2>
 4013400:	00800b16 	blt	zero,r2,4013430 <_strtod_r+0xb74>
 4013404:	880b883a 	mov	r5,r17
 4013408:	8009883a 	mov	r4,r16
 401340c:	4015db00 	call	4015db0 <__fixunsdfsi>
 4013410:	1000e31e 	bne	r2,zero,40137a0 <_strtod_r+0xee4>
 4013414:	0021883a 	mov	r16,zero
 4013418:	044ffc34 	movhi	r17,16368
 401341c:	9000dd1e 	bne	r18,zero,4013794 <_strtod_r+0xed8>
 4013420:	8005883a 	mov	r2,r16
 4013424:	8807883a 	mov	r3,r17
 4013428:	d8c00815 	stw	r3,32(sp)
 401342c:	d8800715 	stw	r2,28(sp)
 4013430:	d8800817 	ldw	r2,32(sp)
 4013434:	00c1ac34 	movhi	r3,1712
 4013438:	14c5c83a 	sub	r2,r2,r19
 401343c:	10c5883a 	add	r2,r2,r3
 4013440:	d8800815 	stw	r2,32(sp)
 4013444:	e0800017 	ldw	r2,0(fp)
 4013448:	e0c00117 	ldw	r3,4(fp)
 401344c:	1009883a 	mov	r4,r2
 4013450:	180b883a 	mov	r5,r3
 4013454:	4010dec0 	call	4010dec <__ulp>
 4013458:	d9800717 	ldw	r6,28(sp)
 401345c:	d9c00817 	ldw	r7,32(sp)
 4013460:	180b883a 	mov	r5,r3
 4013464:	1009883a 	mov	r4,r2
 4013468:	40083f40 	call	40083f4 <__muldf3>
 401346c:	e2000017 	ldw	r8,0(fp)
 4013470:	e2400117 	ldw	r9,4(fp)
 4013474:	180b883a 	mov	r5,r3
 4013478:	1009883a 	mov	r4,r2
 401347c:	480f883a 	mov	r7,r9
 4013480:	400d883a 	mov	r6,r8
 4013484:	40083800 	call	4008380 <__adddf3>
 4013488:	e0c00115 	stw	r3,4(fp)
 401348c:	e0800015 	stw	r2,0(fp)
 4013490:	d9001c17 	ldw	r4,112(sp)
 4013494:	e4800117 	ldw	r18,4(fp)
 4013498:	2000021e 	bne	r4,zero,40134a4 <_strtod_r+0xbe8>
 401349c:	909ffc2c 	andhi	r2,r18,32752
 40134a0:	98807f26 	beq	r19,r2,40136a0 <_strtod_r+0xde4>
 40134a4:	d9400517 	ldw	r5,20(sp)
 40134a8:	a809883a 	mov	r4,r21
 40134ac:	4010c300 	call	4010c30 <_Bfree>
 40134b0:	a809883a 	mov	r4,r21
 40134b4:	b80b883a 	mov	r5,r23
 40134b8:	4010c300 	call	4010c30 <_Bfree>
 40134bc:	a809883a 	mov	r4,r21
 40134c0:	b00b883a 	mov	r5,r22
 40134c4:	4010c300 	call	4010c30 <_Bfree>
 40134c8:	a809883a 	mov	r4,r21
 40134cc:	a00b883a 	mov	r5,r20
 40134d0:	4010c300 	call	4010c30 <_Bfree>
 40134d4:	003f3c06 	br	40131c8 <_strtod_r+0x90c>
 40134d8:	b80b883a 	mov	r5,r23
 40134dc:	a00d883a 	mov	r6,r20
 40134e0:	a809883a 	mov	r4,r21
 40134e4:	4011a7c0 	call	4011a7c <__pow5mult>
 40134e8:	102f883a 	mov	r23,r2
 40134ec:	003f8606 	br	4013308 <_strtod_r+0xa4c>
 40134f0:	00800d84 	movi	r2,54
 40134f4:	114dc83a 	sub	r6,r2,r5
 40134f8:	003f5f06 	br	4013278 <_strtod_r+0x9bc>
 40134fc:	0005883a 	mov	r2,zero
 4013500:	00cff834 	movhi	r3,16352
 4013504:	8009883a 	mov	r4,r16
 4013508:	880b883a 	mov	r5,r17
 401350c:	180f883a 	mov	r7,r3
 4013510:	100d883a 	mov	r6,r2
 4013514:	40083f40 	call	40083f4 <__muldf3>
 4013518:	1009883a 	mov	r4,r2
 401351c:	d8801a17 	ldw	r2,104(sp)
 4013520:	2021883a 	mov	r16,r4
 4013524:	1823883a 	mov	r17,r3
 4013528:	1025003a 	cmpeq	r18,r2,zero
 401352c:	9000451e 	bne	r18,zero,4013644 <_strtod_r+0xd88>
 4013530:	2005883a 	mov	r2,r4
 4013534:	d8800715 	stw	r2,28(sp)
 4013538:	d8c00815 	stw	r3,32(sp)
 401353c:	e1c00117 	ldw	r7,4(fp)
 4013540:	009ff834 	movhi	r2,32736
 4013544:	3cdffc2c 	andhi	r19,r7,32752
 4013548:	98bfa11e 	bne	r19,r2,40133d0 <_strtod_r+0xb14>
 401354c:	e1000017 	ldw	r4,0(fp)
 4013550:	01bf2c34 	movhi	r6,64688
 4013554:	398d883a 	add	r6,r7,r6
 4013558:	d9000b15 	stw	r4,44(sp)
 401355c:	d9c00c15 	stw	r7,48(sp)
 4013560:	300b883a 	mov	r5,r6
 4013564:	e1800115 	stw	r6,4(fp)
 4013568:	4010dec0 	call	4010dec <__ulp>
 401356c:	d9800717 	ldw	r6,28(sp)
 4013570:	d9c00817 	ldw	r7,32(sp)
 4013574:	180b883a 	mov	r5,r3
 4013578:	1009883a 	mov	r4,r2
 401357c:	40083f40 	call	40083f4 <__muldf3>
 4013580:	e2000017 	ldw	r8,0(fp)
 4013584:	e2400117 	ldw	r9,4(fp)
 4013588:	180b883a 	mov	r5,r3
 401358c:	1009883a 	mov	r4,r2
 4013590:	480f883a 	mov	r7,r9
 4013594:	400d883a 	mov	r6,r8
 4013598:	40083800 	call	4008380 <__adddf3>
 401359c:	1009883a 	mov	r4,r2
 40135a0:	180b883a 	mov	r5,r3
 40135a4:	009f2834 	movhi	r2,31904
 40135a8:	10bfffc4 	addi	r2,r2,-1
 40135ac:	18dffc2c 	andhi	r3,r3,32752
 40135b0:	e1000015 	stw	r4,0(fp)
 40135b4:	e1400115 	stw	r5,4(fp)
 40135b8:	10c0722e 	bgeu	r2,r3,4013784 <_strtod_r+0xec8>
 40135bc:	d8800c17 	ldw	r2,48(sp)
 40135c0:	011ffc34 	movhi	r4,32752
 40135c4:	213fffc4 	addi	r4,r4,-1
 40135c8:	11007d26 	beq	r2,r4,40137c0 <_strtod_r+0xf04>
 40135cc:	01ffffc4 	movi	r7,-1
 40135d0:	e1000115 	stw	r4,4(fp)
 40135d4:	e1c00015 	stw	r7,0(fp)
 40135d8:	003fb206 	br	40134a4 <_strtod_r+0xbe8>
 40135dc:	e0c00017 	ldw	r3,0(fp)
 40135e0:	1800251e 	bne	r3,zero,4013678 <_strtod_r+0xdbc>
 40135e4:	e0800117 	ldw	r2,4(fp)
 40135e8:	00c00434 	movhi	r3,16
 40135ec:	18ffffc4 	addi	r3,r3,-1
 40135f0:	10c4703a 	and	r2,r2,r3
 40135f4:	1000241e 	bne	r2,zero,4013688 <_strtod_r+0xdcc>
 40135f8:	0005883a 	mov	r2,zero
 40135fc:	00cffc34 	movhi	r3,16368
 4013600:	180f883a 	mov	r7,r3
 4013604:	8009883a 	mov	r4,r16
 4013608:	880b883a 	mov	r5,r17
 401360c:	100d883a 	mov	r6,r2
 4013610:	4008b200 	call	4008b20 <__ltdf2>
 4013614:	10014616 	blt	r2,zero,4013b30 <_strtod_r+0x1274>
 4013618:	0005883a 	mov	r2,zero
 401361c:	00cff834 	movhi	r3,16352
 4013620:	880b883a 	mov	r5,r17
 4013624:	8009883a 	mov	r4,r16
 4013628:	180f883a 	mov	r7,r3
 401362c:	100d883a 	mov	r6,r2
 4013630:	40083f40 	call	40083f4 <__muldf3>
 4013634:	1823883a 	mov	r17,r3
 4013638:	1021883a 	mov	r16,r2
 401363c:	18e0003c 	xorhi	r3,r3,32768
 4013640:	003fbc06 	br	4013534 <_strtod_r+0xc78>
 4013644:	2005883a 	mov	r2,r4
 4013648:	18e0003c 	xorhi	r3,r3,32768
 401364c:	003fb906 	br	4013534 <_strtod_r+0xc78>
 4013650:	3827883a 	mov	r19,r7
 4013654:	003f1606 	br	40132b0 <_strtod_r+0x9f4>
 4013658:	4091c83a 	sub	r8,r8,r2
 401365c:	003efe06 	br	4013258 <_strtod_r+0x99c>
 4013660:	d9000f17 	ldw	r4,60(sp)
 4013664:	0011883a 	mov	r8,zero
 4013668:	0029883a 	mov	r20,zero
 401366c:	0113c83a 	sub	r9,zero,r4
 4013670:	480f883a 	mov	r7,r9
 4013674:	003ef506 	br	401324c <_strtod_r+0x990>
 4013678:	00800044 	movi	r2,1
 401367c:	1880021e 	bne	r3,r2,4013688 <_strtod_r+0xdcc>
 4013680:	e0800117 	ldw	r2,4(fp)
 4013684:	1000c526 	beq	r2,zero,401399c <_strtod_r+0x10e0>
 4013688:	00affc34 	movhi	r2,49136
 401368c:	0021883a 	mov	r16,zero
 4013690:	044ffc34 	movhi	r17,16368
 4013694:	d8800815 	stw	r2,32(sp)
 4013698:	d8000715 	stw	zero,28(sp)
 401369c:	003f4806 	br	40133c0 <_strtod_r+0xb04>
 40136a0:	880b883a 	mov	r5,r17
 40136a4:	8009883a 	mov	r4,r16
 40136a8:	4008d280 	call	4008d28 <__fixdfsi>
 40136ac:	1009883a 	mov	r4,r2
 40136b0:	4008c300 	call	4008c30 <__floatsidf>
 40136b4:	880b883a 	mov	r5,r17
 40136b8:	8009883a 	mov	r4,r16
 40136bc:	100d883a 	mov	r6,r2
 40136c0:	180f883a 	mov	r7,r3
 40136c4:	40083000 	call	4008300 <__subdf3>
 40136c8:	100b883a 	mov	r5,r2
 40136cc:	1021883a 	mov	r16,r2
 40136d0:	d8801a17 	ldw	r2,104(sp)
 40136d4:	180d883a 	mov	r6,r3
 40136d8:	1823883a 	mov	r17,r3
 40136dc:	1000061e 	bne	r2,zero,40136f8 <_strtod_r+0xe3c>
 40136e0:	e0800017 	ldw	r2,0(fp)
 40136e4:	1000041e 	bne	r2,zero,40136f8 <_strtod_r+0xe3c>
 40136e8:	00c00434 	movhi	r3,16
 40136ec:	18ffffc4 	addi	r3,r3,-1
 40136f0:	90c4703a 	and	r2,r18,r3
 40136f4:	10004026 	beq	r2,zero,40137f8 <_strtod_r+0xf3c>
 40136f8:	00a52834 	movhi	r2,38048
 40136fc:	108d6544 	addi	r2,r2,13717
 4013700:	00cff834 	movhi	r3,16352
 4013704:	18ffffc4 	addi	r3,r3,-1
 4013708:	180f883a 	mov	r7,r3
 401370c:	8009883a 	mov	r4,r16
 4013710:	880b883a 	mov	r5,r17
 4013714:	100d883a 	mov	r6,r2
 4013718:	4008b200 	call	4008b20 <__ltdf2>
 401371c:	10000916 	blt	r2,zero,4013744 <_strtod_r+0xe88>
 4013720:	008d6c34 	movhi	r2,13744
 4013724:	10b94d44 	addi	r2,r2,-6859
 4013728:	00cff834 	movhi	r3,16352
 401372c:	880b883a 	mov	r5,r17
 4013730:	180f883a 	mov	r7,r3
 4013734:	8009883a 	mov	r4,r16
 4013738:	100d883a 	mov	r6,r2
 401373c:	4008a100 	call	4008a10 <__gtdf2>
 4013740:	00bf580e 	bge	zero,r2,40134a4 <_strtod_r+0xbe8>
 4013744:	d9400517 	ldw	r5,20(sp)
 4013748:	a809883a 	mov	r4,r21
 401374c:	4010c300 	call	4010c30 <_Bfree>
 4013750:	a809883a 	mov	r4,r21
 4013754:	b80b883a 	mov	r5,r23
 4013758:	4010c300 	call	4010c30 <_Bfree>
 401375c:	a809883a 	mov	r4,r21
 4013760:	b00b883a 	mov	r5,r22
 4013764:	4010c300 	call	4010c30 <_Bfree>
 4013768:	d9401017 	ldw	r5,64(sp)
 401376c:	a809883a 	mov	r4,r21
 4013770:	4010c300 	call	4010c30 <_Bfree>
 4013774:	a809883a 	mov	r4,r21
 4013778:	a00b883a 	mov	r5,r20
 401377c:	4010c300 	call	4010c30 <_Bfree>
 4013780:	003cd806 	br	4012ae4 <_strtod_r+0x228>
 4013784:	0080d434 	movhi	r2,848
 4013788:	288d883a 	add	r6,r5,r2
 401378c:	e1800115 	stw	r6,4(fp)
 4013790:	003f3f06 	br	4013490 <_strtod_r+0xbd4>
 4013794:	8005883a 	mov	r2,r16
 4013798:	88e0003c 	xorhi	r3,r17,32768
 401379c:	003f2206 	br	4013428 <_strtod_r+0xb6c>
 40137a0:	1009883a 	mov	r4,r2
 40137a4:	4016d200 	call	4016d20 <__floatunsidf>
 40137a8:	1021883a 	mov	r16,r2
 40137ac:	1823883a 	mov	r17,r3
 40137b0:	003f1a06 	br	401341c <_strtod_r+0xb60>
 40137b4:	dc000417 	ldw	r16,16(sp)
 40137b8:	31800044 	addi	r6,r6,1
 40137bc:	003e5606 	br	4013118 <_strtod_r+0x85c>
 40137c0:	d8c00b17 	ldw	r3,44(sp)
 40137c4:	00bfffc4 	movi	r2,-1
 40137c8:	18bf801e 	bne	r3,r2,40135cc <_strtod_r+0xd10>
 40137cc:	00c00884 	movi	r3,34
 40137d0:	a8c00015 	stw	r3,0(r21)
 40137d4:	009ffc34 	movhi	r2,32752
 40137d8:	e0800115 	stw	r2,4(fp)
 40137dc:	e0000015 	stw	zero,0(fp)
 40137e0:	003fd806 	br	4013744 <_strtod_r+0xe88>
 40137e4:	8025883a 	mov	r18,r16
 40137e8:	0027883a 	mov	r19,zero
 40137ec:	d8001215 	stw	zero,72(sp)
 40137f0:	d8001115 	stw	zero,68(sp)
 40137f4:	003cac06 	br	4012aa8 <_strtod_r+0x1ec>
 40137f8:	00a52834 	movhi	r2,38048
 40137fc:	108d6544 	addi	r2,r2,13717
 4013800:	00cff434 	movhi	r3,16336
 4013804:	18ffffc4 	addi	r3,r3,-1
 4013808:	2809883a 	mov	r4,r5
 401380c:	180f883a 	mov	r7,r3
 4013810:	300b883a 	mov	r5,r6
 4013814:	100d883a 	mov	r6,r2
 4013818:	4008b200 	call	4008b20 <__ltdf2>
 401381c:	103f210e 	bge	r2,zero,40134a4 <_strtod_r+0xbe8>
 4013820:	003fc806 	br	4013744 <_strtod_r+0xe88>
 4013824:	00800044 	movi	r2,1
 4013828:	d8001815 	stw	zero,96(sp)
 401382c:	d8801b15 	stw	r2,108(sp)
 4013830:	d8001715 	stw	zero,92(sp)
 4013834:	003ca206 	br	4012ac0 <_strtod_r+0x204>
 4013838:	00800884 	movi	r2,34
 401383c:	a8800015 	stw	r2,0(r21)
 4013840:	019ffc34 	movhi	r6,32752
 4013844:	e1800115 	stw	r6,4(fp)
 4013848:	e0000015 	stw	zero,0(fp)
 401384c:	003ca506 	br	4012ae4 <_strtod_r+0x228>
 4013850:	011387c4 	movi	r4,19999
 4013854:	003d0206 	br	4012c60 <_strtod_r+0x3a4>
 4013858:	180a90fa 	slli	r5,r3,3
 401385c:	e0800017 	ldw	r2,0(fp)
 4013860:	e0c00117 	ldw	r3,4(fp)
 4013864:	010100b4 	movhi	r4,1026
 4013868:	21124f04 	addi	r4,r4,18748
 401386c:	290b883a 	add	r5,r5,r4
 4013870:	2a000017 	ldw	r8,0(r5)
 4013874:	2a400117 	ldw	r9,4(r5)
 4013878:	1009883a 	mov	r4,r2
 401387c:	180b883a 	mov	r5,r3
 4013880:	480f883a 	mov	r7,r9
 4013884:	400d883a 	mov	r6,r8
 4013888:	40083f40 	call	40083f4 <__muldf3>
 401388c:	e0c00115 	stw	r3,4(fp)
 4013890:	e0800015 	stw	r2,0(fp)
 4013894:	003c9306 	br	4012ae4 <_strtod_r+0x228>
 4013898:	d8800d17 	ldw	r2,52(sp)
 401389c:	e0800015 	stw	r2,0(fp)
 40138a0:	d8c00e17 	ldw	r3,56(sp)
 40138a4:	e0c00115 	stw	r3,4(fp)
 40138a8:	9080020c 	andi	r2,r18,8
 40138ac:	103c8d26 	beq	r2,zero,4012ae4 <_strtod_r+0x228>
 40138b0:	e0800117 	ldw	r2,4(fp)
 40138b4:	10a00034 	orhi	r2,r2,32768
 40138b8:	e0800115 	stw	r2,4(fp)
 40138bc:	003c8906 	br	4012ae4 <_strtod_r+0x228>
 40138c0:	009ffc34 	movhi	r2,32752
 40138c4:	e0800115 	stw	r2,4(fp)
 40138c8:	e0000015 	stw	zero,0(fp)
 40138cc:	003ff606 	br	40138a8 <_strtod_r+0xfec>
 40138d0:	00a00034 	movhi	r2,32768
 40138d4:	10bfffc4 	addi	r2,r2,-1
 40138d8:	00ffffc4 	movi	r3,-1
 40138dc:	e0800115 	stw	r2,4(fp)
 40138e0:	e0c00015 	stw	r3,0(fp)
 40138e4:	003ff006 	br	40138a8 <_strtod_r+0xfec>
 40138e8:	e0000115 	stw	zero,4(fp)
 40138ec:	e0000015 	stw	zero,0(fp)
 40138f0:	003fed06 	br	40138a8 <_strtod_r+0xfec>
 40138f4:	d8800e17 	ldw	r2,56(sp)
 40138f8:	29010cc4 	addi	r4,r5,1075
 40138fc:	00fffc34 	movhi	r3,65520
 4013900:	18ffffc4 	addi	r3,r3,-1
 4013904:	2008953a 	slli	r4,r4,20
 4013908:	10c4703a 	and	r2,r2,r3
 401390c:	d8c00d17 	ldw	r3,52(sp)
 4013910:	1104b03a 	or	r2,r2,r4
 4013914:	e0800115 	stw	r2,4(fp)
 4013918:	e0c00015 	stw	r3,0(fp)
 401391c:	003fe206 	br	40138a8 <_strtod_r+0xfec>
 4013920:	d8c01a17 	ldw	r3,104(sp)
 4013924:	1825003a 	cmpeq	r18,r3,zero
 4013928:	9000cf1e 	bne	r18,zero,4013c68 <_strtod_r+0x13ac>
 401392c:	e1400117 	ldw	r5,4(fp)
 4013930:	01000434 	movhi	r4,16
 4013934:	213fffc4 	addi	r4,r4,-1
 4013938:	2904703a 	and	r2,r5,r4
 401393c:	11006826 	beq	r2,r4,4013ae0 <_strtod_r+0x1224>
 4013940:	e1c00017 	ldw	r7,0(fp)
 4013944:	3880004c 	andi	r2,r7,1
 4013948:	1005003a 	cmpeq	r2,r2,zero
 401394c:	1000601e 	bne	r2,zero,4013ad0 <_strtod_r+0x1214>
 4013950:	90010426 	beq	r18,zero,4013d64 <_strtod_r+0x14a8>
 4013954:	e4400117 	ldw	r17,4(fp)
 4013958:	3809883a 	mov	r4,r7
 401395c:	3821883a 	mov	r16,r7
 4013960:	880b883a 	mov	r5,r17
 4013964:	4010dec0 	call	4010dec <__ulp>
 4013968:	180f883a 	mov	r7,r3
 401396c:	880b883a 	mov	r5,r17
 4013970:	8009883a 	mov	r4,r16
 4013974:	100d883a 	mov	r6,r2
 4013978:	40083000 	call	4008300 <__subdf3>
 401397c:	1009883a 	mov	r4,r2
 4013980:	000d883a 	mov	r6,zero
 4013984:	000f883a 	mov	r7,zero
 4013988:	180b883a 	mov	r5,r3
 401398c:	e0800015 	stw	r2,0(fp)
 4013990:	e0c00115 	stw	r3,4(fp)
 4013994:	4016c980 	call	4016c98 <__nedf2>
 4013998:	10004d1e 	bne	r2,zero,4013ad0 <_strtod_r+0x1214>
 401399c:	00800884 	movi	r2,34
 40139a0:	a8800015 	stw	r2,0(r21)
 40139a4:	e0000015 	stw	zero,0(fp)
 40139a8:	e0000115 	stw	zero,4(fp)
 40139ac:	003f6506 	br	4013744 <_strtod_r+0xe88>
 40139b0:	00800044 	movi	r2,1
 40139b4:	d8801915 	stw	r2,100(sp)
 40139b8:	003d4406 	br	4012ecc <_strtod_r+0x610>
 40139bc:	d8c01817 	ldw	r3,96(sp)
 40139c0:	1985883a 	add	r2,r3,r6
 40139c4:	11ffffc4 	addi	r7,r2,-1
 40139c8:	39000044 	addi	r4,r7,1
 40139cc:	00800204 	movi	r2,8
 40139d0:	d9001815 	stw	r4,96(sp)
 40139d4:	11c0d716 	blt	r2,r7,4013d34 <_strtod_r+0x1478>
 40139d8:	d9001217 	ldw	r4,72(sp)
 40139dc:	01400284 	movi	r5,10
 40139e0:	4008ff80 	call	4008ff8 <__mulsi3>
 40139e4:	1585883a 	add	r2,r2,r22
 40139e8:	d8801215 	stw	r2,72(sp)
 40139ec:	000d883a 	mov	r6,zero
 40139f0:	84000044 	addi	r16,r16,1
 40139f4:	dc000415 	stw	r16,16(sp)
 40139f8:	84400007 	ldb	r17,0(r16)
 40139fc:	003cfc06 	br	4012df0 <_strtod_r+0x534>
 4013a00:	d8c01a17 	ldw	r3,104(sp)
 4013a04:	1800321e 	bne	r3,zero,4013ad0 <_strtod_r+0x1214>
 4013a08:	e0800017 	ldw	r2,0(fp)
 4013a0c:	1000b31e 	bne	r2,zero,4013cdc <_strtod_r+0x1420>
 4013a10:	e0c00117 	ldw	r3,4(fp)
 4013a14:	01000434 	movhi	r4,16
 4013a18:	213fffc4 	addi	r4,r4,-1
 4013a1c:	1904703a 	and	r2,r3,r4
 4013a20:	1000e71e 	bne	r2,zero,4013dc0 <_strtod_r+0x1504>
 4013a24:	18dffc2c 	andhi	r3,r3,32752
 4013a28:	0081ac34 	movhi	r2,1712
 4013a2c:	10c0282e 	bgeu	r2,r3,4013ad0 <_strtod_r+0x1214>
 4013a30:	a0800517 	ldw	r2,20(r20)
 4013a34:	1000031e 	bne	r2,zero,4013a44 <_strtod_r+0x1188>
 4013a38:	a0c00417 	ldw	r3,16(r20)
 4013a3c:	00800044 	movi	r2,1
 4013a40:	10c0a60e 	bge	r2,r3,4013cdc <_strtod_r+0x1420>
 4013a44:	a00b883a 	mov	r5,r20
 4013a48:	a809883a 	mov	r4,r21
 4013a4c:	01800044 	movi	r6,1
 4013a50:	40115740 	call	4011574 <__lshift>
 4013a54:	1009883a 	mov	r4,r2
 4013a58:	b00b883a 	mov	r5,r22
 4013a5c:	1029883a 	mov	r20,r2
 4013a60:	4010d8c0 	call	4010d8c <__mcmp>
 4013a64:	00809d0e 	bge	zero,r2,4013cdc <_strtod_r+0x1420>
 4013a68:	e1800117 	ldw	r6,4(fp)
 4013a6c:	d9001c17 	ldw	r4,112(sp)
 4013a70:	2013003a 	cmpeq	r9,r4,zero
 4013a74:	4800d61e 	bne	r9,zero,4013dd0 <_strtod_r+0x1514>
 4013a78:	30dffc2c 	andhi	r3,r6,32752
 4013a7c:	0081ac34 	movhi	r2,1712
 4013a80:	10c0d336 	bltu	r2,r3,4013dd0 <_strtod_r+0x1514>
 4013a84:	0080dc34 	movhi	r2,880
 4013a88:	10ffc42e 	bgeu	r2,r3,401399c <_strtod_r+0x10e0>
 4013a8c:	e0800017 	ldw	r2,0(fp)
 4013a90:	e0c00117 	ldw	r3,4(fp)
 4013a94:	020e5434 	movhi	r8,14672
 4013a98:	000d883a 	mov	r6,zero
 4013a9c:	400f883a 	mov	r7,r8
 4013aa0:	180b883a 	mov	r5,r3
 4013aa4:	1009883a 	mov	r4,r2
 4013aa8:	da000c15 	stw	r8,48(sp)
 4013aac:	d8000b15 	stw	zero,44(sp)
 4013ab0:	40083f40 	call	40083f4 <__muldf3>
 4013ab4:	e0800015 	stw	r2,0(fp)
 4013ab8:	e0c00115 	stw	r3,4(fp)
 4013abc:	183f211e 	bne	r3,zero,4013744 <_strtod_r+0xe88>
 4013ac0:	103f201e 	bne	r2,zero,4013744 <_strtod_r+0xe88>
 4013ac4:	00800884 	movi	r2,34
 4013ac8:	a8800015 	stw	r2,0(r21)
 4013acc:	003f1d06 	br	4013744 <_strtod_r+0xe88>
 4013ad0:	d9001c17 	ldw	r4,112(sp)
 4013ad4:	2013003a 	cmpeq	r9,r4,zero
 4013ad8:	483f1a1e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013adc:	003feb06 	br	4013a8c <_strtod_r+0x11d0>
 4013ae0:	d8801c17 	ldw	r2,112(sp)
 4013ae4:	e1c00017 	ldw	r7,0(fp)
 4013ae8:	1013003a 	cmpeq	r9,r2,zero
 4013aec:	4800c31e 	bne	r9,zero,4013dfc <_strtod_r+0x1540>
 4013af0:	28dffc2c 	andhi	r3,r5,32752
 4013af4:	0081a834 	movhi	r2,1696
 4013af8:	10c0c036 	bltu	r2,r3,4013dfc <_strtod_r+0x1540>
 4013afc:	1804d53a 	srli	r2,r3,20
 4013b00:	00c01ac4 	movi	r3,107
 4013b04:	013fffc4 	movi	r4,-1
 4013b08:	1887c83a 	sub	r3,r3,r2
 4013b0c:	20c4983a 	sll	r2,r4,r3
 4013b10:	11ff8c1e 	bne	r2,r7,4013944 <_strtod_r+0x1088>
 4013b14:	28dffc2c 	andhi	r3,r5,32752
 4013b18:	00800434 	movhi	r2,16
 4013b1c:	188d883a 	add	r6,r3,r2
 4013b20:	e1800115 	stw	r6,4(fp)
 4013b24:	e0000015 	stw	zero,0(fp)
 4013b28:	483f061e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013b2c:	003fd706 	br	4013a8c <_strtod_r+0x11d0>
 4013b30:	0021883a 	mov	r16,zero
 4013b34:	0005883a 	mov	r2,zero
 4013b38:	044ff834 	movhi	r17,16352
 4013b3c:	00eff834 	movhi	r3,49120
 4013b40:	003e7c06 	br	4013534 <_strtod_r+0xc78>
 4013b44:	803d9226 	beq	r16,zero,4013190 <_strtod_r+0x8d4>
 4013b48:	0421c83a 	sub	r16,zero,r16
 4013b4c:	814003cc 	andi	r5,r16,15
 4013b50:	28000f26 	beq	r5,zero,4013b90 <_strtod_r+0x12d4>
 4013b54:	280a90fa 	slli	r5,r5,3
 4013b58:	010100b4 	movhi	r4,1026
 4013b5c:	21124f04 	addi	r4,r4,18748
 4013b60:	e0800017 	ldw	r2,0(fp)
 4013b64:	290b883a 	add	r5,r5,r4
 4013b68:	2a000017 	ldw	r8,0(r5)
 4013b6c:	e0c00117 	ldw	r3,4(fp)
 4013b70:	2a400117 	ldw	r9,4(r5)
 4013b74:	1009883a 	mov	r4,r2
 4013b78:	180b883a 	mov	r5,r3
 4013b7c:	480f883a 	mov	r7,r9
 4013b80:	400d883a 	mov	r6,r8
 4013b84:	40087b80 	call	40087b8 <__divdf3>
 4013b88:	e0c00115 	stw	r3,4(fp)
 4013b8c:	e0800015 	stw	r2,0(fp)
 4013b90:	8021d13a 	srai	r16,r16,4
 4013b94:	803d7e26 	beq	r16,zero,4013190 <_strtod_r+0x8d4>
 4013b98:	008007c4 	movi	r2,31
 4013b9c:	14002d16 	blt	r2,r16,4013c54 <_strtod_r+0x1398>
 4013ba0:	8080040c 	andi	r2,r16,16
 4013ba4:	10009d26 	beq	r2,zero,4013e1c <_strtod_r+0x1560>
 4013ba8:	01001a84 	movi	r4,106
 4013bac:	d9001c15 	stw	r4,112(sp)
 4013bb0:	0400110e 	bge	zero,r16,4013bf8 <_strtod_r+0x133c>
 4013bb4:	044100b4 	movhi	r17,1026
 4013bb8:	8c529c04 	addi	r17,r17,19056
 4013bbc:	8080004c 	andi	r2,r16,1
 4013bc0:	1005003a 	cmpeq	r2,r2,zero
 4013bc4:	1000091e 	bne	r2,zero,4013bec <_strtod_r+0x1330>
 4013bc8:	e0800017 	ldw	r2,0(fp)
 4013bcc:	e0c00117 	ldw	r3,4(fp)
 4013bd0:	89800017 	ldw	r6,0(r17)
 4013bd4:	89c00117 	ldw	r7,4(r17)
 4013bd8:	180b883a 	mov	r5,r3
 4013bdc:	1009883a 	mov	r4,r2
 4013be0:	40083f40 	call	40083f4 <__muldf3>
 4013be4:	e0c00115 	stw	r3,4(fp)
 4013be8:	e0800015 	stw	r2,0(fp)
 4013bec:	8021d07a 	srai	r16,r16,1
 4013bf0:	8c400204 	addi	r17,r17,8
 4013bf4:	043ff116 	blt	zero,r16,4013bbc <_strtod_r+0x1300>
 4013bf8:	d8801c17 	ldw	r2,112(sp)
 4013bfc:	10000d26 	beq	r2,zero,4013c34 <_strtod_r+0x1378>
 4013c00:	e1000117 	ldw	r4,4(fp)
 4013c04:	00c01ac4 	movi	r3,107
 4013c08:	209ffc2c 	andhi	r2,r4,32752
 4013c0c:	1004d53a 	srli	r2,r2,20
 4013c10:	1887c83a 	sub	r3,r3,r2
 4013c14:	00c0070e 	bge	zero,r3,4013c34 <_strtod_r+0x1378>
 4013c18:	008007c4 	movi	r2,31
 4013c1c:	10c0940e 	bge	r2,r3,4013e70 <_strtod_r+0x15b4>
 4013c20:	00800d04 	movi	r2,52
 4013c24:	e0000015 	stw	zero,0(fp)
 4013c28:	10c08b0e 	bge	r2,r3,4013e58 <_strtod_r+0x159c>
 4013c2c:	0180dc34 	movhi	r6,880
 4013c30:	e1800115 	stw	r6,4(fp)
 4013c34:	e0800017 	ldw	r2,0(fp)
 4013c38:	e0c00117 	ldw	r3,4(fp)
 4013c3c:	000d883a 	mov	r6,zero
 4013c40:	000f883a 	mov	r7,zero
 4013c44:	180b883a 	mov	r5,r3
 4013c48:	1009883a 	mov	r4,r2
 4013c4c:	4016c980 	call	4016c98 <__nedf2>
 4013c50:	103d501e 	bne	r2,zero,4013194 <_strtod_r+0x8d8>
 4013c54:	00800884 	movi	r2,34
 4013c58:	a8800015 	stw	r2,0(r21)
 4013c5c:	e0000015 	stw	zero,0(fp)
 4013c60:	e0000115 	stw	zero,4(fp)
 4013c64:	003b9f06 	br	4012ae4 <_strtod_r+0x228>
 4013c68:	e1800117 	ldw	r6,4(fp)
 4013c6c:	00c00434 	movhi	r3,16
 4013c70:	18ffffc4 	addi	r3,r3,-1
 4013c74:	30c4703a 	and	r2,r6,r3
 4013c78:	103f311e 	bne	r2,zero,4013940 <_strtod_r+0x1084>
 4013c7c:	e1c00017 	ldw	r7,0(fp)
 4013c80:	383f301e 	bne	r7,zero,4013944 <_strtod_r+0x1088>
 4013c84:	003f7906 	br	4013a6c <_strtod_r+0x11b0>
 4013c88:	d8c00f17 	ldw	r3,60(sp)
 4013c8c:	00bffa84 	movi	r2,-22
 4013c90:	18bcbf16 	blt	r3,r2,4012f90 <_strtod_r+0x6d4>
 4013c94:	1809883a 	mov	r4,r3
 4013c98:	017ffe04 	movi	r5,-8
 4013c9c:	4008ff80 	call	4008ff8 <__mulsi3>
 4013ca0:	00c100b4 	movhi	r3,1026
 4013ca4:	18d24f04 	addi	r3,r3,18748
 4013ca8:	10c5883a 	add	r2,r2,r3
 4013cac:	e2000017 	ldw	r8,0(fp)
 4013cb0:	e2400117 	ldw	r9,4(fp)
 4013cb4:	12800017 	ldw	r10,0(r2)
 4013cb8:	12c00117 	ldw	r11,4(r2)
 4013cbc:	480b883a 	mov	r5,r9
 4013cc0:	4009883a 	mov	r4,r8
 4013cc4:	580f883a 	mov	r7,r11
 4013cc8:	500d883a 	mov	r6,r10
 4013ccc:	40087b80 	call	40087b8 <__divdf3>
 4013cd0:	e0c00115 	stw	r3,4(fp)
 4013cd4:	e0800015 	stw	r2,0(fp)
 4013cd8:	003b8206 	br	4012ae4 <_strtod_r+0x228>
 4013cdc:	d8801c17 	ldw	r2,112(sp)
 4013ce0:	1013003a 	cmpeq	r9,r2,zero
 4013ce4:	483e971e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013ce8:	003f6806 	br	4013a8c <_strtod_r+0x11d0>
 4013cec:	00801a44 	movi	r2,105
 4013cf0:	88bc5026 	beq	r17,r2,4012e34 <_strtod_r+0x578>
 4013cf4:	00801b84 	movi	r2,110
 4013cf8:	88bb9b1e 	bne	r17,r2,4012b68 <_strtod_r+0x2ac>
 4013cfc:	dc000404 	addi	r16,sp,16
 4013d00:	8009883a 	mov	r4,r16
 4013d04:	014100b4 	movhi	r5,1026
 4013d08:	29529b04 	addi	r5,r5,19052
 4013d0c:	40128740 	call	4012874 <match>
 4013d10:	103b9526 	beq	r2,zero,4012b68 <_strtod_r+0x2ac>
 4013d14:	d8800417 	ldw	r2,16(sp)
 4013d18:	00c00a04 	movi	r3,40
 4013d1c:	11000007 	ldb	r4,0(r2)
 4013d20:	20c04026 	beq	r4,r3,4013e24 <_strtod_r+0x1568>
 4013d24:	01bffe34 	movhi	r6,65528
 4013d28:	e1800115 	stw	r6,4(fp)
 4013d2c:	e0000015 	stw	zero,0(fp)
 4013d30:	003b6c06 	br	4012ae4 <_strtod_r+0x228>
 4013d34:	d8c01817 	ldw	r3,96(sp)
 4013d38:	00800404 	movi	r2,16
 4013d3c:	10c00516 	blt	r2,r3,4013d54 <_strtod_r+0x1498>
 4013d40:	d9001117 	ldw	r4,68(sp)
 4013d44:	01400284 	movi	r5,10
 4013d48:	4008ff80 	call	4008ff8 <__mulsi3>
 4013d4c:	1585883a 	add	r2,r2,r22
 4013d50:	d8801115 	stw	r2,68(sp)
 4013d54:	000d883a 	mov	r6,zero
 4013d58:	003f2506 	br	40139f0 <_strtod_r+0x1134>
 4013d5c:	000d883a 	mov	r6,zero
 4013d60:	003ce306 	br	40130f0 <_strtod_r+0x834>
 4013d64:	e4400117 	ldw	r17,4(fp)
 4013d68:	3809883a 	mov	r4,r7
 4013d6c:	3821883a 	mov	r16,r7
 4013d70:	880b883a 	mov	r5,r17
 4013d74:	4010dec0 	call	4010dec <__ulp>
 4013d78:	180f883a 	mov	r7,r3
 4013d7c:	880b883a 	mov	r5,r17
 4013d80:	8009883a 	mov	r4,r16
 4013d84:	100d883a 	mov	r6,r2
 4013d88:	40083800 	call	4008380 <__adddf3>
 4013d8c:	180b883a 	mov	r5,r3
 4013d90:	d8c01c17 	ldw	r3,112(sp)
 4013d94:	1009883a 	mov	r4,r2
 4013d98:	e1400115 	stw	r5,4(fp)
 4013d9c:	1813003a 	cmpeq	r9,r3,zero
 4013da0:	e1000015 	stw	r4,0(fp)
 4013da4:	483e671e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013da8:	003f3806 	br	4013a8c <_strtod_r+0x11d0>
 4013dac:	0080d434 	movhi	r2,848
 4013db0:	188d883a 	add	r6,r3,r2
 4013db4:	d8001c15 	stw	zero,112(sp)
 4013db8:	e1800115 	stw	r6,4(fp)
 4013dbc:	003cf506 	br	4013194 <_strtod_r+0x8d8>
 4013dc0:	d8c01c17 	ldw	r3,112(sp)
 4013dc4:	1813003a 	cmpeq	r9,r3,zero
 4013dc8:	483e5e1e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013dcc:	003f2f06 	br	4013a8c <_strtod_r+0x11d0>
 4013dd0:	309ffc2c 	andhi	r2,r6,32752
 4013dd4:	00fffc34 	movhi	r3,65520
 4013dd8:	10c5883a 	add	r2,r2,r3
 4013ddc:	00c00434 	movhi	r3,16
 4013de0:	18ffffc4 	addi	r3,r3,-1
 4013de4:	10ccb03a 	or	r6,r2,r3
 4013de8:	01ffffc4 	movi	r7,-1
 4013dec:	e1800115 	stw	r6,4(fp)
 4013df0:	e1c00015 	stw	r7,0(fp)
 4013df4:	483e531e 	bne	r9,zero,4013744 <_strtod_r+0xe88>
 4013df8:	003f2406 	br	4013a8c <_strtod_r+0x11d0>
 4013dfc:	00bfffc4 	movi	r2,-1
 4013e00:	003f4306 	br	4013b10 <_strtod_r+0x1254>
 4013e04:	0025883a 	mov	r18,zero
 4013e08:	058100b4 	movhi	r22,1026
 4013e0c:	b5928104 	addi	r22,r22,18948
 4013e10:	003c9206 	br	401305c <_strtod_r+0x7a0>
 4013e14:	d9c01817 	ldw	r7,96(sp)
 4013e18:	003eeb06 	br	40139c8 <_strtod_r+0x110c>
 4013e1c:	d8001c15 	stw	zero,112(sp)
 4013e20:	003f6306 	br	4013bb0 <_strtod_r+0x12f4>
 4013e24:	8009883a 	mov	r4,r16
 4013e28:	014100b4 	movhi	r5,1026
 4013e2c:	29558704 	addi	r5,r5,22044
 4013e30:	d9800d04 	addi	r6,sp,52
 4013e34:	4015a080 	call	4015a08 <__hexnan>
 4013e38:	00c00144 	movi	r3,5
 4013e3c:	10ffb91e 	bne	r2,r3,4013d24 <_strtod_r+0x1468>
 4013e40:	d8800e17 	ldw	r2,56(sp)
 4013e44:	d9c00d17 	ldw	r7,52(sp)
 4013e48:	119ffc34 	orhi	r6,r2,32752
 4013e4c:	e1800115 	stw	r6,4(fp)
 4013e50:	e1c00015 	stw	r7,0(fp)
 4013e54:	003b2306 	br	4012ae4 <_strtod_r+0x228>
 4013e58:	18fff804 	addi	r3,r3,-32
 4013e5c:	00bfffc4 	movi	r2,-1
 4013e60:	10c4983a 	sll	r2,r2,r3
 4013e64:	208c703a 	and	r6,r4,r2
 4013e68:	e1800115 	stw	r6,4(fp)
 4013e6c:	003f7106 	br	4013c34 <_strtod_r+0x1378>
 4013e70:	00bfffc4 	movi	r2,-1
 4013e74:	10c4983a 	sll	r2,r2,r3
 4013e78:	e0c00017 	ldw	r3,0(fp)
 4013e7c:	188e703a 	and	r7,r3,r2
 4013e80:	e1c00015 	stw	r7,0(fp)
 4013e84:	003f6b06 	br	4013c34 <_strtod_r+0x1378>

04013e88 <strtof>:
 4013e88:	defffa04 	addi	sp,sp,-24
 4013e8c:	dd000415 	stw	r20,16(sp)
 4013e90:	050100b4 	movhi	r20,1026
 4013e94:	a51a4904 	addi	r20,r20,26916
 4013e98:	2007883a 	mov	r3,r4
 4013e9c:	a1000017 	ldw	r4,0(r20)
 4013ea0:	280d883a 	mov	r6,r5
 4013ea4:	180b883a 	mov	r5,r3
 4013ea8:	dfc00515 	stw	ra,20(sp)
 4013eac:	dcc00315 	stw	r19,12(sp)
 4013eb0:	dc800215 	stw	r18,8(sp)
 4013eb4:	dc400115 	stw	r17,4(sp)
 4013eb8:	dc000015 	stw	r16,0(sp)
 4013ebc:	40128bc0 	call	40128bc <_strtod_r>
 4013ec0:	180b883a 	mov	r5,r3
 4013ec4:	1009883a 	mov	r4,r2
 4013ec8:	1823883a 	mov	r17,r3
 4013ecc:	1021883a 	mov	r16,r2
 4013ed0:	4008e380 	call	4008e38 <__truncdfsf2>
 4013ed4:	1009883a 	mov	r4,r2
 4013ed8:	000b883a 	mov	r5,zero
 4013edc:	1025883a 	mov	r18,r2
 4013ee0:	1027883a 	mov	r19,r2
 4013ee4:	4016b200 	call	4016b20 <__nesf2>
 4013ee8:	000d883a 	mov	r6,zero
 4013eec:	000f883a 	mov	r7,zero
 4013ef0:	8009883a 	mov	r4,r16
 4013ef4:	880b883a 	mov	r5,r17
 4013ef8:	10000e1e 	bne	r2,zero,4013f34 <strtof+0xac>
 4013efc:	4016c980 	call	4016c98 <__nedf2>
 4013f00:	10000c26 	beq	r2,zero,4013f34 <strtof+0xac>
 4013f04:	a0c00017 	ldw	r3,0(r20)
 4013f08:	00800884 	movi	r2,34
 4013f0c:	18800015 	stw	r2,0(r3)
 4013f10:	9805883a 	mov	r2,r19
 4013f14:	dfc00517 	ldw	ra,20(sp)
 4013f18:	dd000417 	ldw	r20,16(sp)
 4013f1c:	dcc00317 	ldw	r19,12(sp)
 4013f20:	dc800217 	ldw	r18,8(sp)
 4013f24:	dc400117 	ldw	r17,4(sp)
 4013f28:	dc000017 	ldw	r16,0(sp)
 4013f2c:	dec00604 	addi	sp,sp,24
 4013f30:	f800283a 	ret
 4013f34:	9009883a 	mov	r4,r18
 4013f38:	015fe034 	movhi	r5,32640
 4013f3c:	297fffc4 	addi	r5,r5,-1
 4013f40:	4007cd00 	call	4007cd0 <__gtsf2>
 4013f44:	00ffffc4 	movi	r3,-1
 4013f48:	011ffc34 	movhi	r4,32752
 4013f4c:	213fffc4 	addi	r4,r4,-1
 4013f50:	200f883a 	mov	r7,r4
 4013f54:	180d883a 	mov	r6,r3
 4013f58:	8009883a 	mov	r4,r16
 4013f5c:	880b883a 	mov	r5,r17
 4013f60:	00800f16 	blt	zero,r2,4013fa0 <strtof+0x118>
 4013f64:	9009883a 	mov	r4,r18
 4013f68:	017fe034 	movhi	r5,65408
 4013f6c:	297fffc4 	addi	r5,r5,-1
 4013f70:	4016b980 	call	4016b98 <__ltsf2>
 4013f74:	023fffc4 	movi	r8,-1
 4013f78:	027ffc34 	movhi	r9,65520
 4013f7c:	4a7fffc4 	addi	r9,r9,-1
 4013f80:	880b883a 	mov	r5,r17
 4013f84:	480f883a 	mov	r7,r9
 4013f88:	8009883a 	mov	r4,r16
 4013f8c:	400d883a 	mov	r6,r8
 4013f90:	103fdf0e 	bge	r2,zero,4013f10 <strtof+0x88>
 4013f94:	4008b200 	call	4008b20 <__ltdf2>
 4013f98:	103fda0e 	bge	r2,zero,4013f04 <strtof+0x7c>
 4013f9c:	003fdc06 	br	4013f10 <strtof+0x88>
 4013fa0:	4008a100 	call	4008a10 <__gtdf2>
 4013fa4:	00bfd70e 	bge	zero,r2,4013f04 <strtof+0x7c>
 4013fa8:	003fee06 	br	4013f64 <strtof+0xdc>

04013fac <strtod>:
 4013fac:	018100b4 	movhi	r6,1026
 4013fb0:	319a4904 	addi	r6,r6,26916
 4013fb4:	2007883a 	mov	r3,r4
 4013fb8:	31000017 	ldw	r4,0(r6)
 4013fbc:	280d883a 	mov	r6,r5
 4013fc0:	180b883a 	mov	r5,r3
 4013fc4:	40128bc1 	jmpi	40128bc <_strtod_r>

04013fc8 <_strtol_r>:
 4013fc8:	defff304 	addi	sp,sp,-52
 4013fcc:	008100b4 	movhi	r2,1026
 4013fd0:	109a4d04 	addi	r2,r2,26932
 4013fd4:	dd000715 	stw	r20,28(sp)
 4013fd8:	15000017 	ldw	r20,0(r2)
 4013fdc:	ddc00a15 	stw	r23,40(sp)
 4013fe0:	dc800515 	stw	r18,20(sp)
 4013fe4:	dc400415 	stw	r17,16(sp)
 4013fe8:	dfc00c15 	stw	ra,48(sp)
 4013fec:	df000b15 	stw	fp,44(sp)
 4013ff0:	dd800915 	stw	r22,36(sp)
 4013ff4:	dd400815 	stw	r21,32(sp)
 4013ff8:	dcc00615 	stw	r19,24(sp)
 4013ffc:	dc000315 	stw	r16,12(sp)
 4014000:	282f883a 	mov	r23,r5
 4014004:	d9000115 	stw	r4,4(sp)
 4014008:	d9800215 	stw	r6,8(sp)
 401400c:	3825883a 	mov	r18,r7
 4014010:	2823883a 	mov	r17,r5
 4014014:	8c000007 	ldb	r16,0(r17)
 4014018:	8c400044 	addi	r17,r17,1
 401401c:	a407883a 	add	r3,r20,r16
 4014020:	18800003 	ldbu	r2,0(r3)
 4014024:	1080020c 	andi	r2,r2,8
 4014028:	103ffa1e 	bne	r2,zero,4014014 <_strtol_r+0x4c>
 401402c:	00800b44 	movi	r2,45
 4014030:	80805c26 	beq	r16,r2,40141a4 <_strtol_r+0x1dc>
 4014034:	00800ac4 	movi	r2,43
 4014038:	80805726 	beq	r16,r2,4014198 <_strtol_r+0x1d0>
 401403c:	d8000015 	stw	zero,0(sp)
 4014040:	9007003a 	cmpeq	r3,r18,zero
 4014044:	1800431e 	bne	r3,zero,4014154 <_strtol_r+0x18c>
 4014048:	00800404 	movi	r2,16
 401404c:	90804126 	beq	r18,r2,4014154 <_strtol_r+0x18c>
 4014050:	902b883a 	mov	r21,r18
 4014054:	d8c00017 	ldw	r3,0(sp)
 4014058:	1838c03a 	cmpne	fp,r3,zero
 401405c:	e0004a1e 	bne	fp,zero,4014188 <_strtol_r+0x1c0>
 4014060:	04e00034 	movhi	r19,32768
 4014064:	9cffffc4 	addi	r19,r19,-1
 4014068:	9809883a 	mov	r4,r19
 401406c:	a80b883a 	mov	r5,r21
 4014070:	4008ff00 	call	4008ff0 <__umodsi3>
 4014074:	9809883a 	mov	r4,r19
 4014078:	a80b883a 	mov	r5,r21
 401407c:	102d883a 	mov	r22,r2
 4014080:	4008fe80 	call	4008fe8 <__udivsi3>
 4014084:	1027883a 	mov	r19,r2
 4014088:	a405883a 	add	r2,r20,r16
 401408c:	11400003 	ldbu	r5,0(r2)
 4014090:	0009883a 	mov	r4,zero
 4014094:	000d883a 	mov	r6,zero
 4014098:	28c0010c 	andi	r3,r5,4
 401409c:	18000f26 	beq	r3,zero,40140dc <_strtol_r+0x114>
 40140a0:	843ff404 	addi	r16,r16,-48
 40140a4:	8480150e 	bge	r16,r18,40140fc <_strtol_r+0x134>
 40140a8:	30003216 	blt	r6,zero,4014174 <_strtol_r+0x1ac>
 40140ac:	99003136 	bltu	r19,r4,4014174 <_strtol_r+0x1ac>
 40140b0:	24c02f26 	beq	r4,r19,4014170 <_strtol_r+0x1a8>
 40140b4:	a80b883a 	mov	r5,r21
 40140b8:	4008ff80 	call	4008ff8 <__mulsi3>
 40140bc:	1409883a 	add	r4,r2,r16
 40140c0:	01800044 	movi	r6,1
 40140c4:	8c000007 	ldb	r16,0(r17)
 40140c8:	8c400044 	addi	r17,r17,1
 40140cc:	a405883a 	add	r2,r20,r16
 40140d0:	11400003 	ldbu	r5,0(r2)
 40140d4:	28c0010c 	andi	r3,r5,4
 40140d8:	183ff11e 	bne	r3,zero,40140a0 <_strtol_r+0xd8>
 40140dc:	288000cc 	andi	r2,r5,3
 40140e0:	10000626 	beq	r2,zero,40140fc <_strtol_r+0x134>
 40140e4:	2880004c 	andi	r2,r5,1
 40140e8:	1005003a 	cmpeq	r2,r2,zero
 40140ec:	1000231e 	bne	r2,zero,401417c <_strtol_r+0x1b4>
 40140f0:	00800dc4 	movi	r2,55
 40140f4:	80a1c83a 	sub	r16,r16,r2
 40140f8:	84bfeb16 	blt	r16,r18,40140a8 <_strtol_r+0xe0>
 40140fc:	30002e16 	blt	r6,zero,40141b8 <_strtol_r+0x1f0>
 4014100:	e000231e 	bne	fp,zero,4014190 <_strtol_r+0x1c8>
 4014104:	2007883a 	mov	r3,r4
 4014108:	d8800217 	ldw	r2,8(sp)
 401410c:	10000426 	beq	r2,zero,4014120 <_strtol_r+0x158>
 4014110:	30000126 	beq	r6,zero,4014118 <_strtol_r+0x150>
 4014114:	8dffffc4 	addi	r23,r17,-1
 4014118:	d9000217 	ldw	r4,8(sp)
 401411c:	25c00015 	stw	r23,0(r4)
 4014120:	1805883a 	mov	r2,r3
 4014124:	dfc00c17 	ldw	ra,48(sp)
 4014128:	df000b17 	ldw	fp,44(sp)
 401412c:	ddc00a17 	ldw	r23,40(sp)
 4014130:	dd800917 	ldw	r22,36(sp)
 4014134:	dd400817 	ldw	r21,32(sp)
 4014138:	dd000717 	ldw	r20,28(sp)
 401413c:	dcc00617 	ldw	r19,24(sp)
 4014140:	dc800517 	ldw	r18,20(sp)
 4014144:	dc400417 	ldw	r17,16(sp)
 4014148:	dc000317 	ldw	r16,12(sp)
 401414c:	dec00d04 	addi	sp,sp,52
 4014150:	f800283a 	ret
 4014154:	00800c04 	movi	r2,48
 4014158:	80801f26 	beq	r16,r2,40141d8 <_strtol_r+0x210>
 401415c:	183fbc26 	beq	r3,zero,4014050 <_strtol_r+0x88>
 4014160:	00800c04 	movi	r2,48
 4014164:	80802926 	beq	r16,r2,401420c <_strtol_r+0x244>
 4014168:	04800284 	movi	r18,10
 401416c:	003fb806 	br	4014050 <_strtol_r+0x88>
 4014170:	b43fd00e 	bge	r22,r16,40140b4 <_strtol_r+0xec>
 4014174:	01bfffc4 	movi	r6,-1
 4014178:	003fd206 	br	40140c4 <_strtol_r+0xfc>
 401417c:	008015c4 	movi	r2,87
 4014180:	80a1c83a 	sub	r16,r16,r2
 4014184:	003fdc06 	br	40140f8 <_strtol_r+0x130>
 4014188:	04e00034 	movhi	r19,32768
 401418c:	003fb606 	br	4014068 <_strtol_r+0xa0>
 4014190:	0107c83a 	sub	r3,zero,r4
 4014194:	003fdc06 	br	4014108 <_strtol_r+0x140>
 4014198:	8c000007 	ldb	r16,0(r17)
 401419c:	8c400044 	addi	r17,r17,1
 40141a0:	003fa606 	br	401403c <_strtol_r+0x74>
 40141a4:	8c000007 	ldb	r16,0(r17)
 40141a8:	00800044 	movi	r2,1
 40141ac:	8c400044 	addi	r17,r17,1
 40141b0:	d8800015 	stw	r2,0(sp)
 40141b4:	003fa206 	br	4014040 <_strtol_r+0x78>
 40141b8:	d9000017 	ldw	r4,0(sp)
 40141bc:	2005003a 	cmpeq	r2,r4,zero
 40141c0:	10000f1e 	bne	r2,zero,4014200 <_strtol_r+0x238>
 40141c4:	00e00034 	movhi	r3,32768
 40141c8:	d9000117 	ldw	r4,4(sp)
 40141cc:	00800884 	movi	r2,34
 40141d0:	20800015 	stw	r2,0(r4)
 40141d4:	003fcc06 	br	4014108 <_strtol_r+0x140>
 40141d8:	89000007 	ldb	r4,0(r17)
 40141dc:	00801e04 	movi	r2,120
 40141e0:	20800226 	beq	r4,r2,40141ec <_strtol_r+0x224>
 40141e4:	00801604 	movi	r2,88
 40141e8:	20bfdc1e 	bne	r4,r2,401415c <_strtol_r+0x194>
 40141ec:	8c000047 	ldb	r16,1(r17)
 40141f0:	04800404 	movi	r18,16
 40141f4:	8c400084 	addi	r17,r17,2
 40141f8:	902b883a 	mov	r21,r18
 40141fc:	003f9506 	br	4014054 <_strtol_r+0x8c>
 4014200:	00e00034 	movhi	r3,32768
 4014204:	18ffffc4 	addi	r3,r3,-1
 4014208:	003fef06 	br	40141c8 <_strtol_r+0x200>
 401420c:	04800204 	movi	r18,8
 4014210:	902b883a 	mov	r21,r18
 4014214:	003f8f06 	br	4014054 <_strtol_r+0x8c>

04014218 <strtol>:
 4014218:	008100b4 	movhi	r2,1026
 401421c:	109a4904 	addi	r2,r2,26916
 4014220:	2013883a 	mov	r9,r4
 4014224:	11000017 	ldw	r4,0(r2)
 4014228:	2805883a 	mov	r2,r5
 401422c:	300f883a 	mov	r7,r6
 4014230:	480b883a 	mov	r5,r9
 4014234:	100d883a 	mov	r6,r2
 4014238:	4013fc81 	jmpi	4013fc8 <_strtol_r>

0401423c <_strtoll_r>:
 401423c:	defff004 	addi	sp,sp,-64
 4014240:	008100b4 	movhi	r2,1026
 4014244:	109a4d04 	addi	r2,r2,26932
 4014248:	df000e15 	stw	fp,56(sp)
 401424c:	17000017 	ldw	fp,0(r2)
 4014250:	ddc00d15 	stw	r23,52(sp)
 4014254:	dd000a15 	stw	r20,40(sp)
 4014258:	dfc00f15 	stw	ra,60(sp)
 401425c:	dd800c15 	stw	r22,48(sp)
 4014260:	dd400b15 	stw	r21,44(sp)
 4014264:	dcc00915 	stw	r19,36(sp)
 4014268:	dc800815 	stw	r18,32(sp)
 401426c:	dc400715 	stw	r17,28(sp)
 4014270:	dc000615 	stw	r16,24(sp)
 4014274:	d9400315 	stw	r5,12(sp)
 4014278:	d9000215 	stw	r4,8(sp)
 401427c:	d9800415 	stw	r6,16(sp)
 4014280:	382f883a 	mov	r23,r7
 4014284:	2829883a 	mov	r20,r5
 4014288:	a4c00007 	ldb	r19,0(r20)
 401428c:	a5000044 	addi	r20,r20,1
 4014290:	e4c7883a 	add	r3,fp,r19
 4014294:	18800003 	ldbu	r2,0(r3)
 4014298:	1080020c 	andi	r2,r2,8
 401429c:	103ffa1e 	bne	r2,zero,4014288 <_strtoll_r+0x4c>
 40142a0:	00800b44 	movi	r2,45
 40142a4:	98808826 	beq	r19,r2,40144c8 <_strtoll_r+0x28c>
 40142a8:	00800ac4 	movi	r2,43
 40142ac:	98808326 	beq	r19,r2,40144bc <_strtoll_r+0x280>
 40142b0:	d8000115 	stw	zero,4(sp)
 40142b4:	b807003a 	cmpeq	r3,r23,zero
 40142b8:	18005f1e 	bne	r3,zero,4014438 <_strtoll_r+0x1fc>
 40142bc:	00800404 	movi	r2,16
 40142c0:	b8805d26 	beq	r23,r2,4014438 <_strtoll_r+0x1fc>
 40142c4:	b82dd7fa 	srai	r22,r23,31
 40142c8:	b82b883a 	mov	r21,r23
 40142cc:	d8c00117 	ldw	r3,4(sp)
 40142d0:	1806c03a 	cmpne	r3,r3,zero
 40142d4:	d8c00515 	stw	r3,20(sp)
 40142d8:	1800631e 	bne	r3,zero,4014468 <_strtoll_r+0x22c>
 40142dc:	043fffc4 	movi	r16,-1
 40142e0:	04600034 	movhi	r17,32768
 40142e4:	8c7fffc4 	addi	r17,r17,-1
 40142e8:	880b883a 	mov	r5,r17
 40142ec:	8009883a 	mov	r4,r16
 40142f0:	a80d883a 	mov	r6,r21
 40142f4:	b00f883a 	mov	r7,r22
 40142f8:	40164c00 	call	40164c0 <__umoddi3>
 40142fc:	880b883a 	mov	r5,r17
 4014300:	8009883a 	mov	r4,r16
 4014304:	b00f883a 	mov	r7,r22
 4014308:	a80d883a 	mov	r6,r21
 401430c:	d8800015 	stw	r2,0(sp)
 4014310:	4015e540 	call	4015e54 <__udivdi3>
 4014314:	1023883a 	mov	r17,r2
 4014318:	e4c5883a 	add	r2,fp,r19
 401431c:	11000003 	ldbu	r4,0(r2)
 4014320:	1825883a 	mov	r18,r3
 4014324:	0015883a 	mov	r10,zero
 4014328:	20c0010c 	andi	r3,r4,4
 401432c:	0017883a 	mov	r11,zero
 4014330:	000f883a 	mov	r7,zero
 4014334:	18001a26 	beq	r3,zero,40143a0 <_strtoll_r+0x164>
 4014338:	9c3ff404 	addi	r16,r19,-48
 401433c:	85c0200e 	bge	r16,r23,40143c0 <_strtoll_r+0x184>
 4014340:	38003b16 	blt	r7,zero,4014430 <_strtoll_r+0x1f4>
 4014344:	92c03a36 	bltu	r18,r11,4014430 <_strtoll_r+0x1f4>
 4014348:	5c803826 	beq	r11,r18,401442c <_strtoll_r+0x1f0>
 401434c:	54404c26 	beq	r10,r17,4014480 <_strtoll_r+0x244>
 4014350:	580b883a 	mov	r5,r11
 4014354:	5009883a 	mov	r4,r10
 4014358:	a80d883a 	mov	r6,r21
 401435c:	b00f883a 	mov	r7,r22
 4014360:	40090300 	call	4009030 <__muldi3>
 4014364:	8013d7fa 	srai	r9,r16,31
 4014368:	100d883a 	mov	r6,r2
 401436c:	1405883a 	add	r2,r2,r16
 4014370:	118d803a 	cmpltu	r6,r2,r6
 4014374:	1a47883a 	add	r3,r3,r9
 4014378:	30cd883a 	add	r6,r6,r3
 401437c:	1015883a 	mov	r10,r2
 4014380:	3017883a 	mov	r11,r6
 4014384:	01c00044 	movi	r7,1
 4014388:	a4c00007 	ldb	r19,0(r20)
 401438c:	a5000044 	addi	r20,r20,1
 4014390:	e4c5883a 	add	r2,fp,r19
 4014394:	11000003 	ldbu	r4,0(r2)
 4014398:	20c0010c 	andi	r3,r4,4
 401439c:	183fe61e 	bne	r3,zero,4014338 <_strtoll_r+0xfc>
 40143a0:	208000cc 	andi	r2,r4,3
 40143a4:	10000626 	beq	r2,zero,40143c0 <_strtoll_r+0x184>
 40143a8:	2080004c 	andi	r2,r4,1
 40143ac:	1005003a 	cmpeq	r2,r2,zero
 40143b0:	1000301e 	bne	r2,zero,4014474 <_strtoll_r+0x238>
 40143b4:	02000dc4 	movi	r8,55
 40143b8:	9a21c83a 	sub	r16,r19,r8
 40143bc:	85ffe016 	blt	r16,r23,4014340 <_strtoll_r+0x104>
 40143c0:	38004616 	blt	r7,zero,40144dc <_strtoll_r+0x2a0>
 40143c4:	d8800517 	ldw	r2,20(sp)
 40143c8:	1000341e 	bne	r2,zero,401449c <_strtoll_r+0x260>
 40143cc:	500b883a 	mov	r5,r10
 40143d0:	580d883a 	mov	r6,r11
 40143d4:	d8c00417 	ldw	r3,16(sp)
 40143d8:	18000626 	beq	r3,zero,40143f4 <_strtoll_r+0x1b8>
 40143dc:	38000226 	beq	r7,zero,40143e8 <_strtoll_r+0x1ac>
 40143e0:	a53fffc4 	addi	r20,r20,-1
 40143e4:	dd000315 	stw	r20,12(sp)
 40143e8:	d8c00317 	ldw	r3,12(sp)
 40143ec:	d8800417 	ldw	r2,16(sp)
 40143f0:	10c00015 	stw	r3,0(r2)
 40143f4:	2805883a 	mov	r2,r5
 40143f8:	3007883a 	mov	r3,r6
 40143fc:	dfc00f17 	ldw	ra,60(sp)
 4014400:	df000e17 	ldw	fp,56(sp)
 4014404:	ddc00d17 	ldw	r23,52(sp)
 4014408:	dd800c17 	ldw	r22,48(sp)
 401440c:	dd400b17 	ldw	r21,44(sp)
 4014410:	dd000a17 	ldw	r20,40(sp)
 4014414:	dcc00917 	ldw	r19,36(sp)
 4014418:	dc800817 	ldw	r18,32(sp)
 401441c:	dc400717 	ldw	r17,28(sp)
 4014420:	dc000617 	ldw	r16,24(sp)
 4014424:	dec01004 	addi	sp,sp,64
 4014428:	f800283a 	ret
 401442c:	8abfc72e 	bgeu	r17,r10,401434c <_strtoll_r+0x110>
 4014430:	01ffffc4 	movi	r7,-1
 4014434:	003fd406 	br	4014388 <_strtoll_r+0x14c>
 4014438:	00800c04 	movi	r2,48
 401443c:	98803226 	beq	r19,r2,4014508 <_strtoll_r+0x2cc>
 4014440:	183fa026 	beq	r3,zero,40142c4 <_strtoll_r+0x88>
 4014444:	00800c04 	movi	r2,48
 4014448:	98803e26 	beq	r19,r2,4014544 <_strtoll_r+0x308>
 401444c:	d8c00117 	ldw	r3,4(sp)
 4014450:	05c00284 	movi	r23,10
 4014454:	b82b883a 	mov	r21,r23
 4014458:	1806c03a 	cmpne	r3,r3,zero
 401445c:	002d883a 	mov	r22,zero
 4014460:	d8c00515 	stw	r3,20(sp)
 4014464:	183f9d26 	beq	r3,zero,40142dc <_strtoll_r+0xa0>
 4014468:	0021883a 	mov	r16,zero
 401446c:	04600034 	movhi	r17,32768
 4014470:	003f9d06 	br	40142e8 <_strtoll_r+0xac>
 4014474:	020015c4 	movi	r8,87
 4014478:	9a21c83a 	sub	r16,r19,r8
 401447c:	003fcf06 	br	40143bc <_strtoll_r+0x180>
 4014480:	5cbfb31e 	bne	r11,r18,4014350 <_strtoll_r+0x114>
 4014484:	d8800017 	ldw	r2,0(sp)
 4014488:	143fb10e 	bge	r2,r16,4014350 <_strtoll_r+0x114>
 401448c:	8815883a 	mov	r10,r17
 4014490:	9017883a 	mov	r11,r18
 4014494:	01ffffc4 	movi	r7,-1
 4014498:	003fbb06 	br	4014388 <_strtoll_r+0x14c>
 401449c:	0009883a 	mov	r4,zero
 40144a0:	2285c83a 	sub	r2,r4,r10
 40144a4:	2089803a 	cmpltu	r4,r4,r2
 40144a8:	02c7c83a 	sub	r3,zero,r11
 40144ac:	1909c83a 	sub	r4,r3,r4
 40144b0:	100b883a 	mov	r5,r2
 40144b4:	200d883a 	mov	r6,r4
 40144b8:	003fc606 	br	40143d4 <_strtoll_r+0x198>
 40144bc:	a4c00007 	ldb	r19,0(r20)
 40144c0:	a5000044 	addi	r20,r20,1
 40144c4:	003f7a06 	br	40142b0 <_strtoll_r+0x74>
 40144c8:	a4c00007 	ldb	r19,0(r20)
 40144cc:	00800044 	movi	r2,1
 40144d0:	a5000044 	addi	r20,r20,1
 40144d4:	d8800115 	stw	r2,4(sp)
 40144d8:	003f7606 	br	40142b4 <_strtoll_r+0x78>
 40144dc:	d8c00117 	ldw	r3,4(sp)
 40144e0:	1805003a 	cmpeq	r2,r3,zero
 40144e4:	1000131e 	bne	r2,zero,4014534 <_strtoll_r+0x2f8>
 40144e8:	0005883a 	mov	r2,zero
 40144ec:	00e00034 	movhi	r3,32768
 40144f0:	100b883a 	mov	r5,r2
 40144f4:	180d883a 	mov	r6,r3
 40144f8:	d8c00217 	ldw	r3,8(sp)
 40144fc:	00800884 	movi	r2,34
 4014500:	18800015 	stw	r2,0(r3)
 4014504:	003fb306 	br	40143d4 <_strtoll_r+0x198>
 4014508:	a1000007 	ldb	r4,0(r20)
 401450c:	00801e04 	movi	r2,120
 4014510:	20800226 	beq	r4,r2,401451c <_strtoll_r+0x2e0>
 4014514:	00801604 	movi	r2,88
 4014518:	20bfc91e 	bne	r4,r2,4014440 <_strtoll_r+0x204>
 401451c:	a4c00047 	ldb	r19,1(r20)
 4014520:	05c00404 	movi	r23,16
 4014524:	b82b883a 	mov	r21,r23
 4014528:	a5000084 	addi	r20,r20,2
 401452c:	002d883a 	mov	r22,zero
 4014530:	003f6606 	br	40142cc <_strtoll_r+0x90>
 4014534:	017fffc4 	movi	r5,-1
 4014538:	01a00034 	movhi	r6,32768
 401453c:	31bfffc4 	addi	r6,r6,-1
 4014540:	003fed06 	br	40144f8 <_strtoll_r+0x2bc>
 4014544:	05c00204 	movi	r23,8
 4014548:	b82b883a 	mov	r21,r23
 401454c:	002d883a 	mov	r22,zero
 4014550:	003f5e06 	br	40142cc <_strtoll_r+0x90>

04014554 <_strtoul_r>:
 4014554:	defff404 	addi	sp,sp,-48
 4014558:	008100b4 	movhi	r2,1026
 401455c:	109a4d04 	addi	r2,r2,26932
 4014560:	dd000615 	stw	r20,24(sp)
 4014564:	15000017 	ldw	r20,0(r2)
 4014568:	df000a15 	stw	fp,40(sp)
 401456c:	ddc00915 	stw	r23,36(sp)
 4014570:	dc800415 	stw	r18,16(sp)
 4014574:	dc400315 	stw	r17,12(sp)
 4014578:	dfc00b15 	stw	ra,44(sp)
 401457c:	dd800815 	stw	r22,32(sp)
 4014580:	dd400715 	stw	r21,28(sp)
 4014584:	dcc00515 	stw	r19,20(sp)
 4014588:	dc000215 	stw	r16,8(sp)
 401458c:	282f883a 	mov	r23,r5
 4014590:	d9000115 	stw	r4,4(sp)
 4014594:	3039883a 	mov	fp,r6
 4014598:	3825883a 	mov	r18,r7
 401459c:	2823883a 	mov	r17,r5
 40145a0:	8c000007 	ldb	r16,0(r17)
 40145a4:	8c400044 	addi	r17,r17,1
 40145a8:	a407883a 	add	r3,r20,r16
 40145ac:	18800003 	ldbu	r2,0(r3)
 40145b0:	1080020c 	andi	r2,r2,8
 40145b4:	103ffa1e 	bne	r2,zero,40145a0 <_strtoul_r+0x4c>
 40145b8:	00800b44 	movi	r2,45
 40145bc:	80805826 	beq	r16,r2,4014720 <_strtoul_r+0x1cc>
 40145c0:	00800ac4 	movi	r2,43
 40145c4:	80805326 	beq	r16,r2,4014714 <_strtoul_r+0x1c0>
 40145c8:	d8000015 	stw	zero,0(sp)
 40145cc:	9007003a 	cmpeq	r3,r18,zero
 40145d0:	18003d1e 	bne	r3,zero,40146c8 <_strtoul_r+0x174>
 40145d4:	00800404 	movi	r2,16
 40145d8:	90803b26 	beq	r18,r2,40146c8 <_strtoul_r+0x174>
 40145dc:	013fffc4 	movi	r4,-1
 40145e0:	900b883a 	mov	r5,r18
 40145e4:	4008fe80 	call	4008fe8 <__udivsi3>
 40145e8:	013fffc4 	movi	r4,-1
 40145ec:	900b883a 	mov	r5,r18
 40145f0:	1027883a 	mov	r19,r2
 40145f4:	4008ff00 	call	4008ff0 <__umodsi3>
 40145f8:	102d883a 	mov	r22,r2
 40145fc:	902b883a 	mov	r21,r18
 4014600:	a405883a 	add	r2,r20,r16
 4014604:	11400003 	ldbu	r5,0(r2)
 4014608:	0009883a 	mov	r4,zero
 401460c:	000d883a 	mov	r6,zero
 4014610:	28c0010c 	andi	r3,r5,4
 4014614:	18000f26 	beq	r3,zero,4014654 <_strtoul_r+0x100>
 4014618:	843ff404 	addi	r16,r16,-48
 401461c:	8480150e 	bge	r16,r18,4014674 <_strtoul_r+0x120>
 4014620:	30003516 	blt	r6,zero,40146f8 <_strtoul_r+0x1a4>
 4014624:	99003436 	bltu	r19,r4,40146f8 <_strtoul_r+0x1a4>
 4014628:	24c03226 	beq	r4,r19,40146f4 <_strtoul_r+0x1a0>
 401462c:	a80b883a 	mov	r5,r21
 4014630:	4008ff80 	call	4008ff8 <__mulsi3>
 4014634:	1409883a 	add	r4,r2,r16
 4014638:	01800044 	movi	r6,1
 401463c:	8c000007 	ldb	r16,0(r17)
 4014640:	8c400044 	addi	r17,r17,1
 4014644:	a405883a 	add	r2,r20,r16
 4014648:	11400003 	ldbu	r5,0(r2)
 401464c:	28c0010c 	andi	r3,r5,4
 4014650:	183ff11e 	bne	r3,zero,4014618 <_strtoul_r+0xc4>
 4014654:	288000cc 	andi	r2,r5,3
 4014658:	10000626 	beq	r2,zero,4014674 <_strtoul_r+0x120>
 401465c:	2880004c 	andi	r2,r5,1
 4014660:	1005003a 	cmpeq	r2,r2,zero
 4014664:	1000261e 	bne	r2,zero,4014700 <_strtoul_r+0x1ac>
 4014668:	00800dc4 	movi	r2,55
 401466c:	80a1c83a 	sub	r16,r16,r2
 4014670:	84bfeb16 	blt	r16,r18,4014620 <_strtoul_r+0xcc>
 4014674:	3000420e 	bge	r6,zero,4014780 <_strtoul_r+0x22c>
 4014678:	d8c00117 	ldw	r3,4(sp)
 401467c:	00800884 	movi	r2,34
 4014680:	013fffc4 	movi	r4,-1
 4014684:	18800015 	stw	r2,0(r3)
 4014688:	e0000226 	beq	fp,zero,4014694 <_strtoul_r+0x140>
 401468c:	30001f1e 	bne	r6,zero,401470c <_strtoul_r+0x1b8>
 4014690:	e5c00015 	stw	r23,0(fp)
 4014694:	2005883a 	mov	r2,r4
 4014698:	dfc00b17 	ldw	ra,44(sp)
 401469c:	df000a17 	ldw	fp,40(sp)
 40146a0:	ddc00917 	ldw	r23,36(sp)
 40146a4:	dd800817 	ldw	r22,32(sp)
 40146a8:	dd400717 	ldw	r21,28(sp)
 40146ac:	dd000617 	ldw	r20,24(sp)
 40146b0:	dcc00517 	ldw	r19,20(sp)
 40146b4:	dc800417 	ldw	r18,16(sp)
 40146b8:	dc400317 	ldw	r17,12(sp)
 40146bc:	dc000217 	ldw	r16,8(sp)
 40146c0:	dec00c04 	addi	sp,sp,48
 40146c4:	f800283a 	ret
 40146c8:	00800c04 	movi	r2,48
 40146cc:	80801926 	beq	r16,r2,4014734 <_strtoul_r+0x1e0>
 40146d0:	183fc226 	beq	r3,zero,40145dc <_strtoul_r+0x88>
 40146d4:	00800c04 	movi	r2,48
 40146d8:	80802326 	beq	r16,r2,4014768 <_strtoul_r+0x214>
 40146dc:	04800284 	movi	r18,10
 40146e0:	902b883a 	mov	r21,r18
 40146e4:	04c666b4 	movhi	r19,6554
 40146e8:	9ce66644 	addi	r19,r19,-26215
 40146ec:	05800144 	movi	r22,5
 40146f0:	003fc306 	br	4014600 <_strtoul_r+0xac>
 40146f4:	b43fcd0e 	bge	r22,r16,401462c <_strtoul_r+0xd8>
 40146f8:	01bfffc4 	movi	r6,-1
 40146fc:	003fcf06 	br	401463c <_strtoul_r+0xe8>
 4014700:	008015c4 	movi	r2,87
 4014704:	80a1c83a 	sub	r16,r16,r2
 4014708:	003fd906 	br	4014670 <_strtoul_r+0x11c>
 401470c:	8dffffc4 	addi	r23,r17,-1
 4014710:	003fdf06 	br	4014690 <_strtoul_r+0x13c>
 4014714:	8c000007 	ldb	r16,0(r17)
 4014718:	8c400044 	addi	r17,r17,1
 401471c:	003faa06 	br	40145c8 <_strtoul_r+0x74>
 4014720:	8c000007 	ldb	r16,0(r17)
 4014724:	00800044 	movi	r2,1
 4014728:	8c400044 	addi	r17,r17,1
 401472c:	d8800015 	stw	r2,0(sp)
 4014730:	003fa606 	br	40145cc <_strtoul_r+0x78>
 4014734:	89000007 	ldb	r4,0(r17)
 4014738:	00801e04 	movi	r2,120
 401473c:	20800226 	beq	r4,r2,4014748 <_strtoul_r+0x1f4>
 4014740:	00801604 	movi	r2,88
 4014744:	20bfe21e 	bne	r4,r2,40146d0 <_strtoul_r+0x17c>
 4014748:	8c000047 	ldb	r16,1(r17)
 401474c:	04800404 	movi	r18,16
 4014750:	8c400084 	addi	r17,r17,2
 4014754:	902b883a 	mov	r21,r18
 4014758:	04c40034 	movhi	r19,4096
 401475c:	9cffffc4 	addi	r19,r19,-1
 4014760:	058003c4 	movi	r22,15
 4014764:	003fa606 	br	4014600 <_strtoul_r+0xac>
 4014768:	04800204 	movi	r18,8
 401476c:	902b883a 	mov	r21,r18
 4014770:	04c80034 	movhi	r19,8192
 4014774:	9cffffc4 	addi	r19,r19,-1
 4014778:	058001c4 	movi	r22,7
 401477c:	003fa006 	br	4014600 <_strtoul_r+0xac>
 4014780:	d8c00017 	ldw	r3,0(sp)
 4014784:	1805003a 	cmpeq	r2,r3,zero
 4014788:	103fbf1e 	bne	r2,zero,4014688 <_strtoul_r+0x134>
 401478c:	0109c83a 	sub	r4,zero,r4
 4014790:	003fbd06 	br	4014688 <_strtoul_r+0x134>

04014794 <strtoul>:
 4014794:	008100b4 	movhi	r2,1026
 4014798:	109a4904 	addi	r2,r2,26916
 401479c:	2013883a 	mov	r9,r4
 40147a0:	11000017 	ldw	r4,0(r2)
 40147a4:	2805883a 	mov	r2,r5
 40147a8:	300f883a 	mov	r7,r6
 40147ac:	480b883a 	mov	r5,r9
 40147b0:	100d883a 	mov	r6,r2
 40147b4:	40145541 	jmpi	4014554 <_strtoul_r>

040147b8 <_strtoull_r>:
 40147b8:	defff104 	addi	sp,sp,-60
 40147bc:	008100b4 	movhi	r2,1026
 40147c0:	109a4d04 	addi	r2,r2,26932
 40147c4:	df000d15 	stw	fp,52(sp)
 40147c8:	17000017 	ldw	fp,0(r2)
 40147cc:	ddc00c15 	stw	r23,48(sp)
 40147d0:	dcc00815 	stw	r19,32(sp)
 40147d4:	dfc00e15 	stw	ra,56(sp)
 40147d8:	dd800b15 	stw	r22,44(sp)
 40147dc:	dd400a15 	stw	r21,40(sp)
 40147e0:	dd000915 	stw	r20,36(sp)
 40147e4:	dc800715 	stw	r18,28(sp)
 40147e8:	dc400615 	stw	r17,24(sp)
 40147ec:	dc000515 	stw	r16,20(sp)
 40147f0:	d9400215 	stw	r5,8(sp)
 40147f4:	d9000115 	stw	r4,4(sp)
 40147f8:	d9800315 	stw	r6,12(sp)
 40147fc:	382f883a 	mov	r23,r7
 4014800:	2827883a 	mov	r19,r5
 4014804:	9d000007 	ldb	r20,0(r19)
 4014808:	9cc00044 	addi	r19,r19,1
 401480c:	e507883a 	add	r3,fp,r20
 4014810:	18800003 	ldbu	r2,0(r3)
 4014814:	1080020c 	andi	r2,r2,8
 4014818:	103ffa1e 	bne	r2,zero,4014804 <_strtoull_r+0x4c>
 401481c:	00800b44 	movi	r2,45
 4014820:	a0807a26 	beq	r20,r2,4014a0c <_strtoull_r+0x254>
 4014824:	00800ac4 	movi	r2,43
 4014828:	a0807526 	beq	r20,r2,4014a00 <_strtoull_r+0x248>
 401482c:	d8000015 	stw	zero,0(sp)
 4014830:	b807003a 	cmpeq	r3,r23,zero
 4014834:	18005a1e 	bne	r3,zero,40149a0 <_strtoull_r+0x1e8>
 4014838:	00800404 	movi	r2,16
 401483c:	b8805826 	beq	r23,r2,40149a0 <_strtoull_r+0x1e8>
 4014840:	b82dd7fa 	srai	r22,r23,31
 4014844:	043fffc4 	movi	r16,-1
 4014848:	8009883a 	mov	r4,r16
 401484c:	800b883a 	mov	r5,r16
 4014850:	b80d883a 	mov	r6,r23
 4014854:	b00f883a 	mov	r7,r22
 4014858:	4015e540 	call	4015e54 <__udivdi3>
 401485c:	8009883a 	mov	r4,r16
 4014860:	800b883a 	mov	r5,r16
 4014864:	b80d883a 	mov	r6,r23
 4014868:	b00f883a 	mov	r7,r22
 401486c:	1023883a 	mov	r17,r2
 4014870:	1825883a 	mov	r18,r3
 4014874:	40164c00 	call	40164c0 <__umoddi3>
 4014878:	b82b883a 	mov	r21,r23
 401487c:	1019883a 	mov	r12,r2
 4014880:	e505883a 	add	r2,fp,r20
 4014884:	11000003 	ldbu	r4,0(r2)
 4014888:	0015883a 	mov	r10,zero
 401488c:	0017883a 	mov	r11,zero
 4014890:	20c0010c 	andi	r3,r4,4
 4014894:	000d883a 	mov	r6,zero
 4014898:	18001c26 	beq	r3,zero,401490c <_strtoull_r+0x154>
 401489c:	a43ff404 	addi	r16,r20,-48
 40148a0:	85c0220e 	bge	r16,r23,401492c <_strtoull_r+0x174>
 40148a4:	30003c16 	blt	r6,zero,4014998 <_strtoull_r+0x1e0>
 40148a8:	92c03b36 	bltu	r18,r11,4014998 <_strtoull_r+0x1e0>
 40148ac:	5c803926 	beq	r11,r18,4014994 <_strtoull_r+0x1dc>
 40148b0:	54404c26 	beq	r10,r17,40149e4 <_strtoull_r+0x22c>
 40148b4:	580b883a 	mov	r5,r11
 40148b8:	5009883a 	mov	r4,r10
 40148bc:	a80d883a 	mov	r6,r21
 40148c0:	b00f883a 	mov	r7,r22
 40148c4:	db000415 	stw	r12,16(sp)
 40148c8:	40090300 	call	4009030 <__muldi3>
 40148cc:	8013d7fa 	srai	r9,r16,31
 40148d0:	100d883a 	mov	r6,r2
 40148d4:	1405883a 	add	r2,r2,r16
 40148d8:	118d803a 	cmpltu	r6,r2,r6
 40148dc:	1a47883a 	add	r3,r3,r9
 40148e0:	db000417 	ldw	r12,16(sp)
 40148e4:	30cd883a 	add	r6,r6,r3
 40148e8:	3017883a 	mov	r11,r6
 40148ec:	1015883a 	mov	r10,r2
 40148f0:	01800044 	movi	r6,1
 40148f4:	9d000007 	ldb	r20,0(r19)
 40148f8:	9cc00044 	addi	r19,r19,1
 40148fc:	e505883a 	add	r2,fp,r20
 4014900:	11000003 	ldbu	r4,0(r2)
 4014904:	20c0010c 	andi	r3,r4,4
 4014908:	183fe41e 	bne	r3,zero,401489c <_strtoull_r+0xe4>
 401490c:	208000cc 	andi	r2,r4,3
 4014910:	10000626 	beq	r2,zero,401492c <_strtoull_r+0x174>
 4014914:	2080004c 	andi	r2,r4,1
 4014918:	1005003a 	cmpeq	r2,r2,zero
 401491c:	10002e1e 	bne	r2,zero,40149d8 <_strtoull_r+0x220>
 4014920:	02000dc4 	movi	r8,55
 4014924:	a221c83a 	sub	r16,r20,r8
 4014928:	85ffde16 	blt	r16,r23,40148a4 <_strtoull_r+0xec>
 401492c:	3000530e 	bge	r6,zero,4014a7c <_strtoull_r+0x2c4>
 4014930:	d8c00117 	ldw	r3,4(sp)
 4014934:	02bfffc4 	movi	r10,-1
 4014938:	00800884 	movi	r2,34
 401493c:	5017883a 	mov	r11,r10
 4014940:	18800015 	stw	r2,0(r3)
 4014944:	d8800317 	ldw	r2,12(sp)
 4014948:	10000426 	beq	r2,zero,401495c <_strtoull_r+0x1a4>
 401494c:	3000291e 	bne	r6,zero,40149f4 <_strtoull_r+0x23c>
 4014950:	d8800217 	ldw	r2,8(sp)
 4014954:	d8c00317 	ldw	r3,12(sp)
 4014958:	18800015 	stw	r2,0(r3)
 401495c:	5005883a 	mov	r2,r10
 4014960:	5807883a 	mov	r3,r11
 4014964:	dfc00e17 	ldw	ra,56(sp)
 4014968:	df000d17 	ldw	fp,52(sp)
 401496c:	ddc00c17 	ldw	r23,48(sp)
 4014970:	dd800b17 	ldw	r22,44(sp)
 4014974:	dd400a17 	ldw	r21,40(sp)
 4014978:	dd000917 	ldw	r20,36(sp)
 401497c:	dcc00817 	ldw	r19,32(sp)
 4014980:	dc800717 	ldw	r18,28(sp)
 4014984:	dc400617 	ldw	r17,24(sp)
 4014988:	dc000517 	ldw	r16,20(sp)
 401498c:	dec00f04 	addi	sp,sp,60
 4014990:	f800283a 	ret
 4014994:	8abfc62e 	bgeu	r17,r10,40148b0 <_strtoull_r+0xf8>
 4014998:	01bfffc4 	movi	r6,-1
 401499c:	003fd506 	br	40148f4 <_strtoull_r+0x13c>
 40149a0:	00800c04 	movi	r2,48
 40149a4:	a0801e26 	beq	r20,r2,4014a20 <_strtoull_r+0x268>
 40149a8:	183fa526 	beq	r3,zero,4014840 <_strtoull_r+0x88>
 40149ac:	00800c04 	movi	r2,48
 40149b0:	a0802a26 	beq	r20,r2,4014a5c <_strtoull_r+0x2a4>
 40149b4:	05c00284 	movi	r23,10
 40149b8:	b82b883a 	mov	r21,r23
 40149bc:	046666b4 	movhi	r17,39322
 40149c0:	8c666644 	addi	r17,r17,-26215
 40149c4:	002d883a 	mov	r22,zero
 40149c8:	048666b4 	movhi	r18,6554
 40149cc:	94a66644 	addi	r18,r18,-26215
 40149d0:	03000144 	movi	r12,5
 40149d4:	003faa06 	br	4014880 <_strtoull_r+0xc8>
 40149d8:	020015c4 	movi	r8,87
 40149dc:	a221c83a 	sub	r16,r20,r8
 40149e0:	003fd106 	br	4014928 <_strtoull_r+0x170>
 40149e4:	5cbfb31e 	bne	r11,r18,40148b4 <_strtoull_r+0xfc>
 40149e8:	643fb20e 	bge	r12,r16,40148b4 <_strtoull_r+0xfc>
 40149ec:	01bfffc4 	movi	r6,-1
 40149f0:	003fc006 	br	40148f4 <_strtoull_r+0x13c>
 40149f4:	9cffffc4 	addi	r19,r19,-1
 40149f8:	dcc00215 	stw	r19,8(sp)
 40149fc:	003fd406 	br	4014950 <_strtoull_r+0x198>
 4014a00:	9d000007 	ldb	r20,0(r19)
 4014a04:	9cc00044 	addi	r19,r19,1
 4014a08:	003f8806 	br	401482c <_strtoull_r+0x74>
 4014a0c:	9d000007 	ldb	r20,0(r19)
 4014a10:	00800044 	movi	r2,1
 4014a14:	9cc00044 	addi	r19,r19,1
 4014a18:	d8800015 	stw	r2,0(sp)
 4014a1c:	003f8406 	br	4014830 <_strtoull_r+0x78>
 4014a20:	99000007 	ldb	r4,0(r19)
 4014a24:	00801e04 	movi	r2,120
 4014a28:	20800226 	beq	r4,r2,4014a34 <_strtoull_r+0x27c>
 4014a2c:	00801604 	movi	r2,88
 4014a30:	20bfdd1e 	bne	r4,r2,40149a8 <_strtoull_r+0x1f0>
 4014a34:	9d000047 	ldb	r20,1(r19)
 4014a38:	05c00404 	movi	r23,16
 4014a3c:	b82b883a 	mov	r21,r23
 4014a40:	047fffc4 	movi	r17,-1
 4014a44:	9cc00084 	addi	r19,r19,2
 4014a48:	002d883a 	mov	r22,zero
 4014a4c:	04840034 	movhi	r18,4096
 4014a50:	94bfffc4 	addi	r18,r18,-1
 4014a54:	030003c4 	movi	r12,15
 4014a58:	003f8906 	br	4014880 <_strtoull_r+0xc8>
 4014a5c:	05c00204 	movi	r23,8
 4014a60:	b82b883a 	mov	r21,r23
 4014a64:	047fffc4 	movi	r17,-1
 4014a68:	002d883a 	mov	r22,zero
 4014a6c:	04880034 	movhi	r18,8192
 4014a70:	94bfffc4 	addi	r18,r18,-1
 4014a74:	030001c4 	movi	r12,7
 4014a78:	003f8106 	br	4014880 <_strtoull_r+0xc8>
 4014a7c:	d8c00017 	ldw	r3,0(sp)
 4014a80:	1805003a 	cmpeq	r2,r3,zero
 4014a84:	103faf1e 	bne	r2,zero,4014944 <_strtoull_r+0x18c>
 4014a88:	0009883a 	mov	r4,zero
 4014a8c:	2285c83a 	sub	r2,r4,r10
 4014a90:	02c7c83a 	sub	r3,zero,r11
 4014a94:	2089803a 	cmpltu	r4,r4,r2
 4014a98:	1909c83a 	sub	r4,r3,r4
 4014a9c:	1015883a 	mov	r10,r2
 4014aa0:	2017883a 	mov	r11,r4
 4014aa4:	003fa706 	br	4014944 <_strtoull_r+0x18c>

04014aa8 <__submore>:
 4014aa8:	defffa04 	addi	sp,sp,-24
 4014aac:	28c00c17 	ldw	r3,48(r5)
 4014ab0:	dc800215 	stw	r18,8(sp)
 4014ab4:	2825883a 	mov	r18,r5
 4014ab8:	dc000015 	stw	r16,0(sp)
 4014abc:	90801004 	addi	r2,r18,64
 4014ac0:	04010004 	movi	r16,1024
 4014ac4:	dfc00515 	stw	ra,20(sp)
 4014ac8:	dd000415 	stw	r20,16(sp)
 4014acc:	dcc00315 	stw	r19,12(sp)
 4014ad0:	dc400115 	stw	r17,4(sp)
 4014ad4:	800b883a 	mov	r5,r16
 4014ad8:	18801b26 	beq	r3,r2,4014b48 <__submore+0xa0>
 4014adc:	94400d17 	ldw	r17,52(r18)
 4014ae0:	180b883a 	mov	r5,r3
 4014ae4:	8c69883a 	add	r20,r17,r17
 4014ae8:	a00d883a 	mov	r6,r20
 4014aec:	4011cbc0 	call	4011cbc <_realloc_r>
 4014af0:	1467883a 	add	r19,r2,r17
 4014af4:	1021883a 	mov	r16,r2
 4014af8:	880d883a 	mov	r6,r17
 4014afc:	9809883a 	mov	r4,r19
 4014b00:	100b883a 	mov	r5,r2
 4014b04:	10000e26 	beq	r2,zero,4014b40 <__submore+0x98>
 4014b08:	4010a180 	call	4010a18 <memcpy>
 4014b0c:	000d883a 	mov	r6,zero
 4014b10:	95000d15 	stw	r20,52(r18)
 4014b14:	94c00015 	stw	r19,0(r18)
 4014b18:	94000c15 	stw	r16,48(r18)
 4014b1c:	3005883a 	mov	r2,r6
 4014b20:	dfc00517 	ldw	ra,20(sp)
 4014b24:	dd000417 	ldw	r20,16(sp)
 4014b28:	dcc00317 	ldw	r19,12(sp)
 4014b2c:	dc800217 	ldw	r18,8(sp)
 4014b30:	dc400117 	ldw	r17,4(sp)
 4014b34:	dc000017 	ldw	r16,0(sp)
 4014b38:	dec00604 	addi	sp,sp,24
 4014b3c:	f800283a 	ret
 4014b40:	01bfffc4 	movi	r6,-1
 4014b44:	003ff506 	br	4014b1c <__submore+0x74>
 4014b48:	4009a1c0 	call	4009a1c <_malloc_r>
 4014b4c:	1009883a 	mov	r4,r2
 4014b50:	1140ff44 	addi	r5,r2,1021
 4014b54:	000d883a 	mov	r6,zero
 4014b58:	103ff926 	beq	r2,zero,4014b40 <__submore+0x98>
 4014b5c:	90801083 	ldbu	r2,66(r18)
 4014b60:	94000d15 	stw	r16,52(r18)
 4014b64:	91000c15 	stw	r4,48(r18)
 4014b68:	28800085 	stb	r2,2(r5)
 4014b6c:	90c01043 	ldbu	r3,65(r18)
 4014b70:	28c00045 	stb	r3,1(r5)
 4014b74:	90801003 	ldbu	r2,64(r18)
 4014b78:	2080ff45 	stb	r2,1021(r4)
 4014b7c:	91400015 	stw	r5,0(r18)
 4014b80:	003fe606 	br	4014b1c <__submore+0x74>

04014b84 <_ungetc_r>:
 4014b84:	defffc04 	addi	sp,sp,-16
 4014b88:	00bfffc4 	movi	r2,-1
 4014b8c:	dc400215 	stw	r17,8(sp)
 4014b90:	dc000115 	stw	r16,4(sp)
 4014b94:	dfc00315 	stw	ra,12(sp)
 4014b98:	2821883a 	mov	r16,r5
 4014b9c:	2023883a 	mov	r17,r4
 4014ba0:	28801826 	beq	r5,r2,4014c04 <_ungetc_r+0x80>
 4014ba4:	20000226 	beq	r4,zero,4014bb0 <_ungetc_r+0x2c>
 4014ba8:	20800e17 	ldw	r2,56(r4)
 4014bac:	10001b26 	beq	r2,zero,4014c1c <_ungetc_r+0x98>
 4014bb0:	3100030b 	ldhu	r4,12(r6)
 4014bb4:	00bff7c4 	movi	r2,-33
 4014bb8:	2084703a 	and	r2,r4,r2
 4014bbc:	117fffcc 	andi	r5,r2,65535
 4014bc0:	28c0010c 	andi	r3,r5,4
 4014bc4:	1009883a 	mov	r4,r2
 4014bc8:	3080030d 	sth	r2,12(r6)
 4014bcc:	18003526 	beq	r3,zero,4014ca4 <_ungetc_r+0x120>
 4014bd0:	30800c17 	ldw	r2,48(r6)
 4014bd4:	84003fcc 	andi	r16,r16,255
 4014bd8:	10001426 	beq	r2,zero,4014c2c <_ungetc_r+0xa8>
 4014bdc:	30c00117 	ldw	r3,4(r6)
 4014be0:	30800d17 	ldw	r2,52(r6)
 4014be4:	1880380e 	bge	r3,r2,4014cc8 <_ungetc_r+0x144>
 4014be8:	30c00017 	ldw	r3,0(r6)
 4014bec:	19ffffc4 	addi	r7,r3,-1
 4014bf0:	31c00015 	stw	r7,0(r6)
 4014bf4:	1c3fffc5 	stb	r16,-1(r3)
 4014bf8:	30800117 	ldw	r2,4(r6)
 4014bfc:	10800044 	addi	r2,r2,1
 4014c00:	30800115 	stw	r2,4(r6)
 4014c04:	8005883a 	mov	r2,r16
 4014c08:	dfc00317 	ldw	ra,12(sp)
 4014c0c:	dc400217 	ldw	r17,8(sp)
 4014c10:	dc000117 	ldw	r16,4(sp)
 4014c14:	dec00404 	addi	sp,sp,16
 4014c18:	f800283a 	ret
 4014c1c:	d9800015 	stw	r6,0(sp)
 4014c20:	400f67c0 	call	400f67c <__sinit>
 4014c24:	d9800017 	ldw	r6,0(sp)
 4014c28:	003fe106 	br	4014bb0 <_ungetc_r+0x2c>
 4014c2c:	30800417 	ldw	r2,16(r6)
 4014c30:	10002326 	beq	r2,zero,4014cc0 <_ungetc_r+0x13c>
 4014c34:	31c00017 	ldw	r7,0(r6)
 4014c38:	11c0022e 	bgeu	r2,r7,4014c44 <_ungetc_r+0xc0>
 4014c3c:	38bfffc3 	ldbu	r2,-1(r7)
 4014c40:	80801226 	beq	r16,r2,4014c8c <_ungetc_r+0x108>
 4014c44:	30c00117 	ldw	r3,4(r6)
 4014c48:	00800044 	movi	r2,1
 4014c4c:	30800115 	stw	r2,4(r6)
 4014c50:	008000c4 	movi	r2,3
 4014c54:	31001004 	addi	r4,r6,64
 4014c58:	31401084 	addi	r5,r6,66
 4014c5c:	30800d15 	stw	r2,52(r6)
 4014c60:	8005883a 	mov	r2,r16
 4014c64:	30c00f15 	stw	r3,60(r6)
 4014c68:	31c00e15 	stw	r7,56(r6)
 4014c6c:	31000c15 	stw	r4,48(r6)
 4014c70:	31400015 	stw	r5,0(r6)
 4014c74:	34001085 	stb	r16,66(r6)
 4014c78:	dfc00317 	ldw	ra,12(sp)
 4014c7c:	dc400217 	ldw	r17,8(sp)
 4014c80:	dc000117 	ldw	r16,4(sp)
 4014c84:	dec00404 	addi	sp,sp,16
 4014c88:	f800283a 	ret
 4014c8c:	30800117 	ldw	r2,4(r6)
 4014c90:	39ffffc4 	addi	r7,r7,-1
 4014c94:	31c00015 	stw	r7,0(r6)
 4014c98:	10800044 	addi	r2,r2,1
 4014c9c:	30800115 	stw	r2,4(r6)
 4014ca0:	003fd806 	br	4014c04 <_ungetc_r+0x80>
 4014ca4:	2880040c 	andi	r2,r5,16
 4014ca8:	10000d26 	beq	r2,zero,4014ce0 <_ungetc_r+0x15c>
 4014cac:	2880020c 	andi	r2,r5,8
 4014cb0:	10000d1e 	bne	r2,zero,4014ce8 <_ungetc_r+0x164>
 4014cb4:	20800114 	ori	r2,r4,4
 4014cb8:	3080030d 	sth	r2,12(r6)
 4014cbc:	003fc406 	br	4014bd0 <_ungetc_r+0x4c>
 4014cc0:	31c00017 	ldw	r7,0(r6)
 4014cc4:	003fdf06 	br	4014c44 <_ungetc_r+0xc0>
 4014cc8:	300b883a 	mov	r5,r6
 4014ccc:	8809883a 	mov	r4,r17
 4014cd0:	d9800015 	stw	r6,0(sp)
 4014cd4:	4014aa80 	call	4014aa8 <__submore>
 4014cd8:	d9800017 	ldw	r6,0(sp)
 4014cdc:	103fc226 	beq	r2,zero,4014be8 <_ungetc_r+0x64>
 4014ce0:	043fffc4 	movi	r16,-1
 4014ce4:	003fc706 	br	4014c04 <_ungetc_r+0x80>
 4014ce8:	300b883a 	mov	r5,r6
 4014cec:	8809883a 	mov	r4,r17
 4014cf0:	d9800015 	stw	r6,0(sp)
 4014cf4:	400f3e40 	call	400f3e4 <_fflush_r>
 4014cf8:	d9800017 	ldw	r6,0(sp)
 4014cfc:	103ff81e 	bne	r2,zero,4014ce0 <_ungetc_r+0x15c>
 4014d00:	3100030b 	ldhu	r4,12(r6)
 4014d04:	00bffdc4 	movi	r2,-9
 4014d08:	30000215 	stw	zero,8(r6)
 4014d0c:	2084703a 	and	r2,r4,r2
 4014d10:	1009883a 	mov	r4,r2
 4014d14:	3080030d 	sth	r2,12(r6)
 4014d18:	30000615 	stw	zero,24(r6)
 4014d1c:	003fe506 	br	4014cb4 <_ungetc_r+0x130>

04014d20 <ungetc>:
 4014d20:	018100b4 	movhi	r6,1026
 4014d24:	319a4904 	addi	r6,r6,26916
 4014d28:	2007883a 	mov	r3,r4
 4014d2c:	31000017 	ldw	r4,0(r6)
 4014d30:	280d883a 	mov	r6,r5
 4014d34:	180b883a 	mov	r5,r3
 4014d38:	4014b841 	jmpi	4014b84 <_ungetc_r>

04014d3c <_write_r>:
 4014d3c:	defffd04 	addi	sp,sp,-12
 4014d40:	dc000015 	stw	r16,0(sp)
 4014d44:	040100b4 	movhi	r16,1026
 4014d48:	841a9604 	addi	r16,r16,27224
 4014d4c:	dc400115 	stw	r17,4(sp)
 4014d50:	80000015 	stw	zero,0(r16)
 4014d54:	2023883a 	mov	r17,r4
 4014d58:	2809883a 	mov	r4,r5
 4014d5c:	300b883a 	mov	r5,r6
 4014d60:	380d883a 	mov	r6,r7
 4014d64:	dfc00215 	stw	ra,8(sp)
 4014d68:	4017b480 	call	4017b48 <write>
 4014d6c:	1007883a 	mov	r3,r2
 4014d70:	00bfffc4 	movi	r2,-1
 4014d74:	18800626 	beq	r3,r2,4014d90 <_write_r+0x54>
 4014d78:	1805883a 	mov	r2,r3
 4014d7c:	dfc00217 	ldw	ra,8(sp)
 4014d80:	dc400117 	ldw	r17,4(sp)
 4014d84:	dc000017 	ldw	r16,0(sp)
 4014d88:	dec00304 	addi	sp,sp,12
 4014d8c:	f800283a 	ret
 4014d90:	80800017 	ldw	r2,0(r16)
 4014d94:	103ff826 	beq	r2,zero,4014d78 <_write_r+0x3c>
 4014d98:	88800015 	stw	r2,0(r17)
 4014d9c:	1805883a 	mov	r2,r3
 4014da0:	dfc00217 	ldw	ra,8(sp)
 4014da4:	dc400117 	ldw	r17,4(sp)
 4014da8:	dc000017 	ldw	r16,0(sp)
 4014dac:	dec00304 	addi	sp,sp,12
 4014db0:	f800283a 	ret

04014db4 <_calloc_r>:
 4014db4:	defffe04 	addi	sp,sp,-8
 4014db8:	dc400015 	stw	r17,0(sp)
 4014dbc:	2023883a 	mov	r17,r4
 4014dc0:	2809883a 	mov	r4,r5
 4014dc4:	300b883a 	mov	r5,r6
 4014dc8:	dfc00115 	stw	ra,4(sp)
 4014dcc:	4008ff80 	call	4008ff8 <__mulsi3>
 4014dd0:	100b883a 	mov	r5,r2
 4014dd4:	8809883a 	mov	r4,r17
 4014dd8:	4009a1c0 	call	4009a1c <_malloc_r>
 4014ddc:	1023883a 	mov	r17,r2
 4014de0:	01c00904 	movi	r7,36
 4014de4:	10000d26 	beq	r2,zero,4014e1c <_calloc_r+0x68>
 4014de8:	10ffff17 	ldw	r3,-4(r2)
 4014dec:	1009883a 	mov	r4,r2
 4014df0:	00bfff04 	movi	r2,-4
 4014df4:	1886703a 	and	r3,r3,r2
 4014df8:	1887883a 	add	r3,r3,r2
 4014dfc:	180d883a 	mov	r6,r3
 4014e00:	000b883a 	mov	r5,zero
 4014e04:	38c01736 	bltu	r7,r3,4014e64 <_calloc_r+0xb0>
 4014e08:	008004c4 	movi	r2,19
 4014e0c:	10c00836 	bltu	r2,r3,4014e30 <_calloc_r+0x7c>
 4014e10:	20000215 	stw	zero,8(r4)
 4014e14:	20000015 	stw	zero,0(r4)
 4014e18:	20000115 	stw	zero,4(r4)
 4014e1c:	8805883a 	mov	r2,r17
 4014e20:	dfc00117 	ldw	ra,4(sp)
 4014e24:	dc400017 	ldw	r17,0(sp)
 4014e28:	dec00204 	addi	sp,sp,8
 4014e2c:	f800283a 	ret
 4014e30:	008006c4 	movi	r2,27
 4014e34:	88000015 	stw	zero,0(r17)
 4014e38:	88000115 	stw	zero,4(r17)
 4014e3c:	89000204 	addi	r4,r17,8
 4014e40:	10fff32e 	bgeu	r2,r3,4014e10 <_calloc_r+0x5c>
 4014e44:	88000215 	stw	zero,8(r17)
 4014e48:	88000315 	stw	zero,12(r17)
 4014e4c:	89000404 	addi	r4,r17,16
 4014e50:	19ffef1e 	bne	r3,r7,4014e10 <_calloc_r+0x5c>
 4014e54:	89000604 	addi	r4,r17,24
 4014e58:	88000415 	stw	zero,16(r17)
 4014e5c:	88000515 	stw	zero,20(r17)
 4014e60:	003feb06 	br	4014e10 <_calloc_r+0x5c>
 4014e64:	4010b980 	call	4010b98 <memset>
 4014e68:	8805883a 	mov	r2,r17
 4014e6c:	dfc00117 	ldw	ra,4(sp)
 4014e70:	dc400017 	ldw	r17,0(sp)
 4014e74:	dec00204 	addi	sp,sp,8
 4014e78:	f800283a 	ret

04014e7c <_close_r>:
 4014e7c:	defffd04 	addi	sp,sp,-12
 4014e80:	dc000015 	stw	r16,0(sp)
 4014e84:	040100b4 	movhi	r16,1026
 4014e88:	841a9604 	addi	r16,r16,27224
 4014e8c:	dc400115 	stw	r17,4(sp)
 4014e90:	80000015 	stw	zero,0(r16)
 4014e94:	2023883a 	mov	r17,r4
 4014e98:	2809883a 	mov	r4,r5
 4014e9c:	dfc00215 	stw	ra,8(sp)
 4014ea0:	4016eb40 	call	4016eb4 <close>
 4014ea4:	1007883a 	mov	r3,r2
 4014ea8:	00bfffc4 	movi	r2,-1
 4014eac:	18800626 	beq	r3,r2,4014ec8 <_close_r+0x4c>
 4014eb0:	1805883a 	mov	r2,r3
 4014eb4:	dfc00217 	ldw	ra,8(sp)
 4014eb8:	dc400117 	ldw	r17,4(sp)
 4014ebc:	dc000017 	ldw	r16,0(sp)
 4014ec0:	dec00304 	addi	sp,sp,12
 4014ec4:	f800283a 	ret
 4014ec8:	80800017 	ldw	r2,0(r16)
 4014ecc:	103ff826 	beq	r2,zero,4014eb0 <_close_r+0x34>
 4014ed0:	88800015 	stw	r2,0(r17)
 4014ed4:	1805883a 	mov	r2,r3
 4014ed8:	dfc00217 	ldw	ra,8(sp)
 4014edc:	dc400117 	ldw	r17,4(sp)
 4014ee0:	dc000017 	ldw	r16,0(sp)
 4014ee4:	dec00304 	addi	sp,sp,12
 4014ee8:	f800283a 	ret

04014eec <_fclose_r>:
 4014eec:	defffc04 	addi	sp,sp,-16
 4014ef0:	dc400115 	stw	r17,4(sp)
 4014ef4:	dc000015 	stw	r16,0(sp)
 4014ef8:	dfc00315 	stw	ra,12(sp)
 4014efc:	dc800215 	stw	r18,8(sp)
 4014f00:	2821883a 	mov	r16,r5
 4014f04:	2023883a 	mov	r17,r4
 4014f08:	28002926 	beq	r5,zero,4014fb0 <_fclose_r+0xc4>
 4014f0c:	400f66c0 	call	400f66c <__sfp_lock_acquire>
 4014f10:	88000226 	beq	r17,zero,4014f1c <_fclose_r+0x30>
 4014f14:	88800e17 	ldw	r2,56(r17)
 4014f18:	10002d26 	beq	r2,zero,4014fd0 <_fclose_r+0xe4>
 4014f1c:	8080030f 	ldh	r2,12(r16)
 4014f20:	10002226 	beq	r2,zero,4014fac <_fclose_r+0xc0>
 4014f24:	8809883a 	mov	r4,r17
 4014f28:	800b883a 	mov	r5,r16
 4014f2c:	400f3e40 	call	400f3e4 <_fflush_r>
 4014f30:	1025883a 	mov	r18,r2
 4014f34:	80800b17 	ldw	r2,44(r16)
 4014f38:	10000426 	beq	r2,zero,4014f4c <_fclose_r+0x60>
 4014f3c:	81400717 	ldw	r5,28(r16)
 4014f40:	8809883a 	mov	r4,r17
 4014f44:	103ee83a 	callr	r2
 4014f48:	10002a16 	blt	r2,zero,4014ff4 <_fclose_r+0x108>
 4014f4c:	8080030b 	ldhu	r2,12(r16)
 4014f50:	1080200c 	andi	r2,r2,128
 4014f54:	1000231e 	bne	r2,zero,4014fe4 <_fclose_r+0xf8>
 4014f58:	81400c17 	ldw	r5,48(r16)
 4014f5c:	28000526 	beq	r5,zero,4014f74 <_fclose_r+0x88>
 4014f60:	80801004 	addi	r2,r16,64
 4014f64:	28800226 	beq	r5,r2,4014f70 <_fclose_r+0x84>
 4014f68:	8809883a 	mov	r4,r17
 4014f6c:	400fc800 	call	400fc80 <_free_r>
 4014f70:	80000c15 	stw	zero,48(r16)
 4014f74:	81401117 	ldw	r5,68(r16)
 4014f78:	28000326 	beq	r5,zero,4014f88 <_fclose_r+0x9c>
 4014f7c:	8809883a 	mov	r4,r17
 4014f80:	400fc800 	call	400fc80 <_free_r>
 4014f84:	80001115 	stw	zero,68(r16)
 4014f88:	8000030d 	sth	zero,12(r16)
 4014f8c:	400f6700 	call	400f670 <__sfp_lock_release>
 4014f90:	9005883a 	mov	r2,r18
 4014f94:	dfc00317 	ldw	ra,12(sp)
 4014f98:	dc800217 	ldw	r18,8(sp)
 4014f9c:	dc400117 	ldw	r17,4(sp)
 4014fa0:	dc000017 	ldw	r16,0(sp)
 4014fa4:	dec00404 	addi	sp,sp,16
 4014fa8:	f800283a 	ret
 4014fac:	400f6700 	call	400f670 <__sfp_lock_release>
 4014fb0:	0025883a 	mov	r18,zero
 4014fb4:	9005883a 	mov	r2,r18
 4014fb8:	dfc00317 	ldw	ra,12(sp)
 4014fbc:	dc800217 	ldw	r18,8(sp)
 4014fc0:	dc400117 	ldw	r17,4(sp)
 4014fc4:	dc000017 	ldw	r16,0(sp)
 4014fc8:	dec00404 	addi	sp,sp,16
 4014fcc:	f800283a 	ret
 4014fd0:	8809883a 	mov	r4,r17
 4014fd4:	400f67c0 	call	400f67c <__sinit>
 4014fd8:	8080030f 	ldh	r2,12(r16)
 4014fdc:	103fd11e 	bne	r2,zero,4014f24 <_fclose_r+0x38>
 4014fe0:	003ff206 	br	4014fac <_fclose_r+0xc0>
 4014fe4:	81400417 	ldw	r5,16(r16)
 4014fe8:	8809883a 	mov	r4,r17
 4014fec:	400fc800 	call	400fc80 <_free_r>
 4014ff0:	003fd906 	br	4014f58 <_fclose_r+0x6c>
 4014ff4:	04bfffc4 	movi	r18,-1
 4014ff8:	003fd406 	br	4014f4c <_fclose_r+0x60>

04014ffc <fclose>:
 4014ffc:	008100b4 	movhi	r2,1026
 4015000:	109a4904 	addi	r2,r2,26916
 4015004:	200b883a 	mov	r5,r4
 4015008:	11000017 	ldw	r4,0(r2)
 401500c:	4014eec1 	jmpi	4014eec <_fclose_r>

04015010 <_fstat_r>:
 4015010:	defffd04 	addi	sp,sp,-12
 4015014:	dc000015 	stw	r16,0(sp)
 4015018:	040100b4 	movhi	r16,1026
 401501c:	841a9604 	addi	r16,r16,27224
 4015020:	dc400115 	stw	r17,4(sp)
 4015024:	80000015 	stw	zero,0(r16)
 4015028:	2023883a 	mov	r17,r4
 401502c:	2809883a 	mov	r4,r5
 4015030:	300b883a 	mov	r5,r6
 4015034:	dfc00215 	stw	ra,8(sp)
 4015038:	40171500 	call	4017150 <fstat>
 401503c:	1007883a 	mov	r3,r2
 4015040:	00bfffc4 	movi	r2,-1
 4015044:	18800626 	beq	r3,r2,4015060 <_fstat_r+0x50>
 4015048:	1805883a 	mov	r2,r3
 401504c:	dfc00217 	ldw	ra,8(sp)
 4015050:	dc400117 	ldw	r17,4(sp)
 4015054:	dc000017 	ldw	r16,0(sp)
 4015058:	dec00304 	addi	sp,sp,12
 401505c:	f800283a 	ret
 4015060:	80800017 	ldw	r2,0(r16)
 4015064:	103ff826 	beq	r2,zero,4015048 <_fstat_r+0x38>
 4015068:	88800015 	stw	r2,0(r17)
 401506c:	1805883a 	mov	r2,r3
 4015070:	dfc00217 	ldw	ra,8(sp)
 4015074:	dc400117 	ldw	r17,4(sp)
 4015078:	dc000017 	ldw	r16,0(sp)
 401507c:	dec00304 	addi	sp,sp,12
 4015080:	f800283a 	ret

04015084 <htinit>:
 4015084:	28800003 	ldbu	r2,0(r5)
 4015088:	10000626 	beq	r2,zero,40150a4 <htinit+0x20>
 401508c:	1105883a 	add	r2,r2,r4
 4015090:	11800005 	stb	r6,0(r2)
 4015094:	28800043 	ldbu	r2,1(r5)
 4015098:	31800044 	addi	r6,r6,1
 401509c:	29400044 	addi	r5,r5,1
 40150a0:	103ffa1e 	bne	r2,zero,401508c <htinit+0x8>
 40150a4:	f800283a 	ret

040150a8 <__hexdig_init>:
 40150a8:	defffd04 	addi	sp,sp,-12
 40150ac:	dc400015 	stw	r17,0(sp)
 40150b0:	044100f4 	movhi	r17,1027
 40150b4:	8c4aac04 	addi	r17,r17,10928
 40150b8:	dcc00115 	stw	r19,4(sp)
 40150bc:	8809883a 	mov	r4,r17
 40150c0:	04c00684 	movi	r19,26
 40150c4:	014100b4 	movhi	r5,1026
 40150c8:	2952a604 	addi	r5,r5,19096
 40150cc:	01800404 	movi	r6,16
 40150d0:	dfc00215 	stw	ra,8(sp)
 40150d4:	40150840 	call	4015084 <htinit>
 40150d8:	980d883a 	mov	r6,r19
 40150dc:	8809883a 	mov	r4,r17
 40150e0:	014100b4 	movhi	r5,1026
 40150e4:	2952a904 	addi	r5,r5,19108
 40150e8:	40150840 	call	4015084 <htinit>
 40150ec:	8809883a 	mov	r4,r17
 40150f0:	980d883a 	mov	r6,r19
 40150f4:	014100b4 	movhi	r5,1026
 40150f8:	2952ab04 	addi	r5,r5,19116
 40150fc:	dfc00217 	ldw	ra,8(sp)
 4015100:	dcc00117 	ldw	r19,4(sp)
 4015104:	dc400017 	ldw	r17,0(sp)
 4015108:	dec00304 	addi	sp,sp,12
 401510c:	40150841 	jmpi	4015084 <htinit>

04015110 <rshift>:
 4015110:	2807d17a 	srai	r3,r5,5
 4015114:	20800417 	ldw	r2,16(r4)
 4015118:	22400504 	addi	r9,r4,20
 401511c:	480f883a 	mov	r7,r9
 4015120:	1880190e 	bge	r3,r2,4015188 <rshift+0x78>
 4015124:	1085883a 	add	r2,r2,r2
 4015128:	18c7883a 	add	r3,r3,r3
 401512c:	1085883a 	add	r2,r2,r2
 4015130:	18c7883a 	add	r3,r3,r3
 4015134:	294007cc 	andi	r5,r5,31
 4015138:	4891883a 	add	r8,r9,r2
 401513c:	48cd883a 	add	r6,r9,r3
 4015140:	28001726 	beq	r5,zero,40151a0 <rshift+0x90>
 4015144:	30c00017 	ldw	r3,0(r6)
 4015148:	00800804 	movi	r2,32
 401514c:	31800104 	addi	r6,r6,4
 4015150:	1155c83a 	sub	r10,r2,r5
 4015154:	1946d83a 	srl	r3,r3,r5
 4015158:	3200092e 	bgeu	r6,r8,4015180 <rshift+0x70>
 401515c:	30800017 	ldw	r2,0(r6)
 4015160:	1284983a 	sll	r2,r2,r10
 4015164:	10c4b03a 	or	r2,r2,r3
 4015168:	38800015 	stw	r2,0(r7)
 401516c:	30c00017 	ldw	r3,0(r6)
 4015170:	31800104 	addi	r6,r6,4
 4015174:	39c00104 	addi	r7,r7,4
 4015178:	1946d83a 	srl	r3,r3,r5
 401517c:	323ff736 	bltu	r6,r8,401515c <rshift+0x4c>
 4015180:	38c00015 	stw	r3,0(r7)
 4015184:	18000c1e 	bne	r3,zero,40151b8 <rshift+0xa8>
 4015188:	3a45c83a 	sub	r2,r7,r9
 401518c:	1005d0ba 	srai	r2,r2,2
 4015190:	20800415 	stw	r2,16(r4)
 4015194:	1000011e 	bne	r2,zero,401519c <rshift+0x8c>
 4015198:	20000515 	stw	zero,20(r4)
 401519c:	f800283a 	ret
 40151a0:	323ff92e 	bgeu	r6,r8,4015188 <rshift+0x78>
 40151a4:	30800017 	ldw	r2,0(r6)
 40151a8:	31800104 	addi	r6,r6,4
 40151ac:	38800015 	stw	r2,0(r7)
 40151b0:	39c00104 	addi	r7,r7,4
 40151b4:	003ffa06 	br	40151a0 <rshift+0x90>
 40151b8:	39c00104 	addi	r7,r7,4
 40151bc:	003ff206 	br	4015188 <rshift+0x78>

040151c0 <__gethex>:
 40151c0:	defff104 	addi	sp,sp,-60
 40151c4:	df000d15 	stw	fp,52(sp)
 40151c8:	dcc00815 	stw	r19,32(sp)
 40151cc:	dfc00e15 	stw	ra,56(sp)
 40151d0:	ddc00c15 	stw	r23,48(sp)
 40151d4:	dd800b15 	stw	r22,44(sp)
 40151d8:	dd400a15 	stw	r21,40(sp)
 40151dc:	dd000915 	stw	r20,36(sp)
 40151e0:	dc800715 	stw	r18,28(sp)
 40151e4:	dc400615 	stw	r17,24(sp)
 40151e8:	dc000515 	stw	r16,20(sp)
 40151ec:	04c100f4 	movhi	r19,1027
 40151f0:	9ccaac04 	addi	r19,r19,10928
 40151f4:	98800c03 	ldbu	r2,48(r19)
 40151f8:	d9000115 	stw	r4,4(sp)
 40151fc:	2839883a 	mov	fp,r5
 4015200:	d9800215 	stw	r6,8(sp)
 4015204:	d9c00315 	stw	r7,12(sp)
 4015208:	10007526 	beq	r2,zero,40153e0 <__gethex+0x220>
 401520c:	e1800017 	ldw	r6,0(fp)
 4015210:	00800c04 	movi	r2,48
 4015214:	31000083 	ldbu	r4,2(r6)
 4015218:	30c00084 	addi	r3,r6,2
 401521c:	2080761e 	bne	r4,r2,40153f8 <__gethex+0x238>
 4015220:	200b883a 	mov	r5,r4
 4015224:	3007883a 	mov	r3,r6
 4015228:	188000c3 	ldbu	r2,3(r3)
 401522c:	18c00044 	addi	r3,r3,1
 4015230:	1009883a 	mov	r4,r2
 4015234:	117ffc26 	beq	r2,r5,4015228 <__gethex+0x68>
 4015238:	198fc83a 	sub	r7,r3,r6
 401523c:	19400084 	addi	r5,r3,2
 4015240:	24c5883a 	add	r2,r4,r19
 4015244:	10c00003 	ldbu	r3,0(r2)
 4015248:	18002e26 	beq	r3,zero,4015304 <__gethex+0x144>
 401524c:	29000003 	ldbu	r4,0(r5)
 4015250:	282b883a 	mov	r21,r5
 4015254:	000d883a 	mov	r6,zero
 4015258:	002d883a 	mov	r22,zero
 401525c:	21003fcc 	andi	r4,r4,255
 4015260:	24c5883a 	add	r2,r4,r19
 4015264:	10c00003 	ldbu	r3,0(r2)
 4015268:	18000526 	beq	r3,zero,4015280 <__gethex+0xc0>
 401526c:	29400044 	addi	r5,r5,1
 4015270:	29000003 	ldbu	r4,0(r5)
 4015274:	24c5883a 	add	r2,r4,r19
 4015278:	10c00003 	ldbu	r3,0(r2)
 401527c:	183ffb1e 	bne	r3,zero,401526c <__gethex+0xac>
 4015280:	00800b84 	movi	r2,46
 4015284:	20805f26 	beq	r4,r2,4015404 <__gethex+0x244>
 4015288:	30008226 	beq	r6,zero,4015494 <__gethex+0x2d4>
 401528c:	2985c83a 	sub	r2,r5,r6
 4015290:	1085883a 	add	r2,r2,r2
 4015294:	1085883a 	add	r2,r2,r2
 4015298:	0085c83a 	sub	r2,zero,r2
 401529c:	d8800015 	stw	r2,0(sp)
 40152a0:	2825883a 	mov	r18,r5
 40152a4:	90c00003 	ldbu	r3,0(r18)
 40152a8:	00801404 	movi	r2,80
 40152ac:	18801e26 	beq	r3,r2,4015328 <__gethex+0x168>
 40152b0:	00801c04 	movi	r2,112
 40152b4:	18801c26 	beq	r3,r2,4015328 <__gethex+0x168>
 40152b8:	9023883a 	mov	r17,r18
 40152bc:	b005003a 	cmpeq	r2,r22,zero
 40152c0:	e4400015 	stw	r17,0(fp)
 40152c4:	10008d1e 	bne	r2,zero,40154fc <__gethex+0x33c>
 40152c8:	38004326 	beq	r7,zero,40153d8 <__gethex+0x218>
 40152cc:	0025883a 	mov	r18,zero
 40152d0:	9005883a 	mov	r2,r18
 40152d4:	dfc00e17 	ldw	ra,56(sp)
 40152d8:	df000d17 	ldw	fp,52(sp)
 40152dc:	ddc00c17 	ldw	r23,48(sp)
 40152e0:	dd800b17 	ldw	r22,44(sp)
 40152e4:	dd400a17 	ldw	r21,40(sp)
 40152e8:	dd000917 	ldw	r20,36(sp)
 40152ec:	dcc00817 	ldw	r19,32(sp)
 40152f0:	dc800717 	ldw	r18,28(sp)
 40152f4:	dc400617 	ldw	r17,24(sp)
 40152f8:	dc000517 	ldw	r16,20(sp)
 40152fc:	dec00f04 	addi	sp,sp,60
 4015300:	f800283a 	ret
 4015304:	00800b84 	movi	r2,46
 4015308:	20805126 	beq	r4,r2,4015450 <__gethex+0x290>
 401530c:	2825883a 	mov	r18,r5
 4015310:	d8000015 	stw	zero,0(sp)
 4015314:	90c00003 	ldbu	r3,0(r18)
 4015318:	00801404 	movi	r2,80
 401531c:	282b883a 	mov	r21,r5
 4015320:	05800044 	movi	r22,1
 4015324:	18bfe21e 	bne	r3,r2,40152b0 <__gethex+0xf0>
 4015328:	90c00043 	ldbu	r3,1(r18)
 401532c:	00800ac4 	movi	r2,43
 4015330:	91400044 	addi	r5,r18,1
 4015334:	18805126 	beq	r3,r2,401547c <__gethex+0x2bc>
 4015338:	00800b44 	movi	r2,45
 401533c:	18805326 	beq	r3,r2,401548c <__gethex+0x2cc>
 4015340:	002f883a 	mov	r23,zero
 4015344:	1cc5883a 	add	r2,r3,r19
 4015348:	10800003 	ldbu	r2,0(r2)
 401534c:	103fda26 	beq	r2,zero,40152b8 <__gethex+0xf8>
 4015350:	01800644 	movi	r6,25
 4015354:	30bfd816 	blt	r6,r2,40152b8 <__gethex+0xf8>
 4015358:	28c00043 	ldbu	r3,1(r5)
 401535c:	113ffc04 	addi	r4,r2,-16
 4015360:	008100f4 	movhi	r2,1027
 4015364:	108aac04 	addi	r2,r2,10928
 4015368:	1887883a 	add	r3,r3,r2
 401536c:	18800003 	ldbu	r2,0(r3)
 4015370:	2c400044 	addi	r17,r5,1
 4015374:	10001126 	beq	r2,zero,40153bc <__gethex+0x1fc>
 4015378:	1021883a 	mov	r16,r2
 401537c:	30800f16 	blt	r6,r2,40153bc <__gethex+0x1fc>
 4015380:	3029883a 	mov	r20,r6
 4015384:	00000106 	br	401538c <__gethex+0x1cc>
 4015388:	a0800c16 	blt	r20,r2,40153bc <__gethex+0x1fc>
 401538c:	8c400044 	addi	r17,r17,1
 4015390:	01400284 	movi	r5,10
 4015394:	d9c00415 	stw	r7,16(sp)
 4015398:	4008ff80 	call	4008ff8 <__mulsi3>
 401539c:	88c00003 	ldbu	r3,0(r17)
 40153a0:	1405883a 	add	r2,r2,r16
 40153a4:	113ffc04 	addi	r4,r2,-16
 40153a8:	1cc7883a 	add	r3,r3,r19
 40153ac:	18800003 	ldbu	r2,0(r3)
 40153b0:	d9c00417 	ldw	r7,16(sp)
 40153b4:	1021883a 	mov	r16,r2
 40153b8:	103ff31e 	bne	r2,zero,4015388 <__gethex+0x1c8>
 40153bc:	b805003a 	cmpeq	r2,r23,zero
 40153c0:	1000011e 	bne	r2,zero,40153c8 <__gethex+0x208>
 40153c4:	0109c83a 	sub	r4,zero,r4
 40153c8:	d8800017 	ldw	r2,0(sp)
 40153cc:	1105883a 	add	r2,r2,r4
 40153d0:	d8800015 	stw	r2,0(sp)
 40153d4:	003fb906 	br	40152bc <__gethex+0xfc>
 40153d8:	04800184 	movi	r18,6
 40153dc:	003fbc06 	br	40152d0 <__gethex+0x110>
 40153e0:	40150a80 	call	40150a8 <__hexdig_init>
 40153e4:	e1800017 	ldw	r6,0(fp)
 40153e8:	00800c04 	movi	r2,48
 40153ec:	31000083 	ldbu	r4,2(r6)
 40153f0:	30c00084 	addi	r3,r6,2
 40153f4:	20bf8a26 	beq	r4,r2,4015220 <__gethex+0x60>
 40153f8:	180b883a 	mov	r5,r3
 40153fc:	000f883a 	mov	r7,zero
 4015400:	003f8f06 	br	4015240 <__gethex+0x80>
 4015404:	303fa11e 	bne	r6,zero,401528c <__gethex+0xcc>
 4015408:	29400044 	addi	r5,r5,1
 401540c:	28800003 	ldbu	r2,0(r5)
 4015410:	14c5883a 	add	r2,r2,r19
 4015414:	10c00003 	ldbu	r3,0(r2)
 4015418:	1800b526 	beq	r3,zero,40156f0 <__gethex+0x530>
 401541c:	2809883a 	mov	r4,r5
 4015420:	21000044 	addi	r4,r4,1
 4015424:	20800003 	ldbu	r2,0(r4)
 4015428:	14c5883a 	add	r2,r2,r19
 401542c:	10c00003 	ldbu	r3,0(r2)
 4015430:	183ffb1e 	bne	r3,zero,4015420 <__gethex+0x260>
 4015434:	2145c83a 	sub	r2,r4,r5
 4015438:	1085883a 	add	r2,r2,r2
 401543c:	1085883a 	add	r2,r2,r2
 4015440:	0085c83a 	sub	r2,zero,r2
 4015444:	200b883a 	mov	r5,r4
 4015448:	d8800015 	stw	r2,0(sp)
 401544c:	003f9406 	br	40152a0 <__gethex+0xe0>
 4015450:	29000043 	ldbu	r4,1(r5)
 4015454:	008100f4 	movhi	r2,1027
 4015458:	108aac04 	addi	r2,r2,10928
 401545c:	2c800044 	addi	r18,r5,1
 4015460:	2085883a 	add	r2,r4,r2
 4015464:	10c00003 	ldbu	r3,0(r2)
 4015468:	18000d1e 	bne	r3,zero,40154a0 <__gethex+0x2e0>
 401546c:	282b883a 	mov	r21,r5
 4015470:	05800044 	movi	r22,1
 4015474:	d8000015 	stw	zero,0(sp)
 4015478:	003f8a06 	br	40152a4 <__gethex+0xe4>
 401547c:	002f883a 	mov	r23,zero
 4015480:	29400044 	addi	r5,r5,1
 4015484:	28c00003 	ldbu	r3,0(r5)
 4015488:	003fae06 	br	4015344 <__gethex+0x184>
 401548c:	05c00044 	movi	r23,1
 4015490:	003ffb06 	br	4015480 <__gethex+0x2c0>
 4015494:	2825883a 	mov	r18,r5
 4015498:	d8000015 	stw	zero,0(sp)
 401549c:	003f8106 	br	40152a4 <__gethex+0xe4>
 40154a0:	00800c04 	movi	r2,48
 40154a4:	20800e1e 	bne	r4,r2,40154e0 <__gethex+0x320>
 40154a8:	2007883a 	mov	r3,r4
 40154ac:	900b883a 	mov	r5,r18
 40154b0:	29400044 	addi	r5,r5,1
 40154b4:	29000003 	ldbu	r4,0(r5)
 40154b8:	20803fcc 	andi	r2,r4,255
 40154bc:	10fffc26 	beq	r2,r3,40154b0 <__gethex+0x2f0>
 40154c0:	14c5883a 	add	r2,r2,r19
 40154c4:	10c00003 	ldbu	r3,0(r2)
 40154c8:	1800071e 	bne	r3,zero,40154e8 <__gethex+0x328>
 40154cc:	01c00044 	movi	r7,1
 40154d0:	900d883a 	mov	r6,r18
 40154d4:	282b883a 	mov	r21,r5
 40154d8:	382d883a 	mov	r22,r7
 40154dc:	003f5f06 	br	401525c <__gethex+0x9c>
 40154e0:	91000003 	ldbu	r4,0(r18)
 40154e4:	900b883a 	mov	r5,r18
 40154e8:	900d883a 	mov	r6,r18
 40154ec:	282b883a 	mov	r21,r5
 40154f0:	01c00044 	movi	r7,1
 40154f4:	002d883a 	mov	r22,zero
 40154f8:	003f5806 	br	401525c <__gethex+0x9c>
 40154fc:	9545c83a 	sub	r2,r18,r21
 4015500:	10bfffc4 	addi	r2,r2,-1
 4015504:	00c001c4 	movi	r3,7
 4015508:	1880770e 	bge	r3,r2,40156e8 <__gethex+0x528>
 401550c:	000b883a 	mov	r5,zero
 4015510:	1005d07a 	srai	r2,r2,1
 4015514:	29400044 	addi	r5,r5,1
 4015518:	18bffd16 	blt	r3,r2,4015510 <__gethex+0x350>
 401551c:	d9000117 	ldw	r4,4(sp)
 4015520:	40111b00 	call	40111b0 <_Balloc>
 4015524:	1029883a 	mov	r20,r2
 4015528:	15800504 	addi	r22,r2,20
 401552c:	ac80562e 	bgeu	r21,r18,4015688 <__gethex+0x4c8>
 4015530:	900b883a 	mov	r5,r18
 4015534:	b011883a 	mov	r8,r22
 4015538:	000f883a 	mov	r7,zero
 401553c:	0009883a 	mov	r4,zero
 4015540:	02400b84 	movi	r9,46
 4015544:	02800804 	movi	r10,32
 4015548:	297fffc4 	addi	r5,r5,-1
 401554c:	28c00003 	ldbu	r3,0(r5)
 4015550:	1a400826 	beq	r3,r9,4015574 <__gethex+0x3b4>
 4015554:	380d883a 	mov	r6,r7
 4015558:	3a802a26 	beq	r7,r10,4015604 <__gethex+0x444>
 401555c:	39c00104 	addi	r7,r7,4
 4015560:	1cc7883a 	add	r3,r3,r19
 4015564:	18800003 	ldbu	r2,0(r3)
 4015568:	108003cc 	andi	r2,r2,15
 401556c:	1184983a 	sll	r2,r2,r6
 4015570:	2088b03a 	or	r4,r4,r2
 4015574:	a97ff436 	bltu	r21,r5,4015548 <__gethex+0x388>
 4015578:	40800104 	addi	r2,r8,4
 401557c:	1585c83a 	sub	r2,r2,r22
 4015580:	1021d0ba 	srai	r16,r2,2
 4015584:	41000015 	stw	r4,0(r8)
 4015588:	a4000415 	stw	r16,16(r20)
 401558c:	4010c580 	call	4010c58 <__hi0bits>
 4015590:	d9000217 	ldw	r4,8(sp)
 4015594:	8006917a 	slli	r3,r16,5
 4015598:	24c00017 	ldw	r19,0(r4)
 401559c:	1885c83a 	sub	r2,r3,r2
 40155a0:	98801f16 	blt	r19,r2,4015620 <__gethex+0x460>
 40155a4:	14c00c16 	blt	r2,r19,40155d8 <__gethex+0x418>
 40155a8:	002b883a 	mov	r21,zero
 40155ac:	d9000217 	ldw	r4,8(sp)
 40155b0:	d8c00017 	ldw	r3,0(sp)
 40155b4:	20800217 	ldw	r2,8(r4)
 40155b8:	10c0360e 	bge	r2,r3,4015694 <__gethex+0x4d4>
 40155bc:	d9000117 	ldw	r4,4(sp)
 40155c0:	a00b883a 	mov	r5,r20
 40155c4:	048028c4 	movi	r18,163
 40155c8:	4010c300 	call	4010c30 <_Bfree>
 40155cc:	d9000f17 	ldw	r4,60(sp)
 40155d0:	20000015 	stw	zero,0(r4)
 40155d4:	003f3e06 	br	40152d0 <__gethex+0x110>
 40155d8:	d9000117 	ldw	r4,4(sp)
 40155dc:	98a1c83a 	sub	r16,r19,r2
 40155e0:	a00b883a 	mov	r5,r20
 40155e4:	800d883a 	mov	r6,r16
 40155e8:	40115740 	call	4011574 <__lshift>
 40155ec:	d8c00017 	ldw	r3,0(sp)
 40155f0:	1029883a 	mov	r20,r2
 40155f4:	15800504 	addi	r22,r2,20
 40155f8:	1c07c83a 	sub	r3,r3,r16
 40155fc:	d8c00015 	stw	r3,0(sp)
 4015600:	003fe906 	br	40155a8 <__gethex+0x3e8>
 4015604:	41000015 	stw	r4,0(r8)
 4015608:	28c00003 	ldbu	r3,0(r5)
 401560c:	01c00104 	movi	r7,4
 4015610:	000d883a 	mov	r6,zero
 4015614:	41d1883a 	add	r8,r8,r7
 4015618:	0009883a 	mov	r4,zero
 401561c:	003fd006 	br	4015560 <__gethex+0x3a0>
 4015620:	14e1c83a 	sub	r16,r2,r19
 4015624:	a009883a 	mov	r4,r20
 4015628:	800b883a 	mov	r5,r16
 401562c:	40111280 	call	4011128 <__any_on>
 4015630:	1000081e 	bne	r2,zero,4015654 <__gethex+0x494>
 4015634:	002b883a 	mov	r21,zero
 4015638:	a009883a 	mov	r4,r20
 401563c:	800b883a 	mov	r5,r16
 4015640:	40151100 	call	4015110 <rshift>
 4015644:	d8800017 	ldw	r2,0(sp)
 4015648:	1405883a 	add	r2,r2,r16
 401564c:	d8800015 	stw	r2,0(sp)
 4015650:	003fd606 	br	40155ac <__gethex+0x3ec>
 4015654:	817fffc4 	addi	r5,r16,-1
 4015658:	2805d17a 	srai	r2,r5,5
 401565c:	290007cc 	andi	r4,r5,31
 4015660:	01800044 	movi	r6,1
 4015664:	1085883a 	add	r2,r2,r2
 4015668:	1085883a 	add	r2,r2,r2
 401566c:	1585883a 	add	r2,r2,r22
 4015670:	3108983a 	sll	r4,r6,r4
 4015674:	10c00017 	ldw	r3,0(r2)
 4015678:	20c8703a 	and	r4,r4,r3
 401567c:	20001e1e 	bne	r4,zero,40156f8 <__gethex+0x538>
 4015680:	302b883a 	mov	r21,r6
 4015684:	003fec06 	br	4015638 <__gethex+0x478>
 4015688:	b011883a 	mov	r8,r22
 401568c:	0009883a 	mov	r4,zero
 4015690:	003fb906 	br	4015578 <__gethex+0x3b8>
 4015694:	d8800217 	ldw	r2,8(sp)
 4015698:	d8c00017 	ldw	r3,0(sp)
 401569c:	11000117 	ldw	r4,4(r2)
 40156a0:	19001c16 	blt	r3,r4,4015714 <__gethex+0x554>
 40156a4:	04800044 	movi	r18,1
 40156a8:	a8000926 	beq	r21,zero,40156d0 <__gethex+0x510>
 40156ac:	d8c00217 	ldw	r3,8(sp)
 40156b0:	00800084 	movi	r2,2
 40156b4:	19000317 	ldw	r4,12(r3)
 40156b8:	20809826 	beq	r4,r2,401591c <__gethex+0x75c>
 40156bc:	008000c4 	movi	r2,3
 40156c0:	20805b26 	beq	r4,r2,4015830 <__gethex+0x670>
 40156c4:	00800044 	movi	r2,1
 40156c8:	20804326 	beq	r4,r2,40157d8 <__gethex+0x618>
 40156cc:	94800414 	ori	r18,r18,16
 40156d0:	d9000f17 	ldw	r4,60(sp)
 40156d4:	d8800017 	ldw	r2,0(sp)
 40156d8:	d8c00317 	ldw	r3,12(sp)
 40156dc:	25000015 	stw	r20,0(r4)
 40156e0:	18800015 	stw	r2,0(r3)
 40156e4:	003efa06 	br	40152d0 <__gethex+0x110>
 40156e8:	000b883a 	mov	r5,zero
 40156ec:	003f8b06 	br	401551c <__gethex+0x35c>
 40156f0:	d8000015 	stw	zero,0(sp)
 40156f4:	003eea06 	br	40152a0 <__gethex+0xe0>
 40156f8:	3140180e 	bge	r6,r5,401575c <__gethex+0x59c>
 40156fc:	a009883a 	mov	r4,r20
 4015700:	817fff84 	addi	r5,r16,-2
 4015704:	40111280 	call	4011128 <__any_on>
 4015708:	10001426 	beq	r2,zero,401575c <__gethex+0x59c>
 401570c:	054000c4 	movi	r21,3
 4015710:	003fc906 	br	4015638 <__gethex+0x478>
 4015714:	d8800017 	ldw	r2,0(sp)
 4015718:	20a3c83a 	sub	r17,r4,r2
 401571c:	8cc01116 	blt	r17,r19,4015764 <__gethex+0x5a4>
 4015720:	d8800217 	ldw	r2,8(sp)
 4015724:	10c00317 	ldw	r3,12(r2)
 4015728:	00800084 	movi	r2,2
 401572c:	18809426 	beq	r3,r2,4015980 <__gethex+0x7c0>
 4015730:	008000c4 	movi	r2,3
 4015734:	18808f26 	beq	r3,r2,4015974 <__gethex+0x7b4>
 4015738:	00800044 	movi	r2,1
 401573c:	18807c26 	beq	r3,r2,4015930 <__gethex+0x770>
 4015740:	d9000117 	ldw	r4,4(sp)
 4015744:	a00b883a 	mov	r5,r20
 4015748:	04801404 	movi	r18,80
 401574c:	4010c300 	call	4010c30 <_Bfree>
 4015750:	d9000f17 	ldw	r4,60(sp)
 4015754:	20000015 	stw	zero,0(r4)
 4015758:	003edd06 	br	40152d0 <__gethex+0x110>
 401575c:	05400084 	movi	r21,2
 4015760:	003fb506 	br	4015638 <__gethex+0x478>
 4015764:	8c3fffc4 	addi	r16,r17,-1
 4015768:	a8001526 	beq	r21,zero,40157c0 <__gethex+0x600>
 401576c:	05400044 	movi	r21,1
 4015770:	8005d17a 	srai	r2,r16,5
 4015774:	814007cc 	andi	r5,r16,31
 4015778:	00c00044 	movi	r3,1
 401577c:	1085883a 	add	r2,r2,r2
 4015780:	1085883a 	add	r2,r2,r2
 4015784:	1585883a 	add	r2,r2,r22
 4015788:	1946983a 	sll	r3,r3,r5
 401578c:	11000017 	ldw	r4,0(r2)
 4015790:	1906703a 	and	r3,r3,r4
 4015794:	18000126 	beq	r3,zero,401579c <__gethex+0x5dc>
 4015798:	ad400094 	ori	r21,r21,2
 401579c:	880b883a 	mov	r5,r17
 40157a0:	a009883a 	mov	r4,r20
 40157a4:	40151100 	call	4015110 <rshift>
 40157a8:	d8800217 	ldw	r2,8(sp)
 40157ac:	9c67c83a 	sub	r19,r19,r17
 40157b0:	04800084 	movi	r18,2
 40157b4:	10800117 	ldw	r2,4(r2)
 40157b8:	d8800015 	stw	r2,0(sp)
 40157bc:	003fba06 	br	40156a8 <__gethex+0x4e8>
 40157c0:	043feb0e 	bge	zero,r16,4015770 <__gethex+0x5b0>
 40157c4:	a009883a 	mov	r4,r20
 40157c8:	800b883a 	mov	r5,r16
 40157cc:	40111280 	call	4011128 <__any_on>
 40157d0:	102b883a 	mov	r21,r2
 40157d4:	003fe606 	br	4015770 <__gethex+0x5b0>
 40157d8:	a880008c 	andi	r2,r21,2
 40157dc:	103fbb26 	beq	r2,zero,40156cc <__gethex+0x50c>
 40157e0:	b0800017 	ldw	r2,0(r22)
 40157e4:	a884b03a 	or	r2,r21,r2
 40157e8:	1104703a 	and	r2,r2,r4
 40157ec:	103fb726 	beq	r2,zero,40156cc <__gethex+0x50c>
 40157f0:	a4000417 	ldw	r16,16(r20)
 40157f4:	b007883a 	mov	r3,r22
 40157f8:	017fffc4 	movi	r5,-1
 40157fc:	8405883a 	add	r2,r16,r16
 4015800:	10ab883a 	add	r21,r2,r2
 4015804:	802f883a 	mov	r23,r16
 4015808:	b549883a 	add	r4,r22,r21
 401580c:	00000306 	br	401581c <__gethex+0x65c>
 4015810:	18000015 	stw	zero,0(r3)
 4015814:	18c00104 	addi	r3,r3,4
 4015818:	1900082e 	bgeu	r3,r4,401583c <__gethex+0x67c>
 401581c:	18800017 	ldw	r2,0(r3)
 4015820:	117ffb26 	beq	r2,r5,4015810 <__gethex+0x650>
 4015824:	10800044 	addi	r2,r2,1
 4015828:	18800015 	stw	r2,0(r3)
 401582c:	00001e06 	br	40158a8 <__gethex+0x6e8>
 4015830:	d8801017 	ldw	r2,64(sp)
 4015834:	103fa526 	beq	r2,zero,40156cc <__gethex+0x50c>
 4015838:	003fed06 	br	40157f0 <__gethex+0x630>
 401583c:	a0800217 	ldw	r2,8(r20)
 4015840:	80801216 	blt	r16,r2,401588c <__gethex+0x6cc>
 4015844:	a1400117 	ldw	r5,4(r20)
 4015848:	d9000117 	ldw	r4,4(sp)
 401584c:	29400044 	addi	r5,r5,1
 4015850:	40111b00 	call	40111b0 <_Balloc>
 4015854:	a1800417 	ldw	r6,16(r20)
 4015858:	a1400304 	addi	r5,r20,12
 401585c:	11000304 	addi	r4,r2,12
 4015860:	318d883a 	add	r6,r6,r6
 4015864:	318d883a 	add	r6,r6,r6
 4015868:	31800204 	addi	r6,r6,8
 401586c:	1023883a 	mov	r17,r2
 4015870:	4010a180 	call	4010a18 <memcpy>
 4015874:	d9000117 	ldw	r4,4(sp)
 4015878:	a00b883a 	mov	r5,r20
 401587c:	8d800504 	addi	r22,r17,20
 4015880:	4010c300 	call	4010c30 <_Bfree>
 4015884:	8c000417 	ldw	r16,16(r17)
 4015888:	8829883a 	mov	r20,r17
 401588c:	8405883a 	add	r2,r16,r16
 4015890:	1085883a 	add	r2,r2,r2
 4015894:	1505883a 	add	r2,r2,r20
 4015898:	84000044 	addi	r16,r16,1
 401589c:	00c00044 	movi	r3,1
 40158a0:	10c00515 	stw	r3,20(r2)
 40158a4:	a4000415 	stw	r16,16(r20)
 40158a8:	00800084 	movi	r2,2
 40158ac:	90801526 	beq	r18,r2,4015904 <__gethex+0x744>
 40158b0:	bc000a16 	blt	r23,r16,40158dc <__gethex+0x71c>
 40158b4:	9c0007cc 	andi	r16,r19,31
 40158b8:	8000021e 	bne	r16,zero,40158c4 <__gethex+0x704>
 40158bc:	94800814 	ori	r18,r18,32
 40158c0:	003f8306 	br	40156d0 <__gethex+0x510>
 40158c4:	b545883a 	add	r2,r22,r21
 40158c8:	113fff17 	ldw	r4,-4(r2)
 40158cc:	4010c580 	call	4010c58 <__hi0bits>
 40158d0:	00c00804 	movi	r3,32
 40158d4:	1c07c83a 	sub	r3,r3,r16
 40158d8:	10fff80e 	bge	r2,r3,40158bc <__gethex+0x6fc>
 40158dc:	a009883a 	mov	r4,r20
 40158e0:	01400044 	movi	r5,1
 40158e4:	40151100 	call	4015110 <rshift>
 40158e8:	d9000217 	ldw	r4,8(sp)
 40158ec:	d8c00017 	ldw	r3,0(sp)
 40158f0:	20800217 	ldw	r2,8(r4)
 40158f4:	18c00044 	addi	r3,r3,1
 40158f8:	d8c00015 	stw	r3,0(sp)
 40158fc:	10ff2f16 	blt	r2,r3,40155bc <__gethex+0x3fc>
 4015900:	003fee06 	br	40158bc <__gethex+0x6fc>
 4015904:	d8c00217 	ldw	r3,8(sp)
 4015908:	18800017 	ldw	r2,0(r3)
 401590c:	10bfffc4 	addi	r2,r2,-1
 4015910:	98801e26 	beq	r19,r2,401598c <__gethex+0x7cc>
 4015914:	04800884 	movi	r18,34
 4015918:	003f6d06 	br	40156d0 <__gethex+0x510>
 401591c:	d9001017 	ldw	r4,64(sp)
 4015920:	00800044 	movi	r2,1
 4015924:	1105c83a 	sub	r2,r2,r4
 4015928:	103f6826 	beq	r2,zero,40156cc <__gethex+0x50c>
 401592c:	003fb006 	br	40157f0 <__gethex+0x630>
 4015930:	9c7f831e 	bne	r19,r17,4015740 <__gethex+0x580>
 4015934:	1cc0060e 	bge	r3,r19,4015950 <__gethex+0x790>
 4015938:	98cbc83a 	sub	r5,r19,r3
 401593c:	a009883a 	mov	r4,r20
 4015940:	40111280 	call	4011128 <__any_on>
 4015944:	103f7e26 	beq	r2,zero,4015740 <__gethex+0x580>
 4015948:	d8c00217 	ldw	r3,8(sp)
 401594c:	19000117 	ldw	r4,4(r3)
 4015950:	d8800317 	ldw	r2,12(sp)
 4015954:	d8c00f17 	ldw	r3,60(sp)
 4015958:	04000044 	movi	r16,1
 401595c:	11000015 	stw	r4,0(r2)
 4015960:	04801884 	movi	r18,98
 4015964:	b4000015 	stw	r16,0(r22)
 4015968:	1d000015 	stw	r20,0(r3)
 401596c:	a4000415 	stw	r16,16(r20)
 4015970:	003e5706 	br	40152d0 <__gethex+0x110>
 4015974:	d8801017 	ldw	r2,64(sp)
 4015978:	103f7126 	beq	r2,zero,4015740 <__gethex+0x580>
 401597c:	003ff406 	br	4015950 <__gethex+0x790>
 4015980:	d8c01017 	ldw	r3,64(sp)
 4015984:	183ff226 	beq	r3,zero,4015950 <__gethex+0x790>
 4015988:	003f6d06 	br	4015740 <__gethex+0x580>
 401598c:	9805d17a 	srai	r2,r19,5
 4015990:	994007cc 	andi	r5,r19,31
 4015994:	00c00044 	movi	r3,1
 4015998:	1085883a 	add	r2,r2,r2
 401599c:	1085883a 	add	r2,r2,r2
 40159a0:	1585883a 	add	r2,r2,r22
 40159a4:	1946983a 	sll	r3,r3,r5
 40159a8:	11000017 	ldw	r4,0(r2)
 40159ac:	1906703a 	and	r3,r3,r4
 40159b0:	183fd826 	beq	r3,zero,4015914 <__gethex+0x754>
 40159b4:	04800844 	movi	r18,33
 40159b8:	003f4506 	br	40156d0 <__gethex+0x510>

040159bc <L_shift>:
 40159bc:	00800204 	movi	r2,8
 40159c0:	1185c83a 	sub	r2,r2,r6
 40159c4:	1085883a 	add	r2,r2,r2
 40159c8:	21c00017 	ldw	r7,0(r4)
 40159cc:	1093883a 	add	r9,r2,r2
 40159d0:	00800804 	movi	r2,32
 40159d4:	200d883a 	mov	r6,r4
 40159d8:	1251c83a 	sub	r8,r2,r9
 40159dc:	31800104 	addi	r6,r6,4
 40159e0:	3805883a 	mov	r2,r7
 40159e4:	31c00017 	ldw	r7,0(r6)
 40159e8:	3a08983a 	sll	r4,r7,r8
 40159ec:	3a46d83a 	srl	r3,r7,r9
 40159f0:	1104b03a 	or	r2,r2,r4
 40159f4:	180f883a 	mov	r7,r3
 40159f8:	30bfff15 	stw	r2,-4(r6)
 40159fc:	30c00015 	stw	r3,0(r6)
 4015a00:	317ff636 	bltu	r6,r5,40159dc <L_shift+0x20>
 4015a04:	f800283a 	ret

04015a08 <__hexnan>:
 4015a08:	defff404 	addi	sp,sp,-48
 4015a0c:	dd800815 	stw	r22,32(sp)
 4015a10:	058100f4 	movhi	r22,1027
 4015a14:	b58aac04 	addi	r22,r22,10928
 4015a18:	b0800c03 	ldbu	r2,48(r22)
 4015a1c:	dcc00515 	stw	r19,20(sp)
 4015a20:	dc000215 	stw	r16,8(sp)
 4015a24:	dfc00b15 	stw	ra,44(sp)
 4015a28:	df000a15 	stw	fp,40(sp)
 4015a2c:	ddc00915 	stw	r23,36(sp)
 4015a30:	dd400715 	stw	r21,28(sp)
 4015a34:	dd000615 	stw	r20,24(sp)
 4015a38:	dc800415 	stw	r18,16(sp)
 4015a3c:	dc400315 	stw	r17,12(sp)
 4015a40:	d9000115 	stw	r4,4(sp)
 4015a44:	2821883a 	mov	r16,r5
 4015a48:	3027883a 	mov	r19,r6
 4015a4c:	10007426 	beq	r2,zero,4015c20 <__hexnan+0x218>
 4015a50:	80c00017 	ldw	r3,0(r16)
 4015a54:	1805d17a 	srai	r2,r3,5
 4015a58:	18c007cc 	andi	r3,r3,31
 4015a5c:	1839003a 	cmpeq	fp,r3,zero
 4015a60:	1085883a 	add	r2,r2,r2
 4015a64:	1085883a 	add	r2,r2,r2
 4015a68:	d8c00015 	stw	r3,0(sp)
 4015a6c:	14c5883a 	add	r2,r2,r19
 4015a70:	e000011e 	bne	fp,zero,4015a78 <__hexnan+0x70>
 4015a74:	10800104 	addi	r2,r2,4
 4015a78:	d8c00117 	ldw	r3,4(sp)
 4015a7c:	153fff04 	addi	r20,r2,-4
 4015a80:	a021883a 	mov	r16,r20
 4015a84:	1c400017 	ldw	r17,0(r3)
 4015a88:	a02b883a 	mov	r21,r20
 4015a8c:	0025883a 	mov	r18,zero
 4015a90:	002f883a 	mov	r23,zero
 4015a94:	000d883a 	mov	r6,zero
 4015a98:	103fff15 	stw	zero,-4(r2)
 4015a9c:	8c400044 	addi	r17,r17,1
 4015aa0:	89000003 	ldbu	r4,0(r17)
 4015aa4:	20000e26 	beq	r4,zero,4015ae0 <__hexnan+0xd8>
 4015aa8:	2585883a 	add	r2,r4,r22
 4015aac:	10c00003 	ldbu	r3,0(r2)
 4015ab0:	18002e1e 	bne	r3,zero,4015b6c <__hexnan+0x164>
 4015ab4:	00800804 	movi	r2,32
 4015ab8:	11005536 	bltu	r2,r4,4015c10 <__hexnan+0x208>
 4015abc:	bcbff70e 	bge	r23,r18,4015a9c <__hexnan+0x94>
 4015ac0:	8540022e 	bgeu	r16,r21,4015acc <__hexnan+0xc4>
 4015ac4:	008001c4 	movi	r2,7
 4015ac8:	11803c0e 	bge	r2,r6,4015bbc <__hexnan+0x1b4>
 4015acc:	9c003536 	bltu	r19,r16,4015ba4 <__hexnan+0x19c>
 4015ad0:	8c400044 	addi	r17,r17,1
 4015ad4:	89000003 	ldbu	r4,0(r17)
 4015ad8:	01800204 	movi	r6,8
 4015adc:	203ff21e 	bne	r4,zero,4015aa8 <__hexnan+0xa0>
 4015ae0:	90004d26 	beq	r18,zero,4015c18 <__hexnan+0x210>
 4015ae4:	85404336 	bltu	r16,r21,4015bf4 <__hexnan+0x1ec>
 4015ae8:	9c00382e 	bgeu	r19,r16,4015bcc <__hexnan+0x1c4>
 4015aec:	9807883a 	mov	r3,r19
 4015af0:	80800017 	ldw	r2,0(r16)
 4015af4:	84000104 	addi	r16,r16,4
 4015af8:	18800015 	stw	r2,0(r3)
 4015afc:	18c00104 	addi	r3,r3,4
 4015b00:	a43ffb2e 	bgeu	r20,r16,4015af0 <__hexnan+0xe8>
 4015b04:	18000015 	stw	zero,0(r3)
 4015b08:	18c00104 	addi	r3,r3,4
 4015b0c:	a0fffd2e 	bgeu	r20,r3,4015b04 <__hexnan+0xfc>
 4015b10:	a0800017 	ldw	r2,0(r20)
 4015b14:	1000071e 	bne	r2,zero,4015b34 <__hexnan+0x12c>
 4015b18:	9d004326 	beq	r19,r20,4015c28 <__hexnan+0x220>
 4015b1c:	a007883a 	mov	r3,r20
 4015b20:	00000106 	br	4015b28 <__hexnan+0x120>
 4015b24:	98c04026 	beq	r19,r3,4015c28 <__hexnan+0x220>
 4015b28:	18ffff04 	addi	r3,r3,-4
 4015b2c:	18800017 	ldw	r2,0(r3)
 4015b30:	103ffc26 	beq	r2,zero,4015b24 <__hexnan+0x11c>
 4015b34:	00c00144 	movi	r3,5
 4015b38:	1805883a 	mov	r2,r3
 4015b3c:	dfc00b17 	ldw	ra,44(sp)
 4015b40:	df000a17 	ldw	fp,40(sp)
 4015b44:	ddc00917 	ldw	r23,36(sp)
 4015b48:	dd800817 	ldw	r22,32(sp)
 4015b4c:	dd400717 	ldw	r21,28(sp)
 4015b50:	dd000617 	ldw	r20,24(sp)
 4015b54:	dcc00517 	ldw	r19,20(sp)
 4015b58:	dc800417 	ldw	r18,16(sp)
 4015b5c:	dc400317 	ldw	r17,12(sp)
 4015b60:	dc000217 	ldw	r16,8(sp)
 4015b64:	dec00c04 	addi	sp,sp,48
 4015b68:	f800283a 	ret
 4015b6c:	31800044 	addi	r6,r6,1
 4015b70:	00800204 	movi	r2,8
 4015b74:	94800044 	addi	r18,r18,1
 4015b78:	1180040e 	bge	r2,r6,4015b8c <__hexnan+0x184>
 4015b7c:	9c3fc72e 	bgeu	r19,r16,4015a9c <__hexnan+0x94>
 4015b80:	843fff04 	addi	r16,r16,-4
 4015b84:	80000015 	stw	zero,0(r16)
 4015b88:	01800044 	movi	r6,1
 4015b8c:	80800017 	ldw	r2,0(r16)
 4015b90:	18c003cc 	andi	r3,r3,15
 4015b94:	1004913a 	slli	r2,r2,4
 4015b98:	10c4b03a 	or	r2,r2,r3
 4015b9c:	80800015 	stw	r2,0(r16)
 4015ba0:	003fbe06 	br	4015a9c <__hexnan+0x94>
 4015ba4:	843fff04 	addi	r16,r16,-4
 4015ba8:	802b883a 	mov	r21,r16
 4015bac:	902f883a 	mov	r23,r18
 4015bb0:	000d883a 	mov	r6,zero
 4015bb4:	80000015 	stw	zero,0(r16)
 4015bb8:	003fb806 	br	4015a9c <__hexnan+0x94>
 4015bbc:	8009883a 	mov	r4,r16
 4015bc0:	a80b883a 	mov	r5,r21
 4015bc4:	40159bc0 	call	40159bc <L_shift>
 4015bc8:	003fc006 	br	4015acc <__hexnan+0xc4>
 4015bcc:	e03fd01e 	bne	fp,zero,4015b10 <__hexnan+0x108>
 4015bd0:	d8c00017 	ldw	r3,0(sp)
 4015bd4:	00800804 	movi	r2,32
 4015bd8:	10c5c83a 	sub	r2,r2,r3
 4015bdc:	00ffffc4 	movi	r3,-1
 4015be0:	1886d83a 	srl	r3,r3,r2
 4015be4:	a0800017 	ldw	r2,0(r20)
 4015be8:	10c4703a 	and	r2,r2,r3
 4015bec:	a0800015 	stw	r2,0(r20)
 4015bf0:	003fc806 	br	4015b14 <__hexnan+0x10c>
 4015bf4:	008001c4 	movi	r2,7
 4015bf8:	11bfbb16 	blt	r2,r6,4015ae8 <__hexnan+0xe0>
 4015bfc:	a80b883a 	mov	r5,r21
 4015c00:	8009883a 	mov	r4,r16
 4015c04:	40159bc0 	call	40159bc <L_shift>
 4015c08:	9c3ff02e 	bgeu	r19,r16,4015bcc <__hexnan+0x1c4>
 4015c0c:	003fb706 	br	4015aec <__hexnan+0xe4>
 4015c10:	00800a44 	movi	r2,41
 4015c14:	20800826 	beq	r4,r2,4015c38 <__hexnan+0x230>
 4015c18:	00c00104 	movi	r3,4
 4015c1c:	003fc606 	br	4015b38 <__hexnan+0x130>
 4015c20:	40150a80 	call	40150a8 <__hexdig_init>
 4015c24:	003f8a06 	br	4015a50 <__hexnan+0x48>
 4015c28:	00800044 	movi	r2,1
 4015c2c:	00c00144 	movi	r3,5
 4015c30:	98800015 	stw	r2,0(r19)
 4015c34:	003fc006 	br	4015b38 <__hexnan+0x130>
 4015c38:	903ff726 	beq	r18,zero,4015c18 <__hexnan+0x210>
 4015c3c:	d8c00117 	ldw	r3,4(sp)
 4015c40:	88800044 	addi	r2,r17,1
 4015c44:	18800015 	stw	r2,0(r3)
 4015c48:	857fa72e 	bgeu	r16,r21,4015ae8 <__hexnan+0xe0>
 4015c4c:	003fe906 	br	4015bf4 <__hexnan+0x1ec>

04015c50 <_isatty_r>:
 4015c50:	defffd04 	addi	sp,sp,-12
 4015c54:	dc000015 	stw	r16,0(sp)
 4015c58:	040100b4 	movhi	r16,1026
 4015c5c:	841a9604 	addi	r16,r16,27224
 4015c60:	dc400115 	stw	r17,4(sp)
 4015c64:	80000015 	stw	zero,0(r16)
 4015c68:	2023883a 	mov	r17,r4
 4015c6c:	2809883a 	mov	r4,r5
 4015c70:	dfc00215 	stw	ra,8(sp)
 4015c74:	40172880 	call	4017288 <isatty>
 4015c78:	1007883a 	mov	r3,r2
 4015c7c:	00bfffc4 	movi	r2,-1
 4015c80:	18800626 	beq	r3,r2,4015c9c <_isatty_r+0x4c>
 4015c84:	1805883a 	mov	r2,r3
 4015c88:	dfc00217 	ldw	ra,8(sp)
 4015c8c:	dc400117 	ldw	r17,4(sp)
 4015c90:	dc000017 	ldw	r16,0(sp)
 4015c94:	dec00304 	addi	sp,sp,12
 4015c98:	f800283a 	ret
 4015c9c:	80800017 	ldw	r2,0(r16)
 4015ca0:	103ff826 	beq	r2,zero,4015c84 <_isatty_r+0x34>
 4015ca4:	88800015 	stw	r2,0(r17)
 4015ca8:	1805883a 	mov	r2,r3
 4015cac:	dfc00217 	ldw	ra,8(sp)
 4015cb0:	dc400117 	ldw	r17,4(sp)
 4015cb4:	dc000017 	ldw	r16,0(sp)
 4015cb8:	dec00304 	addi	sp,sp,12
 4015cbc:	f800283a 	ret

04015cc0 <_lseek_r>:
 4015cc0:	defffd04 	addi	sp,sp,-12
 4015cc4:	dc000015 	stw	r16,0(sp)
 4015cc8:	040100b4 	movhi	r16,1026
 4015ccc:	841a9604 	addi	r16,r16,27224
 4015cd0:	dc400115 	stw	r17,4(sp)
 4015cd4:	80000015 	stw	zero,0(r16)
 4015cd8:	2023883a 	mov	r17,r4
 4015cdc:	2809883a 	mov	r4,r5
 4015ce0:	300b883a 	mov	r5,r6
 4015ce4:	380d883a 	mov	r6,r7
 4015ce8:	dfc00215 	stw	ra,8(sp)
 4015cec:	40173ac0 	call	40173ac <lseek>
 4015cf0:	1007883a 	mov	r3,r2
 4015cf4:	00bfffc4 	movi	r2,-1
 4015cf8:	18800626 	beq	r3,r2,4015d14 <_lseek_r+0x54>
 4015cfc:	1805883a 	mov	r2,r3
 4015d00:	dfc00217 	ldw	ra,8(sp)
 4015d04:	dc400117 	ldw	r17,4(sp)
 4015d08:	dc000017 	ldw	r16,0(sp)
 4015d0c:	dec00304 	addi	sp,sp,12
 4015d10:	f800283a 	ret
 4015d14:	80800017 	ldw	r2,0(r16)
 4015d18:	103ff826 	beq	r2,zero,4015cfc <_lseek_r+0x3c>
 4015d1c:	88800015 	stw	r2,0(r17)
 4015d20:	1805883a 	mov	r2,r3
 4015d24:	dfc00217 	ldw	ra,8(sp)
 4015d28:	dc400117 	ldw	r17,4(sp)
 4015d2c:	dc000017 	ldw	r16,0(sp)
 4015d30:	dec00304 	addi	sp,sp,12
 4015d34:	f800283a 	ret

04015d38 <_read_r>:
 4015d38:	defffd04 	addi	sp,sp,-12
 4015d3c:	dc000015 	stw	r16,0(sp)
 4015d40:	040100b4 	movhi	r16,1026
 4015d44:	841a9604 	addi	r16,r16,27224
 4015d48:	dc400115 	stw	r17,4(sp)
 4015d4c:	80000015 	stw	zero,0(r16)
 4015d50:	2023883a 	mov	r17,r4
 4015d54:	2809883a 	mov	r4,r5
 4015d58:	300b883a 	mov	r5,r6
 4015d5c:	380d883a 	mov	r6,r7
 4015d60:	dfc00215 	stw	ra,8(sp)
 4015d64:	40175c80 	call	40175c8 <read>
 4015d68:	1007883a 	mov	r3,r2
 4015d6c:	00bfffc4 	movi	r2,-1
 4015d70:	18800626 	beq	r3,r2,4015d8c <_read_r+0x54>
 4015d74:	1805883a 	mov	r2,r3
 4015d78:	dfc00217 	ldw	ra,8(sp)
 4015d7c:	dc400117 	ldw	r17,4(sp)
 4015d80:	dc000017 	ldw	r16,0(sp)
 4015d84:	dec00304 	addi	sp,sp,12
 4015d88:	f800283a 	ret
 4015d8c:	80800017 	ldw	r2,0(r16)
 4015d90:	103ff826 	beq	r2,zero,4015d74 <_read_r+0x3c>
 4015d94:	88800015 	stw	r2,0(r17)
 4015d98:	1805883a 	mov	r2,r3
 4015d9c:	dfc00217 	ldw	ra,8(sp)
 4015da0:	dc400117 	ldw	r17,4(sp)
 4015da4:	dc000017 	ldw	r16,0(sp)
 4015da8:	dec00304 	addi	sp,sp,12
 4015dac:	f800283a 	ret

04015db0 <__fixunsdfsi>:
 4015db0:	defffb04 	addi	sp,sp,-20
 4015db4:	dc400115 	stw	r17,4(sp)
 4015db8:	dc000015 	stw	r16,0(sp)
 4015dbc:	04507834 	movhi	r17,16864
 4015dc0:	0021883a 	mov	r16,zero
 4015dc4:	800d883a 	mov	r6,r16
 4015dc8:	880f883a 	mov	r7,r17
 4015dcc:	dcc00315 	stw	r19,12(sp)
 4015dd0:	dc800215 	stw	r18,8(sp)
 4015dd4:	2827883a 	mov	r19,r5
 4015dd8:	2025883a 	mov	r18,r4
 4015ddc:	dfc00415 	stw	ra,16(sp)
 4015de0:	4008a980 	call	4008a98 <__gedf2>
 4015de4:	000d883a 	mov	r6,zero
 4015de8:	880f883a 	mov	r7,r17
 4015dec:	980b883a 	mov	r5,r19
 4015df0:	9009883a 	mov	r4,r18
 4015df4:	10000d16 	blt	r2,zero,4015e2c <__fixunsdfsi+0x7c>
 4015df8:	40083000 	call	4008300 <__subdf3>
 4015dfc:	180b883a 	mov	r5,r3
 4015e00:	1009883a 	mov	r4,r2
 4015e04:	4008d280 	call	4008d28 <__fixdfsi>
 4015e08:	00e00034 	movhi	r3,32768
 4015e0c:	10c5883a 	add	r2,r2,r3
 4015e10:	dfc00417 	ldw	ra,16(sp)
 4015e14:	dcc00317 	ldw	r19,12(sp)
 4015e18:	dc800217 	ldw	r18,8(sp)
 4015e1c:	dc400117 	ldw	r17,4(sp)
 4015e20:	dc000017 	ldw	r16,0(sp)
 4015e24:	dec00504 	addi	sp,sp,20
 4015e28:	f800283a 	ret
 4015e2c:	980b883a 	mov	r5,r19
 4015e30:	9009883a 	mov	r4,r18
 4015e34:	4008d280 	call	4008d28 <__fixdfsi>
 4015e38:	dfc00417 	ldw	ra,16(sp)
 4015e3c:	dcc00317 	ldw	r19,12(sp)
 4015e40:	dc800217 	ldw	r18,8(sp)
 4015e44:	dc400117 	ldw	r17,4(sp)
 4015e48:	dc000017 	ldw	r16,0(sp)
 4015e4c:	dec00504 	addi	sp,sp,20
 4015e50:	f800283a 	ret

04015e54 <__udivdi3>:
 4015e54:	defff104 	addi	sp,sp,-60
 4015e58:	0015883a 	mov	r10,zero
 4015e5c:	2005883a 	mov	r2,r4
 4015e60:	3011883a 	mov	r8,r6
 4015e64:	df000d15 	stw	fp,52(sp)
 4015e68:	dd400a15 	stw	r21,40(sp)
 4015e6c:	dcc00815 	stw	r19,32(sp)
 4015e70:	dfc00e15 	stw	ra,56(sp)
 4015e74:	ddc00c15 	stw	r23,48(sp)
 4015e78:	dd800b15 	stw	r22,44(sp)
 4015e7c:	dd000915 	stw	r20,36(sp)
 4015e80:	dc800715 	stw	r18,28(sp)
 4015e84:	dc400615 	stw	r17,24(sp)
 4015e88:	dc000515 	stw	r16,20(sp)
 4015e8c:	da800315 	stw	r10,12(sp)
 4015e90:	4027883a 	mov	r19,r8
 4015e94:	1039883a 	mov	fp,r2
 4015e98:	282b883a 	mov	r21,r5
 4015e9c:	da800415 	stw	r10,16(sp)
 4015ea0:	3800401e 	bne	r7,zero,4015fa4 <__udivdi3+0x150>
 4015ea4:	2a006536 	bltu	r5,r8,401603c <__udivdi3+0x1e8>
 4015ea8:	4000b526 	beq	r8,zero,4016180 <__udivdi3+0x32c>
 4015eac:	00bfffd4 	movui	r2,65535
 4015eb0:	14c0ad36 	bltu	r2,r19,4016168 <__udivdi3+0x314>
 4015eb4:	00803fc4 	movi	r2,255
 4015eb8:	14c15e36 	bltu	r2,r19,4016434 <__udivdi3+0x5e0>
 4015ebc:	000b883a 	mov	r5,zero
 4015ec0:	0005883a 	mov	r2,zero
 4015ec4:	9884d83a 	srl	r2,r19,r2
 4015ec8:	010100b4 	movhi	r4,1026
 4015ecc:	21112e04 	addi	r4,r4,17592
 4015ed0:	01800804 	movi	r6,32
 4015ed4:	1105883a 	add	r2,r2,r4
 4015ed8:	10c00003 	ldbu	r3,0(r2)
 4015edc:	28c7883a 	add	r3,r5,r3
 4015ee0:	30e9c83a 	sub	r20,r6,r3
 4015ee4:	a0010a1e 	bne	r20,zero,4016310 <__udivdi3+0x4bc>
 4015ee8:	982ed43a 	srli	r23,r19,16
 4015eec:	acebc83a 	sub	r21,r21,r19
 4015ef0:	9dbfffcc 	andi	r22,r19,65535
 4015ef4:	05000044 	movi	r20,1
 4015ef8:	a809883a 	mov	r4,r21
 4015efc:	b80b883a 	mov	r5,r23
 4015f00:	4008fe80 	call	4008fe8 <__udivsi3>
 4015f04:	100b883a 	mov	r5,r2
 4015f08:	b009883a 	mov	r4,r22
 4015f0c:	1021883a 	mov	r16,r2
 4015f10:	4008ff80 	call	4008ff8 <__mulsi3>
 4015f14:	a809883a 	mov	r4,r21
 4015f18:	b80b883a 	mov	r5,r23
 4015f1c:	1023883a 	mov	r17,r2
 4015f20:	4008ff00 	call	4008ff0 <__umodsi3>
 4015f24:	1004943a 	slli	r2,r2,16
 4015f28:	e006d43a 	srli	r3,fp,16
 4015f2c:	10c4b03a 	or	r2,r2,r3
 4015f30:	1440042e 	bgeu	r2,r17,4015f44 <__udivdi3+0xf0>
 4015f34:	14c5883a 	add	r2,r2,r19
 4015f38:	843fffc4 	addi	r16,r16,-1
 4015f3c:	14c00136 	bltu	r2,r19,4015f44 <__udivdi3+0xf0>
 4015f40:	14415c36 	bltu	r2,r17,40164b4 <__udivdi3+0x660>
 4015f44:	1463c83a 	sub	r17,r2,r17
 4015f48:	8809883a 	mov	r4,r17
 4015f4c:	b80b883a 	mov	r5,r23
 4015f50:	4008fe80 	call	4008fe8 <__udivsi3>
 4015f54:	100b883a 	mov	r5,r2
 4015f58:	b009883a 	mov	r4,r22
 4015f5c:	102b883a 	mov	r21,r2
 4015f60:	4008ff80 	call	4008ff8 <__mulsi3>
 4015f64:	8809883a 	mov	r4,r17
 4015f68:	b80b883a 	mov	r5,r23
 4015f6c:	1025883a 	mov	r18,r2
 4015f70:	4008ff00 	call	4008ff0 <__umodsi3>
 4015f74:	1004943a 	slli	r2,r2,16
 4015f78:	e0ffffcc 	andi	r3,fp,65535
 4015f7c:	10c4b03a 	or	r2,r2,r3
 4015f80:	1480042e 	bgeu	r2,r18,4015f94 <__udivdi3+0x140>
 4015f84:	9885883a 	add	r2,r19,r2
 4015f88:	ad7fffc4 	addi	r21,r21,-1
 4015f8c:	14c00136 	bltu	r2,r19,4015f94 <__udivdi3+0x140>
 4015f90:	14813c36 	bltu	r2,r18,4016484 <__udivdi3+0x630>
 4015f94:	8004943a 	slli	r2,r16,16
 4015f98:	a009883a 	mov	r4,r20
 4015f9c:	a884b03a 	or	r2,r21,r2
 4015fa0:	00001506 	br	4015ff8 <__udivdi3+0x1a4>
 4015fa4:	380d883a 	mov	r6,r7
 4015fa8:	29c06c36 	bltu	r5,r7,401615c <__udivdi3+0x308>
 4015fac:	00bfffd4 	movui	r2,65535
 4015fb0:	11c06436 	bltu	r2,r7,4016144 <__udivdi3+0x2f0>
 4015fb4:	00803fc4 	movi	r2,255
 4015fb8:	11c11836 	bltu	r2,r7,401641c <__udivdi3+0x5c8>
 4015fbc:	000b883a 	mov	r5,zero
 4015fc0:	0005883a 	mov	r2,zero
 4015fc4:	3084d83a 	srl	r2,r6,r2
 4015fc8:	010100b4 	movhi	r4,1026
 4015fcc:	21112e04 	addi	r4,r4,17592
 4015fd0:	01c00804 	movi	r7,32
 4015fd4:	1105883a 	add	r2,r2,r4
 4015fd8:	10c00003 	ldbu	r3,0(r2)
 4015fdc:	28c7883a 	add	r3,r5,r3
 4015fe0:	38edc83a 	sub	r22,r7,r3
 4015fe4:	b000731e 	bne	r22,zero,40161b4 <__udivdi3+0x360>
 4015fe8:	35400136 	bltu	r6,r21,4015ff0 <__udivdi3+0x19c>
 4015fec:	e4c05b36 	bltu	fp,r19,401615c <__udivdi3+0x308>
 4015ff0:	00800044 	movi	r2,1
 4015ff4:	0009883a 	mov	r4,zero
 4015ff8:	d8800315 	stw	r2,12(sp)
 4015ffc:	d9400317 	ldw	r5,12(sp)
 4016000:	2007883a 	mov	r3,r4
 4016004:	d9000415 	stw	r4,16(sp)
 4016008:	2805883a 	mov	r2,r5
 401600c:	dfc00e17 	ldw	ra,56(sp)
 4016010:	df000d17 	ldw	fp,52(sp)
 4016014:	ddc00c17 	ldw	r23,48(sp)
 4016018:	dd800b17 	ldw	r22,44(sp)
 401601c:	dd400a17 	ldw	r21,40(sp)
 4016020:	dd000917 	ldw	r20,36(sp)
 4016024:	dcc00817 	ldw	r19,32(sp)
 4016028:	dc800717 	ldw	r18,28(sp)
 401602c:	dc400617 	ldw	r17,24(sp)
 4016030:	dc000517 	ldw	r16,20(sp)
 4016034:	dec00f04 	addi	sp,sp,60
 4016038:	f800283a 	ret
 401603c:	00bfffd4 	movui	r2,65535
 4016040:	12005636 	bltu	r2,r8,401619c <__udivdi3+0x348>
 4016044:	00803fc4 	movi	r2,255
 4016048:	12010036 	bltu	r2,r8,401644c <__udivdi3+0x5f8>
 401604c:	000b883a 	mov	r5,zero
 4016050:	0005883a 	mov	r2,zero
 4016054:	9884d83a 	srl	r2,r19,r2
 4016058:	010100b4 	movhi	r4,1026
 401605c:	21112e04 	addi	r4,r4,17592
 4016060:	01800804 	movi	r6,32
 4016064:	1105883a 	add	r2,r2,r4
 4016068:	10c00003 	ldbu	r3,0(r2)
 401606c:	28c7883a 	add	r3,r5,r3
 4016070:	30cbc83a 	sub	r5,r6,r3
 4016074:	28000626 	beq	r5,zero,4016090 <__udivdi3+0x23c>
 4016078:	3145c83a 	sub	r2,r6,r5
 401607c:	e084d83a 	srl	r2,fp,r2
 4016080:	a946983a 	sll	r3,r21,r5
 4016084:	e178983a 	sll	fp,fp,r5
 4016088:	9966983a 	sll	r19,r19,r5
 401608c:	18aab03a 	or	r21,r3,r2
 4016090:	982ed43a 	srli	r23,r19,16
 4016094:	a809883a 	mov	r4,r21
 4016098:	9cbfffcc 	andi	r18,r19,65535
 401609c:	b80b883a 	mov	r5,r23
 40160a0:	4008fe80 	call	4008fe8 <__udivsi3>
 40160a4:	100b883a 	mov	r5,r2
 40160a8:	9009883a 	mov	r4,r18
 40160ac:	1021883a 	mov	r16,r2
 40160b0:	4008ff80 	call	4008ff8 <__mulsi3>
 40160b4:	a809883a 	mov	r4,r21
 40160b8:	b80b883a 	mov	r5,r23
 40160bc:	1023883a 	mov	r17,r2
 40160c0:	4008ff00 	call	4008ff0 <__umodsi3>
 40160c4:	1004943a 	slli	r2,r2,16
 40160c8:	e006d43a 	srli	r3,fp,16
 40160cc:	10c4b03a 	or	r2,r2,r3
 40160d0:	1440042e 	bgeu	r2,r17,40160e4 <__udivdi3+0x290>
 40160d4:	14c5883a 	add	r2,r2,r19
 40160d8:	843fffc4 	addi	r16,r16,-1
 40160dc:	14c00136 	bltu	r2,r19,40160e4 <__udivdi3+0x290>
 40160e0:	1440ea36 	bltu	r2,r17,401648c <__udivdi3+0x638>
 40160e4:	1463c83a 	sub	r17,r2,r17
 40160e8:	8809883a 	mov	r4,r17
 40160ec:	b80b883a 	mov	r5,r23
 40160f0:	4008fe80 	call	4008fe8 <__udivsi3>
 40160f4:	100b883a 	mov	r5,r2
 40160f8:	9009883a 	mov	r4,r18
 40160fc:	102b883a 	mov	r21,r2
 4016100:	4008ff80 	call	4008ff8 <__mulsi3>
 4016104:	8809883a 	mov	r4,r17
 4016108:	b80b883a 	mov	r5,r23
 401610c:	1025883a 	mov	r18,r2
 4016110:	4008ff00 	call	4008ff0 <__umodsi3>
 4016114:	1004943a 	slli	r2,r2,16
 4016118:	e0ffffcc 	andi	r3,fp,65535
 401611c:	10c4b03a 	or	r2,r2,r3
 4016120:	1480042e 	bgeu	r2,r18,4016134 <__udivdi3+0x2e0>
 4016124:	9885883a 	add	r2,r19,r2
 4016128:	ad7fffc4 	addi	r21,r21,-1
 401612c:	14c00136 	bltu	r2,r19,4016134 <__udivdi3+0x2e0>
 4016130:	1480d936 	bltu	r2,r18,4016498 <__udivdi3+0x644>
 4016134:	8004943a 	slli	r2,r16,16
 4016138:	0009883a 	mov	r4,zero
 401613c:	a884b03a 	or	r2,r21,r2
 4016140:	003fad06 	br	4015ff8 <__udivdi3+0x1a4>
 4016144:	00804034 	movhi	r2,256
 4016148:	10bfffc4 	addi	r2,r2,-1
 401614c:	11c0b636 	bltu	r2,r7,4016428 <__udivdi3+0x5d4>
 4016150:	01400404 	movi	r5,16
 4016154:	2805883a 	mov	r2,r5
 4016158:	003f9a06 	br	4015fc4 <__udivdi3+0x170>
 401615c:	0005883a 	mov	r2,zero
 4016160:	0009883a 	mov	r4,zero
 4016164:	003fa406 	br	4015ff8 <__udivdi3+0x1a4>
 4016168:	00804034 	movhi	r2,256
 401616c:	10bfffc4 	addi	r2,r2,-1
 4016170:	14c0b336 	bltu	r2,r19,4016440 <__udivdi3+0x5ec>
 4016174:	01400404 	movi	r5,16
 4016178:	2805883a 	mov	r2,r5
 401617c:	003f5106 	br	4015ec4 <__udivdi3+0x70>
 4016180:	01000044 	movi	r4,1
 4016184:	000b883a 	mov	r5,zero
 4016188:	4008fe80 	call	4008fe8 <__udivsi3>
 401618c:	1027883a 	mov	r19,r2
 4016190:	00bfffd4 	movui	r2,65535
 4016194:	14fff436 	bltu	r2,r19,4016168 <__udivdi3+0x314>
 4016198:	003f4606 	br	4015eb4 <__udivdi3+0x60>
 401619c:	00804034 	movhi	r2,256
 40161a0:	10bfffc4 	addi	r2,r2,-1
 40161a4:	1200ac36 	bltu	r2,r8,4016458 <__udivdi3+0x604>
 40161a8:	01400404 	movi	r5,16
 40161ac:	2805883a 	mov	r2,r5
 40161b0:	003fa806 	br	4016054 <__udivdi3+0x200>
 40161b4:	3d85c83a 	sub	r2,r7,r22
 40161b8:	3588983a 	sll	r4,r6,r22
 40161bc:	9886d83a 	srl	r3,r19,r2
 40161c0:	a8a2d83a 	srl	r17,r21,r2
 40161c4:	e084d83a 	srl	r2,fp,r2
 40161c8:	20eeb03a 	or	r23,r4,r3
 40161cc:	b824d43a 	srli	r18,r23,16
 40161d0:	ad86983a 	sll	r3,r21,r22
 40161d4:	8809883a 	mov	r4,r17
 40161d8:	900b883a 	mov	r5,r18
 40161dc:	1886b03a 	or	r3,r3,r2
 40161e0:	d8c00115 	stw	r3,4(sp)
 40161e4:	bc3fffcc 	andi	r16,r23,65535
 40161e8:	4008fe80 	call	4008fe8 <__udivsi3>
 40161ec:	100b883a 	mov	r5,r2
 40161f0:	8009883a 	mov	r4,r16
 40161f4:	1029883a 	mov	r20,r2
 40161f8:	4008ff80 	call	4008ff8 <__mulsi3>
 40161fc:	900b883a 	mov	r5,r18
 4016200:	8809883a 	mov	r4,r17
 4016204:	102b883a 	mov	r21,r2
 4016208:	4008ff00 	call	4008ff0 <__umodsi3>
 401620c:	d9400117 	ldw	r5,4(sp)
 4016210:	1004943a 	slli	r2,r2,16
 4016214:	9da6983a 	sll	r19,r19,r22
 4016218:	2806d43a 	srli	r3,r5,16
 401621c:	10c4b03a 	or	r2,r2,r3
 4016220:	1540032e 	bgeu	r2,r21,4016230 <__udivdi3+0x3dc>
 4016224:	15c5883a 	add	r2,r2,r23
 4016228:	a53fffc4 	addi	r20,r20,-1
 401622c:	15c0912e 	bgeu	r2,r23,4016474 <__udivdi3+0x620>
 4016230:	1563c83a 	sub	r17,r2,r21
 4016234:	8809883a 	mov	r4,r17
 4016238:	900b883a 	mov	r5,r18
 401623c:	4008fe80 	call	4008fe8 <__udivsi3>
 4016240:	100b883a 	mov	r5,r2
 4016244:	8009883a 	mov	r4,r16
 4016248:	102b883a 	mov	r21,r2
 401624c:	4008ff80 	call	4008ff8 <__mulsi3>
 4016250:	8809883a 	mov	r4,r17
 4016254:	900b883a 	mov	r5,r18
 4016258:	1021883a 	mov	r16,r2
 401625c:	4008ff00 	call	4008ff0 <__umodsi3>
 4016260:	da800117 	ldw	r10,4(sp)
 4016264:	1004943a 	slli	r2,r2,16
 4016268:	50ffffcc 	andi	r3,r10,65535
 401626c:	10c6b03a 	or	r3,r2,r3
 4016270:	1c00032e 	bgeu	r3,r16,4016280 <__udivdi3+0x42c>
 4016274:	1dc7883a 	add	r3,r3,r23
 4016278:	ad7fffc4 	addi	r21,r21,-1
 401627c:	1dc0792e 	bgeu	r3,r23,4016464 <__udivdi3+0x610>
 4016280:	a004943a 	slli	r2,r20,16
 4016284:	982ed43a 	srli	r23,r19,16
 4016288:	9cffffcc 	andi	r19,r19,65535
 401628c:	a8a4b03a 	or	r18,r21,r2
 4016290:	947fffcc 	andi	r17,r18,65535
 4016294:	902ad43a 	srli	r21,r18,16
 4016298:	8809883a 	mov	r4,r17
 401629c:	980b883a 	mov	r5,r19
 40162a0:	1c21c83a 	sub	r16,r3,r16
 40162a4:	4008ff80 	call	4008ff8 <__mulsi3>
 40162a8:	8809883a 	mov	r4,r17
 40162ac:	b80b883a 	mov	r5,r23
 40162b0:	1029883a 	mov	r20,r2
 40162b4:	4008ff80 	call	4008ff8 <__mulsi3>
 40162b8:	980b883a 	mov	r5,r19
 40162bc:	a809883a 	mov	r4,r21
 40162c0:	1023883a 	mov	r17,r2
 40162c4:	4008ff80 	call	4008ff8 <__mulsi3>
 40162c8:	a809883a 	mov	r4,r21
 40162cc:	b80b883a 	mov	r5,r23
 40162d0:	1027883a 	mov	r19,r2
 40162d4:	4008ff80 	call	4008ff8 <__mulsi3>
 40162d8:	1009883a 	mov	r4,r2
 40162dc:	a004d43a 	srli	r2,r20,16
 40162e0:	8ce3883a 	add	r17,r17,r19
 40162e4:	1447883a 	add	r3,r2,r17
 40162e8:	1cc0022e 	bgeu	r3,r19,40162f4 <__udivdi3+0x4a0>
 40162ec:	00800074 	movhi	r2,1
 40162f0:	2089883a 	add	r4,r4,r2
 40162f4:	1804d43a 	srli	r2,r3,16
 40162f8:	2085883a 	add	r2,r4,r2
 40162fc:	80804436 	bltu	r16,r2,4016410 <__udivdi3+0x5bc>
 4016300:	80803e26 	beq	r16,r2,40163fc <__udivdi3+0x5a8>
 4016304:	9005883a 	mov	r2,r18
 4016308:	0009883a 	mov	r4,zero
 401630c:	003f3a06 	br	4015ff8 <__udivdi3+0x1a4>
 4016310:	9d26983a 	sll	r19,r19,r20
 4016314:	3505c83a 	sub	r2,r6,r20
 4016318:	a8a2d83a 	srl	r17,r21,r2
 401631c:	982ed43a 	srli	r23,r19,16
 4016320:	e084d83a 	srl	r2,fp,r2
 4016324:	ad06983a 	sll	r3,r21,r20
 4016328:	8809883a 	mov	r4,r17
 401632c:	b80b883a 	mov	r5,r23
 4016330:	1886b03a 	or	r3,r3,r2
 4016334:	d8c00015 	stw	r3,0(sp)
 4016338:	9dbfffcc 	andi	r22,r19,65535
 401633c:	4008fe80 	call	4008fe8 <__udivsi3>
 4016340:	100b883a 	mov	r5,r2
 4016344:	b009883a 	mov	r4,r22
 4016348:	d8800215 	stw	r2,8(sp)
 401634c:	4008ff80 	call	4008ff8 <__mulsi3>
 4016350:	8809883a 	mov	r4,r17
 4016354:	b80b883a 	mov	r5,r23
 4016358:	102b883a 	mov	r21,r2
 401635c:	4008ff00 	call	4008ff0 <__umodsi3>
 4016360:	d9000017 	ldw	r4,0(sp)
 4016364:	1004943a 	slli	r2,r2,16
 4016368:	2006d43a 	srli	r3,r4,16
 401636c:	10c4b03a 	or	r2,r2,r3
 4016370:	1540052e 	bgeu	r2,r21,4016388 <__udivdi3+0x534>
 4016374:	d9400217 	ldw	r5,8(sp)
 4016378:	14c5883a 	add	r2,r2,r19
 401637c:	297fffc4 	addi	r5,r5,-1
 4016380:	d9400215 	stw	r5,8(sp)
 4016384:	14c0462e 	bgeu	r2,r19,40164a0 <__udivdi3+0x64c>
 4016388:	1563c83a 	sub	r17,r2,r21
 401638c:	8809883a 	mov	r4,r17
 4016390:	b80b883a 	mov	r5,r23
 4016394:	4008fe80 	call	4008fe8 <__udivsi3>
 4016398:	100b883a 	mov	r5,r2
 401639c:	b009883a 	mov	r4,r22
 40163a0:	1025883a 	mov	r18,r2
 40163a4:	4008ff80 	call	4008ff8 <__mulsi3>
 40163a8:	8809883a 	mov	r4,r17
 40163ac:	b80b883a 	mov	r5,r23
 40163b0:	1021883a 	mov	r16,r2
 40163b4:	4008ff00 	call	4008ff0 <__umodsi3>
 40163b8:	da800017 	ldw	r10,0(sp)
 40163bc:	1004943a 	slli	r2,r2,16
 40163c0:	50ffffcc 	andi	r3,r10,65535
 40163c4:	10c6b03a 	or	r3,r2,r3
 40163c8:	1c00062e 	bgeu	r3,r16,40163e4 <__udivdi3+0x590>
 40163cc:	1cc7883a 	add	r3,r3,r19
 40163d0:	94bfffc4 	addi	r18,r18,-1
 40163d4:	1cc00336 	bltu	r3,r19,40163e4 <__udivdi3+0x590>
 40163d8:	1c00022e 	bgeu	r3,r16,40163e4 <__udivdi3+0x590>
 40163dc:	94bfffc4 	addi	r18,r18,-1
 40163e0:	1cc7883a 	add	r3,r3,r19
 40163e4:	d9000217 	ldw	r4,8(sp)
 40163e8:	e538983a 	sll	fp,fp,r20
 40163ec:	1c2bc83a 	sub	r21,r3,r16
 40163f0:	2004943a 	slli	r2,r4,16
 40163f4:	90a8b03a 	or	r20,r18,r2
 40163f8:	003ebf06 	br	4015ef8 <__udivdi3+0xa4>
 40163fc:	1804943a 	slli	r2,r3,16
 4016400:	e588983a 	sll	r4,fp,r22
 4016404:	a0ffffcc 	andi	r3,r20,65535
 4016408:	10c5883a 	add	r2,r2,r3
 401640c:	20bfbd2e 	bgeu	r4,r2,4016304 <__udivdi3+0x4b0>
 4016410:	90bfffc4 	addi	r2,r18,-1
 4016414:	0009883a 	mov	r4,zero
 4016418:	003ef706 	br	4015ff8 <__udivdi3+0x1a4>
 401641c:	01400204 	movi	r5,8
 4016420:	2805883a 	mov	r2,r5
 4016424:	003ee706 	br	4015fc4 <__udivdi3+0x170>
 4016428:	01400604 	movi	r5,24
 401642c:	2805883a 	mov	r2,r5
 4016430:	003ee406 	br	4015fc4 <__udivdi3+0x170>
 4016434:	01400204 	movi	r5,8
 4016438:	2805883a 	mov	r2,r5
 401643c:	003ea106 	br	4015ec4 <__udivdi3+0x70>
 4016440:	01400604 	movi	r5,24
 4016444:	2805883a 	mov	r2,r5
 4016448:	003e9e06 	br	4015ec4 <__udivdi3+0x70>
 401644c:	01400204 	movi	r5,8
 4016450:	2805883a 	mov	r2,r5
 4016454:	003eff06 	br	4016054 <__udivdi3+0x200>
 4016458:	01400604 	movi	r5,24
 401645c:	2805883a 	mov	r2,r5
 4016460:	003efc06 	br	4016054 <__udivdi3+0x200>
 4016464:	1c3f862e 	bgeu	r3,r16,4016280 <__udivdi3+0x42c>
 4016468:	1dc7883a 	add	r3,r3,r23
 401646c:	ad7fffc4 	addi	r21,r21,-1
 4016470:	003f8306 	br	4016280 <__udivdi3+0x42c>
 4016474:	157f6e2e 	bgeu	r2,r21,4016230 <__udivdi3+0x3dc>
 4016478:	a53fffc4 	addi	r20,r20,-1
 401647c:	15c5883a 	add	r2,r2,r23
 4016480:	003f6b06 	br	4016230 <__udivdi3+0x3dc>
 4016484:	ad7fffc4 	addi	r21,r21,-1
 4016488:	003ec206 	br	4015f94 <__udivdi3+0x140>
 401648c:	843fffc4 	addi	r16,r16,-1
 4016490:	14c5883a 	add	r2,r2,r19
 4016494:	003f1306 	br	40160e4 <__udivdi3+0x290>
 4016498:	ad7fffc4 	addi	r21,r21,-1
 401649c:	003f2506 	br	4016134 <__udivdi3+0x2e0>
 40164a0:	157fb92e 	bgeu	r2,r21,4016388 <__udivdi3+0x534>
 40164a4:	297fffc4 	addi	r5,r5,-1
 40164a8:	14c5883a 	add	r2,r2,r19
 40164ac:	d9400215 	stw	r5,8(sp)
 40164b0:	003fb506 	br	4016388 <__udivdi3+0x534>
 40164b4:	843fffc4 	addi	r16,r16,-1
 40164b8:	14c5883a 	add	r2,r2,r19
 40164bc:	003ea106 	br	4015f44 <__udivdi3+0xf0>

040164c0 <__umoddi3>:
 40164c0:	defff004 	addi	sp,sp,-64
 40164c4:	3011883a 	mov	r8,r6
 40164c8:	000d883a 	mov	r6,zero
 40164cc:	dd400b15 	stw	r21,44(sp)
 40164d0:	dcc00915 	stw	r19,36(sp)
 40164d4:	dc000615 	stw	r16,24(sp)
 40164d8:	dfc00f15 	stw	ra,60(sp)
 40164dc:	df000e15 	stw	fp,56(sp)
 40164e0:	ddc00d15 	stw	r23,52(sp)
 40164e4:	dd800c15 	stw	r22,48(sp)
 40164e8:	dd000a15 	stw	r20,40(sp)
 40164ec:	dc800815 	stw	r18,32(sp)
 40164f0:	dc400715 	stw	r17,28(sp)
 40164f4:	2817883a 	mov	r11,r5
 40164f8:	d9800415 	stw	r6,16(sp)
 40164fc:	4027883a 	mov	r19,r8
 4016500:	d9800515 	stw	r6,20(sp)
 4016504:	2021883a 	mov	r16,r4
 4016508:	282b883a 	mov	r21,r5
 401650c:	38002c1e 	bne	r7,zero,40165c0 <__umoddi3+0x100>
 4016510:	2a005636 	bltu	r5,r8,401666c <__umoddi3+0x1ac>
 4016514:	40009a26 	beq	r8,zero,4016780 <__umoddi3+0x2c0>
 4016518:	00bfffd4 	movui	r2,65535
 401651c:	14c09236 	bltu	r2,r19,4016768 <__umoddi3+0x2a8>
 4016520:	00803fc4 	movi	r2,255
 4016524:	14c15c36 	bltu	r2,r19,4016a98 <__umoddi3+0x5d8>
 4016528:	000b883a 	mov	r5,zero
 401652c:	0005883a 	mov	r2,zero
 4016530:	9884d83a 	srl	r2,r19,r2
 4016534:	010100b4 	movhi	r4,1026
 4016538:	21112e04 	addi	r4,r4,17592
 401653c:	01800804 	movi	r6,32
 4016540:	1105883a 	add	r2,r2,r4
 4016544:	10c00003 	ldbu	r3,0(r2)
 4016548:	28c7883a 	add	r3,r5,r3
 401654c:	30e5c83a 	sub	r18,r6,r3
 4016550:	9000a41e 	bne	r18,zero,40167e4 <__umoddi3+0x324>
 4016554:	982ed43a 	srli	r23,r19,16
 4016558:	acebc83a 	sub	r21,r21,r19
 401655c:	9d3fffcc 	andi	r20,r19,65535
 4016560:	002d883a 	mov	r22,zero
 4016564:	a809883a 	mov	r4,r21
 4016568:	b80b883a 	mov	r5,r23
 401656c:	4008fe80 	call	4008fe8 <__udivsi3>
 4016570:	100b883a 	mov	r5,r2
 4016574:	a009883a 	mov	r4,r20
 4016578:	4008ff80 	call	4008ff8 <__mulsi3>
 401657c:	a809883a 	mov	r4,r21
 4016580:	b80b883a 	mov	r5,r23
 4016584:	1023883a 	mov	r17,r2
 4016588:	4008ff00 	call	4008ff0 <__umodsi3>
 401658c:	1004943a 	slli	r2,r2,16
 4016590:	8006d43a 	srli	r3,r16,16
 4016594:	10c4b03a 	or	r2,r2,r3
 4016598:	1440032e 	bgeu	r2,r17,40165a8 <__umoddi3+0xe8>
 401659c:	14c5883a 	add	r2,r2,r19
 40165a0:	14c00136 	bltu	r2,r19,40165a8 <__umoddi3+0xe8>
 40165a4:	14415836 	bltu	r2,r17,4016b08 <__umoddi3+0x648>
 40165a8:	1463c83a 	sub	r17,r2,r17
 40165ac:	8809883a 	mov	r4,r17
 40165b0:	b80b883a 	mov	r5,r23
 40165b4:	4008fe80 	call	4008fe8 <__udivsi3>
 40165b8:	a009883a 	mov	r4,r20
 40165bc:	00005306 	br	401670c <__umoddi3+0x24c>
 40165c0:	380d883a 	mov	r6,r7
 40165c4:	29c0132e 	bgeu	r5,r7,4016614 <__umoddi3+0x154>
 40165c8:	d9000415 	stw	r4,16(sp)
 40165cc:	d9400515 	stw	r5,20(sp)
 40165d0:	d9400417 	ldw	r5,16(sp)
 40165d4:	5813883a 	mov	r9,r11
 40165d8:	2811883a 	mov	r8,r5
 40165dc:	4005883a 	mov	r2,r8
 40165e0:	4807883a 	mov	r3,r9
 40165e4:	dfc00f17 	ldw	ra,60(sp)
 40165e8:	df000e17 	ldw	fp,56(sp)
 40165ec:	ddc00d17 	ldw	r23,52(sp)
 40165f0:	dd800c17 	ldw	r22,48(sp)
 40165f4:	dd400b17 	ldw	r21,44(sp)
 40165f8:	dd000a17 	ldw	r20,40(sp)
 40165fc:	dcc00917 	ldw	r19,36(sp)
 4016600:	dc800817 	ldw	r18,32(sp)
 4016604:	dc400717 	ldw	r17,28(sp)
 4016608:	dc000617 	ldw	r16,24(sp)
 401660c:	dec01004 	addi	sp,sp,64
 4016610:	f800283a 	ret
 4016614:	00bfffd4 	movui	r2,65535
 4016618:	11c06636 	bltu	r2,r7,40167b4 <__umoddi3+0x2f4>
 401661c:	00803fc4 	movi	r2,255
 4016620:	11c12036 	bltu	r2,r7,4016aa4 <__umoddi3+0x5e4>
 4016624:	000b883a 	mov	r5,zero
 4016628:	0005883a 	mov	r2,zero
 401662c:	3084d83a 	srl	r2,r6,r2
 4016630:	010100b4 	movhi	r4,1026
 4016634:	21112e04 	addi	r4,r4,17592
 4016638:	01c00804 	movi	r7,32
 401663c:	1105883a 	add	r2,r2,r4
 4016640:	10c00003 	ldbu	r3,0(r2)
 4016644:	28c7883a 	add	r3,r5,r3
 4016648:	38e5c83a 	sub	r18,r7,r3
 401664c:	9000941e 	bne	r18,zero,40168a0 <__umoddi3+0x3e0>
 4016650:	35405e36 	bltu	r6,r21,40167cc <__umoddi3+0x30c>
 4016654:	84c05d2e 	bgeu	r16,r19,40167cc <__umoddi3+0x30c>
 4016658:	8011883a 	mov	r8,r16
 401665c:	a813883a 	mov	r9,r21
 4016660:	dc000415 	stw	r16,16(sp)
 4016664:	dd400515 	stw	r21,20(sp)
 4016668:	003fdc06 	br	40165dc <__umoddi3+0x11c>
 401666c:	00bfffd4 	movui	r2,65535
 4016670:	12004a36 	bltu	r2,r8,401679c <__umoddi3+0x2dc>
 4016674:	00803fc4 	movi	r2,255
 4016678:	12010d36 	bltu	r2,r8,4016ab0 <__umoddi3+0x5f0>
 401667c:	000b883a 	mov	r5,zero
 4016680:	0005883a 	mov	r2,zero
 4016684:	9884d83a 	srl	r2,r19,r2
 4016688:	010100b4 	movhi	r4,1026
 401668c:	21112e04 	addi	r4,r4,17592
 4016690:	01800804 	movi	r6,32
 4016694:	1105883a 	add	r2,r2,r4
 4016698:	10c00003 	ldbu	r3,0(r2)
 401669c:	28c7883a 	add	r3,r5,r3
 40166a0:	30c7c83a 	sub	r3,r6,r3
 40166a4:	1800dc1e 	bne	r3,zero,4016a18 <__umoddi3+0x558>
 40166a8:	002d883a 	mov	r22,zero
 40166ac:	982ed43a 	srli	r23,r19,16
 40166b0:	a809883a 	mov	r4,r21
 40166b4:	9cbfffcc 	andi	r18,r19,65535
 40166b8:	b80b883a 	mov	r5,r23
 40166bc:	4008fe80 	call	4008fe8 <__udivsi3>
 40166c0:	100b883a 	mov	r5,r2
 40166c4:	9009883a 	mov	r4,r18
 40166c8:	4008ff80 	call	4008ff8 <__mulsi3>
 40166cc:	a809883a 	mov	r4,r21
 40166d0:	b80b883a 	mov	r5,r23
 40166d4:	1023883a 	mov	r17,r2
 40166d8:	4008ff00 	call	4008ff0 <__umodsi3>
 40166dc:	1004943a 	slli	r2,r2,16
 40166e0:	8006d43a 	srli	r3,r16,16
 40166e4:	10c4b03a 	or	r2,r2,r3
 40166e8:	1440032e 	bgeu	r2,r17,40166f8 <__umoddi3+0x238>
 40166ec:	14c5883a 	add	r2,r2,r19
 40166f0:	14c00136 	bltu	r2,r19,40166f8 <__umoddi3+0x238>
 40166f4:	14410236 	bltu	r2,r17,4016b00 <__umoddi3+0x640>
 40166f8:	1463c83a 	sub	r17,r2,r17
 40166fc:	8809883a 	mov	r4,r17
 4016700:	b80b883a 	mov	r5,r23
 4016704:	4008fe80 	call	4008fe8 <__udivsi3>
 4016708:	9009883a 	mov	r4,r18
 401670c:	100b883a 	mov	r5,r2
 4016710:	4008ff80 	call	4008ff8 <__mulsi3>
 4016714:	8809883a 	mov	r4,r17
 4016718:	b80b883a 	mov	r5,r23
 401671c:	102b883a 	mov	r21,r2
 4016720:	4008ff00 	call	4008ff0 <__umodsi3>
 4016724:	1004943a 	slli	r2,r2,16
 4016728:	80ffffcc 	andi	r3,r16,65535
 401672c:	10c4b03a 	or	r2,r2,r3
 4016730:	1540042e 	bgeu	r2,r21,4016744 <__umoddi3+0x284>
 4016734:	14c5883a 	add	r2,r2,r19
 4016738:	14c00236 	bltu	r2,r19,4016744 <__umoddi3+0x284>
 401673c:	1540012e 	bgeu	r2,r21,4016744 <__umoddi3+0x284>
 4016740:	14c5883a 	add	r2,r2,r19
 4016744:	1545c83a 	sub	r2,r2,r21
 4016748:	1584d83a 	srl	r2,r2,r22
 401674c:	0013883a 	mov	r9,zero
 4016750:	d8800415 	stw	r2,16(sp)
 4016754:	d8c00417 	ldw	r3,16(sp)
 4016758:	0005883a 	mov	r2,zero
 401675c:	d8800515 	stw	r2,20(sp)
 4016760:	1811883a 	mov	r8,r3
 4016764:	003f9d06 	br	40165dc <__umoddi3+0x11c>
 4016768:	00804034 	movhi	r2,256
 401676c:	10bfffc4 	addi	r2,r2,-1
 4016770:	14c0c636 	bltu	r2,r19,4016a8c <__umoddi3+0x5cc>
 4016774:	01400404 	movi	r5,16
 4016778:	2805883a 	mov	r2,r5
 401677c:	003f6c06 	br	4016530 <__umoddi3+0x70>
 4016780:	01000044 	movi	r4,1
 4016784:	000b883a 	mov	r5,zero
 4016788:	4008fe80 	call	4008fe8 <__udivsi3>
 401678c:	1027883a 	mov	r19,r2
 4016790:	00bfffd4 	movui	r2,65535
 4016794:	14fff436 	bltu	r2,r19,4016768 <__umoddi3+0x2a8>
 4016798:	003f6106 	br	4016520 <__umoddi3+0x60>
 401679c:	00804034 	movhi	r2,256
 40167a0:	10bfffc4 	addi	r2,r2,-1
 40167a4:	1200c536 	bltu	r2,r8,4016abc <__umoddi3+0x5fc>
 40167a8:	01400404 	movi	r5,16
 40167ac:	2805883a 	mov	r2,r5
 40167b0:	003fb406 	br	4016684 <__umoddi3+0x1c4>
 40167b4:	00804034 	movhi	r2,256
 40167b8:	10bfffc4 	addi	r2,r2,-1
 40167bc:	11c0c236 	bltu	r2,r7,4016ac8 <__umoddi3+0x608>
 40167c0:	01400404 	movi	r5,16
 40167c4:	2805883a 	mov	r2,r5
 40167c8:	003f9806 	br	401662c <__umoddi3+0x16c>
 40167cc:	84c9c83a 	sub	r4,r16,r19
 40167d0:	8105803a 	cmpltu	r2,r16,r4
 40167d4:	a987c83a 	sub	r3,r21,r6
 40167d8:	18abc83a 	sub	r21,r3,r2
 40167dc:	2021883a 	mov	r16,r4
 40167e0:	003f9d06 	br	4016658 <__umoddi3+0x198>
 40167e4:	9ca6983a 	sll	r19,r19,r18
 40167e8:	3485c83a 	sub	r2,r6,r18
 40167ec:	a8a2d83a 	srl	r17,r21,r2
 40167f0:	982ed43a 	srli	r23,r19,16
 40167f4:	ac86983a 	sll	r3,r21,r18
 40167f8:	8084d83a 	srl	r2,r16,r2
 40167fc:	8809883a 	mov	r4,r17
 4016800:	b80b883a 	mov	r5,r23
 4016804:	18b8b03a 	or	fp,r3,r2
 4016808:	9d3fffcc 	andi	r20,r19,65535
 401680c:	4008fe80 	call	4008fe8 <__udivsi3>
 4016810:	100b883a 	mov	r5,r2
 4016814:	a009883a 	mov	r4,r20
 4016818:	4008ff80 	call	4008ff8 <__mulsi3>
 401681c:	8809883a 	mov	r4,r17
 4016820:	b80b883a 	mov	r5,r23
 4016824:	102b883a 	mov	r21,r2
 4016828:	4008ff00 	call	4008ff0 <__umodsi3>
 401682c:	1004943a 	slli	r2,r2,16
 4016830:	e006d43a 	srli	r3,fp,16
 4016834:	902d883a 	mov	r22,r18
 4016838:	10c4b03a 	or	r2,r2,r3
 401683c:	1540022e 	bgeu	r2,r21,4016848 <__umoddi3+0x388>
 4016840:	14c5883a 	add	r2,r2,r19
 4016844:	14c0ab2e 	bgeu	r2,r19,4016af4 <__umoddi3+0x634>
 4016848:	1563c83a 	sub	r17,r2,r21
 401684c:	8809883a 	mov	r4,r17
 4016850:	b80b883a 	mov	r5,r23
 4016854:	4008fe80 	call	4008fe8 <__udivsi3>
 4016858:	100b883a 	mov	r5,r2
 401685c:	a009883a 	mov	r4,r20
 4016860:	4008ff80 	call	4008ff8 <__mulsi3>
 4016864:	8809883a 	mov	r4,r17
 4016868:	b80b883a 	mov	r5,r23
 401686c:	102b883a 	mov	r21,r2
 4016870:	4008ff00 	call	4008ff0 <__umodsi3>
 4016874:	1004943a 	slli	r2,r2,16
 4016878:	e0ffffcc 	andi	r3,fp,65535
 401687c:	10c4b03a 	or	r2,r2,r3
 4016880:	1540042e 	bgeu	r2,r21,4016894 <__umoddi3+0x3d4>
 4016884:	14c5883a 	add	r2,r2,r19
 4016888:	14c00236 	bltu	r2,r19,4016894 <__umoddi3+0x3d4>
 401688c:	1540012e 	bgeu	r2,r21,4016894 <__umoddi3+0x3d4>
 4016890:	14c5883a 	add	r2,r2,r19
 4016894:	84a0983a 	sll	r16,r16,r18
 4016898:	156bc83a 	sub	r21,r2,r21
 401689c:	003f3106 	br	4016564 <__umoddi3+0xa4>
 40168a0:	3c8fc83a 	sub	r7,r7,r18
 40168a4:	3486983a 	sll	r3,r6,r18
 40168a8:	99c4d83a 	srl	r2,r19,r7
 40168ac:	a9e2d83a 	srl	r17,r21,r7
 40168b0:	ac8c983a 	sll	r6,r21,r18
 40168b4:	18acb03a 	or	r22,r3,r2
 40168b8:	b02ed43a 	srli	r23,r22,16
 40168bc:	81c4d83a 	srl	r2,r16,r7
 40168c0:	8809883a 	mov	r4,r17
 40168c4:	b80b883a 	mov	r5,r23
 40168c8:	308cb03a 	or	r6,r6,r2
 40168cc:	d9c00315 	stw	r7,12(sp)
 40168d0:	d9800215 	stw	r6,8(sp)
 40168d4:	b53fffcc 	andi	r20,r22,65535
 40168d8:	4008fe80 	call	4008fe8 <__udivsi3>
 40168dc:	100b883a 	mov	r5,r2
 40168e0:	a009883a 	mov	r4,r20
 40168e4:	1039883a 	mov	fp,r2
 40168e8:	4008ff80 	call	4008ff8 <__mulsi3>
 40168ec:	8809883a 	mov	r4,r17
 40168f0:	b80b883a 	mov	r5,r23
 40168f4:	102b883a 	mov	r21,r2
 40168f8:	4008ff00 	call	4008ff0 <__umodsi3>
 40168fc:	d9000217 	ldw	r4,8(sp)
 4016900:	1004943a 	slli	r2,r2,16
 4016904:	9ca6983a 	sll	r19,r19,r18
 4016908:	2006d43a 	srli	r3,r4,16
 401690c:	84a0983a 	sll	r16,r16,r18
 4016910:	dcc00015 	stw	r19,0(sp)
 4016914:	10c4b03a 	or	r2,r2,r3
 4016918:	dc000115 	stw	r16,4(sp)
 401691c:	1540032e 	bgeu	r2,r21,401692c <__umoddi3+0x46c>
 4016920:	1585883a 	add	r2,r2,r22
 4016924:	e73fffc4 	addi	fp,fp,-1
 4016928:	15806e2e 	bgeu	r2,r22,4016ae4 <__umoddi3+0x624>
 401692c:	1563c83a 	sub	r17,r2,r21
 4016930:	8809883a 	mov	r4,r17
 4016934:	b80b883a 	mov	r5,r23
 4016938:	4008fe80 	call	4008fe8 <__udivsi3>
 401693c:	100b883a 	mov	r5,r2
 4016940:	a009883a 	mov	r4,r20
 4016944:	1021883a 	mov	r16,r2
 4016948:	4008ff80 	call	4008ff8 <__mulsi3>
 401694c:	b80b883a 	mov	r5,r23
 4016950:	8809883a 	mov	r4,r17
 4016954:	1029883a 	mov	r20,r2
 4016958:	4008ff00 	call	4008ff0 <__umodsi3>
 401695c:	d9400217 	ldw	r5,8(sp)
 4016960:	1004943a 	slli	r2,r2,16
 4016964:	28ffffcc 	andi	r3,r5,65535
 4016968:	10c4b03a 	or	r2,r2,r3
 401696c:	1500032e 	bgeu	r2,r20,401697c <__umoddi3+0x4bc>
 4016970:	1585883a 	add	r2,r2,r22
 4016974:	843fffc4 	addi	r16,r16,-1
 4016978:	1580562e 	bgeu	r2,r22,4016ad4 <__umoddi3+0x614>
 401697c:	d9800017 	ldw	r6,0(sp)
 4016980:	e022943a 	slli	r17,fp,16
 4016984:	302ed43a 	srli	r23,r6,16
 4016988:	8462b03a 	or	r17,r16,r17
 401698c:	34ffffcc 	andi	r19,r6,65535
 4016990:	882ad43a 	srli	r21,r17,16
 4016994:	8c7fffcc 	andi	r17,r17,65535
 4016998:	8809883a 	mov	r4,r17
 401699c:	980b883a 	mov	r5,r19
 40169a0:	1521c83a 	sub	r16,r2,r20
 40169a4:	4008ff80 	call	4008ff8 <__mulsi3>
 40169a8:	8809883a 	mov	r4,r17
 40169ac:	b80b883a 	mov	r5,r23
 40169b0:	1029883a 	mov	r20,r2
 40169b4:	4008ff80 	call	4008ff8 <__mulsi3>
 40169b8:	980b883a 	mov	r5,r19
 40169bc:	a809883a 	mov	r4,r21
 40169c0:	1023883a 	mov	r17,r2
 40169c4:	4008ff80 	call	4008ff8 <__mulsi3>
 40169c8:	a809883a 	mov	r4,r21
 40169cc:	b80b883a 	mov	r5,r23
 40169d0:	1027883a 	mov	r19,r2
 40169d4:	4008ff80 	call	4008ff8 <__mulsi3>
 40169d8:	100b883a 	mov	r5,r2
 40169dc:	a004d43a 	srli	r2,r20,16
 40169e0:	8ce3883a 	add	r17,r17,r19
 40169e4:	1449883a 	add	r4,r2,r17
 40169e8:	24c0022e 	bgeu	r4,r19,40169f4 <__umoddi3+0x534>
 40169ec:	00800074 	movhi	r2,1
 40169f0:	288b883a 	add	r5,r5,r2
 40169f4:	2004d43a 	srli	r2,r4,16
 40169f8:	2008943a 	slli	r4,r4,16
 40169fc:	a0ffffcc 	andi	r3,r20,65535
 4016a00:	288d883a 	add	r6,r5,r2
 4016a04:	20c9883a 	add	r4,r4,r3
 4016a08:	81800b36 	bltu	r16,r6,4016a38 <__umoddi3+0x578>
 4016a0c:	81804026 	beq	r16,r6,4016b10 <__umoddi3+0x650>
 4016a10:	818dc83a 	sub	r6,r16,r6
 4016a14:	00000f06 	br	4016a54 <__umoddi3+0x594>
 4016a18:	30c5c83a 	sub	r2,r6,r3
 4016a1c:	182d883a 	mov	r22,r3
 4016a20:	8084d83a 	srl	r2,r16,r2
 4016a24:	a8c6983a 	sll	r3,r21,r3
 4016a28:	9da6983a 	sll	r19,r19,r22
 4016a2c:	85a0983a 	sll	r16,r16,r22
 4016a30:	18aab03a 	or	r21,r3,r2
 4016a34:	003f1d06 	br	40166ac <__umoddi3+0x1ec>
 4016a38:	d8c00017 	ldw	r3,0(sp)
 4016a3c:	20c5c83a 	sub	r2,r4,r3
 4016a40:	2089803a 	cmpltu	r4,r4,r2
 4016a44:	3587c83a 	sub	r3,r6,r22
 4016a48:	1907c83a 	sub	r3,r3,r4
 4016a4c:	80cdc83a 	sub	r6,r16,r3
 4016a50:	1009883a 	mov	r4,r2
 4016a54:	d9400117 	ldw	r5,4(sp)
 4016a58:	2905c83a 	sub	r2,r5,r4
 4016a5c:	2887803a 	cmpltu	r3,r5,r2
 4016a60:	30c7c83a 	sub	r3,r6,r3
 4016a64:	d9800317 	ldw	r6,12(sp)
 4016a68:	1484d83a 	srl	r2,r2,r18
 4016a6c:	1988983a 	sll	r4,r3,r6
 4016a70:	1c86d83a 	srl	r3,r3,r18
 4016a74:	2088b03a 	or	r4,r4,r2
 4016a78:	2011883a 	mov	r8,r4
 4016a7c:	1813883a 	mov	r9,r3
 4016a80:	d9000415 	stw	r4,16(sp)
 4016a84:	d8c00515 	stw	r3,20(sp)
 4016a88:	003ed406 	br	40165dc <__umoddi3+0x11c>
 4016a8c:	01400604 	movi	r5,24
 4016a90:	2805883a 	mov	r2,r5
 4016a94:	003ea606 	br	4016530 <__umoddi3+0x70>
 4016a98:	01400204 	movi	r5,8
 4016a9c:	2805883a 	mov	r2,r5
 4016aa0:	003ea306 	br	4016530 <__umoddi3+0x70>
 4016aa4:	01400204 	movi	r5,8
 4016aa8:	2805883a 	mov	r2,r5
 4016aac:	003edf06 	br	401662c <__umoddi3+0x16c>
 4016ab0:	01400204 	movi	r5,8
 4016ab4:	2805883a 	mov	r2,r5
 4016ab8:	003ef206 	br	4016684 <__umoddi3+0x1c4>
 4016abc:	01400604 	movi	r5,24
 4016ac0:	2805883a 	mov	r2,r5
 4016ac4:	003eef06 	br	4016684 <__umoddi3+0x1c4>
 4016ac8:	01400604 	movi	r5,24
 4016acc:	2805883a 	mov	r2,r5
 4016ad0:	003ed606 	br	401662c <__umoddi3+0x16c>
 4016ad4:	153fa92e 	bgeu	r2,r20,401697c <__umoddi3+0x4bc>
 4016ad8:	843fffc4 	addi	r16,r16,-1
 4016adc:	1585883a 	add	r2,r2,r22
 4016ae0:	003fa606 	br	401697c <__umoddi3+0x4bc>
 4016ae4:	157f912e 	bgeu	r2,r21,401692c <__umoddi3+0x46c>
 4016ae8:	e73fffc4 	addi	fp,fp,-1
 4016aec:	1585883a 	add	r2,r2,r22
 4016af0:	003f8e06 	br	401692c <__umoddi3+0x46c>
 4016af4:	157f542e 	bgeu	r2,r21,4016848 <__umoddi3+0x388>
 4016af8:	14c5883a 	add	r2,r2,r19
 4016afc:	003f5206 	br	4016848 <__umoddi3+0x388>
 4016b00:	14c5883a 	add	r2,r2,r19
 4016b04:	003efc06 	br	40166f8 <__umoddi3+0x238>
 4016b08:	14c5883a 	add	r2,r2,r19
 4016b0c:	003ea606 	br	40165a8 <__umoddi3+0xe8>
 4016b10:	d8800117 	ldw	r2,4(sp)
 4016b14:	113fc836 	bltu	r2,r4,4016a38 <__umoddi3+0x578>
 4016b18:	000d883a 	mov	r6,zero
 4016b1c:	003fcd06 	br	4016a54 <__umoddi3+0x594>

04016b20 <__nesf2>:
 4016b20:	defff304 	addi	sp,sp,-52
 4016b24:	dc400b15 	stw	r17,44(sp)
 4016b28:	dc400204 	addi	r17,sp,8
 4016b2c:	dc000a15 	stw	r16,40(sp)
 4016b30:	d9000015 	stw	r4,0(sp)
 4016b34:	d9400115 	stw	r5,4(sp)
 4016b38:	d809883a 	mov	r4,sp
 4016b3c:	880b883a 	mov	r5,r17
 4016b40:	dc000604 	addi	r16,sp,24
 4016b44:	dfc00c15 	stw	ra,48(sp)
 4016b48:	40093340 	call	4009334 <__unpack_f>
 4016b4c:	d9000104 	addi	r4,sp,4
 4016b50:	800b883a 	mov	r5,r16
 4016b54:	40093340 	call	4009334 <__unpack_f>
 4016b58:	d8800217 	ldw	r2,8(sp)
 4016b5c:	00c00044 	movi	r3,1
 4016b60:	180d883a 	mov	r6,r3
 4016b64:	1880062e 	bgeu	r3,r2,4016b80 <__nesf2+0x60>
 4016b68:	d8800617 	ldw	r2,24(sp)
 4016b6c:	8809883a 	mov	r4,r17
 4016b70:	800b883a 	mov	r5,r16
 4016b74:	1880022e 	bgeu	r3,r2,4016b80 <__nesf2+0x60>
 4016b78:	40093fc0 	call	40093fc <__fpcmp_parts_f>
 4016b7c:	100d883a 	mov	r6,r2
 4016b80:	3005883a 	mov	r2,r6
 4016b84:	dfc00c17 	ldw	ra,48(sp)
 4016b88:	dc400b17 	ldw	r17,44(sp)
 4016b8c:	dc000a17 	ldw	r16,40(sp)
 4016b90:	dec00d04 	addi	sp,sp,52
 4016b94:	f800283a 	ret

04016b98 <__ltsf2>:
 4016b98:	defff304 	addi	sp,sp,-52
 4016b9c:	dc400b15 	stw	r17,44(sp)
 4016ba0:	dc400204 	addi	r17,sp,8
 4016ba4:	dc000a15 	stw	r16,40(sp)
 4016ba8:	d9000015 	stw	r4,0(sp)
 4016bac:	d9400115 	stw	r5,4(sp)
 4016bb0:	d809883a 	mov	r4,sp
 4016bb4:	880b883a 	mov	r5,r17
 4016bb8:	dc000604 	addi	r16,sp,24
 4016bbc:	dfc00c15 	stw	ra,48(sp)
 4016bc0:	40093340 	call	4009334 <__unpack_f>
 4016bc4:	d9000104 	addi	r4,sp,4
 4016bc8:	800b883a 	mov	r5,r16
 4016bcc:	40093340 	call	4009334 <__unpack_f>
 4016bd0:	d8800217 	ldw	r2,8(sp)
 4016bd4:	00c00044 	movi	r3,1
 4016bd8:	180d883a 	mov	r6,r3
 4016bdc:	1880062e 	bgeu	r3,r2,4016bf8 <__ltsf2+0x60>
 4016be0:	d8800617 	ldw	r2,24(sp)
 4016be4:	8809883a 	mov	r4,r17
 4016be8:	800b883a 	mov	r5,r16
 4016bec:	1880022e 	bgeu	r3,r2,4016bf8 <__ltsf2+0x60>
 4016bf0:	40093fc0 	call	40093fc <__fpcmp_parts_f>
 4016bf4:	100d883a 	mov	r6,r2
 4016bf8:	3005883a 	mov	r2,r6
 4016bfc:	dfc00c17 	ldw	ra,48(sp)
 4016c00:	dc400b17 	ldw	r17,44(sp)
 4016c04:	dc000a17 	ldw	r16,40(sp)
 4016c08:	dec00d04 	addi	sp,sp,52
 4016c0c:	f800283a 	ret

04016c10 <__eqdf2>:
 4016c10:	deffef04 	addi	sp,sp,-68
 4016c14:	dc400f15 	stw	r17,60(sp)
 4016c18:	dc400404 	addi	r17,sp,16
 4016c1c:	2005883a 	mov	r2,r4
 4016c20:	2807883a 	mov	r3,r5
 4016c24:	dc000e15 	stw	r16,56(sp)
 4016c28:	d809883a 	mov	r4,sp
 4016c2c:	880b883a 	mov	r5,r17
 4016c30:	dc000904 	addi	r16,sp,36
 4016c34:	d8c00115 	stw	r3,4(sp)
 4016c38:	d8800015 	stw	r2,0(sp)
 4016c3c:	d9800215 	stw	r6,8(sp)
 4016c40:	dfc01015 	stw	ra,64(sp)
 4016c44:	d9c00315 	stw	r7,12(sp)
 4016c48:	40097e40 	call	40097e4 <__unpack_d>
 4016c4c:	d9000204 	addi	r4,sp,8
 4016c50:	800b883a 	mov	r5,r16
 4016c54:	40097e40 	call	40097e4 <__unpack_d>
 4016c58:	d8800417 	ldw	r2,16(sp)
 4016c5c:	00c00044 	movi	r3,1
 4016c60:	180d883a 	mov	r6,r3
 4016c64:	1880062e 	bgeu	r3,r2,4016c80 <__eqdf2+0x70>
 4016c68:	d8800917 	ldw	r2,36(sp)
 4016c6c:	8809883a 	mov	r4,r17
 4016c70:	800b883a 	mov	r5,r16
 4016c74:	1880022e 	bgeu	r3,r2,4016c80 <__eqdf2+0x70>
 4016c78:	400991c0 	call	400991c <__fpcmp_parts_d>
 4016c7c:	100d883a 	mov	r6,r2
 4016c80:	3005883a 	mov	r2,r6
 4016c84:	dfc01017 	ldw	ra,64(sp)
 4016c88:	dc400f17 	ldw	r17,60(sp)
 4016c8c:	dc000e17 	ldw	r16,56(sp)
 4016c90:	dec01104 	addi	sp,sp,68
 4016c94:	f800283a 	ret

04016c98 <__nedf2>:
 4016c98:	deffef04 	addi	sp,sp,-68
 4016c9c:	dc400f15 	stw	r17,60(sp)
 4016ca0:	dc400404 	addi	r17,sp,16
 4016ca4:	2005883a 	mov	r2,r4
 4016ca8:	2807883a 	mov	r3,r5
 4016cac:	dc000e15 	stw	r16,56(sp)
 4016cb0:	d809883a 	mov	r4,sp
 4016cb4:	880b883a 	mov	r5,r17
 4016cb8:	dc000904 	addi	r16,sp,36
 4016cbc:	d8c00115 	stw	r3,4(sp)
 4016cc0:	d8800015 	stw	r2,0(sp)
 4016cc4:	d9800215 	stw	r6,8(sp)
 4016cc8:	dfc01015 	stw	ra,64(sp)
 4016ccc:	d9c00315 	stw	r7,12(sp)
 4016cd0:	40097e40 	call	40097e4 <__unpack_d>
 4016cd4:	d9000204 	addi	r4,sp,8
 4016cd8:	800b883a 	mov	r5,r16
 4016cdc:	40097e40 	call	40097e4 <__unpack_d>
 4016ce0:	d8800417 	ldw	r2,16(sp)
 4016ce4:	00c00044 	movi	r3,1
 4016ce8:	180d883a 	mov	r6,r3
 4016cec:	1880062e 	bgeu	r3,r2,4016d08 <__nedf2+0x70>
 4016cf0:	d8800917 	ldw	r2,36(sp)
 4016cf4:	8809883a 	mov	r4,r17
 4016cf8:	800b883a 	mov	r5,r16
 4016cfc:	1880022e 	bgeu	r3,r2,4016d08 <__nedf2+0x70>
 4016d00:	400991c0 	call	400991c <__fpcmp_parts_d>
 4016d04:	100d883a 	mov	r6,r2
 4016d08:	3005883a 	mov	r2,r6
 4016d0c:	dfc01017 	ldw	ra,64(sp)
 4016d10:	dc400f17 	ldw	r17,60(sp)
 4016d14:	dc000e17 	ldw	r16,56(sp)
 4016d18:	dec01104 	addi	sp,sp,68
 4016d1c:	f800283a 	ret

04016d20 <__floatunsidf>:
 4016d20:	defff204 	addi	sp,sp,-56
 4016d24:	dfc00d15 	stw	ra,52(sp)
 4016d28:	ddc00c15 	stw	r23,48(sp)
 4016d2c:	dd800b15 	stw	r22,44(sp)
 4016d30:	dd400a15 	stw	r21,40(sp)
 4016d34:	dd000915 	stw	r20,36(sp)
 4016d38:	dcc00815 	stw	r19,32(sp)
 4016d3c:	dc800715 	stw	r18,28(sp)
 4016d40:	dc400615 	stw	r17,24(sp)
 4016d44:	dc000515 	stw	r16,20(sp)
 4016d48:	d8000115 	stw	zero,4(sp)
 4016d4c:	20000f1e 	bne	r4,zero,4016d8c <__floatunsidf+0x6c>
 4016d50:	00800084 	movi	r2,2
 4016d54:	d8800015 	stw	r2,0(sp)
 4016d58:	d809883a 	mov	r4,sp
 4016d5c:	40094d00 	call	40094d0 <__pack_d>
 4016d60:	dfc00d17 	ldw	ra,52(sp)
 4016d64:	ddc00c17 	ldw	r23,48(sp)
 4016d68:	dd800b17 	ldw	r22,44(sp)
 4016d6c:	dd400a17 	ldw	r21,40(sp)
 4016d70:	dd000917 	ldw	r20,36(sp)
 4016d74:	dcc00817 	ldw	r19,32(sp)
 4016d78:	dc800717 	ldw	r18,28(sp)
 4016d7c:	dc400617 	ldw	r17,24(sp)
 4016d80:	dc000517 	ldw	r16,20(sp)
 4016d84:	dec00e04 	addi	sp,sp,56
 4016d88:	f800283a 	ret
 4016d8c:	008000c4 	movi	r2,3
 4016d90:	00c00f04 	movi	r3,60
 4016d94:	002f883a 	mov	r23,zero
 4016d98:	202d883a 	mov	r22,r4
 4016d9c:	d8800015 	stw	r2,0(sp)
 4016da0:	d8c00215 	stw	r3,8(sp)
 4016da4:	d9000315 	stw	r4,12(sp)
 4016da8:	ddc00415 	stw	r23,16(sp)
 4016dac:	40091540 	call	4009154 <__clzsi2>
 4016db0:	12400744 	addi	r9,r2,29
 4016db4:	48000b16 	blt	r9,zero,4016de4 <__floatunsidf+0xc4>
 4016db8:	483fe726 	beq	r9,zero,4016d58 <__floatunsidf+0x38>
 4016dbc:	10bfff44 	addi	r2,r2,-3
 4016dc0:	10002e16 	blt	r2,zero,4016e7c <__floatunsidf+0x15c>
 4016dc4:	b0a2983a 	sll	r17,r22,r2
 4016dc8:	0021883a 	mov	r16,zero
 4016dcc:	d8800217 	ldw	r2,8(sp)
 4016dd0:	dc400415 	stw	r17,16(sp)
 4016dd4:	dc000315 	stw	r16,12(sp)
 4016dd8:	1245c83a 	sub	r2,r2,r9
 4016ddc:	d8800215 	stw	r2,8(sp)
 4016de0:	003fdd06 	br	4016d58 <__floatunsidf+0x38>
 4016de4:	0255c83a 	sub	r10,zero,r9
 4016de8:	51bff804 	addi	r6,r10,-32
 4016dec:	30001b16 	blt	r6,zero,4016e5c <__floatunsidf+0x13c>
 4016df0:	b9a8d83a 	srl	r20,r23,r6
 4016df4:	002b883a 	mov	r21,zero
 4016df8:	000f883a 	mov	r7,zero
 4016dfc:	01000044 	movi	r4,1
 4016e00:	0011883a 	mov	r8,zero
 4016e04:	30002516 	blt	r6,zero,4016e9c <__floatunsidf+0x17c>
 4016e08:	21a6983a 	sll	r19,r4,r6
 4016e0c:	0025883a 	mov	r18,zero
 4016e10:	00bfffc4 	movi	r2,-1
 4016e14:	9089883a 	add	r4,r18,r2
 4016e18:	988b883a 	add	r5,r19,r2
 4016e1c:	248d803a 	cmpltu	r6,r4,r18
 4016e20:	314b883a 	add	r5,r6,r5
 4016e24:	b104703a 	and	r2,r22,r4
 4016e28:	b946703a 	and	r3,r23,r5
 4016e2c:	10c4b03a 	or	r2,r2,r3
 4016e30:	10000226 	beq	r2,zero,4016e3c <__floatunsidf+0x11c>
 4016e34:	01c00044 	movi	r7,1
 4016e38:	0011883a 	mov	r8,zero
 4016e3c:	d9000217 	ldw	r4,8(sp)
 4016e40:	a1c4b03a 	or	r2,r20,r7
 4016e44:	aa06b03a 	or	r3,r21,r8
 4016e48:	2249c83a 	sub	r4,r4,r9
 4016e4c:	d8c00415 	stw	r3,16(sp)
 4016e50:	d9000215 	stw	r4,8(sp)
 4016e54:	d8800315 	stw	r2,12(sp)
 4016e58:	003fbf06 	br	4016d58 <__floatunsidf+0x38>
 4016e5c:	bdc7883a 	add	r3,r23,r23
 4016e60:	008007c4 	movi	r2,31
 4016e64:	1285c83a 	sub	r2,r2,r10
 4016e68:	1886983a 	sll	r3,r3,r2
 4016e6c:	b2a8d83a 	srl	r20,r22,r10
 4016e70:	baaad83a 	srl	r21,r23,r10
 4016e74:	1d28b03a 	or	r20,r3,r20
 4016e78:	003fdf06 	br	4016df8 <__floatunsidf+0xd8>
 4016e7c:	b006d07a 	srli	r3,r22,1
 4016e80:	008007c4 	movi	r2,31
 4016e84:	1245c83a 	sub	r2,r2,r9
 4016e88:	1886d83a 	srl	r3,r3,r2
 4016e8c:	ba62983a 	sll	r17,r23,r9
 4016e90:	b260983a 	sll	r16,r22,r9
 4016e94:	1c62b03a 	or	r17,r3,r17
 4016e98:	003fcc06 	br	4016dcc <__floatunsidf+0xac>
 4016e9c:	2006d07a 	srli	r3,r4,1
 4016ea0:	008007c4 	movi	r2,31
 4016ea4:	1285c83a 	sub	r2,r2,r10
 4016ea8:	18a6d83a 	srl	r19,r3,r2
 4016eac:	22a4983a 	sll	r18,r4,r10
 4016eb0:	003fd706 	br	4016e10 <__floatunsidf+0xf0>

04016eb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4016eb4:	defff804 	addi	sp,sp,-32
 4016eb8:	dfc00715 	stw	ra,28(sp)
 4016ebc:	df000615 	stw	fp,24(sp)
 4016ec0:	df000604 	addi	fp,sp,24
 4016ec4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4016ec8:	e0bffc17 	ldw	r2,-16(fp)
 4016ecc:	1004803a 	cmplt	r2,r2,zero
 4016ed0:	1000091e 	bne	r2,zero,4016ef8 <close+0x44>
 4016ed4:	e13ffc17 	ldw	r4,-16(fp)
 4016ed8:	01400304 	movi	r5,12
 4016edc:	4008ff80 	call	4008ff8 <__mulsi3>
 4016ee0:	1007883a 	mov	r3,r2
 4016ee4:	008100b4 	movhi	r2,1026
 4016ee8:	10959b04 	addi	r2,r2,22124
 4016eec:	1887883a 	add	r3,r3,r2
 4016ef0:	e0ffff15 	stw	r3,-4(fp)
 4016ef4:	00000106 	br	4016efc <close+0x48>
 4016ef8:	e03fff15 	stw	zero,-4(fp)
 4016efc:	e0bfff17 	ldw	r2,-4(fp)
 4016f00:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4016f04:	e0bffb17 	ldw	r2,-20(fp)
 4016f08:	1005003a 	cmpeq	r2,r2,zero
 4016f0c:	10001d1e 	bne	r2,zero,4016f84 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4016f10:	e0bffb17 	ldw	r2,-20(fp)
 4016f14:	10800017 	ldw	r2,0(r2)
 4016f18:	10800417 	ldw	r2,16(r2)
 4016f1c:	1005003a 	cmpeq	r2,r2,zero
 4016f20:	1000071e 	bne	r2,zero,4016f40 <close+0x8c>
 4016f24:	e0bffb17 	ldw	r2,-20(fp)
 4016f28:	10800017 	ldw	r2,0(r2)
 4016f2c:	10800417 	ldw	r2,16(r2)
 4016f30:	e13ffb17 	ldw	r4,-20(fp)
 4016f34:	103ee83a 	callr	r2
 4016f38:	e0bffe15 	stw	r2,-8(fp)
 4016f3c:	00000106 	br	4016f44 <close+0x90>
 4016f40:	e03ffe15 	stw	zero,-8(fp)
 4016f44:	e0bffe17 	ldw	r2,-8(fp)
 4016f48:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4016f4c:	e13ffc17 	ldw	r4,-16(fp)
 4016f50:	401774c0 	call	401774c <alt_release_fd>
    if (rval < 0)
 4016f54:	e0bffa17 	ldw	r2,-24(fp)
 4016f58:	1004403a 	cmpge	r2,r2,zero
 4016f5c:	1000071e 	bne	r2,zero,4016f7c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 4016f60:	4016fb40 	call	4016fb4 <alt_get_errno>
 4016f64:	e0fffa17 	ldw	r3,-24(fp)
 4016f68:	00c7c83a 	sub	r3,zero,r3
 4016f6c:	10c00015 	stw	r3,0(r2)
      return -1;
 4016f70:	00bfffc4 	movi	r2,-1
 4016f74:	e0bffd15 	stw	r2,-12(fp)
 4016f78:	00000806 	br	4016f9c <close+0xe8>
    }
    return 0;
 4016f7c:	e03ffd15 	stw	zero,-12(fp)
 4016f80:	00000606 	br	4016f9c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4016f84:	4016fb40 	call	4016fb4 <alt_get_errno>
 4016f88:	1007883a 	mov	r3,r2
 4016f8c:	00801444 	movi	r2,81
 4016f90:	18800015 	stw	r2,0(r3)
    return -1;
 4016f94:	00bfffc4 	movi	r2,-1
 4016f98:	e0bffd15 	stw	r2,-12(fp)
 4016f9c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4016fa0:	e037883a 	mov	sp,fp
 4016fa4:	dfc00117 	ldw	ra,4(sp)
 4016fa8:	df000017 	ldw	fp,0(sp)
 4016fac:	dec00204 	addi	sp,sp,8
 4016fb0:	f800283a 	ret

04016fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016fb4:	defffd04 	addi	sp,sp,-12
 4016fb8:	dfc00215 	stw	ra,8(sp)
 4016fbc:	df000115 	stw	fp,4(sp)
 4016fc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4016fc4:	008100b4 	movhi	r2,1026
 4016fc8:	109a5504 	addi	r2,r2,26964
 4016fcc:	10800017 	ldw	r2,0(r2)
 4016fd0:	1005003a 	cmpeq	r2,r2,zero
 4016fd4:	1000061e 	bne	r2,zero,4016ff0 <alt_get_errno+0x3c>
 4016fd8:	008100b4 	movhi	r2,1026
 4016fdc:	109a5504 	addi	r2,r2,26964
 4016fe0:	10800017 	ldw	r2,0(r2)
 4016fe4:	103ee83a 	callr	r2
 4016fe8:	e0bfff15 	stw	r2,-4(fp)
 4016fec:	00000306 	br	4016ffc <alt_get_errno+0x48>
 4016ff0:	008100b4 	movhi	r2,1026
 4016ff4:	109a9604 	addi	r2,r2,27224
 4016ff8:	e0bfff15 	stw	r2,-4(fp)
 4016ffc:	e0bfff17 	ldw	r2,-4(fp)
}
 4017000:	e037883a 	mov	sp,fp
 4017004:	dfc00117 	ldw	ra,4(sp)
 4017008:	df000017 	ldw	fp,0(sp)
 401700c:	dec00204 	addi	sp,sp,8
 4017010:	f800283a 	ret

04017014 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4017014:	defffd04 	addi	sp,sp,-12
 4017018:	df000215 	stw	fp,8(sp)
 401701c:	df000204 	addi	fp,sp,8
 4017020:	e13ffe15 	stw	r4,-8(fp)
 4017024:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4017028:	e037883a 	mov	sp,fp
 401702c:	df000017 	ldw	fp,0(sp)
 4017030:	dec00104 	addi	sp,sp,4
 4017034:	f800283a 	ret

04017038 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4017038:	deffff04 	addi	sp,sp,-4
 401703c:	df000015 	stw	fp,0(sp)
 4017040:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4017044:	e037883a 	mov	sp,fp
 4017048:	df000017 	ldw	fp,0(sp)
 401704c:	dec00104 	addi	sp,sp,4
 4017050:	f800283a 	ret

04017054 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4017054:	defffc04 	addi	sp,sp,-16
 4017058:	df000315 	stw	fp,12(sp)
 401705c:	df000304 	addi	fp,sp,12
 4017060:	e13ffd15 	stw	r4,-12(fp)
 4017064:	e17ffe15 	stw	r5,-8(fp)
 4017068:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401706c:	e0bfff17 	ldw	r2,-4(fp)
}
 4017070:	e037883a 	mov	sp,fp
 4017074:	df000017 	ldw	fp,0(sp)
 4017078:	dec00104 	addi	sp,sp,4
 401707c:	f800283a 	ret

04017080 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4017080:	defffb04 	addi	sp,sp,-20
 4017084:	dfc00415 	stw	ra,16(sp)
 4017088:	df000315 	stw	fp,12(sp)
 401708c:	df000304 	addi	fp,sp,12
 4017090:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4017094:	e13ffe17 	ldw	r4,-8(fp)
 4017098:	d1600e04 	addi	r5,gp,-32712
 401709c:	40227080 	call	4022708 <alt_find_dev>
 40170a0:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 40170a4:	e0bffd17 	ldw	r2,-12(fp)
 40170a8:	1005003a 	cmpeq	r2,r2,zero
 40170ac:	10000b1e 	bne	r2,zero,40170dc <alt_flash_open_dev+0x5c>
 40170b0:	e0bffd17 	ldw	r2,-12(fp)
 40170b4:	10800317 	ldw	r2,12(r2)
 40170b8:	1005003a 	cmpeq	r2,r2,zero
 40170bc:	1000071e 	bne	r2,zero,40170dc <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 40170c0:	e0bffd17 	ldw	r2,-12(fp)
 40170c4:	10800317 	ldw	r2,12(r2)
 40170c8:	e13ffd17 	ldw	r4,-12(fp)
 40170cc:	e17ffe17 	ldw	r5,-8(fp)
 40170d0:	103ee83a 	callr	r2
 40170d4:	e0bfff15 	stw	r2,-4(fp)
 40170d8:	00000206 	br	40170e4 <alt_flash_open_dev+0x64>
  }

  return dev;
 40170dc:	e0bffd17 	ldw	r2,-12(fp)
 40170e0:	e0bfff15 	stw	r2,-4(fp)
 40170e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40170e8:	e037883a 	mov	sp,fp
 40170ec:	dfc00117 	ldw	ra,4(sp)
 40170f0:	df000017 	ldw	fp,0(sp)
 40170f4:	dec00204 	addi	sp,sp,8
 40170f8:	f800283a 	ret

040170fc <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 40170fc:	defffd04 	addi	sp,sp,-12
 4017100:	dfc00215 	stw	ra,8(sp)
 4017104:	df000115 	stw	fp,4(sp)
 4017108:	df000104 	addi	fp,sp,4
 401710c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4017110:	e0bfff17 	ldw	r2,-4(fp)
 4017114:	1005003a 	cmpeq	r2,r2,zero
 4017118:	1000081e 	bne	r2,zero,401713c <alt_flash_close_dev+0x40>
 401711c:	e0bfff17 	ldw	r2,-4(fp)
 4017120:	10800417 	ldw	r2,16(r2)
 4017124:	1005003a 	cmpeq	r2,r2,zero
 4017128:	1000041e 	bne	r2,zero,401713c <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 401712c:	e0bfff17 	ldw	r2,-4(fp)
 4017130:	10800417 	ldw	r2,16(r2)
 4017134:	e13fff17 	ldw	r4,-4(fp)
 4017138:	103ee83a 	callr	r2
  }
  return;
}
 401713c:	e037883a 	mov	sp,fp
 4017140:	dfc00117 	ldw	ra,4(sp)
 4017144:	df000017 	ldw	fp,0(sp)
 4017148:	dec00204 	addi	sp,sp,8
 401714c:	f800283a 	ret

04017150 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4017150:	defff904 	addi	sp,sp,-28
 4017154:	dfc00615 	stw	ra,24(sp)
 4017158:	df000515 	stw	fp,20(sp)
 401715c:	df000504 	addi	fp,sp,20
 4017160:	e13ffc15 	stw	r4,-16(fp)
 4017164:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4017168:	e0bffc17 	ldw	r2,-16(fp)
 401716c:	1004803a 	cmplt	r2,r2,zero
 4017170:	1000091e 	bne	r2,zero,4017198 <fstat+0x48>
 4017174:	e13ffc17 	ldw	r4,-16(fp)
 4017178:	01400304 	movi	r5,12
 401717c:	4008ff80 	call	4008ff8 <__mulsi3>
 4017180:	1007883a 	mov	r3,r2
 4017184:	008100b4 	movhi	r2,1026
 4017188:	10959b04 	addi	r2,r2,22124
 401718c:	1887883a 	add	r3,r3,r2
 4017190:	e0ffff15 	stw	r3,-4(fp)
 4017194:	00000106 	br	401719c <fstat+0x4c>
 4017198:	e03fff15 	stw	zero,-4(fp)
 401719c:	e0bfff17 	ldw	r2,-4(fp)
 40171a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40171a4:	e0bffb17 	ldw	r2,-20(fp)
 40171a8:	1005003a 	cmpeq	r2,r2,zero
 40171ac:	1000121e 	bne	r2,zero,40171f8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40171b0:	e0bffb17 	ldw	r2,-20(fp)
 40171b4:	10800017 	ldw	r2,0(r2)
 40171b8:	10800817 	ldw	r2,32(r2)
 40171bc:	1005003a 	cmpeq	r2,r2,zero
 40171c0:	1000081e 	bne	r2,zero,40171e4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 40171c4:	e0bffb17 	ldw	r2,-20(fp)
 40171c8:	10800017 	ldw	r2,0(r2)
 40171cc:	10800817 	ldw	r2,32(r2)
 40171d0:	e13ffb17 	ldw	r4,-20(fp)
 40171d4:	e17ffd17 	ldw	r5,-12(fp)
 40171d8:	103ee83a 	callr	r2
 40171dc:	e0bffe15 	stw	r2,-8(fp)
 40171e0:	00000b06 	br	4017210 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40171e4:	e0fffd17 	ldw	r3,-12(fp)
 40171e8:	00880004 	movi	r2,8192
 40171ec:	18800115 	stw	r2,4(r3)
      return 0;
 40171f0:	e03ffe15 	stw	zero,-8(fp)
 40171f4:	00000606 	br	4017210 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40171f8:	40172280 	call	4017228 <alt_get_errno>
 40171fc:	1007883a 	mov	r3,r2
 4017200:	00801444 	movi	r2,81
 4017204:	18800015 	stw	r2,0(r3)
    return -1;
 4017208:	00bfffc4 	movi	r2,-1
 401720c:	e0bffe15 	stw	r2,-8(fp)
 4017210:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4017214:	e037883a 	mov	sp,fp
 4017218:	dfc00117 	ldw	ra,4(sp)
 401721c:	df000017 	ldw	fp,0(sp)
 4017220:	dec00204 	addi	sp,sp,8
 4017224:	f800283a 	ret

04017228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017228:	defffd04 	addi	sp,sp,-12
 401722c:	dfc00215 	stw	ra,8(sp)
 4017230:	df000115 	stw	fp,4(sp)
 4017234:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4017238:	008100b4 	movhi	r2,1026
 401723c:	109a5504 	addi	r2,r2,26964
 4017240:	10800017 	ldw	r2,0(r2)
 4017244:	1005003a 	cmpeq	r2,r2,zero
 4017248:	1000061e 	bne	r2,zero,4017264 <alt_get_errno+0x3c>
 401724c:	008100b4 	movhi	r2,1026
 4017250:	109a5504 	addi	r2,r2,26964
 4017254:	10800017 	ldw	r2,0(r2)
 4017258:	103ee83a 	callr	r2
 401725c:	e0bfff15 	stw	r2,-4(fp)
 4017260:	00000306 	br	4017270 <alt_get_errno+0x48>
 4017264:	008100b4 	movhi	r2,1026
 4017268:	109a9604 	addi	r2,r2,27224
 401726c:	e0bfff15 	stw	r2,-4(fp)
 4017270:	e0bfff17 	ldw	r2,-4(fp)
}
 4017274:	e037883a 	mov	sp,fp
 4017278:	dfc00117 	ldw	ra,4(sp)
 401727c:	df000017 	ldw	fp,0(sp)
 4017280:	dec00204 	addi	sp,sp,8
 4017284:	f800283a 	ret

04017288 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4017288:	deffeb04 	addi	sp,sp,-84
 401728c:	dfc01415 	stw	ra,80(sp)
 4017290:	df001315 	stw	fp,76(sp)
 4017294:	df001304 	addi	fp,sp,76
 4017298:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401729c:	e0bffd17 	ldw	r2,-12(fp)
 40172a0:	1004803a 	cmplt	r2,r2,zero
 40172a4:	1000091e 	bne	r2,zero,40172cc <isatty+0x44>
 40172a8:	e13ffd17 	ldw	r4,-12(fp)
 40172ac:	01400304 	movi	r5,12
 40172b0:	4008ff80 	call	4008ff8 <__mulsi3>
 40172b4:	1007883a 	mov	r3,r2
 40172b8:	008100b4 	movhi	r2,1026
 40172bc:	10959b04 	addi	r2,r2,22124
 40172c0:	1887883a 	add	r3,r3,r2
 40172c4:	e0ffff15 	stw	r3,-4(fp)
 40172c8:	00000106 	br	40172d0 <isatty+0x48>
 40172cc:	e03fff15 	stw	zero,-4(fp)
 40172d0:	e0bfff17 	ldw	r2,-4(fp)
 40172d4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 40172d8:	e0bfed17 	ldw	r2,-76(fp)
 40172dc:	1005003a 	cmpeq	r2,r2,zero
 40172e0:	10000f1e 	bne	r2,zero,4017320 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40172e4:	e0bfed17 	ldw	r2,-76(fp)
 40172e8:	10800017 	ldw	r2,0(r2)
 40172ec:	10800817 	ldw	r2,32(r2)
 40172f0:	1004c03a 	cmpne	r2,r2,zero
 40172f4:	1000031e 	bne	r2,zero,4017304 <isatty+0x7c>
    {
      return 1;
 40172f8:	00800044 	movi	r2,1
 40172fc:	e0bffe15 	stw	r2,-8(fp)
 4017300:	00000c06 	br	4017334 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4017304:	e17fee04 	addi	r5,fp,-72
 4017308:	e13ffd17 	ldw	r4,-12(fp)
 401730c:	40171500 	call	4017150 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4017310:	e0bfef17 	ldw	r2,-68(fp)
 4017314:	10880020 	cmpeqi	r2,r2,8192
 4017318:	e0bffe15 	stw	r2,-8(fp)
 401731c:	00000506 	br	4017334 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4017320:	401734c0 	call	401734c <alt_get_errno>
 4017324:	1007883a 	mov	r3,r2
 4017328:	00801444 	movi	r2,81
 401732c:	18800015 	stw	r2,0(r3)
    return 0;
 4017330:	e03ffe15 	stw	zero,-8(fp)
 4017334:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4017338:	e037883a 	mov	sp,fp
 401733c:	dfc00117 	ldw	ra,4(sp)
 4017340:	df000017 	ldw	fp,0(sp)
 4017344:	dec00204 	addi	sp,sp,8
 4017348:	f800283a 	ret

0401734c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401734c:	defffd04 	addi	sp,sp,-12
 4017350:	dfc00215 	stw	ra,8(sp)
 4017354:	df000115 	stw	fp,4(sp)
 4017358:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 401735c:	008100b4 	movhi	r2,1026
 4017360:	109a5504 	addi	r2,r2,26964
 4017364:	10800017 	ldw	r2,0(r2)
 4017368:	1005003a 	cmpeq	r2,r2,zero
 401736c:	1000061e 	bne	r2,zero,4017388 <alt_get_errno+0x3c>
 4017370:	008100b4 	movhi	r2,1026
 4017374:	109a5504 	addi	r2,r2,26964
 4017378:	10800017 	ldw	r2,0(r2)
 401737c:	103ee83a 	callr	r2
 4017380:	e0bfff15 	stw	r2,-4(fp)
 4017384:	00000306 	br	4017394 <alt_get_errno+0x48>
 4017388:	008100b4 	movhi	r2,1026
 401738c:	109a9604 	addi	r2,r2,27224
 4017390:	e0bfff15 	stw	r2,-4(fp)
 4017394:	e0bfff17 	ldw	r2,-4(fp)
}
 4017398:	e037883a 	mov	sp,fp
 401739c:	dfc00117 	ldw	ra,4(sp)
 40173a0:	df000017 	ldw	fp,0(sp)
 40173a4:	dec00204 	addi	sp,sp,8
 40173a8:	f800283a 	ret

040173ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40173ac:	defff804 	addi	sp,sp,-32
 40173b0:	dfc00715 	stw	ra,28(sp)
 40173b4:	df000615 	stw	fp,24(sp)
 40173b8:	df000604 	addi	fp,sp,24
 40173bc:	e13ffc15 	stw	r4,-16(fp)
 40173c0:	e17ffd15 	stw	r5,-12(fp)
 40173c4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40173c8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40173cc:	e0bffc17 	ldw	r2,-16(fp)
 40173d0:	1004803a 	cmplt	r2,r2,zero
 40173d4:	1000091e 	bne	r2,zero,40173fc <lseek+0x50>
 40173d8:	e13ffc17 	ldw	r4,-16(fp)
 40173dc:	01400304 	movi	r5,12
 40173e0:	4008ff80 	call	4008ff8 <__mulsi3>
 40173e4:	1007883a 	mov	r3,r2
 40173e8:	008100b4 	movhi	r2,1026
 40173ec:	10959b04 	addi	r2,r2,22124
 40173f0:	1887883a 	add	r3,r3,r2
 40173f4:	e0ffff15 	stw	r3,-4(fp)
 40173f8:	00000106 	br	4017400 <lseek+0x54>
 40173fc:	e03fff15 	stw	zero,-4(fp)
 4017400:	e0bfff17 	ldw	r2,-4(fp)
 4017404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 4017408:	e0bffb17 	ldw	r2,-20(fp)
 401740c:	1005003a 	cmpeq	r2,r2,zero
 4017410:	1000111e 	bne	r2,zero,4017458 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4017414:	e0bffb17 	ldw	r2,-20(fp)
 4017418:	10800017 	ldw	r2,0(r2)
 401741c:	10800717 	ldw	r2,28(r2)
 4017420:	1005003a 	cmpeq	r2,r2,zero
 4017424:	1000091e 	bne	r2,zero,401744c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4017428:	e0bffb17 	ldw	r2,-20(fp)
 401742c:	10800017 	ldw	r2,0(r2)
 4017430:	10800717 	ldw	r2,28(r2)
 4017434:	e13ffb17 	ldw	r4,-20(fp)
 4017438:	e17ffd17 	ldw	r5,-12(fp)
 401743c:	e1bffe17 	ldw	r6,-8(fp)
 4017440:	103ee83a 	callr	r2
 4017444:	e0bffa15 	stw	r2,-24(fp)
 4017448:	00000506 	br	4017460 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401744c:	00bfde84 	movi	r2,-134
 4017450:	e0bffa15 	stw	r2,-24(fp)
 4017454:	00000206 	br	4017460 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 4017458:	00bfebc4 	movi	r2,-81
 401745c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 4017460:	e0bffa17 	ldw	r2,-24(fp)
 4017464:	1004403a 	cmpge	r2,r2,zero
 4017468:	1000071e 	bne	r2,zero,4017488 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 401746c:	40174a00 	call	40174a0 <alt_get_errno>
 4017470:	1007883a 	mov	r3,r2
 4017474:	e0bffa17 	ldw	r2,-24(fp)
 4017478:	0085c83a 	sub	r2,zero,r2
 401747c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4017480:	00bfffc4 	movi	r2,-1
 4017484:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 4017488:	e0bffa17 	ldw	r2,-24(fp)
}
 401748c:	e037883a 	mov	sp,fp
 4017490:	dfc00117 	ldw	ra,4(sp)
 4017494:	df000017 	ldw	fp,0(sp)
 4017498:	dec00204 	addi	sp,sp,8
 401749c:	f800283a 	ret

040174a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40174a0:	defffd04 	addi	sp,sp,-12
 40174a4:	dfc00215 	stw	ra,8(sp)
 40174a8:	df000115 	stw	fp,4(sp)
 40174ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40174b0:	008100b4 	movhi	r2,1026
 40174b4:	109a5504 	addi	r2,r2,26964
 40174b8:	10800017 	ldw	r2,0(r2)
 40174bc:	1005003a 	cmpeq	r2,r2,zero
 40174c0:	1000061e 	bne	r2,zero,40174dc <alt_get_errno+0x3c>
 40174c4:	008100b4 	movhi	r2,1026
 40174c8:	109a5504 	addi	r2,r2,26964
 40174cc:	10800017 	ldw	r2,0(r2)
 40174d0:	103ee83a 	callr	r2
 40174d4:	e0bfff15 	stw	r2,-4(fp)
 40174d8:	00000306 	br	40174e8 <alt_get_errno+0x48>
 40174dc:	008100b4 	movhi	r2,1026
 40174e0:	109a9604 	addi	r2,r2,27224
 40174e4:	e0bfff15 	stw	r2,-4(fp)
 40174e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40174ec:	e037883a 	mov	sp,fp
 40174f0:	dfc00117 	ldw	ra,4(sp)
 40174f4:	df000017 	ldw	fp,0(sp)
 40174f8:	dec00204 	addi	sp,sp,8
 40174fc:	f800283a 	ret

04017500 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4017500:	defffb04 	addi	sp,sp,-20
 4017504:	dfc00415 	stw	ra,16(sp)
 4017508:	df000315 	stw	fp,12(sp)
 401750c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4017510:	0009883a 	mov	r4,zero
 4017514:	40202980 	call	4020298 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4017518:	40188d40 	call	40188d4 <OSInit>
 401751c:	01000044 	movi	r4,1
 4017520:	401d79c0 	call	401d79c <OSSemCreate>
 4017524:	1007883a 	mov	r3,r2
 4017528:	008100b4 	movhi	r2,1026
 401752c:	109aa104 	addi	r2,r2,27268
 4017530:	10c00015 	stw	r3,0(r2)
 4017534:	01000044 	movi	r4,1
 4017538:	401d79c0 	call	401d79c <OSSemCreate>
 401753c:	1007883a 	mov	r3,r2
 4017540:	008100b4 	movhi	r2,1026
 4017544:	109aa304 	addi	r2,r2,27276
 4017548:	10c00015 	stw	r3,0(r2)
 401754c:	008100b4 	movhi	r2,1026
 4017550:	109a9a04 	addi	r2,r2,27240
 4017554:	e0bffd15 	stw	r2,-12(fp)
 4017558:	00800044 	movi	r2,1
 401755c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 4017560:	e13ffe0b 	ldhu	r4,-8(fp)
 4017564:	401d79c0 	call	401d79c <OSSemCreate>
 4017568:	1007883a 	mov	r3,r2
 401756c:	e0bffd17 	ldw	r2,-12(fp)
 4017570:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4017574:	40202cc0 	call	40202cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4017578:	010100b4 	movhi	r4,1026
 401757c:	2112b004 	addi	r4,r4,19136
 4017580:	014100b4 	movhi	r5,1026
 4017584:	2952b004 	addi	r5,r5,19136
 4017588:	018100b4 	movhi	r6,1026
 401758c:	3192b004 	addi	r6,r6,19136
 4017590:	4022b400 	call	4022b40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4017594:	40226400 	call	4022640 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4017598:	010100b4 	movhi	r4,1026
 401759c:	2109a904 	addi	r4,r4,9892
 40175a0:	40238000 	call	4023800 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40175a4:	d1205317 	ldw	r4,-32436(gp)
 40175a8:	d1605417 	ldw	r5,-32432(gp)
 40175ac:	d1a05517 	ldw	r6,-32428(gp)
 40175b0:	40063b80 	call	40063b8 <main>
 40175b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40175b8:	01000044 	movi	r4,1
 40175bc:	4016eb40 	call	4016eb4 <close>
  exit (result);
 40175c0:	e13fff17 	ldw	r4,-4(fp)
 40175c4:	40238140 	call	4023814 <exit>

040175c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40175c8:	defff704 	addi	sp,sp,-36
 40175cc:	dfc00815 	stw	ra,32(sp)
 40175d0:	df000715 	stw	fp,28(sp)
 40175d4:	df000704 	addi	fp,sp,28
 40175d8:	e13ffb15 	stw	r4,-20(fp)
 40175dc:	e17ffc15 	stw	r5,-16(fp)
 40175e0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40175e4:	e0bffb17 	ldw	r2,-20(fp)
 40175e8:	1004803a 	cmplt	r2,r2,zero
 40175ec:	1000091e 	bne	r2,zero,4017614 <read+0x4c>
 40175f0:	e13ffb17 	ldw	r4,-20(fp)
 40175f4:	01400304 	movi	r5,12
 40175f8:	4008ff80 	call	4008ff8 <__mulsi3>
 40175fc:	1007883a 	mov	r3,r2
 4017600:	008100b4 	movhi	r2,1026
 4017604:	10959b04 	addi	r2,r2,22124
 4017608:	1887883a 	add	r3,r3,r2
 401760c:	e0ffff15 	stw	r3,-4(fp)
 4017610:	00000106 	br	4017618 <read+0x50>
 4017614:	e03fff15 	stw	zero,-4(fp)
 4017618:	e0bfff17 	ldw	r2,-4(fp)
 401761c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4017620:	e0bffa17 	ldw	r2,-24(fp)
 4017624:	1005003a 	cmpeq	r2,r2,zero
 4017628:	1000241e 	bne	r2,zero,40176bc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401762c:	e0bffa17 	ldw	r2,-24(fp)
 4017630:	10800217 	ldw	r2,8(r2)
 4017634:	108000cc 	andi	r2,r2,3
 4017638:	10800060 	cmpeqi	r2,r2,1
 401763c:	10001a1e 	bne	r2,zero,40176a8 <read+0xe0>
 4017640:	e0bffa17 	ldw	r2,-24(fp)
 4017644:	10800017 	ldw	r2,0(r2)
 4017648:	10800517 	ldw	r2,20(r2)
 401764c:	1005003a 	cmpeq	r2,r2,zero
 4017650:	1000151e 	bne	r2,zero,40176a8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4017654:	e0bffa17 	ldw	r2,-24(fp)
 4017658:	10800017 	ldw	r2,0(r2)
 401765c:	10800517 	ldw	r2,20(r2)
 4017660:	e17ffc17 	ldw	r5,-16(fp)
 4017664:	e1bffd17 	ldw	r6,-12(fp)
 4017668:	e13ffa17 	ldw	r4,-24(fp)
 401766c:	103ee83a 	callr	r2
 4017670:	e0bff915 	stw	r2,-28(fp)
 4017674:	e0bff917 	ldw	r2,-28(fp)
 4017678:	1004403a 	cmpge	r2,r2,zero
 401767c:	1000071e 	bne	r2,zero,401769c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 4017680:	40176ec0 	call	40176ec <alt_get_errno>
 4017684:	e0fff917 	ldw	r3,-28(fp)
 4017688:	00c7c83a 	sub	r3,zero,r3
 401768c:	10c00015 	stw	r3,0(r2)
          return -1;
 4017690:	00bfffc4 	movi	r2,-1
 4017694:	e0bffe15 	stw	r2,-8(fp)
 4017698:	00000e06 	br	40176d4 <read+0x10c>
        }
        return rval;
 401769c:	e0bff917 	ldw	r2,-28(fp)
 40176a0:	e0bffe15 	stw	r2,-8(fp)
 40176a4:	00000b06 	br	40176d4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40176a8:	40176ec0 	call	40176ec <alt_get_errno>
 40176ac:	1007883a 	mov	r3,r2
 40176b0:	00800344 	movi	r2,13
 40176b4:	18800015 	stw	r2,0(r3)
 40176b8:	00000406 	br	40176cc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40176bc:	40176ec0 	call	40176ec <alt_get_errno>
 40176c0:	1007883a 	mov	r3,r2
 40176c4:	00801444 	movi	r2,81
 40176c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40176cc:	00bfffc4 	movi	r2,-1
 40176d0:	e0bffe15 	stw	r2,-8(fp)
 40176d4:	e0bffe17 	ldw	r2,-8(fp)
}
 40176d8:	e037883a 	mov	sp,fp
 40176dc:	dfc00117 	ldw	ra,4(sp)
 40176e0:	df000017 	ldw	fp,0(sp)
 40176e4:	dec00204 	addi	sp,sp,8
 40176e8:	f800283a 	ret

040176ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40176ec:	defffd04 	addi	sp,sp,-12
 40176f0:	dfc00215 	stw	ra,8(sp)
 40176f4:	df000115 	stw	fp,4(sp)
 40176f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40176fc:	008100b4 	movhi	r2,1026
 4017700:	109a5504 	addi	r2,r2,26964
 4017704:	10800017 	ldw	r2,0(r2)
 4017708:	1005003a 	cmpeq	r2,r2,zero
 401770c:	1000061e 	bne	r2,zero,4017728 <alt_get_errno+0x3c>
 4017710:	008100b4 	movhi	r2,1026
 4017714:	109a5504 	addi	r2,r2,26964
 4017718:	10800017 	ldw	r2,0(r2)
 401771c:	103ee83a 	callr	r2
 4017720:	e0bfff15 	stw	r2,-4(fp)
 4017724:	00000306 	br	4017734 <alt_get_errno+0x48>
 4017728:	008100b4 	movhi	r2,1026
 401772c:	109a9604 	addi	r2,r2,27224
 4017730:	e0bfff15 	stw	r2,-4(fp)
 4017734:	e0bfff17 	ldw	r2,-4(fp)
}
 4017738:	e037883a 	mov	sp,fp
 401773c:	dfc00117 	ldw	ra,4(sp)
 4017740:	df000017 	ldw	fp,0(sp)
 4017744:	dec00204 	addi	sp,sp,8
 4017748:	f800283a 	ret

0401774c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401774c:	defffc04 	addi	sp,sp,-16
 4017750:	dfc00315 	stw	ra,12(sp)
 4017754:	df000215 	stw	fp,8(sp)
 4017758:	dc000115 	stw	r16,4(sp)
 401775c:	df000104 	addi	fp,sp,4
 4017760:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4017764:	e0bfff17 	ldw	r2,-4(fp)
 4017768:	108000d0 	cmplti	r2,r2,3
 401776c:	10000f1e 	bne	r2,zero,40177ac <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 4017770:	e13fff17 	ldw	r4,-4(fp)
 4017774:	040100b4 	movhi	r16,1026
 4017778:	84159b04 	addi	r16,r16,22124
 401777c:	01400304 	movi	r5,12
 4017780:	4008ff80 	call	4008ff8 <__mulsi3>
 4017784:	1405883a 	add	r2,r2,r16
 4017788:	10800204 	addi	r2,r2,8
 401778c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4017790:	e13fff17 	ldw	r4,-4(fp)
 4017794:	040100b4 	movhi	r16,1026
 4017798:	84159b04 	addi	r16,r16,22124
 401779c:	01400304 	movi	r5,12
 40177a0:	4008ff80 	call	4008ff8 <__mulsi3>
 40177a4:	1405883a 	add	r2,r2,r16
 40177a8:	10000015 	stw	zero,0(r2)
  }
}
 40177ac:	e037883a 	mov	sp,fp
 40177b0:	dfc00217 	ldw	ra,8(sp)
 40177b4:	df000117 	ldw	fp,4(sp)
 40177b8:	dc000017 	ldw	r16,0(sp)
 40177bc:	dec00304 	addi	sp,sp,12
 40177c0:	f800283a 	ret

040177c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40177c4:	defff804 	addi	sp,sp,-32
 40177c8:	df000715 	stw	fp,28(sp)
 40177cc:	df000704 	addi	fp,sp,28
 40177d0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40177d4:	0005303a 	rdctl	r2,status
 40177d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40177dc:	e0fffb17 	ldw	r3,-20(fp)
 40177e0:	00bfff84 	movi	r2,-2
 40177e4:	1884703a 	and	r2,r3,r2
 40177e8:	1001703a 	wrctl	status,r2
  
  return context;
 40177ec:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40177f0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40177f4:	d0a01017 	ldw	r2,-32704(gp)
 40177f8:	10c000c4 	addi	r3,r2,3
 40177fc:	00bfff04 	movi	r2,-4
 4017800:	1884703a 	and	r2,r3,r2
 4017804:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4017808:	d0e01017 	ldw	r3,-32704(gp)
 401780c:	e0bffe17 	ldw	r2,-8(fp)
 4017810:	1887883a 	add	r3,r3,r2
 4017814:	00818034 	movhi	r2,1536
 4017818:	10800004 	addi	r2,r2,0
 401781c:	10c0072e 	bgeu	r2,r3,401783c <sbrk+0x78>
 4017820:	e0bffd17 	ldw	r2,-12(fp)
 4017824:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017828:	e0bffa17 	ldw	r2,-24(fp)
 401782c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4017830:	00bfffc4 	movi	r2,-1
 4017834:	e0bfff15 	stw	r2,-4(fp)
 4017838:	00000c06 	br	401786c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 401783c:	d0a01017 	ldw	r2,-32704(gp)
 4017840:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4017844:	d0e01017 	ldw	r3,-32704(gp)
 4017848:	e0bffe17 	ldw	r2,-8(fp)
 401784c:	1885883a 	add	r2,r3,r2
 4017850:	d0a01015 	stw	r2,-32704(gp)
 4017854:	e0bffd17 	ldw	r2,-12(fp)
 4017858:	e0bff915 	stw	r2,-28(fp)
 401785c:	e0bff917 	ldw	r2,-28(fp)
 4017860:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4017864:	e0bffc17 	ldw	r2,-16(fp)
 4017868:	e0bfff15 	stw	r2,-4(fp)
 401786c:	e0bfff17 	ldw	r2,-4(fp)
} 
 4017870:	e037883a 	mov	sp,fp
 4017874:	df000017 	ldw	fp,0(sp)
 4017878:	dec00104 	addi	sp,sp,4
 401787c:	f800283a 	ret

04017880 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4017880:	defffa04 	addi	sp,sp,-24
 4017884:	df000515 	stw	fp,20(sp)
 4017888:	df000504 	addi	fp,sp,20
 401788c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017890:	0005303a 	rdctl	r2,status
 4017894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017898:	e0fffd17 	ldw	r3,-12(fp)
 401789c:	00bfff84 	movi	r2,-2
 40178a0:	1884703a 	and	r2,r3,r2
 40178a4:	1001703a 	wrctl	status,r2
  
  return context;
 40178a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40178ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 40178b0:	e0bfff17 	ldw	r2,-4(fp)
 40178b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40178b8:	e0bffc17 	ldw	r2,-16(fp)
 40178bc:	10c00017 	ldw	r3,0(r2)
 40178c0:	e0bffc17 	ldw	r2,-16(fp)
 40178c4:	10800117 	ldw	r2,4(r2)
 40178c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 40178cc:	e0bffc17 	ldw	r2,-16(fp)
 40178d0:	10c00117 	ldw	r3,4(r2)
 40178d4:	e0bffc17 	ldw	r2,-16(fp)
 40178d8:	10800017 	ldw	r2,0(r2)
 40178dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40178e0:	e0fffc17 	ldw	r3,-16(fp)
 40178e4:	e0bffc17 	ldw	r2,-16(fp)
 40178e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 40178ec:	e0fffc17 	ldw	r3,-16(fp)
 40178f0:	e0bffc17 	ldw	r2,-16(fp)
 40178f4:	18800015 	stw	r2,0(r3)
 40178f8:	e0bffe17 	ldw	r2,-8(fp)
 40178fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017900:	e0bffb17 	ldw	r2,-20(fp)
 4017904:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4017908:	e037883a 	mov	sp,fp
 401790c:	df000017 	ldw	fp,0(sp)
 4017910:	dec00104 	addi	sp,sp,4
 4017914:	f800283a 	ret

04017918 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4017918:	defffb04 	addi	sp,sp,-20
 401791c:	dfc00415 	stw	ra,16(sp)
 4017920:	df000315 	stw	fp,12(sp)
 4017924:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4017928:	d0a01117 	ldw	r2,-32700(gp)
 401792c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4017930:	d0a05717 	ldw	r2,-32420(gp)
 4017934:	10800044 	addi	r2,r2,1
 4017938:	d0a05715 	stw	r2,-32420(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401793c:	00003106 	br	4017a04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4017940:	e0bffe17 	ldw	r2,-8(fp)
 4017944:	10800017 	ldw	r2,0(r2)
 4017948:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401794c:	e0bffe17 	ldw	r2,-8(fp)
 4017950:	10800403 	ldbu	r2,16(r2)
 4017954:	10803fcc 	andi	r2,r2,255
 4017958:	1005003a 	cmpeq	r2,r2,zero
 401795c:	1000051e 	bne	r2,zero,4017974 <alt_tick+0x5c>
 4017960:	d0a05717 	ldw	r2,-32420(gp)
 4017964:	1004c03a 	cmpne	r2,r2,zero
 4017968:	1000021e 	bne	r2,zero,4017974 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 401796c:	e0bffe17 	ldw	r2,-8(fp)
 4017970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4017974:	e0bffe17 	ldw	r2,-8(fp)
 4017978:	10c00217 	ldw	r3,8(r2)
 401797c:	d0a05717 	ldw	r2,-32420(gp)
 4017980:	10c01e36 	bltu	r2,r3,40179fc <alt_tick+0xe4>
 4017984:	e0bffe17 	ldw	r2,-8(fp)
 4017988:	10800403 	ldbu	r2,16(r2)
 401798c:	10803fcc 	andi	r2,r2,255
 4017990:	1004c03a 	cmpne	r2,r2,zero
 4017994:	1000191e 	bne	r2,zero,40179fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4017998:	e0bffe17 	ldw	r2,-8(fp)
 401799c:	10c00317 	ldw	r3,12(r2)
 40179a0:	e0bffe17 	ldw	r2,-8(fp)
 40179a4:	11000517 	ldw	r4,20(r2)
 40179a8:	183ee83a 	callr	r3
 40179ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40179b0:	e0bffd17 	ldw	r2,-12(fp)
 40179b4:	1004c03a 	cmpne	r2,r2,zero
 40179b8:	1000031e 	bne	r2,zero,40179c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 40179bc:	e13ffe17 	ldw	r4,-8(fp)
 40179c0:	40178800 	call	4017880 <alt_alarm_stop>
 40179c4:	00000d06 	br	40179fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 40179c8:	e0bffe17 	ldw	r2,-8(fp)
 40179cc:	10c00217 	ldw	r3,8(r2)
 40179d0:	e0bffd17 	ldw	r2,-12(fp)
 40179d4:	1887883a 	add	r3,r3,r2
 40179d8:	e0bffe17 	ldw	r2,-8(fp)
 40179dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40179e0:	e0bffe17 	ldw	r2,-8(fp)
 40179e4:	10c00217 	ldw	r3,8(r2)
 40179e8:	d0a05717 	ldw	r2,-32420(gp)
 40179ec:	1880032e 	bgeu	r3,r2,40179fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 40179f0:	e0fffe17 	ldw	r3,-8(fp)
 40179f4:	00800044 	movi	r2,1
 40179f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 40179fc:	e0bfff17 	ldw	r2,-4(fp)
 4017a00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4017a04:	d0e01104 	addi	r3,gp,-32700
 4017a08:	e0bffe17 	ldw	r2,-8(fp)
 4017a0c:	10ffcc1e 	bne	r2,r3,4017940 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4017a10:	4018d300 	call	4018d30 <OSTimeTick>
}
 4017a14:	e037883a 	mov	sp,fp
 4017a18:	dfc00117 	ldw	ra,4(sp)
 4017a1c:	df000017 	ldw	fp,0(sp)
 4017a20:	dec00204 	addi	sp,sp,8
 4017a24:	f800283a 	ret

04017a28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4017a28:	defff904 	addi	sp,sp,-28
 4017a2c:	dfc00615 	stw	ra,24(sp)
 4017a30:	df000515 	stw	fp,20(sp)
 4017a34:	dc000415 	stw	r16,16(sp)
 4017a38:	df000404 	addi	fp,sp,16
 4017a3c:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 4017a40:	008100b4 	movhi	r2,1026
 4017a44:	109aa444 	addi	r2,r2,27281
 4017a48:	10800003 	ldbu	r2,0(r2)
 4017a4c:	10803fcc 	andi	r2,r2,255
 4017a50:	1004c03a 	cmpne	r2,r2,zero
 4017a54:	1000041e 	bne	r2,zero,4017a68 <usleep+0x40>
  {
    return alt_busy_sleep (us);
 4017a58:	e13ffe17 	ldw	r4,-8(fp)
 4017a5c:	40223d00 	call	40223d0 <alt_busy_sleep>
 4017a60:	e0bfff15 	stw	r2,-4(fp)
 4017a64:	00003106 	br	4017b2c <usleep+0x104>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4017a68:	008100b4 	movhi	r2,1026
 4017a6c:	109a9e04 	addi	r2,r2,27256
 4017a70:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 4017a74:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 4017a78:	e13ffe17 	ldw	r4,-8(fp)
 4017a7c:	014003f4 	movhi	r5,15
 4017a80:	29509004 	addi	r5,r5,16960
 4017a84:	4008fe80 	call	4008fe8 <__udivsi3>
 4017a88:	1009883a 	mov	r4,r2
 4017a8c:	e17ffc17 	ldw	r5,-16(fp)
 4017a90:	4008ff80 	call	4008ff8 <__mulsi3>
 4017a94:	1021883a 	mov	r16,r2
 4017a98:	e13ffe17 	ldw	r4,-8(fp)
 4017a9c:	014003f4 	movhi	r5,15
 4017aa0:	29509004 	addi	r5,r5,16960
 4017aa4:	4008ff00 	call	4008ff0 <__umodsi3>
 4017aa8:	1009883a 	mov	r4,r2
 4017aac:	e17ffc17 	ldw	r5,-16(fp)
 4017ab0:	4008ff80 	call	4008ff8 <__mulsi3>
 4017ab4:	1009883a 	mov	r4,r2
 4017ab8:	014003f4 	movhi	r5,15
 4017abc:	29509004 	addi	r5,r5,16960
 4017ac0:	4008fe80 	call	4008fe8 <__udivsi3>
 4017ac4:	8085883a 	add	r2,r16,r2
 4017ac8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4017acc:	00000706 	br	4017aec <usleep+0xc4>
  {
    OSTimeDly(0xffff);
 4017ad0:	013fffd4 	movui	r4,65535
 4017ad4:	401fce40 	call	401fce4 <OSTimeDly>
    ticks -= 0xffff;
 4017ad8:	e0bffd17 	ldw	r2,-12(fp)
 4017adc:	00fffff4 	movhi	r3,65535
 4017ae0:	18c00044 	addi	r3,r3,1
 4017ae4:	10c5883a 	add	r2,r2,r3
 4017ae8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4017aec:	e0fffd17 	ldw	r3,-12(fp)
 4017af0:	00bfffd4 	movui	r2,65535
 4017af4:	10fff636 	bltu	r2,r3,4017ad0 <usleep+0xa8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 4017af8:	e0bffd17 	ldw	r2,-12(fp)
 4017afc:	113fffcc 	andi	r4,r2,65535
 4017b00:	401fce40 	call	401fce4 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 4017b04:	010003f4 	movhi	r4,15
 4017b08:	21109004 	addi	r4,r4,16960
 4017b0c:	e17ffc17 	ldw	r5,-16(fp)
 4017b10:	4008fe80 	call	4008fe8 <__udivsi3>
 4017b14:	100b883a 	mov	r5,r2
 4017b18:	e13ffe17 	ldw	r4,-8(fp)
 4017b1c:	4008ff00 	call	4008ff0 <__umodsi3>
 4017b20:	1009883a 	mov	r4,r2
 4017b24:	40223d00 	call	40223d0 <alt_busy_sleep>

  return 0;  
 4017b28:	e03fff15 	stw	zero,-4(fp)
 4017b2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4017b30:	e037883a 	mov	sp,fp
 4017b34:	dfc00217 	ldw	ra,8(sp)
 4017b38:	df000117 	ldw	fp,4(sp)
 4017b3c:	dc000017 	ldw	r16,0(sp)
 4017b40:	dec00304 	addi	sp,sp,12
 4017b44:	f800283a 	ret

04017b48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4017b48:	defff704 	addi	sp,sp,-36
 4017b4c:	dfc00815 	stw	ra,32(sp)
 4017b50:	df000715 	stw	fp,28(sp)
 4017b54:	df000704 	addi	fp,sp,28
 4017b58:	e13ffb15 	stw	r4,-20(fp)
 4017b5c:	e17ffc15 	stw	r5,-16(fp)
 4017b60:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4017b64:	e0bffb17 	ldw	r2,-20(fp)
 4017b68:	1004803a 	cmplt	r2,r2,zero
 4017b6c:	1000091e 	bne	r2,zero,4017b94 <write+0x4c>
 4017b70:	e13ffb17 	ldw	r4,-20(fp)
 4017b74:	01400304 	movi	r5,12
 4017b78:	4008ff80 	call	4008ff8 <__mulsi3>
 4017b7c:	1007883a 	mov	r3,r2
 4017b80:	008100b4 	movhi	r2,1026
 4017b84:	10959b04 	addi	r2,r2,22124
 4017b88:	1887883a 	add	r3,r3,r2
 4017b8c:	e0ffff15 	stw	r3,-4(fp)
 4017b90:	00000106 	br	4017b98 <write+0x50>
 4017b94:	e03fff15 	stw	zero,-4(fp)
 4017b98:	e0bfff17 	ldw	r2,-4(fp)
 4017b9c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4017ba0:	e0bffa17 	ldw	r2,-24(fp)
 4017ba4:	1005003a 	cmpeq	r2,r2,zero
 4017ba8:	1000241e 	bne	r2,zero,4017c3c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4017bac:	e0bffa17 	ldw	r2,-24(fp)
 4017bb0:	10800217 	ldw	r2,8(r2)
 4017bb4:	108000cc 	andi	r2,r2,3
 4017bb8:	1005003a 	cmpeq	r2,r2,zero
 4017bbc:	10001a1e 	bne	r2,zero,4017c28 <write+0xe0>
 4017bc0:	e0bffa17 	ldw	r2,-24(fp)
 4017bc4:	10800017 	ldw	r2,0(r2)
 4017bc8:	10800617 	ldw	r2,24(r2)
 4017bcc:	1005003a 	cmpeq	r2,r2,zero
 4017bd0:	1000151e 	bne	r2,zero,4017c28 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4017bd4:	e0bffa17 	ldw	r2,-24(fp)
 4017bd8:	10800017 	ldw	r2,0(r2)
 4017bdc:	10800617 	ldw	r2,24(r2)
 4017be0:	e17ffc17 	ldw	r5,-16(fp)
 4017be4:	e1bffd17 	ldw	r6,-12(fp)
 4017be8:	e13ffa17 	ldw	r4,-24(fp)
 4017bec:	103ee83a 	callr	r2
 4017bf0:	e0bff915 	stw	r2,-28(fp)
 4017bf4:	e0bff917 	ldw	r2,-28(fp)
 4017bf8:	1004403a 	cmpge	r2,r2,zero
 4017bfc:	1000071e 	bne	r2,zero,4017c1c <write+0xd4>
      {
        ALT_ERRNO = -rval;
 4017c00:	4017c6c0 	call	4017c6c <alt_get_errno>
 4017c04:	e0fff917 	ldw	r3,-28(fp)
 4017c08:	00c7c83a 	sub	r3,zero,r3
 4017c0c:	10c00015 	stw	r3,0(r2)
        return -1;
 4017c10:	00bfffc4 	movi	r2,-1
 4017c14:	e0bffe15 	stw	r2,-8(fp)
 4017c18:	00000e06 	br	4017c54 <write+0x10c>
      }
      return rval;
 4017c1c:	e0bff917 	ldw	r2,-28(fp)
 4017c20:	e0bffe15 	stw	r2,-8(fp)
 4017c24:	00000b06 	br	4017c54 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4017c28:	4017c6c0 	call	4017c6c <alt_get_errno>
 4017c2c:	1007883a 	mov	r3,r2
 4017c30:	00800344 	movi	r2,13
 4017c34:	18800015 	stw	r2,0(r3)
 4017c38:	00000406 	br	4017c4c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4017c3c:	4017c6c0 	call	4017c6c <alt_get_errno>
 4017c40:	1007883a 	mov	r3,r2
 4017c44:	00801444 	movi	r2,81
 4017c48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4017c4c:	00bfffc4 	movi	r2,-1
 4017c50:	e0bffe15 	stw	r2,-8(fp)
 4017c54:	e0bffe17 	ldw	r2,-8(fp)
}
 4017c58:	e037883a 	mov	sp,fp
 4017c5c:	dfc00117 	ldw	ra,4(sp)
 4017c60:	df000017 	ldw	fp,0(sp)
 4017c64:	dec00204 	addi	sp,sp,8
 4017c68:	f800283a 	ret

04017c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017c6c:	defffd04 	addi	sp,sp,-12
 4017c70:	dfc00215 	stw	ra,8(sp)
 4017c74:	df000115 	stw	fp,4(sp)
 4017c78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4017c7c:	008100b4 	movhi	r2,1026
 4017c80:	109a5504 	addi	r2,r2,26964
 4017c84:	10800017 	ldw	r2,0(r2)
 4017c88:	1005003a 	cmpeq	r2,r2,zero
 4017c8c:	1000061e 	bne	r2,zero,4017ca8 <alt_get_errno+0x3c>
 4017c90:	008100b4 	movhi	r2,1026
 4017c94:	109a5504 	addi	r2,r2,26964
 4017c98:	10800017 	ldw	r2,0(r2)
 4017c9c:	103ee83a 	callr	r2
 4017ca0:	e0bfff15 	stw	r2,-4(fp)
 4017ca4:	00000306 	br	4017cb4 <alt_get_errno+0x48>
 4017ca8:	008100b4 	movhi	r2,1026
 4017cac:	109a9604 	addi	r2,r2,27224
 4017cb0:	e0bfff15 	stw	r2,-4(fp)
 4017cb4:	e0bfff17 	ldw	r2,-4(fp)
}
 4017cb8:	e037883a 	mov	sp,fp
 4017cbc:	dfc00117 	ldw	ra,4(sp)
 4017cc0:	df000017 	ldw	fp,0(sp)
 4017cc4:	dec00204 	addi	sp,sp,8
 4017cc8:	f800283a 	ret

04017ccc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 4017ccc:	deffdf04 	addi	sp,sp,-132
 4017cd0:	dfc02015 	stw	ra,128(sp)
 4017cd4:	df001f15 	stw	fp,124(sp)
 4017cd8:	df001f04 	addi	fp,sp,124
 4017cdc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4017ce0:	e17fe204 	addi	r5,fp,-120
 4017ce4:	01003fc4 	movi	r4,255
 4017ce8:	401fb240 	call	401fb24 <OSTaskQuery>
 4017cec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4017cf0:	e0bffe83 	ldbu	r2,-6(fp)
 4017cf4:	10803fcc 	andi	r2,r2,255
 4017cf8:	1004c03a 	cmpne	r2,r2,zero
 4017cfc:	1000191e 	bne	r2,zero,4017d64 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 4017d00:	e0bfee83 	ldbu	r2,-70(fp)
 4017d04:	10803fcc 	andi	r2,r2,255
 4017d08:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4017d0c:	d1205917 	ldw	r4,-32412(gp)
 4017d10:	e17ffd04 	addi	r5,fp,-12
 4017d14:	401e0700 	call	401e070 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4017d18:	e0bffe43 	ldbu	r2,-7(fp)
 4017d1c:	10803fcc 	andi	r2,r2,255
 4017d20:	1005003a 	cmpeq	r2,r2,zero
 4017d24:	1000071e 	bne	r2,zero,4017d44 <__env_lock+0x78>
 4017d28:	d0e01317 	ldw	r3,-32692(gp)
 4017d2c:	e0bfe117 	ldw	r2,-124(fp)
 4017d30:	10c0041e 	bne	r2,r3,4017d44 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 4017d34:	d0a05817 	ldw	r2,-32416(gp)
 4017d38:	10800044 	addi	r2,r2,1
 4017d3c:	d0a05815 	stw	r2,-32416(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 4017d40:	00000806 	br	4017d64 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4017d44:	d1205917 	ldw	r4,-32412(gp)
 4017d48:	e1bffe84 	addi	r6,fp,-6
 4017d4c:	000b883a 	mov	r5,zero
 4017d50:	401db500 	call	401db50 <OSSemPend>
    locks  = 1;
 4017d54:	00800044 	movi	r2,1
 4017d58:	d0a05815 	stw	r2,-32416(gp)
    lockid = id;
 4017d5c:	e0bfe117 	ldw	r2,-124(fp)
 4017d60:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4017d64:	e037883a 	mov	sp,fp
 4017d68:	dfc00117 	ldw	ra,4(sp)
 4017d6c:	df000017 	ldw	fp,0(sp)
 4017d70:	dec00204 	addi	sp,sp,8
 4017d74:	f800283a 	ret

04017d78 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 4017d78:	defffd04 	addi	sp,sp,-12
 4017d7c:	dfc00215 	stw	ra,8(sp)
 4017d80:	df000115 	stw	fp,4(sp)
 4017d84:	df000104 	addi	fp,sp,4
 4017d88:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 4017d8c:	d0a05817 	ldw	r2,-32416(gp)
 4017d90:	1005003a 	cmpeq	r2,r2,zero
 4017d94:	10000a1e 	bne	r2,zero,4017dc0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 4017d98:	d0a05817 	ldw	r2,-32416(gp)
 4017d9c:	10bfffc4 	addi	r2,r2,-1
 4017da0:	d0a05815 	stw	r2,-32416(gp)
 4017da4:	d0a05817 	ldw	r2,-32416(gp)
 4017da8:	1004c03a 	cmpne	r2,r2,zero
 4017dac:	1000041e 	bne	r2,zero,4017dc0 <__env_unlock+0x48>
  {
    lockid = -1;
 4017db0:	00bfffc4 	movi	r2,-1
 4017db4:	d0a01315 	stw	r2,-32692(gp)
    OSSemPost( alt_envsem );
 4017db8:	d1205917 	ldw	r4,-32412(gp)
 4017dbc:	401df480 	call	401df48 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4017dc0:	e037883a 	mov	sp,fp
 4017dc4:	dfc00117 	ldw	ra,4(sp)
 4017dc8:	df000017 	ldw	fp,0(sp)
 4017dcc:	dec00204 	addi	sp,sp,8
 4017dd0:	f800283a 	ret

04017dd4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4017dd4:	deffdb04 	addi	sp,sp,-148
 4017dd8:	dfc02415 	stw	ra,144(sp)
 4017ddc:	df002315 	stw	fp,140(sp)
 4017de0:	df002304 	addi	fp,sp,140
 4017de4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4017de8:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4017dec:	008100b4 	movhi	r2,1026
 4017df0:	109aa444 	addi	r2,r2,27281
 4017df4:	10800003 	ldbu	r2,0(r2)
 4017df8:	10803fcc 	andi	r2,r2,255
 4017dfc:	10800058 	cmpnei	r2,r2,1
 4017e00:	1000311e 	bne	r2,zero,4017ec8 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4017e04:	e17fe204 	addi	r5,fp,-120
 4017e08:	01003fc4 	movi	r4,255
 4017e0c:	401fb240 	call	401fb24 <OSTaskQuery>
 4017e10:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4017e14:	e0bffe83 	ldbu	r2,-6(fp)
 4017e18:	10803fcc 	andi	r2,r2,255
 4017e1c:	1004c03a 	cmpne	r2,r2,zero
 4017e20:	1000291e 	bne	r2,zero,4017ec8 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 4017e24:	e0bfee83 	ldbu	r2,-70(fp)
 4017e28:	10803fcc 	andi	r2,r2,255
 4017e2c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4017e30:	d1205b17 	ldw	r4,-32404(gp)
 4017e34:	e17ffd04 	addi	r5,fp,-12
 4017e38:	401e0700 	call	401e070 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017e3c:	0005303a 	rdctl	r2,status
 4017e40:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017e44:	e0ffdf17 	ldw	r3,-132(fp)
 4017e48:	00bfff84 	movi	r2,-2
 4017e4c:	1884703a 	and	r2,r3,r2
 4017e50:	1001703a 	wrctl	status,r2
  
  return context;
 4017e54:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 4017e58:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4017e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4017e60:	10bfffcc 	andi	r2,r2,65535
 4017e64:	1004c03a 	cmpne	r2,r2,zero
 4017e68:	10000b1e 	bne	r2,zero,4017e98 <__malloc_lock+0xc4>
 4017e6c:	d0e01417 	ldw	r3,-32688(gp)
 4017e70:	e0bfe117 	ldw	r2,-124(fp)
 4017e74:	10c0081e 	bne	r2,r3,4017e98 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 4017e78:	d0a05a17 	ldw	r2,-32408(gp)
 4017e7c:	10800044 	addi	r2,r2,1
 4017e80:	d0a05a15 	stw	r2,-32408(gp)
 4017e84:	e0bfe017 	ldw	r2,-128(fp)
 4017e88:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017e8c:	e0bfde17 	ldw	r2,-136(fp)
 4017e90:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 4017e94:	00000c06 	br	4017ec8 <__malloc_lock+0xf4>
 4017e98:	e0bfe017 	ldw	r2,-128(fp)
 4017e9c:	e0bfdd15 	stw	r2,-140(fp)
 4017ea0:	e0bfdd17 	ldw	r2,-140(fp)
 4017ea4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4017ea8:	d1205b17 	ldw	r4,-32404(gp)
 4017eac:	e1bffe84 	addi	r6,fp,-6
 4017eb0:	000b883a 	mov	r5,zero
 4017eb4:	401db500 	call	401db50 <OSSemPend>
    locks  = 1;
 4017eb8:	00800044 	movi	r2,1
 4017ebc:	d0a05a15 	stw	r2,-32408(gp)
    lockid = id;
 4017ec0:	e0bfe117 	ldw	r2,-124(fp)
 4017ec4:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4017ec8:	e037883a 	mov	sp,fp
 4017ecc:	dfc00117 	ldw	ra,4(sp)
 4017ed0:	df000017 	ldw	fp,0(sp)
 4017ed4:	dec00204 	addi	sp,sp,8
 4017ed8:	f800283a 	ret

04017edc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4017edc:	defff804 	addi	sp,sp,-32
 4017ee0:	dfc00715 	stw	ra,28(sp)
 4017ee4:	df000615 	stw	fp,24(sp)
 4017ee8:	df000604 	addi	fp,sp,24
 4017eec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4017ef0:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4017ef4:	008100b4 	movhi	r2,1026
 4017ef8:	109aa444 	addi	r2,r2,27281
 4017efc:	10800003 	ldbu	r2,0(r2)
 4017f00:	10803fcc 	andi	r2,r2,255
 4017f04:	10800058 	cmpnei	r2,r2,1
 4017f08:	1000231e 	bne	r2,zero,4017f98 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017f0c:	0005303a 	rdctl	r2,status
 4017f10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017f14:	e0fffd17 	ldw	r3,-12(fp)
 4017f18:	00bfff84 	movi	r2,-2
 4017f1c:	1884703a 	and	r2,r3,r2
 4017f20:	1001703a 	wrctl	status,r2
  
  return context;
 4017f24:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 4017f28:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 4017f2c:	d0a05a17 	ldw	r2,-32408(gp)
 4017f30:	1004c03a 	cmpne	r2,r2,zero
 4017f34:	1000051e 	bne	r2,zero,4017f4c <__malloc_unlock+0x70>
 4017f38:	e0bffe17 	ldw	r2,-8(fp)
 4017f3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017f40:	e0bffc17 	ldw	r2,-16(fp)
 4017f44:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4017f48:	00001306 	br	4017f98 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4017f4c:	d0a05a17 	ldw	r2,-32408(gp)
 4017f50:	10bfffc4 	addi	r2,r2,-1
 4017f54:	d0a05a15 	stw	r2,-32408(gp)
 4017f58:	d0a05a17 	ldw	r2,-32408(gp)
 4017f5c:	1004c03a 	cmpne	r2,r2,zero
 4017f60:	1000091e 	bne	r2,zero,4017f88 <__malloc_unlock+0xac>
  {
    lockid = -1;
 4017f64:	00bfffc4 	movi	r2,-1
 4017f68:	d0a01415 	stw	r2,-32688(gp)
 4017f6c:	e0bffe17 	ldw	r2,-8(fp)
 4017f70:	e0bffb15 	stw	r2,-20(fp)
 4017f74:	e0bffb17 	ldw	r2,-20(fp)
 4017f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4017f7c:	d1205b17 	ldw	r4,-32404(gp)
 4017f80:	401df480 	call	401df48 <OSSemPost>
 4017f84:	00000406 	br	4017f98 <__malloc_unlock+0xbc>
 4017f88:	e0bffe17 	ldw	r2,-8(fp)
 4017f8c:	e0bffa15 	stw	r2,-24(fp)
 4017f90:	e0bffa17 	ldw	r2,-24(fp)
 4017f94:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4017f98:	e037883a 	mov	sp,fp
 4017f9c:	dfc00117 	ldw	ra,4(sp)
 4017fa0:	df000017 	ldw	fp,0(sp)
 4017fa4:	dec00204 	addi	sp,sp,8
 4017fa8:	f800283a 	ret

04017fac <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4017fac:	defff604 	addi	sp,sp,-40
 4017fb0:	dfc00915 	stw	ra,36(sp)
 4017fb4:	df000815 	stw	fp,32(sp)
 4017fb8:	df000804 	addi	fp,sp,32
 4017fbc:	e13ffc15 	stw	r4,-16(fp)
 4017fc0:	e17ffd15 	stw	r5,-12(fp)
 4017fc4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4017fc8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4017fcc:	e0bffe17 	ldw	r2,-8(fp)
 4017fd0:	1004c03a 	cmpne	r2,r2,zero
 4017fd4:	1000021e 	bne	r2,zero,4017fe0 <OSEventNameGet+0x34>
        return (0);
 4017fd8:	e03fff15 	stw	zero,-4(fp)
 4017fdc:	00003906 	br	40180c4 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4017fe0:	e0bffc17 	ldw	r2,-16(fp)
 4017fe4:	1004c03a 	cmpne	r2,r2,zero
 4017fe8:	1000051e 	bne	r2,zero,4018000 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 4017fec:	e0fffe17 	ldw	r3,-8(fp)
 4017ff0:	00800104 	movi	r2,4
 4017ff4:	18800005 	stb	r2,0(r3)
        return (0);
 4017ff8:	e03fff15 	stw	zero,-4(fp)
 4017ffc:	00003106 	br	40180c4 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4018000:	e0bffd17 	ldw	r2,-12(fp)
 4018004:	1004c03a 	cmpne	r2,r2,zero
 4018008:	1000051e 	bne	r2,zero,4018020 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 401800c:	e0fffe17 	ldw	r3,-8(fp)
 4018010:	00800304 	movi	r2,12
 4018014:	18800005 	stb	r2,0(r3)
        return (0);
 4018018:	e03fff15 	stw	zero,-4(fp)
 401801c:	00002906 	br	40180c4 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4018020:	d0a06a03 	ldbu	r2,-32344(gp)
 4018024:	10803fcc 	andi	r2,r2,255
 4018028:	1005003a 	cmpeq	r2,r2,zero
 401802c:	1000051e 	bne	r2,zero,4018044 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 4018030:	e0fffe17 	ldw	r3,-8(fp)
 4018034:	00800444 	movi	r2,17
 4018038:	18800005 	stb	r2,0(r3)
        return (0);
 401803c:	e03fff15 	stw	zero,-4(fp)
 4018040:	00002006 	br	40180c4 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 4018044:	e0bffc17 	ldw	r2,-16(fp)
 4018048:	10800003 	ldbu	r2,0(r2)
 401804c:	10803fcc 	andi	r2,r2,255
 4018050:	10bfffc4 	addi	r2,r2,-1
 4018054:	10800128 	cmpgeui	r2,r2,4
 4018058:	1000161e 	bne	r2,zero,40180b4 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401805c:	0005303a 	rdctl	r2,status
 4018060:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018064:	e0fff917 	ldw	r3,-28(fp)
 4018068:	00bfff84 	movi	r2,-2
 401806c:	1884703a 	and	r2,r3,r2
 4018070:	1001703a 	wrctl	status,r2
  
  return context;
 4018074:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4018078:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 401807c:	e0bffc17 	ldw	r2,-16(fp)
 4018080:	11400384 	addi	r5,r2,14
 4018084:	e13ffd17 	ldw	r4,-12(fp)
 4018088:	4019b300 	call	4019b30 <OS_StrCopy>
 401808c:	e0bffb05 	stb	r2,-20(fp)
 4018090:	e0bffa17 	ldw	r2,-24(fp)
 4018094:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018098:	e0bff817 	ldw	r2,-32(fp)
 401809c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40180a0:	e0bffe17 	ldw	r2,-8(fp)
 40180a4:	10000005 	stb	zero,0(r2)
    return (len);
 40180a8:	e0bffb03 	ldbu	r2,-20(fp)
 40180ac:	e0bfff15 	stw	r2,-4(fp)
 40180b0:	00000406 	br	40180c4 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 40180b4:	e0fffe17 	ldw	r3,-8(fp)
 40180b8:	00800044 	movi	r2,1
 40180bc:	18800005 	stb	r2,0(r3)
             return (0);
 40180c0:	e03fff15 	stw	zero,-4(fp)
 40180c4:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 40180c8:	e037883a 	mov	sp,fp
 40180cc:	dfc00117 	ldw	ra,4(sp)
 40180d0:	df000017 	ldw	fp,0(sp)
 40180d4:	dec00204 	addi	sp,sp,8
 40180d8:	f800283a 	ret

040180dc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 40180dc:	defff604 	addi	sp,sp,-40
 40180e0:	dfc00915 	stw	ra,36(sp)
 40180e4:	df000815 	stw	fp,32(sp)
 40180e8:	df000804 	addi	fp,sp,32
 40180ec:	e13ffd15 	stw	r4,-12(fp)
 40180f0:	e17ffe15 	stw	r5,-8(fp)
 40180f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40180f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40180fc:	e0bfff17 	ldw	r2,-4(fp)
 4018100:	1005003a 	cmpeq	r2,r2,zero
 4018104:	1000411e 	bne	r2,zero,401820c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4018108:	e0bffd17 	ldw	r2,-12(fp)
 401810c:	1004c03a 	cmpne	r2,r2,zero
 4018110:	1000041e 	bne	r2,zero,4018124 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4018114:	e0ffff17 	ldw	r3,-4(fp)
 4018118:	00800104 	movi	r2,4
 401811c:	18800005 	stb	r2,0(r3)
        return;
 4018120:	00003a06 	br	401820c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4018124:	e0bffe17 	ldw	r2,-8(fp)
 4018128:	1004c03a 	cmpne	r2,r2,zero
 401812c:	1000041e 	bne	r2,zero,4018140 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 4018130:	e0ffff17 	ldw	r3,-4(fp)
 4018134:	00800304 	movi	r2,12
 4018138:	18800005 	stb	r2,0(r3)
        return;
 401813c:	00003306 	br	401820c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4018140:	d0a06a03 	ldbu	r2,-32344(gp)
 4018144:	10803fcc 	andi	r2,r2,255
 4018148:	1005003a 	cmpeq	r2,r2,zero
 401814c:	1000041e 	bne	r2,zero,4018160 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 4018150:	e0ffff17 	ldw	r3,-4(fp)
 4018154:	00800484 	movi	r2,18
 4018158:	18800005 	stb	r2,0(r3)
        return;
 401815c:	00002b06 	br	401820c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 4018160:	e0bffd17 	ldw	r2,-12(fp)
 4018164:	10800003 	ldbu	r2,0(r2)
 4018168:	10803fcc 	andi	r2,r2,255
 401816c:	10bfffc4 	addi	r2,r2,-1
 4018170:	10800128 	cmpgeui	r2,r2,4
 4018174:	10000f1e 	bne	r2,zero,40181b4 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018178:	0005303a 	rdctl	r2,status
 401817c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018180:	e0fffa17 	ldw	r3,-24(fp)
 4018184:	00bfff84 	movi	r2,-2
 4018188:	1884703a 	and	r2,r3,r2
 401818c:	1001703a 	wrctl	status,r2
  
  return context;
 4018190:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 4018194:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4018198:	e13ffe17 	ldw	r4,-8(fp)
 401819c:	4019bb00 	call	4019bb0 <OS_StrLen>
 40181a0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 40181a4:	e0bffc03 	ldbu	r2,-16(fp)
 40181a8:	10800828 	cmpgeui	r2,r2,32
 40181ac:	1000051e 	bne	r2,zero,40181c4 <OSEventNameSet+0xe8>
 40181b0:	00000c06 	br	40181e4 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 40181b4:	e0ffff17 	ldw	r3,-4(fp)
 40181b8:	00800044 	movi	r2,1
 40181bc:	18800005 	stb	r2,0(r3)
             return;
 40181c0:	00001206 	br	401820c <OSEventNameSet+0x130>
 40181c4:	e0bffb17 	ldw	r2,-20(fp)
 40181c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40181cc:	e0bff917 	ldw	r2,-28(fp)
 40181d0:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 40181d4:	e0ffff17 	ldw	r3,-4(fp)
 40181d8:	008002c4 	movi	r2,11
 40181dc:	18800005 	stb	r2,0(r3)
        return;
 40181e0:	00000a06 	br	401820c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 40181e4:	e0bffd17 	ldw	r2,-12(fp)
 40181e8:	11000384 	addi	r4,r2,14
 40181ec:	e17ffe17 	ldw	r5,-8(fp)
 40181f0:	4019b300 	call	4019b30 <OS_StrCopy>
 40181f4:	e0bffb17 	ldw	r2,-20(fp)
 40181f8:	e0bff815 	stw	r2,-32(fp)
 40181fc:	e0bff817 	ldw	r2,-32(fp)
 4018200:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4018204:	e0bfff17 	ldw	r2,-4(fp)
 4018208:	10000005 	stb	zero,0(r2)
}
 401820c:	e037883a 	mov	sp,fp
 4018210:	dfc00117 	ldw	ra,4(sp)
 4018214:	df000017 	ldw	fp,0(sp)
 4018218:	dec00204 	addi	sp,sp,8
 401821c:	f800283a 	ret

04018220 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 4018220:	deffe704 	addi	sp,sp,-100
 4018224:	dfc01815 	stw	ra,96(sp)
 4018228:	df001715 	stw	fp,92(sp)
 401822c:	df001704 	addi	fp,sp,92
 4018230:	e13ff615 	stw	r4,-40(fp)
 4018234:	e17ff715 	stw	r5,-36(fp)
 4018238:	e1bff815 	stw	r6,-32(fp)
 401823c:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4018240:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 4018244:	e0800217 	ldw	r2,8(fp)
 4018248:	1004c03a 	cmpne	r2,r2,zero
 401824c:	1000021e 	bne	r2,zero,4018258 <OSEventPendMulti+0x38>
        return (0);
 4018250:	e03fff15 	stw	zero,-4(fp)
 4018254:	00019906 	br	40188bc <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 4018258:	e0bff617 	ldw	r2,-40(fp)
 401825c:	1004c03a 	cmpne	r2,r2,zero
 4018260:	1000051e 	bne	r2,zero,4018278 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 4018264:	e0c00217 	ldw	r3,8(fp)
 4018268:	00800104 	movi	r2,4
 401826c:	18800005 	stb	r2,0(r3)
        return (0);
 4018270:	e03fff15 	stw	zero,-4(fp)
 4018274:	00019106 	br	40188bc <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 4018278:	e0bff717 	ldw	r2,-36(fp)
 401827c:	1004c03a 	cmpne	r2,r2,zero
 4018280:	1000051e 	bne	r2,zero,4018298 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 4018284:	e0c00217 	ldw	r3,8(fp)
 4018288:	00800104 	movi	r2,4
 401828c:	18800005 	stb	r2,0(r3)
        return (0);
 4018290:	e03fff15 	stw	zero,-4(fp)
 4018294:	00018906 	br	40188bc <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4018298:	e0bff817 	ldw	r2,-32(fp)
 401829c:	1004c03a 	cmpne	r2,r2,zero
 40182a0:	1000051e 	bne	r2,zero,40182b8 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 40182a4:	e0c00217 	ldw	r3,8(fp)
 40182a8:	00800104 	movi	r2,4
 40182ac:	18800005 	stb	r2,0(r3)
        return (0);
 40182b0:	e03fff15 	stw	zero,-4(fp)
 40182b4:	00018106 	br	40188bc <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 40182b8:	e0bff717 	ldw	r2,-36(fp)
 40182bc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 40182c0:	e0bff617 	ldw	r2,-40(fp)
 40182c4:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 40182c8:	e0bff517 	ldw	r2,-44(fp)
 40182cc:	10800017 	ldw	r2,0(r2)
 40182d0:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 40182d4:	00001806 	br	4018338 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 40182d8:	e0bff417 	ldw	r2,-48(fp)
 40182dc:	10800003 	ldbu	r2,0(r2)
 40182e0:	10803fcc 	andi	r2,r2,255
 40182e4:	e0bffe15 	stw	r2,-8(fp)
 40182e8:	e0fffe17 	ldw	r3,-8(fp)
 40182ec:	188000a0 	cmpeqi	r2,r3,2
 40182f0:	10000b1e 	bne	r2,zero,4018320 <OSEventPendMulti+0x100>
 40182f4:	e0fffe17 	ldw	r3,-8(fp)
 40182f8:	188000e0 	cmpeqi	r2,r3,3
 40182fc:	1000081e 	bne	r2,zero,4018320 <OSEventPendMulti+0x100>
 4018300:	e0fffe17 	ldw	r3,-8(fp)
 4018304:	18800060 	cmpeqi	r2,r3,1
 4018308:	1000051e 	bne	r2,zero,4018320 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 401830c:	e0c00217 	ldw	r3,8(fp)
 4018310:	00800044 	movi	r2,1
 4018314:	18800005 	stb	r2,0(r3)
                 return (0);
 4018318:	e03fff15 	stw	zero,-4(fp)
 401831c:	00016706 	br	40188bc <OSEventPendMulti+0x69c>
        }
        pevents++;
 4018320:	e0bff517 	ldw	r2,-44(fp)
 4018324:	10800104 	addi	r2,r2,4
 4018328:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 401832c:	e0bff517 	ldw	r2,-44(fp)
 4018330:	10800017 	ldw	r2,0(r2)
 4018334:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4018338:	e0bff417 	ldw	r2,-48(fp)
 401833c:	1004c03a 	cmpne	r2,r2,zero
 4018340:	103fe51e 	bne	r2,zero,40182d8 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 4018344:	d0a06a03 	ldbu	r2,-32344(gp)
 4018348:	10803fcc 	andi	r2,r2,255
 401834c:	1005003a 	cmpeq	r2,r2,zero
 4018350:	1000051e 	bne	r2,zero,4018368 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 4018354:	e0c00217 	ldw	r3,8(fp)
 4018358:	00800084 	movi	r2,2
 401835c:	18800005 	stb	r2,0(r3)
        return (0);
 4018360:	e03fff15 	stw	zero,-4(fp)
 4018364:	00015506 	br	40188bc <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 4018368:	d0a05c03 	ldbu	r2,-32400(gp)
 401836c:	10803fcc 	andi	r2,r2,255
 4018370:	1005003a 	cmpeq	r2,r2,zero
 4018374:	1000051e 	bne	r2,zero,401838c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 4018378:	e0c00217 	ldw	r3,8(fp)
 401837c:	00800344 	movi	r2,13
 4018380:	18800005 	stb	r2,0(r3)
        return (0);
 4018384:	e03fff15 	stw	zero,-4(fp)
 4018388:	00014c06 	br	40188bc <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401838c:	0005303a 	rdctl	r2,status
 4018390:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018394:	e0ffef17 	ldw	r3,-68(fp)
 4018398:	00bfff84 	movi	r2,-2
 401839c:	1884703a 	and	r2,r3,r2
 40183a0:	1001703a 	wrctl	status,r2
  
  return context;
 40183a4:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 40183a8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 40183ac:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 40183b0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 40183b4:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 40183b8:	e0bff617 	ldw	r2,-40(fp)
 40183bc:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 40183c0:	e0bff517 	ldw	r2,-44(fp)
 40183c4:	10800017 	ldw	r2,0(r2)
 40183c8:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 40183cc:	00008f06 	br	401860c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 40183d0:	e0bff417 	ldw	r2,-48(fp)
 40183d4:	10800003 	ldbu	r2,0(r2)
 40183d8:	10803fcc 	andi	r2,r2,255
 40183dc:	e0bffd15 	stw	r2,-12(fp)
 40183e0:	e0fffd17 	ldw	r3,-12(fp)
 40183e4:	188000a0 	cmpeqi	r2,r3,2
 40183e8:	1000441e 	bne	r2,zero,40184fc <OSEventPendMulti+0x2dc>
 40183ec:	e0fffd17 	ldw	r3,-12(fp)
 40183f0:	188000e0 	cmpeqi	r2,r3,3
 40183f4:	1000041e 	bne	r2,zero,4018408 <OSEventPendMulti+0x1e8>
 40183f8:	e0fffd17 	ldw	r3,-12(fp)
 40183fc:	18800060 	cmpeqi	r2,r3,1
 4018400:	1000211e 	bne	r2,zero,4018488 <OSEventPendMulti+0x268>
 4018404:	00006f06 	br	40185c4 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 4018408:	e0bff417 	ldw	r2,-48(fp)
 401840c:	1080020b 	ldhu	r2,8(r2)
 4018410:	10bfffcc 	andi	r2,r2,65535
 4018414:	1005003a 	cmpeq	r2,r2,zero
 4018418:	1000171e 	bne	r2,zero,4018478 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 401841c:	e0bff417 	ldw	r2,-48(fp)
 4018420:	1080020b 	ldhu	r2,8(r2)
 4018424:	10bfffc4 	addi	r2,r2,-1
 4018428:	1007883a 	mov	r3,r2
 401842c:	e0bff417 	ldw	r2,-48(fp)
 4018430:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 4018434:	e0fff717 	ldw	r3,-36(fp)
 4018438:	e0bff417 	ldw	r2,-48(fp)
 401843c:	18800015 	stw	r2,0(r3)
 4018440:	e0bff717 	ldw	r2,-36(fp)
 4018444:	10800104 	addi	r2,r2,4
 4018448:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 401844c:	00800044 	movi	r2,1
 4018450:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 4018454:	e0bff817 	ldw	r2,-32(fp)
 4018458:	10000015 	stw	zero,0(r2)
 401845c:	e0bff817 	ldw	r2,-32(fp)
 4018460:	10800104 	addi	r2,r2,4
 4018464:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 4018468:	e0bff18b 	ldhu	r2,-58(fp)
 401846c:	10800044 	addi	r2,r2,1
 4018470:	e0bff18d 	sth	r2,-58(fp)
 4018474:	00005f06 	br	40185f4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 4018478:	e0bff103 	ldbu	r2,-60(fp)
 401847c:	10800054 	ori	r2,r2,1
 4018480:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 4018484:	00005b06 	br	40185f4 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 4018488:	e0bff417 	ldw	r2,-48(fp)
 401848c:	10800117 	ldw	r2,4(r2)
 4018490:	1005003a 	cmpeq	r2,r2,zero
 4018494:	1000151e 	bne	r2,zero,40184ec <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 4018498:	e0bff417 	ldw	r2,-48(fp)
 401849c:	10c00117 	ldw	r3,4(r2)
 40184a0:	e0bff817 	ldw	r2,-32(fp)
 40184a4:	10c00015 	stw	r3,0(r2)
 40184a8:	e0bff817 	ldw	r2,-32(fp)
 40184ac:	10800104 	addi	r2,r2,4
 40184b0:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 40184b4:	e0bff417 	ldw	r2,-48(fp)
 40184b8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 40184bc:	e0fff717 	ldw	r3,-36(fp)
 40184c0:	e0bff417 	ldw	r2,-48(fp)
 40184c4:	18800015 	stw	r2,0(r3)
 40184c8:	e0bff717 	ldw	r2,-36(fp)
 40184cc:	10800104 	addi	r2,r2,4
 40184d0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 40184d4:	00800044 	movi	r2,1
 40184d8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 40184dc:	e0bff18b 	ldhu	r2,-58(fp)
 40184e0:	10800044 	addi	r2,r2,1
 40184e4:	e0bff18d 	sth	r2,-58(fp)
 40184e8:	00004206 	br	40185f4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 40184ec:	e0bff103 	ldbu	r2,-60(fp)
 40184f0:	10800094 	ori	r2,r2,2
 40184f4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 40184f8:	00003e06 	br	40185f4 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 40184fc:	e0bff417 	ldw	r2,-48(fp)
 4018500:	10800117 	ldw	r2,4(r2)
 4018504:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 4018508:	e0bff317 	ldw	r2,-52(fp)
 401850c:	1080058b 	ldhu	r2,22(r2)
 4018510:	10bfffcc 	andi	r2,r2,65535
 4018514:	1005003a 	cmpeq	r2,r2,zero
 4018518:	1000261e 	bne	r2,zero,40185b4 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 401851c:	e0bff317 	ldw	r2,-52(fp)
 4018520:	11000417 	ldw	r4,16(r2)
 4018524:	20c00017 	ldw	r3,0(r4)
 4018528:	e0bff817 	ldw	r2,-32(fp)
 401852c:	10c00015 	stw	r3,0(r2)
 4018530:	e0bff817 	ldw	r2,-32(fp)
 4018534:	10800104 	addi	r2,r2,4
 4018538:	e0bff815 	stw	r2,-32(fp)
 401853c:	20c00104 	addi	r3,r4,4
 4018540:	e0bff317 	ldw	r2,-52(fp)
 4018544:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4018548:	e0bff317 	ldw	r2,-52(fp)
 401854c:	10c00417 	ldw	r3,16(r2)
 4018550:	e0bff317 	ldw	r2,-52(fp)
 4018554:	10800217 	ldw	r2,8(r2)
 4018558:	1880041e 	bne	r3,r2,401856c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 401855c:	e0bff317 	ldw	r2,-52(fp)
 4018560:	10c00117 	ldw	r3,4(r2)
 4018564:	e0bff317 	ldw	r2,-52(fp)
 4018568:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 401856c:	e0bff317 	ldw	r2,-52(fp)
 4018570:	1080058b 	ldhu	r2,22(r2)
 4018574:	10bfffc4 	addi	r2,r2,-1
 4018578:	1007883a 	mov	r3,r2
 401857c:	e0bff317 	ldw	r2,-52(fp)
 4018580:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 4018584:	e0fff717 	ldw	r3,-36(fp)
 4018588:	e0bff417 	ldw	r2,-48(fp)
 401858c:	18800015 	stw	r2,0(r3)
 4018590:	e0bff717 	ldw	r2,-36(fp)
 4018594:	10800104 	addi	r2,r2,4
 4018598:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 401859c:	00800044 	movi	r2,1
 40185a0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 40185a4:	e0bff18b 	ldhu	r2,-58(fp)
 40185a8:	10800044 	addi	r2,r2,1
 40185ac:	e0bff18d 	sth	r2,-58(fp)
 40185b0:	00001006 	br	40185f4 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 40185b4:	e0bff103 	ldbu	r2,-60(fp)
 40185b8:	10800114 	ori	r2,r2,4
 40185bc:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 40185c0:	00000c06 	br	40185f4 <OSEventPendMulti+0x3d4>
 40185c4:	e0bff017 	ldw	r2,-64(fp)
 40185c8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40185cc:	e0bfee17 	ldw	r2,-72(fp)
 40185d0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 40185d4:	e0bff717 	ldw	r2,-36(fp)
 40185d8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 40185dc:	e0c00217 	ldw	r3,8(fp)
 40185e0:	00800044 	movi	r2,1
 40185e4:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 40185e8:	e0bff18b 	ldhu	r2,-58(fp)
 40185ec:	e0bfff15 	stw	r2,-4(fp)
 40185f0:	0000b206 	br	40188bc <OSEventPendMulti+0x69c>
        }
        pevents++;
 40185f4:	e0bff517 	ldw	r2,-44(fp)
 40185f8:	10800104 	addi	r2,r2,4
 40185fc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 4018600:	e0bff517 	ldw	r2,-44(fp)
 4018604:	10800017 	ldw	r2,0(r2)
 4018608:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 401860c:	e0bff417 	ldw	r2,-48(fp)
 4018610:	1004c03a 	cmpne	r2,r2,zero
 4018614:	103f6e1e 	bne	r2,zero,40183d0 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 4018618:	e0bff203 	ldbu	r2,-56(fp)
 401861c:	10800058 	cmpnei	r2,r2,1
 4018620:	10000b1e 	bne	r2,zero,4018650 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 4018624:	e0bff717 	ldw	r2,-36(fp)
 4018628:	10000015 	stw	zero,0(r2)
 401862c:	e0bff017 	ldw	r2,-64(fp)
 4018630:	e0bfed15 	stw	r2,-76(fp)
 4018634:	e0bfed17 	ldw	r2,-76(fp)
 4018638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 401863c:	e0800217 	ldw	r2,8(fp)
 4018640:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 4018644:	e0fff18b 	ldhu	r3,-58(fp)
 4018648:	e0ffff15 	stw	r3,-4(fp)
 401864c:	00009b06 	br	40188bc <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 4018650:	d1206b17 	ldw	r4,-32340(gp)
 4018654:	d0a06b17 	ldw	r2,-32340(gp)
 4018658:	10c00c03 	ldbu	r3,48(r2)
 401865c:	e0bff103 	ldbu	r2,-60(fp)
 4018660:	1884b03a 	or	r2,r3,r2
 4018664:	1007883a 	mov	r3,r2
 4018668:	00bfe004 	movi	r2,-128
 401866c:	1884b03a 	or	r2,r3,r2
 4018670:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4018674:	d0a06b17 	ldw	r2,-32340(gp)
 4018678:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 401867c:	d0e06b17 	ldw	r3,-32340(gp)
 4018680:	e0bff90b 	ldhu	r2,-28(fp)
 4018684:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 4018688:	e13ff617 	ldw	r4,-40(fp)
 401868c:	40192500 	call	4019250 <OS_EventTaskWaitMulti>
 4018690:	e0bff017 	ldw	r2,-64(fp)
 4018694:	e0bfec15 	stw	r2,-80(fp)
 4018698:	e0bfec17 	ldw	r2,-80(fp)
 401869c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 40186a0:	40199ec0 	call	40199ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40186a4:	0005303a 	rdctl	r2,status
 40186a8:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40186ac:	e0ffeb17 	ldw	r3,-84(fp)
 40186b0:	00bfff84 	movi	r2,-2
 40186b4:	1884703a 	and	r2,r3,r2
 40186b8:	1001703a 	wrctl	status,r2
  
  return context;
 40186bc:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 40186c0:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 40186c4:	d0a06b17 	ldw	r2,-32340(gp)
 40186c8:	10800c43 	ldbu	r2,49(r2)
 40186cc:	10803fcc 	andi	r2,r2,255
 40186d0:	e0bffc15 	stw	r2,-16(fp)
 40186d4:	e0fffc17 	ldw	r3,-16(fp)
 40186d8:	1805003a 	cmpeq	r2,r3,zero
 40186dc:	1000041e 	bne	r2,zero,40186f0 <OSEventPendMulti+0x4d0>
 40186e0:	e0fffc17 	ldw	r3,-16(fp)
 40186e4:	188000a0 	cmpeqi	r2,r3,2
 40186e8:	1000011e 	bne	r2,zero,40186f0 <OSEventPendMulti+0x4d0>
 40186ec:	00001906 	br	4018754 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 40186f0:	d0a06b17 	ldw	r2,-32340(gp)
 40186f4:	10800717 	ldw	r2,28(r2)
 40186f8:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 40186fc:	e0bff417 	ldw	r2,-48(fp)
 4018700:	1005003a 	cmpeq	r2,r2,zero
 4018704:	10000c1e 	bne	r2,zero,4018738 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 4018708:	e0fff717 	ldw	r3,-36(fp)
 401870c:	e0bff417 	ldw	r2,-48(fp)
 4018710:	18800015 	stw	r2,0(r3)
 4018714:	e0bff717 	ldw	r2,-36(fp)
 4018718:	10800104 	addi	r2,r2,4
 401871c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 4018720:	e0bff717 	ldw	r2,-36(fp)
 4018724:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 4018728:	e0bff18b 	ldhu	r2,-58(fp)
 401872c:	10800044 	addi	r2,r2,1
 4018730:	e0bff18d 	sth	r2,-58(fp)
 4018734:	00000a06 	br	4018760 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 4018738:	d0a06b17 	ldw	r2,-32340(gp)
 401873c:	00c00044 	movi	r3,1
 4018740:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4018744:	d1206b17 	ldw	r4,-32340(gp)
 4018748:	e17ff617 	ldw	r5,-40(fp)
 401874c:	401945c0 	call	401945c <OS_EventTaskRemoveMulti>
             }
			 break;
 4018750:	00000306 	br	4018760 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4018754:	d1206b17 	ldw	r4,-32340(gp)
 4018758:	e17ff617 	ldw	r5,-40(fp)
 401875c:	401945c0 	call	401945c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 4018760:	d0a06b17 	ldw	r2,-32340(gp)
 4018764:	10800c43 	ldbu	r2,49(r2)
 4018768:	10803fcc 	andi	r2,r2,255
 401876c:	e0bffb15 	stw	r2,-20(fp)
 4018770:	e0fffb17 	ldw	r3,-20(fp)
 4018774:	1805003a 	cmpeq	r2,r3,zero
 4018778:	1000041e 	bne	r2,zero,401878c <OSEventPendMulti+0x56c>
 401877c:	e0fffb17 	ldw	r3,-20(fp)
 4018780:	188000a0 	cmpeqi	r2,r3,2
 4018784:	10002c1e 	bne	r2,zero,4018838 <OSEventPendMulti+0x618>
 4018788:	00003406 	br	401885c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 401878c:	e0bff417 	ldw	r2,-48(fp)
 4018790:	10800003 	ldbu	r2,0(r2)
 4018794:	10803fcc 	andi	r2,r2,255
 4018798:	e0bffa15 	stw	r2,-24(fp)
 401879c:	e0fffa17 	ldw	r3,-24(fp)
 40187a0:	18800050 	cmplti	r2,r3,1
 40187a4:	1000151e 	bne	r2,zero,40187fc <OSEventPendMulti+0x5dc>
 40187a8:	e0fffa17 	ldw	r3,-24(fp)
 40187ac:	188000d0 	cmplti	r2,r3,3
 40187b0:	10000a1e 	bne	r2,zero,40187dc <OSEventPendMulti+0x5bc>
 40187b4:	e0fffa17 	ldw	r3,-24(fp)
 40187b8:	188000e0 	cmpeqi	r2,r3,3
 40187bc:	1000011e 	bne	r2,zero,40187c4 <OSEventPendMulti+0x5a4>
 40187c0:	00000e06 	br	40187fc <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 40187c4:	e0bff817 	ldw	r2,-32(fp)
 40187c8:	10000015 	stw	zero,0(r2)
 40187cc:	e0bff817 	ldw	r2,-32(fp)
 40187d0:	10800104 	addi	r2,r2,4
 40187d4:	e0bff815 	stw	r2,-32(fp)
                      break;
 40187d8:	00001406 	br	401882c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 40187dc:	d0a06b17 	ldw	r2,-32340(gp)
 40187e0:	10c00917 	ldw	r3,36(r2)
 40187e4:	e0bff817 	ldw	r2,-32(fp)
 40187e8:	10c00015 	stw	r3,0(r2)
 40187ec:	e0bff817 	ldw	r2,-32(fp)
 40187f0:	10800104 	addi	r2,r2,4
 40187f4:	e0bff815 	stw	r2,-32(fp)
                      break;
 40187f8:	00000c06 	br	401882c <OSEventPendMulti+0x60c>
 40187fc:	e0bff017 	ldw	r2,-64(fp)
 4018800:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018804:	e0bfea17 	ldw	r2,-88(fp)
 4018808:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 401880c:	e0bff717 	ldw	r2,-36(fp)
 4018810:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 4018814:	e0c00217 	ldw	r3,8(fp)
 4018818:	00800044 	movi	r2,1
 401881c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 4018820:	e0bff18b 	ldhu	r2,-58(fp)
 4018824:	e0bfff15 	stw	r2,-4(fp)
 4018828:	00002406 	br	40188bc <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 401882c:	e0800217 	ldw	r2,8(fp)
 4018830:	10000005 	stb	zero,0(r2)
             break;
 4018834:	00001106 	br	401887c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 4018838:	e0bff817 	ldw	r2,-32(fp)
 401883c:	10000015 	stw	zero,0(r2)
 4018840:	e0bff817 	ldw	r2,-32(fp)
 4018844:	10800104 	addi	r2,r2,4
 4018848:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 401884c:	e0c00217 	ldw	r3,8(fp)
 4018850:	00800384 	movi	r2,14
 4018854:	18800005 	stb	r2,0(r3)
             break;
 4018858:	00000806 	br	401887c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 401885c:	e0bff817 	ldw	r2,-32(fp)
 4018860:	10000015 	stw	zero,0(r2)
 4018864:	e0bff817 	ldw	r2,-32(fp)
 4018868:	10800104 	addi	r2,r2,4
 401886c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 4018870:	e0c00217 	ldw	r3,8(fp)
 4018874:	00800284 	movi	r2,10
 4018878:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 401887c:	d0a06b17 	ldw	r2,-32340(gp)
 4018880:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 4018884:	d0a06b17 	ldw	r2,-32340(gp)
 4018888:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 401888c:	d0a06b17 	ldw	r2,-32340(gp)
 4018890:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4018894:	d0a06b17 	ldw	r2,-32340(gp)
 4018898:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 401889c:	d0a06b17 	ldw	r2,-32340(gp)
 40188a0:	10000915 	stw	zero,36(r2)
 40188a4:	e0bff017 	ldw	r2,-64(fp)
 40188a8:	e0bfe915 	stw	r2,-92(fp)
 40188ac:	e0bfe917 	ldw	r2,-92(fp)
 40188b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 40188b4:	e0fff18b 	ldhu	r3,-58(fp)
 40188b8:	e0ffff15 	stw	r3,-4(fp)
 40188bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40188c0:	e037883a 	mov	sp,fp
 40188c4:	dfc00117 	ldw	ra,4(sp)
 40188c8:	df000017 	ldw	fp,0(sp)
 40188cc:	dec00204 	addi	sp,sp,8
 40188d0:	f800283a 	ret

040188d4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 40188d4:	defffe04 	addi	sp,sp,-8
 40188d8:	dfc00115 	stw	ra,4(sp)
 40188dc:	df000015 	stw	fp,0(sp)
 40188e0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 40188e4:	40233300 	call	4023330 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 40188e8:	40196a40 	call	40196a4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 40188ec:	40196e80 	call	40196e8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 40188f0:	401984c0 	call	401984c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 40188f4:	40195c80 	call	40195c8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 40188f8:	401b8fc0 	call	401b8fc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 40188fc:	401c2d40 	call	401c2d4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 4018900:	401d6300 	call	401d630 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 4018904:	40197540 	call	4019754 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4018908:	40197d00 	call	40197d0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 401890c:	402334c0 	call	402334c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 4018910:	401a0d40 	call	401a0d4 <OSDebugInit>
#endif
}
 4018914:	e037883a 	mov	sp,fp
 4018918:	dfc00117 	ldw	ra,4(sp)
 401891c:	df000017 	ldw	fp,0(sp)
 4018920:	dec00204 	addi	sp,sp,8
 4018924:	f800283a 	ret

04018928 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 4018928:	defffc04 	addi	sp,sp,-16
 401892c:	df000315 	stw	fp,12(sp)
 4018930:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4018934:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 4018938:	d0a05c43 	ldbu	r2,-32399(gp)
 401893c:	10803fcc 	andi	r2,r2,255
 4018940:	10800058 	cmpnei	r2,r2,1
 4018944:	1000131e 	bne	r2,zero,4018994 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018948:	0005303a 	rdctl	r2,status
 401894c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018950:	e0fffe17 	ldw	r3,-8(fp)
 4018954:	00bfff84 	movi	r2,-2
 4018958:	1884703a 	and	r2,r3,r2
 401895c:	1001703a 	wrctl	status,r2
  
  return context;
 4018960:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4018964:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 4018968:	d0a06a03 	ldbu	r2,-32344(gp)
 401896c:	10803fcc 	andi	r2,r2,255
 4018970:	10803fe0 	cmpeqi	r2,r2,255
 4018974:	1000031e 	bne	r2,zero,4018984 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 4018978:	d0a06a03 	ldbu	r2,-32344(gp)
 401897c:	10800044 	addi	r2,r2,1
 4018980:	d0a06a05 	stb	r2,-32344(gp)
 4018984:	e0bfff17 	ldw	r2,-4(fp)
 4018988:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401898c:	e0bffd17 	ldw	r2,-12(fp)
 4018990:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 4018994:	e037883a 	mov	sp,fp
 4018998:	df000017 	ldw	fp,0(sp)
 401899c:	dec00104 	addi	sp,sp,4
 40189a0:	f800283a 	ret

040189a4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 40189a4:	defffb04 	addi	sp,sp,-20
 40189a8:	dfc00415 	stw	ra,16(sp)
 40189ac:	df000315 	stw	fp,12(sp)
 40189b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40189b4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 40189b8:	d0a05c43 	ldbu	r2,-32399(gp)
 40189bc:	10803fcc 	andi	r2,r2,255
 40189c0:	10800058 	cmpnei	r2,r2,1
 40189c4:	1000321e 	bne	r2,zero,4018a90 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40189c8:	0005303a 	rdctl	r2,status
 40189cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40189d0:	e0fffe17 	ldw	r3,-8(fp)
 40189d4:	00bfff84 	movi	r2,-2
 40189d8:	1884703a 	and	r2,r3,r2
 40189dc:	1001703a 	wrctl	status,r2
  
  return context;
 40189e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 40189e4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 40189e8:	d0a06a03 	ldbu	r2,-32344(gp)
 40189ec:	10803fcc 	andi	r2,r2,255
 40189f0:	1005003a 	cmpeq	r2,r2,zero
 40189f4:	1000031e 	bne	r2,zero,4018a04 <OSIntExit+0x60>
            OSIntNesting--;
 40189f8:	d0a06a03 	ldbu	r2,-32344(gp)
 40189fc:	10bfffc4 	addi	r2,r2,-1
 4018a00:	d0a06a05 	stb	r2,-32344(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 4018a04:	d0a06a03 	ldbu	r2,-32344(gp)
 4018a08:	10803fcc 	andi	r2,r2,255
 4018a0c:	1004c03a 	cmpne	r2,r2,zero
 4018a10:	10001b1e 	bne	r2,zero,4018a80 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 4018a14:	d0a05c03 	ldbu	r2,-32400(gp)
 4018a18:	10803fcc 	andi	r2,r2,255
 4018a1c:	1004c03a 	cmpne	r2,r2,zero
 4018a20:	1000171e 	bne	r2,zero,4018a80 <OSIntExit+0xdc>
                OS_SchedNew();
 4018a24:	4019ac00 	call	4019ac0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 4018a28:	d0a05e03 	ldbu	r2,-32392(gp)
 4018a2c:	d0e05e43 	ldbu	r3,-32391(gp)
 4018a30:	11003fcc 	andi	r4,r2,255
 4018a34:	18803fcc 	andi	r2,r3,255
 4018a38:	20801126 	beq	r4,r2,4018a80 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 4018a3c:	d0a05e03 	ldbu	r2,-32392(gp)
 4018a40:	10803fcc 	andi	r2,r2,255
 4018a44:	00c100f4 	movhi	r3,1027
 4018a48:	18d76004 	addi	r3,r3,23936
 4018a4c:	1085883a 	add	r2,r2,r2
 4018a50:	1085883a 	add	r2,r2,r2
 4018a54:	10c5883a 	add	r2,r2,r3
 4018a58:	10800017 	ldw	r2,0(r2)
 4018a5c:	d0a06615 	stw	r2,-32360(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 4018a60:	d0e06617 	ldw	r3,-32360(gp)
 4018a64:	18800e17 	ldw	r2,56(r3)
 4018a68:	10800044 	addi	r2,r2,1
 4018a6c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 4018a70:	d0a06117 	ldw	r2,-32380(gp)
 4018a74:	10800044 	addi	r2,r2,1
 4018a78:	d0a06115 	stw	r2,-32380(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 4018a7c:	4022ebc0 	call	4022ebc <OSCtxSw>
 4018a80:	e0bfff17 	ldw	r2,-4(fp)
 4018a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018a88:	e0bffd17 	ldw	r2,-12(fp)
 4018a8c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4018a90:	e037883a 	mov	sp,fp
 4018a94:	dfc00117 	ldw	ra,4(sp)
 4018a98:	df000017 	ldw	fp,0(sp)
 4018a9c:	dec00204 	addi	sp,sp,8
 4018aa0:	f800283a 	ret

04018aa4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 4018aa4:	defffc04 	addi	sp,sp,-16
 4018aa8:	df000315 	stw	fp,12(sp)
 4018aac:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4018ab0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 4018ab4:	d0a05c43 	ldbu	r2,-32399(gp)
 4018ab8:	10803fcc 	andi	r2,r2,255
 4018abc:	10800058 	cmpnei	r2,r2,1
 4018ac0:	1000171e 	bne	r2,zero,4018b20 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018ac4:	0005303a 	rdctl	r2,status
 4018ac8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018acc:	e0fffe17 	ldw	r3,-8(fp)
 4018ad0:	00bfff84 	movi	r2,-2
 4018ad4:	1884703a 	and	r2,r3,r2
 4018ad8:	1001703a 	wrctl	status,r2
  
  return context;
 4018adc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4018ae0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 4018ae4:	d0a06a03 	ldbu	r2,-32344(gp)
 4018ae8:	10803fcc 	andi	r2,r2,255
 4018aec:	1004c03a 	cmpne	r2,r2,zero
 4018af0:	1000071e 	bne	r2,zero,4018b10 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 4018af4:	d0a05c03 	ldbu	r2,-32400(gp)
 4018af8:	10803fcc 	andi	r2,r2,255
 4018afc:	10803fe0 	cmpeqi	r2,r2,255
 4018b00:	1000031e 	bne	r2,zero,4018b10 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 4018b04:	d0a05c03 	ldbu	r2,-32400(gp)
 4018b08:	10800044 	addi	r2,r2,1
 4018b0c:	d0a05c05 	stb	r2,-32400(gp)
 4018b10:	e0bfff17 	ldw	r2,-4(fp)
 4018b14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018b18:	e0bffd17 	ldw	r2,-12(fp)
 4018b1c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4018b20:	e037883a 	mov	sp,fp
 4018b24:	df000017 	ldw	fp,0(sp)
 4018b28:	dec00104 	addi	sp,sp,4
 4018b2c:	f800283a 	ret

04018b30 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 4018b30:	defff804 	addi	sp,sp,-32
 4018b34:	dfc00715 	stw	ra,28(sp)
 4018b38:	df000615 	stw	fp,24(sp)
 4018b3c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4018b40:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 4018b44:	d0a05c43 	ldbu	r2,-32399(gp)
 4018b48:	10803fcc 	andi	r2,r2,255
 4018b4c:	10800058 	cmpnei	r2,r2,1
 4018b50:	10002b1e 	bne	r2,zero,4018c00 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018b54:	0005303a 	rdctl	r2,status
 4018b58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018b5c:	e0fffe17 	ldw	r3,-8(fp)
 4018b60:	00bfff84 	movi	r2,-2
 4018b64:	1884703a 	and	r2,r3,r2
 4018b68:	1001703a 	wrctl	status,r2
  
  return context;
 4018b6c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4018b70:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 4018b74:	d0a05c03 	ldbu	r2,-32400(gp)
 4018b78:	10803fcc 	andi	r2,r2,255
 4018b7c:	1005003a 	cmpeq	r2,r2,zero
 4018b80:	10001b1e 	bne	r2,zero,4018bf0 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 4018b84:	d0a05c03 	ldbu	r2,-32400(gp)
 4018b88:	10bfffc4 	addi	r2,r2,-1
 4018b8c:	d0a05c05 	stb	r2,-32400(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 4018b90:	d0a05c03 	ldbu	r2,-32400(gp)
 4018b94:	10803fcc 	andi	r2,r2,255
 4018b98:	1004c03a 	cmpne	r2,r2,zero
 4018b9c:	10000f1e 	bne	r2,zero,4018bdc <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 4018ba0:	d0a06a03 	ldbu	r2,-32344(gp)
 4018ba4:	10803fcc 	andi	r2,r2,255
 4018ba8:	1004c03a 	cmpne	r2,r2,zero
 4018bac:	1000061e 	bne	r2,zero,4018bc8 <OSSchedUnlock+0x98>
 4018bb0:	e0bfff17 	ldw	r2,-4(fp)
 4018bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018bb8:	e0bffd17 	ldw	r2,-12(fp)
 4018bbc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 4018bc0:	40199ec0 	call	40199ec <OS_Sched>
 4018bc4:	00000e06 	br	4018c00 <OSSchedUnlock+0xd0>
 4018bc8:	e0bfff17 	ldw	r2,-4(fp)
 4018bcc:	e0bffc15 	stw	r2,-16(fp)
 4018bd0:	e0bffc17 	ldw	r2,-16(fp)
 4018bd4:	1001703a 	wrctl	status,r2
 4018bd8:	00000906 	br	4018c00 <OSSchedUnlock+0xd0>
 4018bdc:	e0bfff17 	ldw	r2,-4(fp)
 4018be0:	e0bffb15 	stw	r2,-20(fp)
 4018be4:	e0bffb17 	ldw	r2,-20(fp)
 4018be8:	1001703a 	wrctl	status,r2
 4018bec:	00000406 	br	4018c00 <OSSchedUnlock+0xd0>
 4018bf0:	e0bfff17 	ldw	r2,-4(fp)
 4018bf4:	e0bffa15 	stw	r2,-24(fp)
 4018bf8:	e0bffa17 	ldw	r2,-24(fp)
 4018bfc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 4018c00:	e037883a 	mov	sp,fp
 4018c04:	dfc00117 	ldw	ra,4(sp)
 4018c08:	df000017 	ldw	fp,0(sp)
 4018c0c:	dec00204 	addi	sp,sp,8
 4018c10:	f800283a 	ret

04018c14 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 4018c14:	defffe04 	addi	sp,sp,-8
 4018c18:	dfc00115 	stw	ra,4(sp)
 4018c1c:	df000015 	stw	fp,0(sp)
 4018c20:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 4018c24:	d0a05c43 	ldbu	r2,-32399(gp)
 4018c28:	10803fcc 	andi	r2,r2,255
 4018c2c:	1004c03a 	cmpne	r2,r2,zero
 4018c30:	10000f1e 	bne	r2,zero,4018c70 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 4018c34:	4019ac00 	call	4019ac0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 4018c38:	d0a05e03 	ldbu	r2,-32392(gp)
 4018c3c:	d0a05e45 	stb	r2,-32391(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 4018c40:	d0a05e03 	ldbu	r2,-32392(gp)
 4018c44:	10803fcc 	andi	r2,r2,255
 4018c48:	00c100f4 	movhi	r3,1027
 4018c4c:	18d76004 	addi	r3,r3,23936
 4018c50:	1085883a 	add	r2,r2,r2
 4018c54:	1085883a 	add	r2,r2,r2
 4018c58:	10c5883a 	add	r2,r2,r3
 4018c5c:	10800017 	ldw	r2,0(r2)
 4018c60:	d0a06615 	stw	r2,-32360(gp)
        OSTCBCur      = OSTCBHighRdy;
 4018c64:	d0a06617 	ldw	r2,-32360(gp)
 4018c68:	d0a06b15 	stw	r2,-32340(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 4018c6c:	4022f480 	call	4022f48 <OSStartHighRdy>
    }
}
 4018c70:	e037883a 	mov	sp,fp
 4018c74:	dfc00117 	ldw	ra,4(sp)
 4018c78:	df000017 	ldw	fp,0(sp)
 4018c7c:	dec00204 	addi	sp,sp,8
 4018c80:	f800283a 	ret

04018c84 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 4018c84:	defff904 	addi	sp,sp,-28
 4018c88:	dfc00615 	stw	ra,24(sp)
 4018c8c:	df000515 	stw	fp,20(sp)
 4018c90:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4018c94:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 4018c98:	01000084 	movi	r4,2
 4018c9c:	401fce40 	call	401fce4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018ca0:	0005303a 	rdctl	r2,status
 4018ca4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018ca8:	e0fffe17 	ldw	r3,-8(fp)
 4018cac:	00bfff84 	movi	r2,-2
 4018cb0:	1884703a 	and	r2,r3,r2
 4018cb4:	1001703a 	wrctl	status,r2
  
  return context;
 4018cb8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4018cbc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 4018cc0:	d0205d15 	stw	zero,-32396(gp)
 4018cc4:	e0bfff17 	ldw	r2,-4(fp)
 4018cc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018ccc:	e0bffd17 	ldw	r2,-12(fp)
 4018cd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4018cd4:	01001904 	movi	r4,100
 4018cd8:	401fce40 	call	401fce4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018cdc:	0005303a 	rdctl	r2,status
 4018ce0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018ce4:	e0fffc17 	ldw	r3,-16(fp)
 4018ce8:	00bfff84 	movi	r2,-2
 4018cec:	1884703a 	and	r2,r3,r2
 4018cf0:	1001703a 	wrctl	status,r2
  
  return context;
 4018cf4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4018cf8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4018cfc:	d0a05d17 	ldw	r2,-32396(gp)
 4018d00:	d0a06215 	stw	r2,-32376(gp)
    OSStatRdy    = OS_TRUE;
 4018d04:	00800044 	movi	r2,1
 4018d08:	d0a06e05 	stb	r2,-32328(gp)
 4018d0c:	e0bfff17 	ldw	r2,-4(fp)
 4018d10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018d14:	e0bffb17 	ldw	r2,-20(fp)
 4018d18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4018d1c:	e037883a 	mov	sp,fp
 4018d20:	dfc00117 	ldw	ra,4(sp)
 4018d24:	df000017 	ldw	fp,0(sp)
 4018d28:	dec00204 	addi	sp,sp,8
 4018d2c:	f800283a 	ret

04018d30 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4018d30:	defff604 	addi	sp,sp,-40
 4018d34:	dfc00915 	stw	ra,36(sp)
 4018d38:	df000815 	stw	fp,32(sp)
 4018d3c:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4018d40:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4018d44:	40233140 	call	4023314 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018d48:	0005303a 	rdctl	r2,status
 4018d4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018d50:	e0fffb17 	ldw	r3,-20(fp)
 4018d54:	00bfff84 	movi	r2,-2
 4018d58:	1884703a 	and	r2,r3,r2
 4018d5c:	1001703a 	wrctl	status,r2
  
  return context;
 4018d60:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 4018d64:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 4018d68:	d0a06c17 	ldw	r2,-32336(gp)
 4018d6c:	10800044 	addi	r2,r2,1
 4018d70:	d0a06c15 	stw	r2,-32336(gp)
 4018d74:	e0bffc17 	ldw	r2,-16(fp)
 4018d78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018d7c:	e0bffa17 	ldw	r2,-24(fp)
 4018d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 4018d84:	d0a05c43 	ldbu	r2,-32399(gp)
 4018d88:	10803fcc 	andi	r2,r2,255
 4018d8c:	10800058 	cmpnei	r2,r2,1
 4018d90:	1000721e 	bne	r2,zero,4018f5c <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 4018d94:	d0a06003 	ldbu	r2,-32384(gp)
 4018d98:	10803fcc 	andi	r2,r2,255
 4018d9c:	e0bfff15 	stw	r2,-4(fp)
 4018da0:	e0ffff17 	ldw	r3,-4(fp)
 4018da4:	18800060 	cmpeqi	r2,r3,1
 4018da8:	10000a1e 	bne	r2,zero,4018dd4 <OSTimeTick+0xa4>
 4018dac:	e0ffff17 	ldw	r3,-4(fp)
 4018db0:	188000a0 	cmpeqi	r2,r3,2
 4018db4:	1000091e 	bne	r2,zero,4018ddc <OSTimeTick+0xac>
 4018db8:	e0ffff17 	ldw	r3,-4(fp)
 4018dbc:	1805003a 	cmpeq	r2,r3,zero
 4018dc0:	1000011e 	bne	r2,zero,4018dc8 <OSTimeTick+0x98>
 4018dc4:	00000a06 	br	4018df0 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4018dc8:	00800044 	movi	r2,1
 4018dcc:	e0bffd05 	stb	r2,-12(fp)
                 break;
 4018dd0:	00000a06 	br	4018dfc <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4018dd4:	e03ffd05 	stb	zero,-12(fp)
                 break;
 4018dd8:	00000806 	br	4018dfc <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4018ddc:	00800044 	movi	r2,1
 4018de0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4018de4:	00800044 	movi	r2,1
 4018de8:	d0a06005 	stb	r2,-32384(gp)
                 break;
 4018dec:	00000306 	br	4018dfc <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4018df0:	00800044 	movi	r2,1
 4018df4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4018df8:	d0206005 	stb	zero,-32384(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4018dfc:	e0bffd03 	ldbu	r2,-12(fp)
 4018e00:	1005003a 	cmpeq	r2,r2,zero
 4018e04:	1000551e 	bne	r2,zero,4018f5c <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4018e08:	d0a05f17 	ldw	r2,-32388(gp)
 4018e0c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4018e10:	00004d06 	br	4018f48 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018e14:	0005303a 	rdctl	r2,status
 4018e18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018e1c:	e0fff917 	ldw	r3,-28(fp)
 4018e20:	00bfff84 	movi	r2,-2
 4018e24:	1884703a 	and	r2,r3,r2
 4018e28:	1001703a 	wrctl	status,r2
  
  return context;
 4018e2c:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 4018e30:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4018e34:	e0bffe17 	ldw	r2,-8(fp)
 4018e38:	10800b8b 	ldhu	r2,46(r2)
 4018e3c:	10bfffcc 	andi	r2,r2,65535
 4018e40:	1005003a 	cmpeq	r2,r2,zero
 4018e44:	1000391e 	bne	r2,zero,4018f2c <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4018e48:	e0bffe17 	ldw	r2,-8(fp)
 4018e4c:	10800b8b 	ldhu	r2,46(r2)
 4018e50:	10bfffc4 	addi	r2,r2,-1
 4018e54:	1007883a 	mov	r3,r2
 4018e58:	e0bffe17 	ldw	r2,-8(fp)
 4018e5c:	10c00b8d 	sth	r3,46(r2)
 4018e60:	e0bffe17 	ldw	r2,-8(fp)
 4018e64:	10800b8b 	ldhu	r2,46(r2)
 4018e68:	10bfffcc 	andi	r2,r2,65535
 4018e6c:	1004c03a 	cmpne	r2,r2,zero
 4018e70:	10002e1e 	bne	r2,zero,4018f2c <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4018e74:	e0bffe17 	ldw	r2,-8(fp)
 4018e78:	10800c03 	ldbu	r2,48(r2)
 4018e7c:	10803fcc 	andi	r2,r2,255
 4018e80:	10800dcc 	andi	r2,r2,55
 4018e84:	1005003a 	cmpeq	r2,r2,zero
 4018e88:	10000b1e 	bne	r2,zero,4018eb8 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 4018e8c:	e0bffe17 	ldw	r2,-8(fp)
 4018e90:	10c00c03 	ldbu	r3,48(r2)
 4018e94:	00bff204 	movi	r2,-56
 4018e98:	1884703a 	and	r2,r3,r2
 4018e9c:	1007883a 	mov	r3,r2
 4018ea0:	e0bffe17 	ldw	r2,-8(fp)
 4018ea4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 4018ea8:	e0fffe17 	ldw	r3,-8(fp)
 4018eac:	00800044 	movi	r2,1
 4018eb0:	18800c45 	stb	r2,49(r3)
 4018eb4:	00000206 	br	4018ec0 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4018eb8:	e0bffe17 	ldw	r2,-8(fp)
 4018ebc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 4018ec0:	e0bffe17 	ldw	r2,-8(fp)
 4018ec4:	10800c03 	ldbu	r2,48(r2)
 4018ec8:	10803fcc 	andi	r2,r2,255
 4018ecc:	1080020c 	andi	r2,r2,8
 4018ed0:	1004c03a 	cmpne	r2,r2,zero
 4018ed4:	1000151e 	bne	r2,zero,4018f2c <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4018ed8:	e0bffe17 	ldw	r2,-8(fp)
 4018edc:	10c00d83 	ldbu	r3,54(r2)
 4018ee0:	d0a06803 	ldbu	r2,-32352(gp)
 4018ee4:	1884b03a 	or	r2,r3,r2
 4018ee8:	d0a06805 	stb	r2,-32352(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4018eec:	e0bffe17 	ldw	r2,-8(fp)
 4018ef0:	10800d03 	ldbu	r2,52(r2)
 4018ef4:	11003fcc 	andi	r4,r2,255
 4018ef8:	e0bffe17 	ldw	r2,-8(fp)
 4018efc:	10800d03 	ldbu	r2,52(r2)
 4018f00:	10c03fcc 	andi	r3,r2,255
 4018f04:	d0a06844 	addi	r2,gp,-32351
 4018f08:	1885883a 	add	r2,r3,r2
 4018f0c:	10c00003 	ldbu	r3,0(r2)
 4018f10:	e0bffe17 	ldw	r2,-8(fp)
 4018f14:	10800d43 	ldbu	r2,53(r2)
 4018f18:	1884b03a 	or	r2,r3,r2
 4018f1c:	1007883a 	mov	r3,r2
 4018f20:	d0a06844 	addi	r2,gp,-32351
 4018f24:	2085883a 	add	r2,r4,r2
 4018f28:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4018f2c:	e0bffe17 	ldw	r2,-8(fp)
 4018f30:	10800517 	ldw	r2,20(r2)
 4018f34:	e0bffe15 	stw	r2,-8(fp)
 4018f38:	e0bffc17 	ldw	r2,-16(fp)
 4018f3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018f40:	e0bff817 	ldw	r2,-32(fp)
 4018f44:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4018f48:	e0bffe17 	ldw	r2,-8(fp)
 4018f4c:	10800c83 	ldbu	r2,50(r2)
 4018f50:	10803fcc 	andi	r2,r2,255
 4018f54:	10800518 	cmpnei	r2,r2,20
 4018f58:	103fae1e 	bne	r2,zero,4018e14 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4018f5c:	e037883a 	mov	sp,fp
 4018f60:	dfc00117 	ldw	ra,4(sp)
 4018f64:	df000017 	ldw	fp,0(sp)
 4018f68:	dec00204 	addi	sp,sp,8
 4018f6c:	f800283a 	ret

04018f70 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4018f70:	deffff04 	addi	sp,sp,-4
 4018f74:	df000015 	stw	fp,0(sp)
 4018f78:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4018f7c:	00804784 	movi	r2,286
}
 4018f80:	e037883a 	mov	sp,fp
 4018f84:	df000017 	ldw	fp,0(sp)
 4018f88:	dec00104 	addi	sp,sp,4
 4018f8c:	f800283a 	ret

04018f90 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4018f90:	deffff04 	addi	sp,sp,-4
 4018f94:	df000015 	stw	fp,0(sp)
 4018f98:	d839883a 	mov	fp,sp
}
 4018f9c:	e037883a 	mov	sp,fp
 4018fa0:	df000017 	ldw	fp,0(sp)
 4018fa4:	dec00104 	addi	sp,sp,4
 4018fa8:	f800283a 	ret

04018fac <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4018fac:	defff804 	addi	sp,sp,-32
 4018fb0:	dfc00715 	stw	ra,28(sp)
 4018fb4:	df000615 	stw	fp,24(sp)
 4018fb8:	df000604 	addi	fp,sp,24
 4018fbc:	e13ffc15 	stw	r4,-16(fp)
 4018fc0:	e17ffd15 	stw	r5,-12(fp)
 4018fc4:	e1bffe05 	stb	r6,-8(fp)
 4018fc8:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4018fcc:	e0bffc17 	ldw	r2,-16(fp)
 4018fd0:	10800283 	ldbu	r2,10(r2)
 4018fd4:	10c03fcc 	andi	r3,r2,255
 4018fd8:	008100b4 	movhi	r2,1026
 4018fdc:	1092b404 	addi	r2,r2,19152
 4018fe0:	10c5883a 	add	r2,r2,r3
 4018fe4:	10800003 	ldbu	r2,0(r2)
 4018fe8:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4018fec:	e0fffa83 	ldbu	r3,-22(fp)
 4018ff0:	e0bffc17 	ldw	r2,-16(fp)
 4018ff4:	1885883a 	add	r2,r3,r2
 4018ff8:	10800204 	addi	r2,r2,8
 4018ffc:	108000c3 	ldbu	r2,3(r2)
 4019000:	10c03fcc 	andi	r3,r2,255
 4019004:	008100b4 	movhi	r2,1026
 4019008:	1092b404 	addi	r2,r2,19152
 401900c:	10c5883a 	add	r2,r2,r3
 4019010:	10800003 	ldbu	r2,0(r2)
 4019014:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4019018:	e0bffa83 	ldbu	r2,-22(fp)
 401901c:	100490fa 	slli	r2,r2,3
 4019020:	1007883a 	mov	r3,r2
 4019024:	e0bffa43 	ldbu	r2,-23(fp)
 4019028:	1885883a 	add	r2,r3,r2
 401902c:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4019030:	e0bffa03 	ldbu	r2,-24(fp)
 4019034:	00c100f4 	movhi	r3,1027
 4019038:	18d76004 	addi	r3,r3,23936
 401903c:	1085883a 	add	r2,r2,r2
 4019040:	1085883a 	add	r2,r2,r2
 4019044:	10c5883a 	add	r2,r2,r3
 4019048:	10800017 	ldw	r2,0(r2)
 401904c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4019050:	e0bffb17 	ldw	r2,-20(fp)
 4019054:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4019058:	e0fffb17 	ldw	r3,-20(fp)
 401905c:	e0bffd17 	ldw	r2,-12(fp)
 4019060:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4019064:	e0bffb17 	ldw	r2,-20(fp)
 4019068:	10800c03 	ldbu	r2,48(r2)
 401906c:	1007883a 	mov	r3,r2
 4019070:	e0bffe03 	ldbu	r2,-8(fp)
 4019074:	0084303a 	nor	r2,zero,r2
 4019078:	1884703a 	and	r2,r3,r2
 401907c:	1007883a 	mov	r3,r2
 4019080:	e0bffb17 	ldw	r2,-20(fp)
 4019084:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 4019088:	e0fffb17 	ldw	r3,-20(fp)
 401908c:	e0bfff03 	ldbu	r2,-4(fp)
 4019090:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4019094:	e0bffb17 	ldw	r2,-20(fp)
 4019098:	10800c03 	ldbu	r2,48(r2)
 401909c:	10803fcc 	andi	r2,r2,255
 40190a0:	1080020c 	andi	r2,r2,8
 40190a4:	1004c03a 	cmpne	r2,r2,zero
 40190a8:	1000111e 	bne	r2,zero,40190f0 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 40190ac:	e0bffb17 	ldw	r2,-20(fp)
 40190b0:	10c00d83 	ldbu	r3,54(r2)
 40190b4:	d0a06803 	ldbu	r2,-32352(gp)
 40190b8:	1884b03a 	or	r2,r3,r2
 40190bc:	d0a06805 	stb	r2,-32352(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 40190c0:	e13ffa83 	ldbu	r4,-22(fp)
 40190c4:	e0fffa83 	ldbu	r3,-22(fp)
 40190c8:	d0a06844 	addi	r2,gp,-32351
 40190cc:	1885883a 	add	r2,r3,r2
 40190d0:	10c00003 	ldbu	r3,0(r2)
 40190d4:	e0bffb17 	ldw	r2,-20(fp)
 40190d8:	10800d43 	ldbu	r2,53(r2)
 40190dc:	1884b03a 	or	r2,r3,r2
 40190e0:	1007883a 	mov	r3,r2
 40190e4:	d0a06844 	addi	r2,gp,-32351
 40190e8:	2085883a 	add	r2,r4,r2
 40190ec:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 40190f0:	e13ffb17 	ldw	r4,-20(fp)
 40190f4:	e17ffc17 	ldw	r5,-16(fp)
 40190f8:	40193a40 	call	40193a4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 40190fc:	e0bffb17 	ldw	r2,-20(fp)
 4019100:	10800817 	ldw	r2,32(r2)
 4019104:	1005003a 	cmpeq	r2,r2,zero
 4019108:	1000071e 	bne	r2,zero,4019128 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 401910c:	e0bffb17 	ldw	r2,-20(fp)
 4019110:	11400817 	ldw	r5,32(r2)
 4019114:	e13ffb17 	ldw	r4,-20(fp)
 4019118:	401945c0 	call	401945c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 401911c:	e0fffb17 	ldw	r3,-20(fp)
 4019120:	e0bffc17 	ldw	r2,-16(fp)
 4019124:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 4019128:	e0bffa03 	ldbu	r2,-24(fp)
}
 401912c:	e037883a 	mov	sp,fp
 4019130:	dfc00117 	ldw	ra,4(sp)
 4019134:	df000017 	ldw	fp,0(sp)
 4019138:	dec00204 	addi	sp,sp,8
 401913c:	f800283a 	ret

04019140 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4019140:	defffd04 	addi	sp,sp,-12
 4019144:	df000215 	stw	fp,8(sp)
 4019148:	df000204 	addi	fp,sp,8
 401914c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4019150:	d0e06b17 	ldw	r3,-32340(gp)
 4019154:	e0bfff17 	ldw	r2,-4(fp)
 4019158:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 401915c:	d0a06b17 	ldw	r2,-32340(gp)
 4019160:	10800d03 	ldbu	r2,52(r2)
 4019164:	11003fcc 	andi	r4,r2,255
 4019168:	d0a06b17 	ldw	r2,-32340(gp)
 401916c:	10800d03 	ldbu	r2,52(r2)
 4019170:	10c03fcc 	andi	r3,r2,255
 4019174:	e0bfff17 	ldw	r2,-4(fp)
 4019178:	1885883a 	add	r2,r3,r2
 401917c:	10800204 	addi	r2,r2,8
 4019180:	10c000c3 	ldbu	r3,3(r2)
 4019184:	d0a06b17 	ldw	r2,-32340(gp)
 4019188:	10800d43 	ldbu	r2,53(r2)
 401918c:	1884b03a 	or	r2,r3,r2
 4019190:	1007883a 	mov	r3,r2
 4019194:	e0bfff17 	ldw	r2,-4(fp)
 4019198:	2085883a 	add	r2,r4,r2
 401919c:	10800204 	addi	r2,r2,8
 40191a0:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 40191a4:	e0bfff17 	ldw	r2,-4(fp)
 40191a8:	10c00283 	ldbu	r3,10(r2)
 40191ac:	d0a06b17 	ldw	r2,-32340(gp)
 40191b0:	10800d83 	ldbu	r2,54(r2)
 40191b4:	1884b03a 	or	r2,r3,r2
 40191b8:	1007883a 	mov	r3,r2
 40191bc:	e0bfff17 	ldw	r2,-4(fp)
 40191c0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 40191c4:	d0a06b17 	ldw	r2,-32340(gp)
 40191c8:	10800d03 	ldbu	r2,52(r2)
 40191cc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 40191d0:	e13ffe03 	ldbu	r4,-8(fp)
 40191d4:	e0fffe03 	ldbu	r3,-8(fp)
 40191d8:	d0a06844 	addi	r2,gp,-32351
 40191dc:	1885883a 	add	r2,r3,r2
 40191e0:	10800003 	ldbu	r2,0(r2)
 40191e4:	1007883a 	mov	r3,r2
 40191e8:	d0a06b17 	ldw	r2,-32340(gp)
 40191ec:	10800d43 	ldbu	r2,53(r2)
 40191f0:	0084303a 	nor	r2,zero,r2
 40191f4:	1884703a 	and	r2,r3,r2
 40191f8:	1007883a 	mov	r3,r2
 40191fc:	d0a06844 	addi	r2,gp,-32351
 4019200:	2085883a 	add	r2,r4,r2
 4019204:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 4019208:	e0fffe03 	ldbu	r3,-8(fp)
 401920c:	d0a06844 	addi	r2,gp,-32351
 4019210:	1885883a 	add	r2,r3,r2
 4019214:	10800003 	ldbu	r2,0(r2)
 4019218:	10803fcc 	andi	r2,r2,255
 401921c:	1004c03a 	cmpne	r2,r2,zero
 4019220:	1000071e 	bne	r2,zero,4019240 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4019224:	d0a06b17 	ldw	r2,-32340(gp)
 4019228:	10800d83 	ldbu	r2,54(r2)
 401922c:	0084303a 	nor	r2,zero,r2
 4019230:	1007883a 	mov	r3,r2
 4019234:	d0a06803 	ldbu	r2,-32352(gp)
 4019238:	1884703a 	and	r2,r3,r2
 401923c:	d0a06805 	stb	r2,-32352(gp)
    }
}
 4019240:	e037883a 	mov	sp,fp
 4019244:	df000017 	ldw	fp,0(sp)
 4019248:	dec00104 	addi	sp,sp,4
 401924c:	f800283a 	ret

04019250 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4019250:	defffb04 	addi	sp,sp,-20
 4019254:	df000415 	stw	fp,16(sp)
 4019258:	df000404 	addi	fp,sp,16
 401925c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4019260:	d0a06b17 	ldw	r2,-32340(gp)
 4019264:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4019268:	d0e06b17 	ldw	r3,-32340(gp)
 401926c:	e0bfff17 	ldw	r2,-4(fp)
 4019270:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 4019274:	e0bfff17 	ldw	r2,-4(fp)
 4019278:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 401927c:	e0bffe17 	ldw	r2,-8(fp)
 4019280:	10800017 	ldw	r2,0(r2)
 4019284:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4019288:	00002006 	br	401930c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 401928c:	d0a06b17 	ldw	r2,-32340(gp)
 4019290:	10800d03 	ldbu	r2,52(r2)
 4019294:	11003fcc 	andi	r4,r2,255
 4019298:	d0a06b17 	ldw	r2,-32340(gp)
 401929c:	10800d03 	ldbu	r2,52(r2)
 40192a0:	10c03fcc 	andi	r3,r2,255
 40192a4:	e0bffd17 	ldw	r2,-12(fp)
 40192a8:	1885883a 	add	r2,r3,r2
 40192ac:	10800204 	addi	r2,r2,8
 40192b0:	10c000c3 	ldbu	r3,3(r2)
 40192b4:	d0a06b17 	ldw	r2,-32340(gp)
 40192b8:	10800d43 	ldbu	r2,53(r2)
 40192bc:	1884b03a 	or	r2,r3,r2
 40192c0:	1007883a 	mov	r3,r2
 40192c4:	e0bffd17 	ldw	r2,-12(fp)
 40192c8:	2085883a 	add	r2,r4,r2
 40192cc:	10800204 	addi	r2,r2,8
 40192d0:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 40192d4:	e0bffd17 	ldw	r2,-12(fp)
 40192d8:	10c00283 	ldbu	r3,10(r2)
 40192dc:	d0a06b17 	ldw	r2,-32340(gp)
 40192e0:	10800d83 	ldbu	r2,54(r2)
 40192e4:	1884b03a 	or	r2,r3,r2
 40192e8:	1007883a 	mov	r3,r2
 40192ec:	e0bffd17 	ldw	r2,-12(fp)
 40192f0:	10c00285 	stb	r3,10(r2)
        pevents++;
 40192f4:	e0bffe17 	ldw	r2,-8(fp)
 40192f8:	10800104 	addi	r2,r2,4
 40192fc:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 4019300:	e0bffe17 	ldw	r2,-8(fp)
 4019304:	10800017 	ldw	r2,0(r2)
 4019308:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 401930c:	e0bffd17 	ldw	r2,-12(fp)
 4019310:	1004c03a 	cmpne	r2,r2,zero
 4019314:	103fdd1e 	bne	r2,zero,401928c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4019318:	d0a06b17 	ldw	r2,-32340(gp)
 401931c:	10800d03 	ldbu	r2,52(r2)
 4019320:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4019324:	e13ffc03 	ldbu	r4,-16(fp)
 4019328:	e0fffc03 	ldbu	r3,-16(fp)
 401932c:	d0a06844 	addi	r2,gp,-32351
 4019330:	1885883a 	add	r2,r3,r2
 4019334:	10800003 	ldbu	r2,0(r2)
 4019338:	1007883a 	mov	r3,r2
 401933c:	d0a06b17 	ldw	r2,-32340(gp)
 4019340:	10800d43 	ldbu	r2,53(r2)
 4019344:	0084303a 	nor	r2,zero,r2
 4019348:	1884703a 	and	r2,r3,r2
 401934c:	1007883a 	mov	r3,r2
 4019350:	d0a06844 	addi	r2,gp,-32351
 4019354:	2085883a 	add	r2,r4,r2
 4019358:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 401935c:	e0fffc03 	ldbu	r3,-16(fp)
 4019360:	d0a06844 	addi	r2,gp,-32351
 4019364:	1885883a 	add	r2,r3,r2
 4019368:	10800003 	ldbu	r2,0(r2)
 401936c:	10803fcc 	andi	r2,r2,255
 4019370:	1004c03a 	cmpne	r2,r2,zero
 4019374:	1000071e 	bne	r2,zero,4019394 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4019378:	d0a06b17 	ldw	r2,-32340(gp)
 401937c:	10800d83 	ldbu	r2,54(r2)
 4019380:	0084303a 	nor	r2,zero,r2
 4019384:	1007883a 	mov	r3,r2
 4019388:	d0a06803 	ldbu	r2,-32352(gp)
 401938c:	1884703a 	and	r2,r3,r2
 4019390:	d0a06805 	stb	r2,-32352(gp)
    }
}
 4019394:	e037883a 	mov	sp,fp
 4019398:	df000017 	ldw	fp,0(sp)
 401939c:	dec00104 	addi	sp,sp,4
 40193a0:	f800283a 	ret

040193a4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 40193a4:	defffc04 	addi	sp,sp,-16
 40193a8:	df000315 	stw	fp,12(sp)
 40193ac:	df000304 	addi	fp,sp,12
 40193b0:	e13ffe15 	stw	r4,-8(fp)
 40193b4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 40193b8:	e0bffe17 	ldw	r2,-8(fp)
 40193bc:	10800d03 	ldbu	r2,52(r2)
 40193c0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 40193c4:	e13ffd03 	ldbu	r4,-12(fp)
 40193c8:	e0fffd03 	ldbu	r3,-12(fp)
 40193cc:	e0bfff17 	ldw	r2,-4(fp)
 40193d0:	1885883a 	add	r2,r3,r2
 40193d4:	10800204 	addi	r2,r2,8
 40193d8:	108000c3 	ldbu	r2,3(r2)
 40193dc:	1007883a 	mov	r3,r2
 40193e0:	e0bffe17 	ldw	r2,-8(fp)
 40193e4:	10800d43 	ldbu	r2,53(r2)
 40193e8:	0084303a 	nor	r2,zero,r2
 40193ec:	1884703a 	and	r2,r3,r2
 40193f0:	1007883a 	mov	r3,r2
 40193f4:	e0bfff17 	ldw	r2,-4(fp)
 40193f8:	2085883a 	add	r2,r4,r2
 40193fc:	10800204 	addi	r2,r2,8
 4019400:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 4019404:	e0fffd03 	ldbu	r3,-12(fp)
 4019408:	e0bfff17 	ldw	r2,-4(fp)
 401940c:	1885883a 	add	r2,r3,r2
 4019410:	10800204 	addi	r2,r2,8
 4019414:	108000c3 	ldbu	r2,3(r2)
 4019418:	10803fcc 	andi	r2,r2,255
 401941c:	1004c03a 	cmpne	r2,r2,zero
 4019420:	10000a1e 	bne	r2,zero,401944c <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 4019424:	e0bfff17 	ldw	r2,-4(fp)
 4019428:	10800283 	ldbu	r2,10(r2)
 401942c:	1007883a 	mov	r3,r2
 4019430:	e0bffe17 	ldw	r2,-8(fp)
 4019434:	10800d83 	ldbu	r2,54(r2)
 4019438:	0084303a 	nor	r2,zero,r2
 401943c:	1884703a 	and	r2,r3,r2
 4019440:	1007883a 	mov	r3,r2
 4019444:	e0bfff17 	ldw	r2,-4(fp)
 4019448:	10c00285 	stb	r3,10(r2)
    }
}
 401944c:	e037883a 	mov	sp,fp
 4019450:	df000017 	ldw	fp,0(sp)
 4019454:	dec00104 	addi	sp,sp,4
 4019458:	f800283a 	ret

0401945c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 401945c:	defffa04 	addi	sp,sp,-24
 4019460:	df000515 	stw	fp,20(sp)
 4019464:	df000504 	addi	fp,sp,20
 4019468:	e13ffe15 	stw	r4,-8(fp)
 401946c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 4019470:	e0bffe17 	ldw	r2,-8(fp)
 4019474:	10800d03 	ldbu	r2,52(r2)
 4019478:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 401947c:	e0bffe17 	ldw	r2,-8(fp)
 4019480:	10800d83 	ldbu	r2,54(r2)
 4019484:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 4019488:	e0bffe17 	ldw	r2,-8(fp)
 401948c:	10800d43 	ldbu	r2,53(r2)
 4019490:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 4019494:	e0bfff17 	ldw	r2,-4(fp)
 4019498:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 401949c:	e0bffd17 	ldw	r2,-12(fp)
 40194a0:	10800017 	ldw	r2,0(r2)
 40194a4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 40194a8:	00002606 	br	4019544 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 40194ac:	e13ffb83 	ldbu	r4,-18(fp)
 40194b0:	e0fffb83 	ldbu	r3,-18(fp)
 40194b4:	e0bffc17 	ldw	r2,-16(fp)
 40194b8:	1885883a 	add	r2,r3,r2
 40194bc:	10800204 	addi	r2,r2,8
 40194c0:	108000c3 	ldbu	r2,3(r2)
 40194c4:	1007883a 	mov	r3,r2
 40194c8:	e0bffb03 	ldbu	r2,-20(fp)
 40194cc:	0084303a 	nor	r2,zero,r2
 40194d0:	1884703a 	and	r2,r3,r2
 40194d4:	1007883a 	mov	r3,r2
 40194d8:	e0bffc17 	ldw	r2,-16(fp)
 40194dc:	2085883a 	add	r2,r4,r2
 40194e0:	10800204 	addi	r2,r2,8
 40194e4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 40194e8:	e0fffb83 	ldbu	r3,-18(fp)
 40194ec:	e0bffc17 	ldw	r2,-16(fp)
 40194f0:	1885883a 	add	r2,r3,r2
 40194f4:	10800204 	addi	r2,r2,8
 40194f8:	108000c3 	ldbu	r2,3(r2)
 40194fc:	10803fcc 	andi	r2,r2,255
 4019500:	1004c03a 	cmpne	r2,r2,zero
 4019504:	1000091e 	bne	r2,zero,401952c <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 4019508:	e0bffc17 	ldw	r2,-16(fp)
 401950c:	10800283 	ldbu	r2,10(r2)
 4019510:	1007883a 	mov	r3,r2
 4019514:	e0bffb43 	ldbu	r2,-19(fp)
 4019518:	0084303a 	nor	r2,zero,r2
 401951c:	1884703a 	and	r2,r3,r2
 4019520:	1007883a 	mov	r3,r2
 4019524:	e0bffc17 	ldw	r2,-16(fp)
 4019528:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 401952c:	e0bffd17 	ldw	r2,-12(fp)
 4019530:	10800104 	addi	r2,r2,4
 4019534:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 4019538:	e0bffd17 	ldw	r2,-12(fp)
 401953c:	10800017 	ldw	r2,0(r2)
 4019540:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4019544:	e0bffc17 	ldw	r2,-16(fp)
 4019548:	1004c03a 	cmpne	r2,r2,zero
 401954c:	103fd71e 	bne	r2,zero,40194ac <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 4019550:	e037883a 	mov	sp,fp
 4019554:	df000017 	ldw	fp,0(sp)
 4019558:	dec00104 	addi	sp,sp,4
 401955c:	f800283a 	ret

04019560 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 4019560:	defffc04 	addi	sp,sp,-16
 4019564:	df000315 	stw	fp,12(sp)
 4019568:	df000304 	addi	fp,sp,12
 401956c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 4019570:	e0bfff17 	ldw	r2,-4(fp)
 4019574:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 4019578:	e0bfff17 	ldw	r2,-4(fp)
 401957c:	108002c4 	addi	r2,r2,11
 4019580:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4019584:	e03ffd05 	stb	zero,-12(fp)
 4019588:	00000806 	br	40195ac <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 401958c:	e0bffe17 	ldw	r2,-8(fp)
 4019590:	10000005 	stb	zero,0(r2)
 4019594:	e0bffe17 	ldw	r2,-8(fp)
 4019598:	10800044 	addi	r2,r2,1
 401959c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40195a0:	e0bffd03 	ldbu	r2,-12(fp)
 40195a4:	10800044 	addi	r2,r2,1
 40195a8:	e0bffd05 	stb	r2,-12(fp)
 40195ac:	e0bffd03 	ldbu	r2,-12(fp)
 40195b0:	108000f0 	cmpltui	r2,r2,3
 40195b4:	103ff51e 	bne	r2,zero,401958c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 40195b8:	e037883a 	mov	sp,fp
 40195bc:	df000017 	ldw	fp,0(sp)
 40195c0:	dec00104 	addi	sp,sp,4
 40195c4:	f800283a 	ret

040195c8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 40195c8:	defffb04 	addi	sp,sp,-20
 40195cc:	dfc00415 	stw	ra,16(sp)
 40195d0:	df000315 	stw	fp,12(sp)
 40195d4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 40195d8:	010100f4 	movhi	r4,1027
 40195dc:	21134c04 	addi	r4,r4,19760
 40195e0:	0142d004 	movi	r5,2880
 40195e4:	401992c0 	call	401992c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 40195e8:	008100f4 	movhi	r2,1027
 40195ec:	10934c04 	addi	r2,r2,19760
 40195f0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 40195f4:	008100f4 	movhi	r2,1027
 40195f8:	10935804 	addi	r2,r2,19808
 40195fc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4019600:	e03fff0d 	sth	zero,-4(fp)
 4019604:	00001306 	br	4019654 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4019608:	e0bffe17 	ldw	r2,-8(fp)
 401960c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4019610:	e0fffe17 	ldw	r3,-8(fp)
 4019614:	e0bffd17 	ldw	r2,-12(fp)
 4019618:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 401961c:	e0fffe17 	ldw	r3,-8(fp)
 4019620:	00800fc4 	movi	r2,63
 4019624:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 4019628:	e0bffe17 	ldw	r2,-8(fp)
 401962c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 4019630:	e0bffe17 	ldw	r2,-8(fp)
 4019634:	10800c04 	addi	r2,r2,48
 4019638:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 401963c:	e0bffd17 	ldw	r2,-12(fp)
 4019640:	10800c04 	addi	r2,r2,48
 4019644:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4019648:	e0bfff0b 	ldhu	r2,-4(fp)
 401964c:	10800044 	addi	r2,r2,1
 4019650:	e0bfff0d 	sth	r2,-4(fp)
 4019654:	e0bfff0b 	ldhu	r2,-4(fp)
 4019658:	10800ef0 	cmpltui	r2,r2,59
 401965c:	103fea1e 	bne	r2,zero,4019608 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 4019660:	e0bffe17 	ldw	r2,-8(fp)
 4019664:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 4019668:	e0bffe17 	ldw	r2,-8(fp)
 401966c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 4019670:	e0fffe17 	ldw	r3,-8(fp)
 4019674:	00800fc4 	movi	r2,63
 4019678:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 401967c:	e0bffe17 	ldw	r2,-8(fp)
 4019680:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 4019684:	008100f4 	movhi	r2,1027
 4019688:	10934c04 	addi	r2,r2,19760
 401968c:	d0a06915 	stw	r2,-32348(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 4019690:	e037883a 	mov	sp,fp
 4019694:	dfc00117 	ldw	ra,4(sp)
 4019698:	df000017 	ldw	fp,0(sp)
 401969c:	dec00204 	addi	sp,sp,8
 40196a0:	f800283a 	ret

040196a4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 40196a4:	deffff04 	addi	sp,sp,-4
 40196a8:	df000015 	stw	fp,0(sp)
 40196ac:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 40196b0:	d0206c15 	stw	zero,-32336(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 40196b4:	d0206a05 	stb	zero,-32344(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 40196b8:	d0205c05 	stb	zero,-32400(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 40196bc:	d0206445 	stb	zero,-32367(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 40196c0:	d0205c45 	stb	zero,-32399(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 40196c4:	d0206115 	stw	zero,-32380(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 40196c8:	d0205d15 	stw	zero,-32396(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 40196cc:	d0206f15 	stw	zero,-32324(gp)
    OSIdleCtrMax  = 0L;
 40196d0:	d0206215 	stw	zero,-32376(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 40196d4:	d0206e05 	stb	zero,-32328(gp)
#endif
}
 40196d8:	e037883a 	mov	sp,fp
 40196dc:	df000017 	ldw	fp,0(sp)
 40196e0:	dec00104 	addi	sp,sp,4
 40196e4:	f800283a 	ret

040196e8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 40196e8:	defffd04 	addi	sp,sp,-12
 40196ec:	df000215 	stw	fp,8(sp)
 40196f0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 40196f4:	d0206805 	stb	zero,-32352(gp)
    prdytbl       = &OSRdyTbl[0];
 40196f8:	d0a06844 	addi	r2,gp,-32351
 40196fc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4019700:	e03fff05 	stb	zero,-4(fp)
 4019704:	00000806 	br	4019728 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 4019708:	e0bffe17 	ldw	r2,-8(fp)
 401970c:	10000005 	stb	zero,0(r2)
 4019710:	e0bffe17 	ldw	r2,-8(fp)
 4019714:	10800044 	addi	r2,r2,1
 4019718:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 401971c:	e0bfff03 	ldbu	r2,-4(fp)
 4019720:	10800044 	addi	r2,r2,1
 4019724:	e0bfff05 	stb	r2,-4(fp)
 4019728:	e0bfff03 	ldbu	r2,-4(fp)
 401972c:	108000f0 	cmpltui	r2,r2,3
 4019730:	103ff51e 	bne	r2,zero,4019708 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 4019734:	d0205e45 	stb	zero,-32391(gp)
    OSPrioHighRdy = 0;
 4019738:	d0205e05 	stb	zero,-32392(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 401973c:	d0206615 	stw	zero,-32360(gp)
    OSTCBCur      = (OS_TCB *)0;
 4019740:	d0206b15 	stw	zero,-32340(gp)
}
 4019744:	e037883a 	mov	sp,fp
 4019748:	df000017 	ldw	fp,0(sp)
 401974c:	dec00104 	addi	sp,sp,4
 4019750:	f800283a 	ret

04019754 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 4019754:	defff804 	addi	sp,sp,-32
 4019758:	dfc00715 	stw	ra,28(sp)
 401975c:	df000615 	stw	fp,24(sp)
 4019760:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 4019764:	018100f4 	movhi	r6,1027
 4019768:	31934b04 	addi	r6,r6,19756
 401976c:	00bfffd4 	movui	r2,65535
 4019770:	d8800015 	stw	r2,0(sp)
 4019774:	008100f4 	movhi	r2,1027
 4019778:	10914c04 	addi	r2,r2,17712
 401977c:	d8800115 	stw	r2,4(sp)
 4019780:	00808004 	movi	r2,512
 4019784:	d8800215 	stw	r2,8(sp)
 4019788:	d8000315 	stw	zero,12(sp)
 401978c:	008000c4 	movi	r2,3
 4019790:	d8800415 	stw	r2,16(sp)
 4019794:	010100b4 	movhi	r4,1026
 4019798:	21270204 	addi	r4,r4,-25592
 401979c:	000b883a 	mov	r5,zero
 40197a0:	01c00504 	movi	r7,20
 40197a4:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 40197a8:	014100b4 	movhi	r5,1026
 40197ac:	2952f404 	addi	r5,r5,19408
 40197b0:	01000504 	movi	r4,20
 40197b4:	e1bfff04 	addi	r6,fp,-4
 40197b8:	401f3200 	call	401f320 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 40197bc:	e037883a 	mov	sp,fp
 40197c0:	dfc00117 	ldw	ra,4(sp)
 40197c4:	df000017 	ldw	fp,0(sp)
 40197c8:	dec00204 	addi	sp,sp,8
 40197cc:	f800283a 	ret

040197d0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 40197d0:	defff804 	addi	sp,sp,-32
 40197d4:	dfc00715 	stw	ra,28(sp)
 40197d8:	df000615 	stw	fp,24(sp)
 40197dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 40197e0:	018100f4 	movhi	r6,1027
 40197e4:	3190d304 	addi	r6,r6,17228
 40197e8:	00bfff94 	movui	r2,65534
 40197ec:	d8800015 	stw	r2,0(sp)
 40197f0:	008100f4 	movhi	r2,1027
 40197f4:	108ed404 	addi	r2,r2,15184
 40197f8:	d8800115 	stw	r2,4(sp)
 40197fc:	00808004 	movi	r2,512
 4019800:	d8800215 	stw	r2,8(sp)
 4019804:	d8000315 	stw	zero,12(sp)
 4019808:	008000c4 	movi	r2,3
 401980c:	d8800415 	stw	r2,16(sp)
 4019810:	010100b4 	movhi	r4,1026
 4019814:	21271904 	addi	r4,r4,-25500
 4019818:	000b883a 	mov	r5,zero
 401981c:	01c004c4 	movi	r7,19
 4019820:	401e9ec0 	call	401e9ec <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 4019824:	014100b4 	movhi	r5,1026
 4019828:	2952f804 	addi	r5,r5,19424
 401982c:	010004c4 	movi	r4,19
 4019830:	e1bfff04 	addi	r6,fp,-4
 4019834:	401f3200 	call	401f320 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 4019838:	e037883a 	mov	sp,fp
 401983c:	dfc00117 	ldw	ra,4(sp)
 4019840:	df000017 	ldw	fp,0(sp)
 4019844:	dec00204 	addi	sp,sp,8
 4019848:	f800283a 	ret

0401984c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 401984c:	defffb04 	addi	sp,sp,-20
 4019850:	dfc00415 	stw	ra,16(sp)
 4019854:	df000315 	stw	fp,12(sp)
 4019858:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 401985c:	010100f4 	movhi	r4,1027
 4019860:	21161c04 	addi	r4,r4,22640
 4019864:	01414404 	movi	r5,1296
 4019868:	401992c0 	call	401992c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 401986c:	010100f4 	movhi	r4,1027
 4019870:	21176004 	addi	r4,r4,23936
 4019874:	01401504 	movi	r5,84
 4019878:	401992c0 	call	401992c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 401987c:	008100f4 	movhi	r2,1027
 4019880:	10961c04 	addi	r2,r2,22640
 4019884:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 4019888:	008100f4 	movhi	r2,1027
 401988c:	10963704 	addi	r2,r2,22748
 4019890:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 4019894:	e03fff05 	stb	zero,-4(fp)
 4019898:	00001106 	br	40198e0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 401989c:	e0fffe17 	ldw	r3,-8(fp)
 40198a0:	e0bffd17 	ldw	r2,-12(fp)
 40198a4:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 40198a8:	e0fffe17 	ldw	r3,-8(fp)
 40198ac:	00800fc4 	movi	r2,63
 40198b0:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 40198b4:	e0bffe17 	ldw	r2,-8(fp)
 40198b8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 40198bc:	e0bffe17 	ldw	r2,-8(fp)
 40198c0:	10801b04 	addi	r2,r2,108
 40198c4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 40198c8:	e0bffd17 	ldw	r2,-12(fp)
 40198cc:	10801b04 	addi	r2,r2,108
 40198d0:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 40198d4:	e0bfff03 	ldbu	r2,-4(fp)
 40198d8:	10800044 	addi	r2,r2,1
 40198dc:	e0bfff05 	stb	r2,-4(fp)
 40198e0:	e0bfff03 	ldbu	r2,-4(fp)
 40198e4:	108002f0 	cmpltui	r2,r2,11
 40198e8:	103fec1e 	bne	r2,zero,401989c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 40198ec:	e0bffe17 	ldw	r2,-8(fp)
 40198f0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 40198f4:	e0fffe17 	ldw	r3,-8(fp)
 40198f8:	00800fc4 	movi	r2,63
 40198fc:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4019900:	e0bffe17 	ldw	r2,-8(fp)
 4019904:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 4019908:	d0205f15 	stw	zero,-32388(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 401990c:	008100f4 	movhi	r2,1027
 4019910:	10961c04 	addi	r2,r2,22640
 4019914:	d0a06315 	stw	r2,-32372(gp)
}
 4019918:	e037883a 	mov	sp,fp
 401991c:	dfc00117 	ldw	ra,4(sp)
 4019920:	df000017 	ldw	fp,0(sp)
 4019924:	dec00204 	addi	sp,sp,8
 4019928:	f800283a 	ret

0401992c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 401992c:	defffd04 	addi	sp,sp,-12
 4019930:	df000215 	stw	fp,8(sp)
 4019934:	df000204 	addi	fp,sp,8
 4019938:	e13ffe15 	stw	r4,-8(fp)
 401993c:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 4019940:	00000806 	br	4019964 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 4019944:	e0bffe17 	ldw	r2,-8(fp)
 4019948:	10000005 	stb	zero,0(r2)
 401994c:	e0bffe17 	ldw	r2,-8(fp)
 4019950:	10800044 	addi	r2,r2,1
 4019954:	e0bffe15 	stw	r2,-8(fp)
        size--;
 4019958:	e0bfff0b 	ldhu	r2,-4(fp)
 401995c:	10bfffc4 	addi	r2,r2,-1
 4019960:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 4019964:	e0bfff0b 	ldhu	r2,-4(fp)
 4019968:	1004c03a 	cmpne	r2,r2,zero
 401996c:	103ff51e 	bne	r2,zero,4019944 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 4019970:	e037883a 	mov	sp,fp
 4019974:	df000017 	ldw	fp,0(sp)
 4019978:	dec00104 	addi	sp,sp,4
 401997c:	f800283a 	ret

04019980 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 4019980:	defffc04 	addi	sp,sp,-16
 4019984:	df000315 	stw	fp,12(sp)
 4019988:	df000304 	addi	fp,sp,12
 401998c:	e13ffd15 	stw	r4,-12(fp)
 4019990:	e17ffe15 	stw	r5,-8(fp)
 4019994:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 4019998:	00000d06 	br	40199d0 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 401999c:	e0bffe17 	ldw	r2,-8(fp)
 40199a0:	10c00003 	ldbu	r3,0(r2)
 40199a4:	e0bffd17 	ldw	r2,-12(fp)
 40199a8:	10c00005 	stb	r3,0(r2)
 40199ac:	e0bffd17 	ldw	r2,-12(fp)
 40199b0:	10800044 	addi	r2,r2,1
 40199b4:	e0bffd15 	stw	r2,-12(fp)
 40199b8:	e0bffe17 	ldw	r2,-8(fp)
 40199bc:	10800044 	addi	r2,r2,1
 40199c0:	e0bffe15 	stw	r2,-8(fp)
        size--;
 40199c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40199c8:	10bfffc4 	addi	r2,r2,-1
 40199cc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 40199d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40199d4:	1004c03a 	cmpne	r2,r2,zero
 40199d8:	103ff01e 	bne	r2,zero,401999c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 40199dc:	e037883a 	mov	sp,fp
 40199e0:	df000017 	ldw	fp,0(sp)
 40199e4:	dec00104 	addi	sp,sp,4
 40199e8:	f800283a 	ret

040199ec <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 40199ec:	defffb04 	addi	sp,sp,-20
 40199f0:	dfc00415 	stw	ra,16(sp)
 40199f4:	df000315 	stw	fp,12(sp)
 40199f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 40199fc:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019a00:	0005303a 	rdctl	r2,status
 4019a04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019a08:	e0fffe17 	ldw	r3,-8(fp)
 4019a0c:	00bfff84 	movi	r2,-2
 4019a10:	1884703a 	and	r2,r3,r2
 4019a14:	1001703a 	wrctl	status,r2
  
  return context;
 4019a18:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4019a1c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 4019a20:	d0a06a03 	ldbu	r2,-32344(gp)
 4019a24:	10803fcc 	andi	r2,r2,255
 4019a28:	1004c03a 	cmpne	r2,r2,zero
 4019a2c:	10001b1e 	bne	r2,zero,4019a9c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 4019a30:	d0a05c03 	ldbu	r2,-32400(gp)
 4019a34:	10803fcc 	andi	r2,r2,255
 4019a38:	1004c03a 	cmpne	r2,r2,zero
 4019a3c:	1000171e 	bne	r2,zero,4019a9c <OS_Sched+0xb0>
            OS_SchedNew();
 4019a40:	4019ac00 	call	4019ac0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 4019a44:	d0a05e03 	ldbu	r2,-32392(gp)
 4019a48:	d0e05e43 	ldbu	r3,-32391(gp)
 4019a4c:	11003fcc 	andi	r4,r2,255
 4019a50:	18803fcc 	andi	r2,r3,255
 4019a54:	20801126 	beq	r4,r2,4019a9c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4019a58:	d0a05e03 	ldbu	r2,-32392(gp)
 4019a5c:	10803fcc 	andi	r2,r2,255
 4019a60:	00c100f4 	movhi	r3,1027
 4019a64:	18d76004 	addi	r3,r3,23936
 4019a68:	1085883a 	add	r2,r2,r2
 4019a6c:	1085883a 	add	r2,r2,r2
 4019a70:	10c5883a 	add	r2,r2,r3
 4019a74:	10800017 	ldw	r2,0(r2)
 4019a78:	d0a06615 	stw	r2,-32360(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 4019a7c:	d0e06617 	ldw	r3,-32360(gp)
 4019a80:	18800e17 	ldw	r2,56(r3)
 4019a84:	10800044 	addi	r2,r2,1
 4019a88:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 4019a8c:	d0a06117 	ldw	r2,-32380(gp)
 4019a90:	10800044 	addi	r2,r2,1
 4019a94:	d0a06115 	stw	r2,-32380(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 4019a98:	4022ebc0 	call	4022ebc <OSCtxSw>
 4019a9c:	e0bfff17 	ldw	r2,-4(fp)
 4019aa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019aa4:	e0bffd17 	ldw	r2,-12(fp)
 4019aa8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 4019aac:	e037883a 	mov	sp,fp
 4019ab0:	dfc00117 	ldw	ra,4(sp)
 4019ab4:	df000017 	ldw	fp,0(sp)
 4019ab8:	dec00204 	addi	sp,sp,8
 4019abc:	f800283a 	ret

04019ac0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 4019ac0:	defffe04 	addi	sp,sp,-8
 4019ac4:	df000115 	stw	fp,4(sp)
 4019ac8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 4019acc:	d0a06803 	ldbu	r2,-32352(gp)
 4019ad0:	10c03fcc 	andi	r3,r2,255
 4019ad4:	008100b4 	movhi	r2,1026
 4019ad8:	1092b404 	addi	r2,r2,19152
 4019adc:	10c5883a 	add	r2,r2,r3
 4019ae0:	10800003 	ldbu	r2,0(r2)
 4019ae4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4019ae8:	e0bfff03 	ldbu	r2,-4(fp)
 4019aec:	100490fa 	slli	r2,r2,3
 4019af0:	1009883a 	mov	r4,r2
 4019af4:	e0ffff03 	ldbu	r3,-4(fp)
 4019af8:	d0a06844 	addi	r2,gp,-32351
 4019afc:	1885883a 	add	r2,r3,r2
 4019b00:	10800003 	ldbu	r2,0(r2)
 4019b04:	10c03fcc 	andi	r3,r2,255
 4019b08:	008100b4 	movhi	r2,1026
 4019b0c:	1092b404 	addi	r2,r2,19152
 4019b10:	10c5883a 	add	r2,r2,r3
 4019b14:	10800003 	ldbu	r2,0(r2)
 4019b18:	2085883a 	add	r2,r4,r2
 4019b1c:	d0a05e05 	stb	r2,-32392(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 4019b20:	e037883a 	mov	sp,fp
 4019b24:	df000017 	ldw	fp,0(sp)
 4019b28:	dec00104 	addi	sp,sp,4
 4019b2c:	f800283a 	ret

04019b30 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4019b30:	defffc04 	addi	sp,sp,-16
 4019b34:	df000315 	stw	fp,12(sp)
 4019b38:	df000304 	addi	fp,sp,12
 4019b3c:	e13ffe15 	stw	r4,-8(fp)
 4019b40:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 4019b44:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 4019b48:	00000d06 	br	4019b80 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 4019b4c:	e0bfff17 	ldw	r2,-4(fp)
 4019b50:	10c00003 	ldbu	r3,0(r2)
 4019b54:	e0bffe17 	ldw	r2,-8(fp)
 4019b58:	10c00005 	stb	r3,0(r2)
 4019b5c:	e0bffe17 	ldw	r2,-8(fp)
 4019b60:	10800044 	addi	r2,r2,1
 4019b64:	e0bffe15 	stw	r2,-8(fp)
 4019b68:	e0bfff17 	ldw	r2,-4(fp)
 4019b6c:	10800044 	addi	r2,r2,1
 4019b70:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4019b74:	e0bffd03 	ldbu	r2,-12(fp)
 4019b78:	10800044 	addi	r2,r2,1
 4019b7c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4019b80:	e0bfff17 	ldw	r2,-4(fp)
 4019b84:	10800003 	ldbu	r2,0(r2)
 4019b88:	10803fcc 	andi	r2,r2,255
 4019b8c:	1004c03a 	cmpne	r2,r2,zero
 4019b90:	103fee1e 	bne	r2,zero,4019b4c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 4019b94:	e0bffe17 	ldw	r2,-8(fp)
 4019b98:	10000005 	stb	zero,0(r2)
    return (len);
 4019b9c:	e0bffd03 	ldbu	r2,-12(fp)
}
 4019ba0:	e037883a 	mov	sp,fp
 4019ba4:	df000017 	ldw	fp,0(sp)
 4019ba8:	dec00104 	addi	sp,sp,4
 4019bac:	f800283a 	ret

04019bb0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 4019bb0:	defffd04 	addi	sp,sp,-12
 4019bb4:	df000215 	stw	fp,8(sp)
 4019bb8:	df000204 	addi	fp,sp,8
 4019bbc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 4019bc0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 4019bc4:	00000606 	br	4019be0 <OS_StrLen+0x30>
        psrc++;
 4019bc8:	e0bfff17 	ldw	r2,-4(fp)
 4019bcc:	10800044 	addi	r2,r2,1
 4019bd0:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4019bd4:	e0bffe03 	ldbu	r2,-8(fp)
 4019bd8:	10800044 	addi	r2,r2,1
 4019bdc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4019be0:	e0bfff17 	ldw	r2,-4(fp)
 4019be4:	10800003 	ldbu	r2,0(r2)
 4019be8:	10803fcc 	andi	r2,r2,255
 4019bec:	1004c03a 	cmpne	r2,r2,zero
 4019bf0:	103ff51e 	bne	r2,zero,4019bc8 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 4019bf4:	e0bffe03 	ldbu	r2,-8(fp)
}
 4019bf8:	e037883a 	mov	sp,fp
 4019bfc:	df000017 	ldw	fp,0(sp)
 4019c00:	dec00104 	addi	sp,sp,4
 4019c04:	f800283a 	ret

04019c08 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 4019c08:	defffa04 	addi	sp,sp,-24
 4019c0c:	dfc00515 	stw	ra,20(sp)
 4019c10:	df000415 	stw	fp,16(sp)
 4019c14:	df000404 	addi	fp,sp,16
 4019c18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4019c1c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019c20:	0005303a 	rdctl	r2,status
 4019c24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019c28:	e0fffd17 	ldw	r3,-12(fp)
 4019c2c:	00bfff84 	movi	r2,-2
 4019c30:	1884703a 	and	r2,r3,r2
 4019c34:	1001703a 	wrctl	status,r2
  
  return context;
 4019c38:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 4019c3c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 4019c40:	d0a05d17 	ldw	r2,-32396(gp)
 4019c44:	10800044 	addi	r2,r2,1
 4019c48:	d0a05d15 	stw	r2,-32396(gp)
 4019c4c:	e0bffe17 	ldw	r2,-8(fp)
 4019c50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019c54:	e0bffc17 	ldw	r2,-16(fp)
 4019c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 4019c5c:	40233680 	call	4023368 <OSTaskIdleHook>
    }
 4019c60:	003fef06 	br	4019c20 <OS_TaskIdle+0x18>

04019c64 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 4019c64:	defffa04 	addi	sp,sp,-24
 4019c68:	dfc00515 	stw	ra,20(sp)
 4019c6c:	df000415 	stw	fp,16(sp)
 4019c70:	df000404 	addi	fp,sp,16
 4019c74:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4019c78:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4019c7c:	00000206 	br	4019c88 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 4019c80:	01003204 	movi	r4,200
 4019c84:	401fce40 	call	401fce4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 4019c88:	d0a06e03 	ldbu	r2,-32328(gp)
 4019c8c:	10803fcc 	andi	r2,r2,255
 4019c90:	1005003a 	cmpeq	r2,r2,zero
 4019c94:	103ffa1e 	bne	r2,zero,4019c80 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 4019c98:	d1206217 	ldw	r4,-32376(gp)
 4019c9c:	01401904 	movi	r5,100
 4019ca0:	4008fe80 	call	4008fe8 <__udivsi3>
 4019ca4:	d0a06215 	stw	r2,-32376(gp)
    if (OSIdleCtrMax == 0L) {
 4019ca8:	d0a06217 	ldw	r2,-32376(gp)
 4019cac:	1004c03a 	cmpne	r2,r2,zero
 4019cb0:	1000031e 	bne	r2,zero,4019cc0 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 4019cb4:	d0206405 	stb	zero,-32368(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 4019cb8:	01003fc4 	movi	r4,255
 4019cbc:	401f8f80 	call	401f8f8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019cc0:	0005303a 	rdctl	r2,status
 4019cc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019cc8:	e0fffd17 	ldw	r3,-12(fp)
 4019ccc:	00bfff84 	movi	r2,-2
 4019cd0:	1884703a 	and	r2,r3,r2
 4019cd4:	1001703a 	wrctl	status,r2
  
  return context;
 4019cd8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4019cdc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 4019ce0:	d0a05d17 	ldw	r2,-32396(gp)
 4019ce4:	d0a06f15 	stw	r2,-32324(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 4019ce8:	d0205d15 	stw	zero,-32396(gp)
 4019cec:	e0bffe17 	ldw	r2,-8(fp)
 4019cf0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019cf4:	e0bffc17 	ldw	r2,-16(fp)
 4019cf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4019cfc:	d1206f17 	ldw	r4,-32324(gp)
 4019d00:	d1606217 	ldw	r5,-32376(gp)
 4019d04:	4008fe80 	call	4008fe8 <__udivsi3>
 4019d08:	1007883a 	mov	r3,r2
 4019d0c:	00801904 	movi	r2,100
 4019d10:	10c5c83a 	sub	r2,r2,r3
 4019d14:	d0a06405 	stb	r2,-32368(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4019d18:	40232f80 	call	40232f8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4019d1c:	4019d2c0 	call	4019d2c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4019d20:	01001904 	movi	r4,100
 4019d24:	401fce40 	call	401fce4 <OSTimeDly>
    }
 4019d28:	003fe506 	br	4019cc0 <OS_TaskStat+0x5c>

04019d2c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4019d2c:	defffa04 	addi	sp,sp,-24
 4019d30:	dfc00515 	stw	ra,20(sp)
 4019d34:	df000415 	stw	fp,16(sp)
 4019d38:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4019d3c:	e03ffc05 	stb	zero,-16(fp)
 4019d40:	00002406 	br	4019dd4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4019d44:	e13ffc03 	ldbu	r4,-16(fp)
 4019d48:	e17ffe04 	addi	r5,fp,-8
 4019d4c:	401f6fc0 	call	401f6fc <OSTaskStkChk>
 4019d50:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4019d54:	e0bffc43 	ldbu	r2,-15(fp)
 4019d58:	1004c03a 	cmpne	r2,r2,zero
 4019d5c:	10001a1e 	bne	r2,zero,4019dc8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4019d60:	e0bffc03 	ldbu	r2,-16(fp)
 4019d64:	00c100f4 	movhi	r3,1027
 4019d68:	18d76004 	addi	r3,r3,23936
 4019d6c:	1085883a 	add	r2,r2,r2
 4019d70:	1085883a 	add	r2,r2,r2
 4019d74:	10c5883a 	add	r2,r2,r3
 4019d78:	10800017 	ldw	r2,0(r2)
 4019d7c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 4019d80:	e0bffd17 	ldw	r2,-12(fp)
 4019d84:	1005003a 	cmpeq	r2,r2,zero
 4019d88:	10000f1e 	bne	r2,zero,4019dc8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 4019d8c:	e0bffd17 	ldw	r2,-12(fp)
 4019d90:	10800060 	cmpeqi	r2,r2,1
 4019d94:	10000c1e 	bne	r2,zero,4019dc8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4019d98:	e0bffd17 	ldw	r2,-12(fp)
 4019d9c:	10c00217 	ldw	r3,8(r2)
 4019da0:	e0bffd17 	ldw	r2,-12(fp)
 4019da4:	10800317 	ldw	r2,12(r2)
 4019da8:	1085883a 	add	r2,r2,r2
 4019dac:	1085883a 	add	r2,r2,r2
 4019db0:	1887883a 	add	r3,r3,r2
 4019db4:	e0bffd17 	ldw	r2,-12(fp)
 4019db8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 4019dbc:	e0ffff17 	ldw	r3,-4(fp)
 4019dc0:	e0bffd17 	ldw	r2,-12(fp)
 4019dc4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4019dc8:	e0bffc03 	ldbu	r2,-16(fp)
 4019dcc:	10800044 	addi	r2,r2,1
 4019dd0:	e0bffc05 	stb	r2,-16(fp)
 4019dd4:	e0bffc03 	ldbu	r2,-16(fp)
 4019dd8:	10800570 	cmpltui	r2,r2,21
 4019ddc:	103fd91e 	bne	r2,zero,4019d44 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 4019de0:	e037883a 	mov	sp,fp
 4019de4:	dfc00117 	ldw	ra,4(sp)
 4019de8:	df000017 	ldw	fp,0(sp)
 4019dec:	dec00204 	addi	sp,sp,8
 4019df0:	f800283a 	ret

04019df4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4019df4:	defff104 	addi	sp,sp,-60
 4019df8:	dfc00e15 	stw	ra,56(sp)
 4019dfc:	df000d15 	stw	fp,52(sp)
 4019e00:	df000d04 	addi	fp,sp,52
 4019e04:	e17ffb15 	stw	r5,-20(fp)
 4019e08:	e1bffc15 	stw	r6,-16(fp)
 4019e0c:	e0800417 	ldw	r2,16(fp)
 4019e10:	e13ffa05 	stb	r4,-24(fp)
 4019e14:	e1fffd0d 	sth	r7,-12(fp)
 4019e18:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4019e1c:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019e20:	0005303a 	rdctl	r2,status
 4019e24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019e28:	e0fff717 	ldw	r3,-36(fp)
 4019e2c:	00bfff84 	movi	r2,-2
 4019e30:	1884703a 	and	r2,r3,r2
 4019e34:	1001703a 	wrctl	status,r2
  
  return context;
 4019e38:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 4019e3c:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4019e40:	d0a06317 	ldw	r2,-32372(gp)
 4019e44:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 4019e48:	e0bff917 	ldw	r2,-28(fp)
 4019e4c:	1005003a 	cmpeq	r2,r2,zero
 4019e50:	1000941e 	bne	r2,zero,401a0a4 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4019e54:	e0bff917 	ldw	r2,-28(fp)
 4019e58:	10800517 	ldw	r2,20(r2)
 4019e5c:	d0a06315 	stw	r2,-32372(gp)
 4019e60:	e0bff817 	ldw	r2,-32(fp)
 4019e64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019e68:	e0bff617 	ldw	r2,-40(fp)
 4019e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 4019e70:	e0fff917 	ldw	r3,-28(fp)
 4019e74:	e0bffb17 	ldw	r2,-20(fp)
 4019e78:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 4019e7c:	e0fff917 	ldw	r3,-28(fp)
 4019e80:	e0bffa03 	ldbu	r2,-24(fp)
 4019e84:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 4019e88:	e0bff917 	ldw	r2,-28(fp)
 4019e8c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 4019e90:	e0bff917 	ldw	r2,-28(fp)
 4019e94:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 4019e98:	e0bff917 	ldw	r2,-28(fp)
 4019e9c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4019ea0:	e0fff917 	ldw	r3,-28(fp)
 4019ea4:	e0800317 	ldw	r2,12(fp)
 4019ea8:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4019eac:	e0fff917 	ldw	r3,-28(fp)
 4019eb0:	e0800217 	ldw	r2,8(fp)
 4019eb4:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 4019eb8:	e0fff917 	ldw	r3,-28(fp)
 4019ebc:	e0bffc17 	ldw	r2,-16(fp)
 4019ec0:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4019ec4:	e0fff917 	ldw	r3,-28(fp)
 4019ec8:	e0bffe0b 	ldhu	r2,-8(fp)
 4019ecc:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4019ed0:	e0fff917 	ldw	r3,-28(fp)
 4019ed4:	e0bffd0b 	ldhu	r2,-12(fp)
 4019ed8:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4019edc:	e0bff917 	ldw	r2,-28(fp)
 4019ee0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4019ee4:	e0bffa03 	ldbu	r2,-24(fp)
 4019ee8:	1004d0fa 	srli	r2,r2,3
 4019eec:	1007883a 	mov	r3,r2
 4019ef0:	e0bff917 	ldw	r2,-28(fp)
 4019ef4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4019ef8:	e0bffa03 	ldbu	r2,-24(fp)
 4019efc:	108001cc 	andi	r2,r2,7
 4019f00:	1007883a 	mov	r3,r2
 4019f04:	e0bff917 	ldw	r2,-28(fp)
 4019f08:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4019f0c:	e0bff917 	ldw	r2,-28(fp)
 4019f10:	10800d03 	ldbu	r2,52(r2)
 4019f14:	10c03fcc 	andi	r3,r2,255
 4019f18:	00800044 	movi	r2,1
 4019f1c:	10c4983a 	sll	r2,r2,r3
 4019f20:	1007883a 	mov	r3,r2
 4019f24:	e0bff917 	ldw	r2,-28(fp)
 4019f28:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4019f2c:	e0bff917 	ldw	r2,-28(fp)
 4019f30:	10800cc3 	ldbu	r2,51(r2)
 4019f34:	10c03fcc 	andi	r3,r2,255
 4019f38:	00800044 	movi	r2,1
 4019f3c:	10c4983a 	sll	r2,r2,r3
 4019f40:	1007883a 	mov	r3,r2
 4019f44:	e0bff917 	ldw	r2,-28(fp)
 4019f48:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4019f4c:	e0bff917 	ldw	r2,-28(fp)
 4019f50:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4019f54:	e0bff917 	ldw	r2,-28(fp)
 4019f58:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4019f5c:	e0bff917 	ldw	r2,-28(fp)
 4019f60:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4019f64:	e0bff917 	ldw	r2,-28(fp)
 4019f68:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4019f6c:	e0bff917 	ldw	r2,-28(fp)
 4019f70:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4019f74:	e0bff917 	ldw	r2,-28(fp)
 4019f78:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4019f7c:	e0bff917 	ldw	r2,-28(fp)
 4019f80:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4019f84:	e0bff917 	ldw	r2,-28(fp)
 4019f88:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4019f8c:	e0bff917 	ldw	r2,-28(fp)
 4019f90:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4019f94:	e0fff917 	ldw	r3,-28(fp)
 4019f98:	00800fc4 	movi	r2,63
 4019f9c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4019fa0:	e0bff917 	ldw	r2,-28(fp)
 4019fa4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4019fa8:	e13ff917 	ldw	r4,-28(fp)
 4019fac:	40233840 	call	4023384 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4019fb0:	e13ff917 	ldw	r4,-28(fp)
 4019fb4:	402329c0 	call	402329c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019fb8:	0005303a 	rdctl	r2,status
 4019fbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019fc0:	e0fff517 	ldw	r3,-44(fp)
 4019fc4:	00bfff84 	movi	r2,-2
 4019fc8:	1884703a 	and	r2,r3,r2
 4019fcc:	1001703a 	wrctl	status,r2
  
  return context;
 4019fd0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4019fd4:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4019fd8:	e0bffa03 	ldbu	r2,-24(fp)
 4019fdc:	00c100f4 	movhi	r3,1027
 4019fe0:	18d76004 	addi	r3,r3,23936
 4019fe4:	1085883a 	add	r2,r2,r2
 4019fe8:	1085883a 	add	r2,r2,r2
 4019fec:	10c7883a 	add	r3,r2,r3
 4019ff0:	e0bff917 	ldw	r2,-28(fp)
 4019ff4:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4019ff8:	d0e05f17 	ldw	r3,-32388(gp)
 4019ffc:	e0bff917 	ldw	r2,-28(fp)
 401a000:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 401a004:	e0bff917 	ldw	r2,-28(fp)
 401a008:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 401a00c:	d0a05f17 	ldw	r2,-32388(gp)
 401a010:	1005003a 	cmpeq	r2,r2,zero
 401a014:	1000031e 	bne	r2,zero,401a024 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 401a018:	d0e05f17 	ldw	r3,-32388(gp)
 401a01c:	e0bff917 	ldw	r2,-28(fp)
 401a020:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 401a024:	e0bff917 	ldw	r2,-28(fp)
 401a028:	d0a05f15 	stw	r2,-32388(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 401a02c:	e0bff917 	ldw	r2,-28(fp)
 401a030:	10c00d83 	ldbu	r3,54(r2)
 401a034:	d0a06803 	ldbu	r2,-32352(gp)
 401a038:	1884b03a 	or	r2,r3,r2
 401a03c:	d0a06805 	stb	r2,-32352(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401a040:	e0bff917 	ldw	r2,-28(fp)
 401a044:	10800d03 	ldbu	r2,52(r2)
 401a048:	11003fcc 	andi	r4,r2,255
 401a04c:	e0bff917 	ldw	r2,-28(fp)
 401a050:	10800d03 	ldbu	r2,52(r2)
 401a054:	10c03fcc 	andi	r3,r2,255
 401a058:	d0a06844 	addi	r2,gp,-32351
 401a05c:	1885883a 	add	r2,r3,r2
 401a060:	10c00003 	ldbu	r3,0(r2)
 401a064:	e0bff917 	ldw	r2,-28(fp)
 401a068:	10800d43 	ldbu	r2,53(r2)
 401a06c:	1884b03a 	or	r2,r3,r2
 401a070:	1007883a 	mov	r3,r2
 401a074:	d0a06844 	addi	r2,gp,-32351
 401a078:	2085883a 	add	r2,r4,r2
 401a07c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 401a080:	d0a06443 	ldbu	r2,-32367(gp)
 401a084:	10800044 	addi	r2,r2,1
 401a088:	d0a06445 	stb	r2,-32367(gp)
 401a08c:	e0bff817 	ldw	r2,-32(fp)
 401a090:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a094:	e0bff417 	ldw	r2,-48(fp)
 401a098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 401a09c:	e03fff15 	stw	zero,-4(fp)
 401a0a0:	00000606 	br	401a0bc <OS_TCBInit+0x2c8>
 401a0a4:	e0bff817 	ldw	r2,-32(fp)
 401a0a8:	e0bff315 	stw	r2,-52(fp)
 401a0ac:	e0bff317 	ldw	r2,-52(fp)
 401a0b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 401a0b4:	00801084 	movi	r2,66
 401a0b8:	e0bfff15 	stw	r2,-4(fp)
 401a0bc:	e0bfff17 	ldw	r2,-4(fp)
}
 401a0c0:	e037883a 	mov	sp,fp
 401a0c4:	dfc00117 	ldw	ra,4(sp)
 401a0c8:	df000017 	ldw	fp,0(sp)
 401a0cc:	dec00204 	addi	sp,sp,8
 401a0d0:	f800283a 	ret

0401a0d4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 401a0d4:	defffe04 	addi	sp,sp,-8
 401a0d8:	df000115 	stw	fp,4(sp)
 401a0dc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 401a0e0:	d0a01504 	addi	r2,gp,-32684
 401a0e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 401a0e8:	d0a01604 	addi	r2,gp,-32680
 401a0ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 401a0f0:	d0a01784 	addi	r2,gp,-32674
 401a0f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 401a0f8:	d0a01804 	addi	r2,gp,-32672
 401a0fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 401a100:	d0a01704 	addi	r2,gp,-32676
 401a104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 401a108:	d0a01884 	addi	r2,gp,-32670
 401a10c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 401a110:	d0a01904 	addi	r2,gp,-32668
 401a114:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 401a118:	d0a01984 	addi	r2,gp,-32666
 401a11c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 401a120:	d0a01a04 	addi	r2,gp,-32664
 401a124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 401a128:	d0a01a84 	addi	r2,gp,-32662
 401a12c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 401a130:	d0a01b04 	addi	r2,gp,-32660
 401a134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 401a138:	d0a01b84 	addi	r2,gp,-32658
 401a13c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 401a140:	d0a01c04 	addi	r2,gp,-32656
 401a144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 401a148:	d0a01c84 	addi	r2,gp,-32654
 401a14c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 401a150:	d0a01d04 	addi	r2,gp,-32652
 401a154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 401a158:	d0a01d84 	addi	r2,gp,-32650
 401a15c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 401a160:	d0a01e04 	addi	r2,gp,-32648
 401a164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 401a168:	d0a01e84 	addi	r2,gp,-32646
 401a16c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 401a170:	d0a01f04 	addi	r2,gp,-32644
 401a174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 401a178:	d0a01f84 	addi	r2,gp,-32642
 401a17c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 401a180:	d0a02004 	addi	r2,gp,-32640
 401a184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 401a188:	d0a02084 	addi	r2,gp,-32638
 401a18c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 401a190:	d0a02104 	addi	r2,gp,-32636
 401a194:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 401a198:	d0a02184 	addi	r2,gp,-32634
 401a19c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 401a1a0:	d0a02204 	addi	r2,gp,-32632
 401a1a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 401a1a8:	d0a02284 	addi	r2,gp,-32630
 401a1ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 401a1b0:	d0a02304 	addi	r2,gp,-32628
 401a1b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 401a1b8:	d0a02384 	addi	r2,gp,-32626
 401a1bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 401a1c0:	d0a02404 	addi	r2,gp,-32624
 401a1c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 401a1c8:	d0a02484 	addi	r2,gp,-32622
 401a1cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 401a1d0:	d0a02504 	addi	r2,gp,-32620
 401a1d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 401a1d8:	d0a02584 	addi	r2,gp,-32618
 401a1dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 401a1e0:	d0a02604 	addi	r2,gp,-32616
 401a1e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 401a1e8:	d0a02684 	addi	r2,gp,-32614
 401a1ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 401a1f0:	d0a02704 	addi	r2,gp,-32612
 401a1f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 401a1f8:	d0a02784 	addi	r2,gp,-32610
 401a1fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 401a200:	d0a02804 	addi	r2,gp,-32608
 401a204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 401a208:	d0a02884 	addi	r2,gp,-32606
 401a20c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 401a210:	d0a02904 	addi	r2,gp,-32604
 401a214:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 401a218:	d0a02984 	addi	r2,gp,-32602
 401a21c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 401a220:	d0a02a04 	addi	r2,gp,-32600
 401a224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 401a228:	d0a02a84 	addi	r2,gp,-32598
 401a22c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 401a230:	d0a02b04 	addi	r2,gp,-32596
 401a234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 401a238:	d0a02b84 	addi	r2,gp,-32594
 401a23c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 401a240:	d0a02c04 	addi	r2,gp,-32592
 401a244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 401a248:	d0a03104 	addi	r2,gp,-32572
 401a24c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 401a250:	e037883a 	mov	sp,fp
 401a254:	df000017 	ldw	fp,0(sp)
 401a258:	dec00104 	addi	sp,sp,4
 401a25c:	f800283a 	ret

0401a260 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 401a260:	defff104 	addi	sp,sp,-60
 401a264:	df000e15 	stw	fp,56(sp)
 401a268:	df000e04 	addi	fp,sp,56
 401a26c:	e13ffa15 	stw	r4,-24(fp)
 401a270:	e1fffd15 	stw	r7,-12(fp)
 401a274:	e17ffb0d 	sth	r5,-20(fp)
 401a278:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401a27c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401a280:	e0bffd17 	ldw	r2,-12(fp)
 401a284:	1004c03a 	cmpne	r2,r2,zero
 401a288:	1000021e 	bne	r2,zero,401a294 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 401a28c:	e03fff15 	stw	zero,-4(fp)
 401a290:	0000bb06 	br	401a580 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 401a294:	e0bffa17 	ldw	r2,-24(fp)
 401a298:	1004c03a 	cmpne	r2,r2,zero
 401a29c:	1000051e 	bne	r2,zero,401a2b4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401a2a0:	e0fffd17 	ldw	r3,-12(fp)
 401a2a4:	00801b84 	movi	r2,110
 401a2a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401a2ac:	e03fff15 	stw	zero,-4(fp)
 401a2b0:	0000b306 	br	401a580 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 401a2b4:	e0bffa17 	ldw	r2,-24(fp)
 401a2b8:	10800003 	ldbu	r2,0(r2)
 401a2bc:	10803fcc 	andi	r2,r2,255
 401a2c0:	10800160 	cmpeqi	r2,r2,5
 401a2c4:	1000051e 	bne	r2,zero,401a2dc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 401a2c8:	e0fffd17 	ldw	r3,-12(fp)
 401a2cc:	00800044 	movi	r2,1
 401a2d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401a2d4:	e03fff15 	stw	zero,-4(fp)
 401a2d8:	0000a906 	br	401a580 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 401a2dc:	e0fffc03 	ldbu	r3,-16(fp)
 401a2e0:	00bfe004 	movi	r2,-128
 401a2e4:	1884703a 	and	r2,r3,r2
 401a2e8:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 401a2ec:	e0bff943 	ldbu	r2,-27(fp)
 401a2f0:	1005003a 	cmpeq	r2,r2,zero
 401a2f4:	1000061e 	bne	r2,zero,401a310 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 401a2f8:	e0bffc03 	ldbu	r2,-16(fp)
 401a2fc:	10801fcc 	andi	r2,r2,127
 401a300:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 401a304:	00800044 	movi	r2,1
 401a308:	e0bff905 	stb	r2,-28(fp)
 401a30c:	00000106 	br	401a314 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 401a310:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 401a314:	e0bffd17 	ldw	r2,-12(fp)
 401a318:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a31c:	0005303a 	rdctl	r2,status
 401a320:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a324:	e0fff717 	ldw	r3,-36(fp)
 401a328:	00bfff84 	movi	r2,-2
 401a32c:	1884703a 	and	r2,r3,r2
 401a330:	1001703a 	wrctl	status,r2
  
  return context;
 401a334:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 401a338:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 401a33c:	e0bffc03 	ldbu	r2,-16(fp)
 401a340:	e0bffe15 	stw	r2,-8(fp)
 401a344:	e0fffe17 	ldw	r3,-8(fp)
 401a348:	18800060 	cmpeqi	r2,r3,1
 401a34c:	1000651e 	bne	r2,zero,401a4e4 <OSFlagAccept+0x284>
 401a350:	e0fffe17 	ldw	r3,-8(fp)
 401a354:	18800088 	cmpgei	r2,r3,2
 401a358:	1000041e 	bne	r2,zero,401a36c <OSFlagAccept+0x10c>
 401a35c:	e0fffe17 	ldw	r3,-8(fp)
 401a360:	1805003a 	cmpeq	r2,r3,zero
 401a364:	1000421e 	bne	r2,zero,401a470 <OSFlagAccept+0x210>
 401a368:	00007b06 	br	401a558 <OSFlagAccept+0x2f8>
 401a36c:	e0fffe17 	ldw	r3,-8(fp)
 401a370:	188000a0 	cmpeqi	r2,r3,2
 401a374:	1000041e 	bne	r2,zero,401a388 <OSFlagAccept+0x128>
 401a378:	e0fffe17 	ldw	r3,-8(fp)
 401a37c:	188000e0 	cmpeqi	r2,r3,3
 401a380:	10001e1e 	bne	r2,zero,401a3fc <OSFlagAccept+0x19c>
 401a384:	00007406 	br	401a558 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 401a388:	e0bffa17 	ldw	r2,-24(fp)
 401a38c:	10c0020b 	ldhu	r3,8(r2)
 401a390:	e0bffb0b 	ldhu	r2,-20(fp)
 401a394:	1884703a 	and	r2,r3,r2
 401a398:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 401a39c:	e0fff98b 	ldhu	r3,-26(fp)
 401a3a0:	e0bffb0b 	ldhu	r2,-20(fp)
 401a3a4:	18800d1e 	bne	r3,r2,401a3dc <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401a3a8:	e0bff903 	ldbu	r2,-28(fp)
 401a3ac:	10800058 	cmpnei	r2,r2,1
 401a3b0:	10000d1e 	bne	r2,zero,401a3e8 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 401a3b4:	e0bffa17 	ldw	r2,-24(fp)
 401a3b8:	1080020b 	ldhu	r2,8(r2)
 401a3bc:	1007883a 	mov	r3,r2
 401a3c0:	e0bff98b 	ldhu	r2,-26(fp)
 401a3c4:	0084303a 	nor	r2,zero,r2
 401a3c8:	1884703a 	and	r2,r3,r2
 401a3cc:	1007883a 	mov	r3,r2
 401a3d0:	e0bffa17 	ldw	r2,-24(fp)
 401a3d4:	10c0020d 	sth	r3,8(r2)
 401a3d8:	00000306 	br	401a3e8 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 401a3dc:	e0fffd17 	ldw	r3,-12(fp)
 401a3e0:	00801c04 	movi	r2,112
 401a3e4:	18800005 	stb	r2,0(r3)
 401a3e8:	e0bff817 	ldw	r2,-32(fp)
 401a3ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a3f0:	e0bff617 	ldw	r2,-40(fp)
 401a3f4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 401a3f8:	00005f06 	br	401a578 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 401a3fc:	e0bffa17 	ldw	r2,-24(fp)
 401a400:	10c0020b 	ldhu	r3,8(r2)
 401a404:	e0bffb0b 	ldhu	r2,-20(fp)
 401a408:	1884703a 	and	r2,r3,r2
 401a40c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 401a410:	e0bff98b 	ldhu	r2,-26(fp)
 401a414:	1005003a 	cmpeq	r2,r2,zero
 401a418:	10000d1e 	bne	r2,zero,401a450 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401a41c:	e0bff903 	ldbu	r2,-28(fp)
 401a420:	10800058 	cmpnei	r2,r2,1
 401a424:	10000d1e 	bne	r2,zero,401a45c <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 401a428:	e0bffa17 	ldw	r2,-24(fp)
 401a42c:	1080020b 	ldhu	r2,8(r2)
 401a430:	1007883a 	mov	r3,r2
 401a434:	e0bff98b 	ldhu	r2,-26(fp)
 401a438:	0084303a 	nor	r2,zero,r2
 401a43c:	1884703a 	and	r2,r3,r2
 401a440:	1007883a 	mov	r3,r2
 401a444:	e0bffa17 	ldw	r2,-24(fp)
 401a448:	10c0020d 	sth	r3,8(r2)
 401a44c:	00000306 	br	401a45c <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 401a450:	e0fffd17 	ldw	r3,-12(fp)
 401a454:	00801c04 	movi	r2,112
 401a458:	18800005 	stb	r2,0(r3)
 401a45c:	e0bff817 	ldw	r2,-32(fp)
 401a460:	e0bff515 	stw	r2,-44(fp)
 401a464:	e0bff517 	ldw	r2,-44(fp)
 401a468:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 401a46c:	00004206 	br	401a578 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 401a470:	e0bffa17 	ldw	r2,-24(fp)
 401a474:	1080020b 	ldhu	r2,8(r2)
 401a478:	0084303a 	nor	r2,zero,r2
 401a47c:	1007883a 	mov	r3,r2
 401a480:	e0bffb0b 	ldhu	r2,-20(fp)
 401a484:	1884703a 	and	r2,r3,r2
 401a488:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 401a48c:	e0fff98b 	ldhu	r3,-26(fp)
 401a490:	e0bffb0b 	ldhu	r2,-20(fp)
 401a494:	18800b1e 	bne	r3,r2,401a4c4 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401a498:	e0bff903 	ldbu	r2,-28(fp)
 401a49c:	10800058 	cmpnei	r2,r2,1
 401a4a0:	10000b1e 	bne	r2,zero,401a4d0 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 401a4a4:	e0bffa17 	ldw	r2,-24(fp)
 401a4a8:	10c0020b 	ldhu	r3,8(r2)
 401a4ac:	e0bff98b 	ldhu	r2,-26(fp)
 401a4b0:	1884b03a 	or	r2,r3,r2
 401a4b4:	1007883a 	mov	r3,r2
 401a4b8:	e0bffa17 	ldw	r2,-24(fp)
 401a4bc:	10c0020d 	sth	r3,8(r2)
 401a4c0:	00000306 	br	401a4d0 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 401a4c4:	e0fffd17 	ldw	r3,-12(fp)
 401a4c8:	00801c04 	movi	r2,112
 401a4cc:	18800005 	stb	r2,0(r3)
 401a4d0:	e0bff817 	ldw	r2,-32(fp)
 401a4d4:	e0bff415 	stw	r2,-48(fp)
 401a4d8:	e0bff417 	ldw	r2,-48(fp)
 401a4dc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 401a4e0:	00002506 	br	401a578 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 401a4e4:	e0bffa17 	ldw	r2,-24(fp)
 401a4e8:	1080020b 	ldhu	r2,8(r2)
 401a4ec:	0084303a 	nor	r2,zero,r2
 401a4f0:	1007883a 	mov	r3,r2
 401a4f4:	e0bffb0b 	ldhu	r2,-20(fp)
 401a4f8:	1884703a 	and	r2,r3,r2
 401a4fc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 401a500:	e0bff98b 	ldhu	r2,-26(fp)
 401a504:	1005003a 	cmpeq	r2,r2,zero
 401a508:	10000b1e 	bne	r2,zero,401a538 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401a50c:	e0bff903 	ldbu	r2,-28(fp)
 401a510:	10800058 	cmpnei	r2,r2,1
 401a514:	10000b1e 	bne	r2,zero,401a544 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 401a518:	e0bffa17 	ldw	r2,-24(fp)
 401a51c:	10c0020b 	ldhu	r3,8(r2)
 401a520:	e0bff98b 	ldhu	r2,-26(fp)
 401a524:	1884b03a 	or	r2,r3,r2
 401a528:	1007883a 	mov	r3,r2
 401a52c:	e0bffa17 	ldw	r2,-24(fp)
 401a530:	10c0020d 	sth	r3,8(r2)
 401a534:	00000306 	br	401a544 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 401a538:	e0fffd17 	ldw	r3,-12(fp)
 401a53c:	00801c04 	movi	r2,112
 401a540:	18800005 	stb	r2,0(r3)
 401a544:	e0bff817 	ldw	r2,-32(fp)
 401a548:	e0bff315 	stw	r2,-52(fp)
 401a54c:	e0bff317 	ldw	r2,-52(fp)
 401a550:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 401a554:	00000806 	br	401a578 <OSFlagAccept+0x318>
 401a558:	e0bff817 	ldw	r2,-32(fp)
 401a55c:	e0bff215 	stw	r2,-56(fp)
 401a560:	e0bff217 	ldw	r2,-56(fp)
 401a564:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 401a568:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 401a56c:	e0fffd17 	ldw	r3,-12(fp)
 401a570:	00801bc4 	movi	r2,111
 401a574:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 401a578:	e0bff98b 	ldhu	r2,-26(fp)
 401a57c:	e0bfff15 	stw	r2,-4(fp)
 401a580:	e0bfff17 	ldw	r2,-4(fp)
}
 401a584:	e037883a 	mov	sp,fp
 401a588:	df000017 	ldw	fp,0(sp)
 401a58c:	dec00104 	addi	sp,sp,4
 401a590:	f800283a 	ret

0401a594 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 401a594:	defff704 	addi	sp,sp,-36
 401a598:	df000815 	stw	fp,32(sp)
 401a59c:	df000804 	addi	fp,sp,32
 401a5a0:	e17ffe15 	stw	r5,-8(fp)
 401a5a4:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 401a5a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 401a5ac:	e0bffe17 	ldw	r2,-8(fp)
 401a5b0:	1004c03a 	cmpne	r2,r2,zero
 401a5b4:	1000021e 	bne	r2,zero,401a5c0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 401a5b8:	e03fff15 	stw	zero,-4(fp)
 401a5bc:	00003f06 	br	401a6bc <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 401a5c0:	008100b4 	movhi	r2,1026
 401a5c4:	109ab204 	addi	r2,r2,27336
 401a5c8:	10800003 	ldbu	r2,0(r2)
 401a5cc:	10803fcc 	andi	r2,r2,255
 401a5d0:	1005003a 	cmpeq	r2,r2,zero
 401a5d4:	1000051e 	bne	r2,zero,401a5ec <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 401a5d8:	e0fffe17 	ldw	r3,-8(fp)
 401a5dc:	00800404 	movi	r2,16
 401a5e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 401a5e4:	e03fff15 	stw	zero,-4(fp)
 401a5e8:	00003406 	br	401a6bc <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a5ec:	0005303a 	rdctl	r2,status
 401a5f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a5f4:	e0fffa17 	ldw	r3,-24(fp)
 401a5f8:	00bfff84 	movi	r2,-2
 401a5fc:	1884703a 	and	r2,r3,r2
 401a600:	1001703a 	wrctl	status,r2
  
  return context;
 401a604:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401a608:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 401a60c:	008100b4 	movhi	r2,1026
 401a610:	109ab504 	addi	r2,r2,27348
 401a614:	10800017 	ldw	r2,0(r2)
 401a618:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 401a61c:	e0bffc17 	ldw	r2,-16(fp)
 401a620:	1005003a 	cmpeq	r2,r2,zero
 401a624:	10001c1e 	bne	r2,zero,401a698 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 401a628:	008100b4 	movhi	r2,1026
 401a62c:	109ab504 	addi	r2,r2,27348
 401a630:	10800017 	ldw	r2,0(r2)
 401a634:	10800117 	ldw	r2,4(r2)
 401a638:	1007883a 	mov	r3,r2
 401a63c:	008100b4 	movhi	r2,1026
 401a640:	109ab504 	addi	r2,r2,27348
 401a644:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 401a648:	e0fffc17 	ldw	r3,-16(fp)
 401a64c:	00800144 	movi	r2,5
 401a650:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 401a654:	e0fffc17 	ldw	r3,-16(fp)
 401a658:	e0bffd0b 	ldhu	r2,-12(fp)
 401a65c:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 401a660:	e0bffc17 	ldw	r2,-16(fp)
 401a664:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 401a668:	e0fffc17 	ldw	r3,-16(fp)
 401a66c:	00800fc4 	movi	r2,63
 401a670:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 401a674:	e0bffc17 	ldw	r2,-16(fp)
 401a678:	100002c5 	stb	zero,11(r2)
 401a67c:	e0bffb17 	ldw	r2,-20(fp)
 401a680:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a684:	e0bff917 	ldw	r2,-28(fp)
 401a688:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 401a68c:	e0bffe17 	ldw	r2,-8(fp)
 401a690:	10000005 	stb	zero,0(r2)
 401a694:	00000706 	br	401a6b4 <OSFlagCreate+0x120>
 401a698:	e0bffb17 	ldw	r2,-20(fp)
 401a69c:	e0bff815 	stw	r2,-32(fp)
 401a6a0:	e0bff817 	ldw	r2,-32(fp)
 401a6a4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 401a6a8:	e0fffe17 	ldw	r3,-8(fp)
 401a6ac:	00801c84 	movi	r2,114
 401a6b0:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 401a6b4:	e0bffc17 	ldw	r2,-16(fp)
 401a6b8:	e0bfff15 	stw	r2,-4(fp)
 401a6bc:	e0bfff17 	ldw	r2,-4(fp)
}
 401a6c0:	e037883a 	mov	sp,fp
 401a6c4:	df000017 	ldw	fp,0(sp)
 401a6c8:	dec00104 	addi	sp,sp,4
 401a6cc:	f800283a 	ret

0401a6d0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 401a6d0:	defff004 	addi	sp,sp,-64
 401a6d4:	dfc00f15 	stw	ra,60(sp)
 401a6d8:	df000e15 	stw	fp,56(sp)
 401a6dc:	df000e04 	addi	fp,sp,56
 401a6e0:	e13ffb15 	stw	r4,-20(fp)
 401a6e4:	e1bffd15 	stw	r6,-12(fp)
 401a6e8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401a6ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401a6f0:	e0bffd17 	ldw	r2,-12(fp)
 401a6f4:	1004c03a 	cmpne	r2,r2,zero
 401a6f8:	1000031e 	bne	r2,zero,401a708 <OSFlagDel+0x38>
        return (pgrp);
 401a6fc:	e0bffb17 	ldw	r2,-20(fp)
 401a700:	e0bfff15 	stw	r2,-4(fp)
 401a704:	00009606 	br	401a960 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 401a708:	e0bffb17 	ldw	r2,-20(fp)
 401a70c:	1004c03a 	cmpne	r2,r2,zero
 401a710:	1000061e 	bne	r2,zero,401a72c <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401a714:	e0fffd17 	ldw	r3,-12(fp)
 401a718:	00801b84 	movi	r2,110
 401a71c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 401a720:	e0fffb17 	ldw	r3,-20(fp)
 401a724:	e0ffff15 	stw	r3,-4(fp)
 401a728:	00008d06 	br	401a960 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401a72c:	008100b4 	movhi	r2,1026
 401a730:	109ab204 	addi	r2,r2,27336
 401a734:	10800003 	ldbu	r2,0(r2)
 401a738:	10803fcc 	andi	r2,r2,255
 401a73c:	1005003a 	cmpeq	r2,r2,zero
 401a740:	1000061e 	bne	r2,zero,401a75c <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 401a744:	e0fffd17 	ldw	r3,-12(fp)
 401a748:	008003c4 	movi	r2,15
 401a74c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 401a750:	e0bffb17 	ldw	r2,-20(fp)
 401a754:	e0bfff15 	stw	r2,-4(fp)
 401a758:	00008106 	br	401a960 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 401a75c:	e0bffb17 	ldw	r2,-20(fp)
 401a760:	10800003 	ldbu	r2,0(r2)
 401a764:	10803fcc 	andi	r2,r2,255
 401a768:	10800160 	cmpeqi	r2,r2,5
 401a76c:	1000061e 	bne	r2,zero,401a788 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 401a770:	e0fffd17 	ldw	r3,-12(fp)
 401a774:	00800044 	movi	r2,1
 401a778:	18800005 	stb	r2,0(r3)
        return (pgrp);
 401a77c:	e0fffb17 	ldw	r3,-20(fp)
 401a780:	e0ffff15 	stw	r3,-4(fp)
 401a784:	00007606 	br	401a960 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a788:	0005303a 	rdctl	r2,status
 401a78c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a790:	e0fff617 	ldw	r3,-40(fp)
 401a794:	00bfff84 	movi	r2,-2
 401a798:	1884703a 	and	r2,r3,r2
 401a79c:	1001703a 	wrctl	status,r2
  
  return context;
 401a7a0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 401a7a4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 401a7a8:	e0bffb17 	ldw	r2,-20(fp)
 401a7ac:	10800117 	ldw	r2,4(r2)
 401a7b0:	1005003a 	cmpeq	r2,r2,zero
 401a7b4:	1000031e 	bne	r2,zero,401a7c4 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401a7b8:	00800044 	movi	r2,1
 401a7bc:	e0bffa05 	stb	r2,-24(fp)
 401a7c0:	00000106 	br	401a7c8 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 401a7c4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401a7c8:	e0bffc03 	ldbu	r2,-16(fp)
 401a7cc:	e0bffe15 	stw	r2,-8(fp)
 401a7d0:	e0fffe17 	ldw	r3,-8(fp)
 401a7d4:	1805003a 	cmpeq	r2,r3,zero
 401a7d8:	1000041e 	bne	r2,zero,401a7ec <OSFlagDel+0x11c>
 401a7dc:	e0fffe17 	ldw	r3,-8(fp)
 401a7e0:	18800060 	cmpeqi	r2,r3,1
 401a7e4:	1000281e 	bne	r2,zero,401a888 <OSFlagDel+0x1b8>
 401a7e8:	00005206 	br	401a934 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 401a7ec:	e0bffa03 	ldbu	r2,-24(fp)
 401a7f0:	1004c03a 	cmpne	r2,r2,zero
 401a7f4:	10001a1e 	bne	r2,zero,401a860 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 401a7f8:	e0fffb17 	ldw	r3,-20(fp)
 401a7fc:	00800fc4 	movi	r2,63
 401a800:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 401a804:	e0bffb17 	ldw	r2,-20(fp)
 401a808:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401a80c:	e0bffb17 	ldw	r2,-20(fp)
 401a810:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 401a814:	008100b4 	movhi	r2,1026
 401a818:	109ab504 	addi	r2,r2,27348
 401a81c:	10c00017 	ldw	r3,0(r2)
 401a820:	e0bffb17 	ldw	r2,-20(fp)
 401a824:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 401a828:	e0bffb17 	ldw	r2,-20(fp)
 401a82c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 401a830:	00c100b4 	movhi	r3,1026
 401a834:	18dab504 	addi	r3,r3,27348
 401a838:	e0bffb17 	ldw	r2,-20(fp)
 401a83c:	18800015 	stw	r2,0(r3)
 401a840:	e0bff717 	ldw	r2,-36(fp)
 401a844:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a848:	e0bff517 	ldw	r2,-44(fp)
 401a84c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 401a850:	e0bffd17 	ldw	r2,-12(fp)
 401a854:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 401a858:	e03ff815 	stw	zero,-32(fp)
 401a85c:	00003e06 	br	401a958 <OSFlagDel+0x288>
 401a860:	e0bff717 	ldw	r2,-36(fp)
 401a864:	e0bff415 	stw	r2,-48(fp)
 401a868:	e0bff417 	ldw	r2,-48(fp)
 401a86c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 401a870:	e0fffd17 	ldw	r3,-12(fp)
 401a874:	00801244 	movi	r2,73
 401a878:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 401a87c:	e0bffb17 	ldw	r2,-20(fp)
 401a880:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 401a884:	00003406 	br	401a958 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 401a888:	e0bffb17 	ldw	r2,-20(fp)
 401a88c:	10800117 	ldw	r2,4(r2)
 401a890:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 401a894:	00000606 	br	401a8b0 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 401a898:	e13ff917 	ldw	r4,-28(fp)
 401a89c:	000b883a 	mov	r5,zero
 401a8a0:	401b9e00 	call	401b9e0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 401a8a4:	e0bff917 	ldw	r2,-28(fp)
 401a8a8:	10800017 	ldw	r2,0(r2)
 401a8ac:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 401a8b0:	e0bff917 	ldw	r2,-28(fp)
 401a8b4:	1004c03a 	cmpne	r2,r2,zero
 401a8b8:	103ff71e 	bne	r2,zero,401a898 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 401a8bc:	e0fffb17 	ldw	r3,-20(fp)
 401a8c0:	00800fc4 	movi	r2,63
 401a8c4:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 401a8c8:	e0bffb17 	ldw	r2,-20(fp)
 401a8cc:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401a8d0:	e0bffb17 	ldw	r2,-20(fp)
 401a8d4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 401a8d8:	008100b4 	movhi	r2,1026
 401a8dc:	109ab504 	addi	r2,r2,27348
 401a8e0:	10c00017 	ldw	r3,0(r2)
 401a8e4:	e0bffb17 	ldw	r2,-20(fp)
 401a8e8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 401a8ec:	e0bffb17 	ldw	r2,-20(fp)
 401a8f0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 401a8f4:	00c100b4 	movhi	r3,1026
 401a8f8:	18dab504 	addi	r3,r3,27348
 401a8fc:	e0bffb17 	ldw	r2,-20(fp)
 401a900:	18800015 	stw	r2,0(r3)
 401a904:	e0bff717 	ldw	r2,-36(fp)
 401a908:	e0bff315 	stw	r2,-52(fp)
 401a90c:	e0bff317 	ldw	r2,-52(fp)
 401a910:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401a914:	e0bffa03 	ldbu	r2,-24(fp)
 401a918:	10800058 	cmpnei	r2,r2,1
 401a91c:	1000011e 	bne	r2,zero,401a924 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 401a920:	40199ec0 	call	40199ec <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 401a924:	e0bffd17 	ldw	r2,-12(fp)
 401a928:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 401a92c:	e03ff815 	stw	zero,-32(fp)
             break;
 401a930:	00000906 	br	401a958 <OSFlagDel+0x288>
 401a934:	e0bff717 	ldw	r2,-36(fp)
 401a938:	e0bff215 	stw	r2,-56(fp)
 401a93c:	e0bff217 	ldw	r2,-56(fp)
 401a940:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 401a944:	e0fffd17 	ldw	r3,-12(fp)
 401a948:	008001c4 	movi	r2,7
 401a94c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 401a950:	e0bffb17 	ldw	r2,-20(fp)
 401a954:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 401a958:	e0bff817 	ldw	r2,-32(fp)
 401a95c:	e0bfff15 	stw	r2,-4(fp)
 401a960:	e0bfff17 	ldw	r2,-4(fp)
}
 401a964:	e037883a 	mov	sp,fp
 401a968:	dfc00117 	ldw	ra,4(sp)
 401a96c:	df000017 	ldw	fp,0(sp)
 401a970:	dec00204 	addi	sp,sp,8
 401a974:	f800283a 	ret

0401a978 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 401a978:	defff504 	addi	sp,sp,-44
 401a97c:	dfc00a15 	stw	ra,40(sp)
 401a980:	df000915 	stw	fp,36(sp)
 401a984:	df000904 	addi	fp,sp,36
 401a988:	e13ffc15 	stw	r4,-16(fp)
 401a98c:	e17ffd15 	stw	r5,-12(fp)
 401a990:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401a994:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401a998:	e0bffe17 	ldw	r2,-8(fp)
 401a99c:	1004c03a 	cmpne	r2,r2,zero
 401a9a0:	1000021e 	bne	r2,zero,401a9ac <OSFlagNameGet+0x34>
        return (0);
 401a9a4:	e03fff15 	stw	zero,-4(fp)
 401a9a8:	00003e06 	br	401aaa4 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 401a9ac:	e0bffc17 	ldw	r2,-16(fp)
 401a9b0:	1004c03a 	cmpne	r2,r2,zero
 401a9b4:	1000051e 	bne	r2,zero,401a9cc <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401a9b8:	e0fffe17 	ldw	r3,-8(fp)
 401a9bc:	00801b84 	movi	r2,110
 401a9c0:	18800005 	stb	r2,0(r3)
        return (0);
 401a9c4:	e03fff15 	stw	zero,-4(fp)
 401a9c8:	00003606 	br	401aaa4 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 401a9cc:	e0bffd17 	ldw	r2,-12(fp)
 401a9d0:	1004c03a 	cmpne	r2,r2,zero
 401a9d4:	1000051e 	bne	r2,zero,401a9ec <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 401a9d8:	e0fffe17 	ldw	r3,-8(fp)
 401a9dc:	00800304 	movi	r2,12
 401a9e0:	18800005 	stb	r2,0(r3)
        return (0);
 401a9e4:	e03fff15 	stw	zero,-4(fp)
 401a9e8:	00002e06 	br	401aaa4 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401a9ec:	008100b4 	movhi	r2,1026
 401a9f0:	109ab204 	addi	r2,r2,27336
 401a9f4:	10800003 	ldbu	r2,0(r2)
 401a9f8:	10803fcc 	andi	r2,r2,255
 401a9fc:	1005003a 	cmpeq	r2,r2,zero
 401aa00:	1000051e 	bne	r2,zero,401aa18 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 401aa04:	e0fffe17 	ldw	r3,-8(fp)
 401aa08:	00800444 	movi	r2,17
 401aa0c:	18800005 	stb	r2,0(r3)
        return (0);
 401aa10:	e03fff15 	stw	zero,-4(fp)
 401aa14:	00002306 	br	401aaa4 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401aa18:	0005303a 	rdctl	r2,status
 401aa1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401aa20:	e0fff917 	ldw	r3,-28(fp)
 401aa24:	00bfff84 	movi	r2,-2
 401aa28:	1884703a 	and	r2,r3,r2
 401aa2c:	1001703a 	wrctl	status,r2
  
  return context;
 401aa30:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401aa34:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 401aa38:	e0bffc17 	ldw	r2,-16(fp)
 401aa3c:	10800003 	ldbu	r2,0(r2)
 401aa40:	10803fcc 	andi	r2,r2,255
 401aa44:	10800160 	cmpeqi	r2,r2,5
 401aa48:	1000091e 	bne	r2,zero,401aa70 <OSFlagNameGet+0xf8>
 401aa4c:	e0bffa17 	ldw	r2,-24(fp)
 401aa50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401aa54:	e0bff817 	ldw	r2,-32(fp)
 401aa58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 401aa5c:	e0fffe17 	ldw	r3,-8(fp)
 401aa60:	00800044 	movi	r2,1
 401aa64:	18800005 	stb	r2,0(r3)
        return (0);
 401aa68:	e03fff15 	stw	zero,-4(fp)
 401aa6c:	00000d06 	br	401aaa4 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 401aa70:	e0bffc17 	ldw	r2,-16(fp)
 401aa74:	11400284 	addi	r5,r2,10
 401aa78:	e13ffd17 	ldw	r4,-12(fp)
 401aa7c:	4019b300 	call	4019b30 <OS_StrCopy>
 401aa80:	e0bffb05 	stb	r2,-20(fp)
 401aa84:	e0bffa17 	ldw	r2,-24(fp)
 401aa88:	e0bff715 	stw	r2,-36(fp)
 401aa8c:	e0bff717 	ldw	r2,-36(fp)
 401aa90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401aa94:	e0bffe17 	ldw	r2,-8(fp)
 401aa98:	10000005 	stb	zero,0(r2)
    return (len);
 401aa9c:	e0bffb03 	ldbu	r2,-20(fp)
 401aaa0:	e0bfff15 	stw	r2,-4(fp)
 401aaa4:	e0bfff17 	ldw	r2,-4(fp)
}
 401aaa8:	e037883a 	mov	sp,fp
 401aaac:	dfc00117 	ldw	ra,4(sp)
 401aab0:	df000017 	ldw	fp,0(sp)
 401aab4:	dec00204 	addi	sp,sp,8
 401aab8:	f800283a 	ret

0401aabc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 401aabc:	defff504 	addi	sp,sp,-44
 401aac0:	dfc00a15 	stw	ra,40(sp)
 401aac4:	df000915 	stw	fp,36(sp)
 401aac8:	df000904 	addi	fp,sp,36
 401aacc:	e13ffd15 	stw	r4,-12(fp)
 401aad0:	e17ffe15 	stw	r5,-8(fp)
 401aad4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401aad8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401aadc:	e0bfff17 	ldw	r2,-4(fp)
 401aae0:	1005003a 	cmpeq	r2,r2,zero
 401aae4:	1000451e 	bne	r2,zero,401abfc <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 401aae8:	e0bffd17 	ldw	r2,-12(fp)
 401aaec:	1004c03a 	cmpne	r2,r2,zero
 401aaf0:	1000041e 	bne	r2,zero,401ab04 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401aaf4:	e0ffff17 	ldw	r3,-4(fp)
 401aaf8:	00801b84 	movi	r2,110
 401aafc:	18800005 	stb	r2,0(r3)
        return;
 401ab00:	00003e06 	br	401abfc <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 401ab04:	e0bffe17 	ldw	r2,-8(fp)
 401ab08:	1004c03a 	cmpne	r2,r2,zero
 401ab0c:	1000041e 	bne	r2,zero,401ab20 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 401ab10:	e0ffff17 	ldw	r3,-4(fp)
 401ab14:	00800304 	movi	r2,12
 401ab18:	18800005 	stb	r2,0(r3)
        return;
 401ab1c:	00003706 	br	401abfc <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401ab20:	008100b4 	movhi	r2,1026
 401ab24:	109ab204 	addi	r2,r2,27336
 401ab28:	10800003 	ldbu	r2,0(r2)
 401ab2c:	10803fcc 	andi	r2,r2,255
 401ab30:	1005003a 	cmpeq	r2,r2,zero
 401ab34:	1000041e 	bne	r2,zero,401ab48 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 401ab38:	e0ffff17 	ldw	r3,-4(fp)
 401ab3c:	00800484 	movi	r2,18
 401ab40:	18800005 	stb	r2,0(r3)
        return;
 401ab44:	00002d06 	br	401abfc <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ab48:	0005303a 	rdctl	r2,status
 401ab4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ab50:	e0fffa17 	ldw	r3,-24(fp)
 401ab54:	00bfff84 	movi	r2,-2
 401ab58:	1884703a 	and	r2,r3,r2
 401ab5c:	1001703a 	wrctl	status,r2
  
  return context;
 401ab60:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401ab64:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 401ab68:	e0bffd17 	ldw	r2,-12(fp)
 401ab6c:	10800003 	ldbu	r2,0(r2)
 401ab70:	10803fcc 	andi	r2,r2,255
 401ab74:	10800160 	cmpeqi	r2,r2,5
 401ab78:	1000081e 	bne	r2,zero,401ab9c <OSFlagNameSet+0xe0>
 401ab7c:	e0bffb17 	ldw	r2,-20(fp)
 401ab80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ab84:	e0bff917 	ldw	r2,-28(fp)
 401ab88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 401ab8c:	e0ffff17 	ldw	r3,-4(fp)
 401ab90:	00800044 	movi	r2,1
 401ab94:	18800005 	stb	r2,0(r3)
        return;
 401ab98:	00001806 	br	401abfc <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 401ab9c:	e13ffe17 	ldw	r4,-8(fp)
 401aba0:	4019bb00 	call	4019bb0 <OS_StrLen>
 401aba4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 401aba8:	e0bffc03 	ldbu	r2,-16(fp)
 401abac:	10800830 	cmpltui	r2,r2,32
 401abb0:	1000081e 	bne	r2,zero,401abd4 <OSFlagNameSet+0x118>
 401abb4:	e0bffb17 	ldw	r2,-20(fp)
 401abb8:	e0bff815 	stw	r2,-32(fp)
 401abbc:	e0bff817 	ldw	r2,-32(fp)
 401abc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 401abc4:	e0ffff17 	ldw	r3,-4(fp)
 401abc8:	00801cc4 	movi	r2,115
 401abcc:	18800005 	stb	r2,0(r3)
        return;
 401abd0:	00000a06 	br	401abfc <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 401abd4:	e0bffd17 	ldw	r2,-12(fp)
 401abd8:	11000284 	addi	r4,r2,10
 401abdc:	e17ffe17 	ldw	r5,-8(fp)
 401abe0:	4019b300 	call	4019b30 <OS_StrCopy>
 401abe4:	e0bffb17 	ldw	r2,-20(fp)
 401abe8:	e0bff715 	stw	r2,-36(fp)
 401abec:	e0bff717 	ldw	r2,-36(fp)
 401abf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401abf4:	e0bfff17 	ldw	r2,-4(fp)
 401abf8:	10000005 	stb	zero,0(r2)
    return;
}
 401abfc:	e037883a 	mov	sp,fp
 401ac00:	dfc00117 	ldw	ra,4(sp)
 401ac04:	df000017 	ldw	fp,0(sp)
 401ac08:	dec00204 	addi	sp,sp,8
 401ac0c:	f800283a 	ret

0401ac10 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 401ac10:	deffe004 	addi	sp,sp,-128
 401ac14:	dfc01f15 	stw	ra,124(sp)
 401ac18:	df001e15 	stw	fp,120(sp)
 401ac1c:	df001e04 	addi	fp,sp,120
 401ac20:	e13ff915 	stw	r4,-28(fp)
 401ac24:	e17ffa0d 	sth	r5,-24(fp)
 401ac28:	e1bffb05 	stb	r6,-20(fp)
 401ac2c:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401ac30:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401ac34:	e0800217 	ldw	r2,8(fp)
 401ac38:	1004c03a 	cmpne	r2,r2,zero
 401ac3c:	1000021e 	bne	r2,zero,401ac48 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 401ac40:	e03fff15 	stw	zero,-4(fp)
 401ac44:	00017d06 	br	401b23c <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 401ac48:	e0bff917 	ldw	r2,-28(fp)
 401ac4c:	1004c03a 	cmpne	r2,r2,zero
 401ac50:	1000051e 	bne	r2,zero,401ac68 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401ac54:	e0c00217 	ldw	r3,8(fp)
 401ac58:	00801b84 	movi	r2,110
 401ac5c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401ac60:	e03fff15 	stw	zero,-4(fp)
 401ac64:	00017506 	br	401b23c <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401ac68:	008100b4 	movhi	r2,1026
 401ac6c:	109ab204 	addi	r2,r2,27336
 401ac70:	10800003 	ldbu	r2,0(r2)
 401ac74:	10803fcc 	andi	r2,r2,255
 401ac78:	1005003a 	cmpeq	r2,r2,zero
 401ac7c:	1000051e 	bne	r2,zero,401ac94 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 401ac80:	e0c00217 	ldw	r3,8(fp)
 401ac84:	00800084 	movi	r2,2
 401ac88:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401ac8c:	e03fff15 	stw	zero,-4(fp)
 401ac90:	00016a06 	br	401b23c <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 401ac94:	008100b4 	movhi	r2,1026
 401ac98:	109aa404 	addi	r2,r2,27280
 401ac9c:	10800003 	ldbu	r2,0(r2)
 401aca0:	10803fcc 	andi	r2,r2,255
 401aca4:	1005003a 	cmpeq	r2,r2,zero
 401aca8:	1000051e 	bne	r2,zero,401acc0 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 401acac:	e0c00217 	ldw	r3,8(fp)
 401acb0:	00800344 	movi	r2,13
 401acb4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401acb8:	e03fff15 	stw	zero,-4(fp)
 401acbc:	00015f06 	br	401b23c <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 401acc0:	e0bff917 	ldw	r2,-28(fp)
 401acc4:	10800003 	ldbu	r2,0(r2)
 401acc8:	10803fcc 	andi	r2,r2,255
 401accc:	10800160 	cmpeqi	r2,r2,5
 401acd0:	1000051e 	bne	r2,zero,401ace8 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 401acd4:	e0c00217 	ldw	r3,8(fp)
 401acd8:	00800044 	movi	r2,1
 401acdc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401ace0:	e03fff15 	stw	zero,-4(fp)
 401ace4:	00015506 	br	401b23c <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 401ace8:	e0fffb03 	ldbu	r3,-20(fp)
 401acec:	00bfe004 	movi	r2,-128
 401acf0:	1884703a 	and	r2,r3,r2
 401acf4:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 401acf8:	e0bff283 	ldbu	r2,-54(fp)
 401acfc:	1005003a 	cmpeq	r2,r2,zero
 401ad00:	1000071e 	bne	r2,zero,401ad20 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 401ad04:	00c01fc4 	movi	r3,127
 401ad08:	e0bffb03 	ldbu	r2,-20(fp)
 401ad0c:	10c4703a 	and	r2,r2,r3
 401ad10:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 401ad14:	00800044 	movi	r2,1
 401ad18:	e0bff205 	stb	r2,-56(fp)
 401ad1c:	00000106 	br	401ad24 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 401ad20:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ad24:	0005303a 	rdctl	r2,status
 401ad28:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ad2c:	e0fff017 	ldw	r3,-64(fp)
 401ad30:	00bfff84 	movi	r2,-2
 401ad34:	1884703a 	and	r2,r3,r2
 401ad38:	1001703a 	wrctl	status,r2
  
  return context;
 401ad3c:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 401ad40:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 401ad44:	e0bffb03 	ldbu	r2,-20(fp)
 401ad48:	e0bffe15 	stw	r2,-8(fp)
 401ad4c:	e0fffe17 	ldw	r3,-8(fp)
 401ad50:	18800060 	cmpeqi	r2,r3,1
 401ad54:	1000981e 	bne	r2,zero,401afb8 <OSFlagPend+0x3a8>
 401ad58:	e0fffe17 	ldw	r3,-8(fp)
 401ad5c:	18800088 	cmpgei	r2,r3,2
 401ad60:	1000041e 	bne	r2,zero,401ad74 <OSFlagPend+0x164>
 401ad64:	e0fffe17 	ldw	r3,-8(fp)
 401ad68:	1805003a 	cmpeq	r2,r3,zero
 401ad6c:	1000641e 	bne	r2,zero,401af00 <OSFlagPend+0x2f0>
 401ad70:	0000bf06 	br	401b070 <OSFlagPend+0x460>
 401ad74:	e0fffe17 	ldw	r3,-8(fp)
 401ad78:	188000a0 	cmpeqi	r2,r3,2
 401ad7c:	1000041e 	bne	r2,zero,401ad90 <OSFlagPend+0x180>
 401ad80:	e0fffe17 	ldw	r3,-8(fp)
 401ad84:	188000e0 	cmpeqi	r2,r3,3
 401ad88:	10002f1e 	bne	r2,zero,401ae48 <OSFlagPend+0x238>
 401ad8c:	0000b806 	br	401b070 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 401ad90:	e0bff917 	ldw	r2,-28(fp)
 401ad94:	10c0020b 	ldhu	r3,8(r2)
 401ad98:	e0bffa0b 	ldhu	r2,-24(fp)
 401ad9c:	1884703a 	and	r2,r3,r2
 401ada0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 401ada4:	e0fff30b 	ldhu	r3,-52(fp)
 401ada8:	e0bffa0b 	ldhu	r2,-24(fp)
 401adac:	18801a1e 	bne	r3,r2,401ae18 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401adb0:	e0bff203 	ldbu	r2,-56(fp)
 401adb4:	10800058 	cmpnei	r2,r2,1
 401adb8:	1000091e 	bne	r2,zero,401ade0 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 401adbc:	e0bff917 	ldw	r2,-28(fp)
 401adc0:	1080020b 	ldhu	r2,8(r2)
 401adc4:	1007883a 	mov	r3,r2
 401adc8:	e0bff30b 	ldhu	r2,-52(fp)
 401adcc:	0084303a 	nor	r2,zero,r2
 401add0:	1884703a 	and	r2,r3,r2
 401add4:	1007883a 	mov	r3,r2
 401add8:	e0bff917 	ldw	r2,-28(fp)
 401addc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401ade0:	008100b4 	movhi	r2,1026
 401ade4:	109ab304 	addi	r2,r2,27340
 401ade8:	10c00017 	ldw	r3,0(r2)
 401adec:	e0bff30b 	ldhu	r2,-52(fp)
 401adf0:	18800b0d 	sth	r2,44(r3)
 401adf4:	e0bff117 	ldw	r2,-60(fp)
 401adf8:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401adfc:	e0bfef17 	ldw	r2,-68(fp)
 401ae00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401ae04:	e0800217 	ldw	r2,8(fp)
 401ae08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 401ae0c:	e0bff30b 	ldhu	r2,-52(fp)
 401ae10:	e0bfff15 	stw	r2,-4(fp)
 401ae14:	00010906 	br	401b23c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401ae18:	e1bffa0b 	ldhu	r6,-24(fp)
 401ae1c:	e1fffb03 	ldbu	r7,-20(fp)
 401ae20:	e0bffc0b 	ldhu	r2,-16(fp)
 401ae24:	e17ff404 	addi	r5,fp,-48
 401ae28:	d8800015 	stw	r2,0(sp)
 401ae2c:	e13ff917 	ldw	r4,-28(fp)
 401ae30:	401b7380 	call	401b738 <OS_FlagBlock>
 401ae34:	e0bff117 	ldw	r2,-60(fp)
 401ae38:	e0bfee15 	stw	r2,-72(fp)
 401ae3c:	e0bfee17 	ldw	r2,-72(fp)
 401ae40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 401ae44:	00009506 	br	401b09c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 401ae48:	e0bff917 	ldw	r2,-28(fp)
 401ae4c:	10c0020b 	ldhu	r3,8(r2)
 401ae50:	e0bffa0b 	ldhu	r2,-24(fp)
 401ae54:	1884703a 	and	r2,r3,r2
 401ae58:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 401ae5c:	e0bff30b 	ldhu	r2,-52(fp)
 401ae60:	1005003a 	cmpeq	r2,r2,zero
 401ae64:	10001a1e 	bne	r2,zero,401aed0 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401ae68:	e0bff203 	ldbu	r2,-56(fp)
 401ae6c:	10800058 	cmpnei	r2,r2,1
 401ae70:	1000091e 	bne	r2,zero,401ae98 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 401ae74:	e0bff917 	ldw	r2,-28(fp)
 401ae78:	1080020b 	ldhu	r2,8(r2)
 401ae7c:	1007883a 	mov	r3,r2
 401ae80:	e0bff30b 	ldhu	r2,-52(fp)
 401ae84:	0084303a 	nor	r2,zero,r2
 401ae88:	1884703a 	and	r2,r3,r2
 401ae8c:	1007883a 	mov	r3,r2
 401ae90:	e0bff917 	ldw	r2,-28(fp)
 401ae94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401ae98:	008100b4 	movhi	r2,1026
 401ae9c:	109ab304 	addi	r2,r2,27340
 401aea0:	10c00017 	ldw	r3,0(r2)
 401aea4:	e0bff30b 	ldhu	r2,-52(fp)
 401aea8:	18800b0d 	sth	r2,44(r3)
 401aeac:	e0bff117 	ldw	r2,-60(fp)
 401aeb0:	e0bfed15 	stw	r2,-76(fp)
 401aeb4:	e0bfed17 	ldw	r2,-76(fp)
 401aeb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401aebc:	e0800217 	ldw	r2,8(fp)
 401aec0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 401aec4:	e0fff30b 	ldhu	r3,-52(fp)
 401aec8:	e0ffff15 	stw	r3,-4(fp)
 401aecc:	0000db06 	br	401b23c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401aed0:	e1bffa0b 	ldhu	r6,-24(fp)
 401aed4:	e1fffb03 	ldbu	r7,-20(fp)
 401aed8:	e0bffc0b 	ldhu	r2,-16(fp)
 401aedc:	e17ff404 	addi	r5,fp,-48
 401aee0:	d8800015 	stw	r2,0(sp)
 401aee4:	e13ff917 	ldw	r4,-28(fp)
 401aee8:	401b7380 	call	401b738 <OS_FlagBlock>
 401aeec:	e0bff117 	ldw	r2,-60(fp)
 401aef0:	e0bfec15 	stw	r2,-80(fp)
 401aef4:	e0bfec17 	ldw	r2,-80(fp)
 401aef8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 401aefc:	00006706 	br	401b09c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 401af00:	e0bff917 	ldw	r2,-28(fp)
 401af04:	1080020b 	ldhu	r2,8(r2)
 401af08:	0084303a 	nor	r2,zero,r2
 401af0c:	1007883a 	mov	r3,r2
 401af10:	e0bffa0b 	ldhu	r2,-24(fp)
 401af14:	1884703a 	and	r2,r3,r2
 401af18:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 401af1c:	e0fff30b 	ldhu	r3,-52(fp)
 401af20:	e0bffa0b 	ldhu	r2,-24(fp)
 401af24:	1880181e 	bne	r3,r2,401af88 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401af28:	e0bff203 	ldbu	r2,-56(fp)
 401af2c:	10800058 	cmpnei	r2,r2,1
 401af30:	1000071e 	bne	r2,zero,401af50 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 401af34:	e0bff917 	ldw	r2,-28(fp)
 401af38:	10c0020b 	ldhu	r3,8(r2)
 401af3c:	e0bff30b 	ldhu	r2,-52(fp)
 401af40:	1884b03a 	or	r2,r3,r2
 401af44:	1007883a 	mov	r3,r2
 401af48:	e0bff917 	ldw	r2,-28(fp)
 401af4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401af50:	008100b4 	movhi	r2,1026
 401af54:	109ab304 	addi	r2,r2,27340
 401af58:	10c00017 	ldw	r3,0(r2)
 401af5c:	e0bff30b 	ldhu	r2,-52(fp)
 401af60:	18800b0d 	sth	r2,44(r3)
 401af64:	e0bff117 	ldw	r2,-60(fp)
 401af68:	e0bfeb15 	stw	r2,-84(fp)
 401af6c:	e0bfeb17 	ldw	r2,-84(fp)
 401af70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401af74:	e0800217 	ldw	r2,8(fp)
 401af78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 401af7c:	e0bff30b 	ldhu	r2,-52(fp)
 401af80:	e0bfff15 	stw	r2,-4(fp)
 401af84:	0000ad06 	br	401b23c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401af88:	e1bffa0b 	ldhu	r6,-24(fp)
 401af8c:	e1fffb03 	ldbu	r7,-20(fp)
 401af90:	e0bffc0b 	ldhu	r2,-16(fp)
 401af94:	e17ff404 	addi	r5,fp,-48
 401af98:	d8800015 	stw	r2,0(sp)
 401af9c:	e13ff917 	ldw	r4,-28(fp)
 401afa0:	401b7380 	call	401b738 <OS_FlagBlock>
 401afa4:	e0bff117 	ldw	r2,-60(fp)
 401afa8:	e0bfea15 	stw	r2,-88(fp)
 401afac:	e0bfea17 	ldw	r2,-88(fp)
 401afb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 401afb4:	00003906 	br	401b09c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 401afb8:	e0bff917 	ldw	r2,-28(fp)
 401afbc:	1080020b 	ldhu	r2,8(r2)
 401afc0:	0084303a 	nor	r2,zero,r2
 401afc4:	1007883a 	mov	r3,r2
 401afc8:	e0bffa0b 	ldhu	r2,-24(fp)
 401afcc:	1884703a 	and	r2,r3,r2
 401afd0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 401afd4:	e0bff30b 	ldhu	r2,-52(fp)
 401afd8:	1005003a 	cmpeq	r2,r2,zero
 401afdc:	1000181e 	bne	r2,zero,401b040 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401afe0:	e0bff203 	ldbu	r2,-56(fp)
 401afe4:	10800058 	cmpnei	r2,r2,1
 401afe8:	1000071e 	bne	r2,zero,401b008 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 401afec:	e0bff917 	ldw	r2,-28(fp)
 401aff0:	10c0020b 	ldhu	r3,8(r2)
 401aff4:	e0bff30b 	ldhu	r2,-52(fp)
 401aff8:	1884b03a 	or	r2,r3,r2
 401affc:	1007883a 	mov	r3,r2
 401b000:	e0bff917 	ldw	r2,-28(fp)
 401b004:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401b008:	008100b4 	movhi	r2,1026
 401b00c:	109ab304 	addi	r2,r2,27340
 401b010:	10c00017 	ldw	r3,0(r2)
 401b014:	e0bff30b 	ldhu	r2,-52(fp)
 401b018:	18800b0d 	sth	r2,44(r3)
 401b01c:	e0bff117 	ldw	r2,-60(fp)
 401b020:	e0bfe915 	stw	r2,-92(fp)
 401b024:	e0bfe917 	ldw	r2,-92(fp)
 401b028:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401b02c:	e0800217 	ldw	r2,8(fp)
 401b030:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 401b034:	e0fff30b 	ldhu	r3,-52(fp)
 401b038:	e0ffff15 	stw	r3,-4(fp)
 401b03c:	00007f06 	br	401b23c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401b040:	e1bffa0b 	ldhu	r6,-24(fp)
 401b044:	e1fffb03 	ldbu	r7,-20(fp)
 401b048:	e0bffc0b 	ldhu	r2,-16(fp)
 401b04c:	e17ff404 	addi	r5,fp,-48
 401b050:	d8800015 	stw	r2,0(sp)
 401b054:	e13ff917 	ldw	r4,-28(fp)
 401b058:	401b7380 	call	401b738 <OS_FlagBlock>
 401b05c:	e0bff117 	ldw	r2,-60(fp)
 401b060:	e0bfe815 	stw	r2,-96(fp)
 401b064:	e0bfe817 	ldw	r2,-96(fp)
 401b068:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 401b06c:	00000b06 	br	401b09c <OSFlagPend+0x48c>
 401b070:	e0bff117 	ldw	r2,-60(fp)
 401b074:	e0bfe715 	stw	r2,-100(fp)
 401b078:	e0bfe717 	ldw	r2,-100(fp)
 401b07c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 401b080:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 401b084:	e0c00217 	ldw	r3,8(fp)
 401b088:	00801bc4 	movi	r2,111
 401b08c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 401b090:	e0bff30b 	ldhu	r2,-52(fp)
 401b094:	e0bfff15 	stw	r2,-4(fp)
 401b098:	00006806 	br	401b23c <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 401b09c:	40199ec0 	call	40199ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b0a0:	0005303a 	rdctl	r2,status
 401b0a4:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b0a8:	e0ffe617 	ldw	r3,-104(fp)
 401b0ac:	00bfff84 	movi	r2,-2
 401b0b0:	1884703a 	and	r2,r3,r2
 401b0b4:	1001703a 	wrctl	status,r2
  
  return context;
 401b0b8:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 401b0bc:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 401b0c0:	008100b4 	movhi	r2,1026
 401b0c4:	109ab304 	addi	r2,r2,27340
 401b0c8:	10800017 	ldw	r2,0(r2)
 401b0cc:	10800c43 	ldbu	r2,49(r2)
 401b0d0:	10803fcc 	andi	r2,r2,255
 401b0d4:	1005003a 	cmpeq	r2,r2,zero
 401b0d8:	1000221e 	bne	r2,zero,401b164 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 401b0dc:	008100b4 	movhi	r2,1026
 401b0e0:	109ab304 	addi	r2,r2,27340
 401b0e4:	10800017 	ldw	r2,0(r2)
 401b0e8:	10800c43 	ldbu	r2,49(r2)
 401b0ec:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401b0f0:	008100b4 	movhi	r2,1026
 401b0f4:	109ab304 	addi	r2,r2,27340
 401b0f8:	10800017 	ldw	r2,0(r2)
 401b0fc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 401b100:	e13ff404 	addi	r4,fp,-48
 401b104:	401baf00 	call	401baf0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 401b108:	008100b4 	movhi	r2,1026
 401b10c:	109ab304 	addi	r2,r2,27340
 401b110:	10800017 	ldw	r2,0(r2)
 401b114:	10000c05 	stb	zero,48(r2)
 401b118:	e0bff117 	ldw	r2,-60(fp)
 401b11c:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b120:	e0bfe517 	ldw	r2,-108(fp)
 401b124:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 401b128:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 401b12c:	e0bff243 	ldbu	r2,-55(fp)
 401b130:	108000a0 	cmpeqi	r2,r2,2
 401b134:	1000011e 	bne	r2,zero,401b13c <OSFlagPend+0x52c>
 401b138:	00000406 	br	401b14c <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 401b13c:	e0c00217 	ldw	r3,8(fp)
 401b140:	00800384 	movi	r2,14
 401b144:	18800005 	stb	r2,0(r3)
                 break;
 401b148:	00000306 	br	401b158 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 401b14c:	e0c00217 	ldw	r3,8(fp)
 401b150:	00800284 	movi	r2,10
 401b154:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 401b158:	e0fff30b 	ldhu	r3,-52(fp)
 401b15c:	e0ffff15 	stw	r3,-4(fp)
 401b160:	00003606 	br	401b23c <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 401b164:	008100b4 	movhi	r2,1026
 401b168:	109ab304 	addi	r2,r2,27340
 401b16c:	10800017 	ldw	r2,0(r2)
 401b170:	10800b0b 	ldhu	r2,44(r2)
 401b174:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 401b178:	e0bff203 	ldbu	r2,-56(fp)
 401b17c:	10800058 	cmpnei	r2,r2,1
 401b180:	1000261e 	bne	r2,zero,401b21c <OSFlagPend+0x60c>
        switch (wait_type) {
 401b184:	e0bffb03 	ldbu	r2,-20(fp)
 401b188:	e0bffd15 	stw	r2,-12(fp)
 401b18c:	e0fffd17 	ldw	r3,-12(fp)
 401b190:	1804803a 	cmplt	r2,r3,zero
 401b194:	1000181e 	bne	r2,zero,401b1f8 <OSFlagPend+0x5e8>
 401b198:	e0fffd17 	ldw	r3,-12(fp)
 401b19c:	18800090 	cmplti	r2,r3,2
 401b1a0:	10000d1e 	bne	r2,zero,401b1d8 <OSFlagPend+0x5c8>
 401b1a4:	e0fffd17 	ldw	r3,-12(fp)
 401b1a8:	18800108 	cmpgei	r2,r3,4
 401b1ac:	1000121e 	bne	r2,zero,401b1f8 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 401b1b0:	e0bff917 	ldw	r2,-28(fp)
 401b1b4:	1080020b 	ldhu	r2,8(r2)
 401b1b8:	1007883a 	mov	r3,r2
 401b1bc:	e0bff30b 	ldhu	r2,-52(fp)
 401b1c0:	0084303a 	nor	r2,zero,r2
 401b1c4:	1884703a 	and	r2,r3,r2
 401b1c8:	1007883a 	mov	r3,r2
 401b1cc:	e0bff917 	ldw	r2,-28(fp)
 401b1d0:	10c0020d 	sth	r3,8(r2)
                 break;
 401b1d4:	00001106 	br	401b21c <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 401b1d8:	e0bff917 	ldw	r2,-28(fp)
 401b1dc:	10c0020b 	ldhu	r3,8(r2)
 401b1e0:	e0bff30b 	ldhu	r2,-52(fp)
 401b1e4:	1884b03a 	or	r2,r3,r2
 401b1e8:	1007883a 	mov	r3,r2
 401b1ec:	e0bff917 	ldw	r2,-28(fp)
 401b1f0:	10c0020d 	sth	r3,8(r2)
                 break;
 401b1f4:	00000906 	br	401b21c <OSFlagPend+0x60c>
 401b1f8:	e0bff117 	ldw	r2,-60(fp)
 401b1fc:	e0bfe415 	stw	r2,-112(fp)
 401b200:	e0bfe417 	ldw	r2,-112(fp)
 401b204:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 401b208:	e0c00217 	ldw	r3,8(fp)
 401b20c:	00801bc4 	movi	r2,111
 401b210:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 401b214:	e03fff15 	stw	zero,-4(fp)
 401b218:	00000806 	br	401b23c <OSFlagPend+0x62c>
 401b21c:	e0bff117 	ldw	r2,-60(fp)
 401b220:	e0bfe315 	stw	r2,-116(fp)
 401b224:	e0bfe317 	ldw	r2,-116(fp)
 401b228:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 401b22c:	e0800217 	ldw	r2,8(fp)
 401b230:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 401b234:	e0bff30b 	ldhu	r2,-52(fp)
 401b238:	e0bfff15 	stw	r2,-4(fp)
 401b23c:	e0bfff17 	ldw	r2,-4(fp)
}
 401b240:	e037883a 	mov	sp,fp
 401b244:	dfc00117 	ldw	ra,4(sp)
 401b248:	df000017 	ldw	fp,0(sp)
 401b24c:	dec00204 	addi	sp,sp,8
 401b250:	f800283a 	ret

0401b254 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 401b254:	defffb04 	addi	sp,sp,-20
 401b258:	df000415 	stw	fp,16(sp)
 401b25c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401b260:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b264:	0005303a 	rdctl	r2,status
 401b268:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b26c:	e0fffd17 	ldw	r3,-12(fp)
 401b270:	00bfff84 	movi	r2,-2
 401b274:	1884703a 	and	r2,r3,r2
 401b278:	1001703a 	wrctl	status,r2
  
  return context;
 401b27c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 401b280:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 401b284:	008100b4 	movhi	r2,1026
 401b288:	109ab304 	addi	r2,r2,27340
 401b28c:	10800017 	ldw	r2,0(r2)
 401b290:	10800b0b 	ldhu	r2,44(r2)
 401b294:	e0bfff0d 	sth	r2,-4(fp)
 401b298:	e0bffe17 	ldw	r2,-8(fp)
 401b29c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b2a0:	e0bffc17 	ldw	r2,-16(fp)
 401b2a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 401b2a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 401b2ac:	e037883a 	mov	sp,fp
 401b2b0:	df000017 	ldw	fp,0(sp)
 401b2b4:	dec00104 	addi	sp,sp,4
 401b2b8:	f800283a 	ret

0401b2bc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 401b2bc:	deffed04 	addi	sp,sp,-76
 401b2c0:	dfc01215 	stw	ra,72(sp)
 401b2c4:	df001115 	stw	fp,68(sp)
 401b2c8:	df001104 	addi	fp,sp,68
 401b2cc:	e13ff915 	stw	r4,-28(fp)
 401b2d0:	e1fffc15 	stw	r7,-16(fp)
 401b2d4:	e17ffa0d 	sth	r5,-24(fp)
 401b2d8:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 401b2dc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 401b2e0:	e0bffc17 	ldw	r2,-16(fp)
 401b2e4:	1004c03a 	cmpne	r2,r2,zero
 401b2e8:	1000021e 	bne	r2,zero,401b2f4 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 401b2ec:	e03fff15 	stw	zero,-4(fp)
 401b2f0:	0000d606 	br	401b64c <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 401b2f4:	e0bff917 	ldw	r2,-28(fp)
 401b2f8:	1004c03a 	cmpne	r2,r2,zero
 401b2fc:	1000051e 	bne	r2,zero,401b314 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401b300:	e0fffc17 	ldw	r3,-16(fp)
 401b304:	00801b84 	movi	r2,110
 401b308:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401b30c:	e03fff15 	stw	zero,-4(fp)
 401b310:	0000ce06 	br	401b64c <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 401b314:	e0bff917 	ldw	r2,-28(fp)
 401b318:	10800003 	ldbu	r2,0(r2)
 401b31c:	10803fcc 	andi	r2,r2,255
 401b320:	10800160 	cmpeqi	r2,r2,5
 401b324:	1000051e 	bne	r2,zero,401b33c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 401b328:	e0fffc17 	ldw	r3,-16(fp)
 401b32c:	00800044 	movi	r2,1
 401b330:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401b334:	e03fff15 	stw	zero,-4(fp)
 401b338:	0000c406 	br	401b64c <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b33c:	0005303a 	rdctl	r2,status
 401b340:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b344:	e0fff417 	ldw	r3,-48(fp)
 401b348:	00bfff84 	movi	r2,-2
 401b34c:	1884703a 	and	r2,r3,r2
 401b350:	1001703a 	wrctl	status,r2
  
  return context;
 401b354:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 401b358:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 401b35c:	e0bffb03 	ldbu	r2,-20(fp)
 401b360:	e0bffe15 	stw	r2,-8(fp)
 401b364:	e0fffe17 	ldw	r3,-8(fp)
 401b368:	1805003a 	cmpeq	r2,r3,zero
 401b36c:	1000041e 	bne	r2,zero,401b380 <OSFlagPost+0xc4>
 401b370:	e0fffe17 	ldw	r3,-8(fp)
 401b374:	18800060 	cmpeqi	r2,r3,1
 401b378:	10000b1e 	bne	r2,zero,401b3a8 <OSFlagPost+0xec>
 401b37c:	00001206 	br	401b3c8 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 401b380:	e0bff917 	ldw	r2,-28(fp)
 401b384:	1080020b 	ldhu	r2,8(r2)
 401b388:	1007883a 	mov	r3,r2
 401b38c:	e0bffa0b 	ldhu	r2,-24(fp)
 401b390:	0084303a 	nor	r2,zero,r2
 401b394:	1884703a 	and	r2,r3,r2
 401b398:	1007883a 	mov	r3,r2
 401b39c:	e0bff917 	ldw	r2,-28(fp)
 401b3a0:	10c0020d 	sth	r3,8(r2)
             break;
 401b3a4:	00001106 	br	401b3ec <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 401b3a8:	e0bff917 	ldw	r2,-28(fp)
 401b3ac:	10c0020b 	ldhu	r3,8(r2)
 401b3b0:	e0bffa0b 	ldhu	r2,-24(fp)
 401b3b4:	1884b03a 	or	r2,r3,r2
 401b3b8:	1007883a 	mov	r3,r2
 401b3bc:	e0bff917 	ldw	r2,-28(fp)
 401b3c0:	10c0020d 	sth	r3,8(r2)
             break;
 401b3c4:	00000906 	br	401b3ec <OSFlagPost+0x130>
 401b3c8:	e0bff517 	ldw	r2,-44(fp)
 401b3cc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b3d0:	e0bff317 	ldw	r2,-52(fp)
 401b3d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 401b3d8:	e0fffc17 	ldw	r3,-16(fp)
 401b3dc:	00801c44 	movi	r2,113
 401b3e0:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 401b3e4:	e03fff15 	stw	zero,-4(fp)
 401b3e8:	00009806 	br	401b64c <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 401b3ec:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 401b3f0:	e0bff917 	ldw	r2,-28(fp)
 401b3f4:	10800117 	ldw	r2,4(r2)
 401b3f8:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 401b3fc:	00007506 	br	401b5d4 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 401b400:	e0bff817 	ldw	r2,-32(fp)
 401b404:	10800483 	ldbu	r2,18(r2)
 401b408:	10803fcc 	andi	r2,r2,255
 401b40c:	e0bffd15 	stw	r2,-12(fp)
 401b410:	e0fffd17 	ldw	r3,-12(fp)
 401b414:	18800060 	cmpeqi	r2,r3,1
 401b418:	10004d1e 	bne	r2,zero,401b550 <OSFlagPost+0x294>
 401b41c:	e0fffd17 	ldw	r3,-12(fp)
 401b420:	18800088 	cmpgei	r2,r3,2
 401b424:	1000041e 	bne	r2,zero,401b438 <OSFlagPost+0x17c>
 401b428:	e0fffd17 	ldw	r3,-12(fp)
 401b42c:	1805003a 	cmpeq	r2,r3,zero
 401b430:	1000301e 	bne	r2,zero,401b4f4 <OSFlagPost+0x238>
 401b434:	00005b06 	br	401b5a4 <OSFlagPost+0x2e8>
 401b438:	e0fffd17 	ldw	r3,-12(fp)
 401b43c:	188000a0 	cmpeqi	r2,r3,2
 401b440:	1000041e 	bne	r2,zero,401b454 <OSFlagPost+0x198>
 401b444:	e0fffd17 	ldw	r3,-12(fp)
 401b448:	188000e0 	cmpeqi	r2,r3,3
 401b44c:	1000161e 	bne	r2,zero,401b4a8 <OSFlagPost+0x1ec>
 401b450:	00005406 	br	401b5a4 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401b454:	e0bff917 	ldw	r2,-28(fp)
 401b458:	10c0020b 	ldhu	r3,8(r2)
 401b45c:	e0bff817 	ldw	r2,-32(fp)
 401b460:	1080040b 	ldhu	r2,16(r2)
 401b464:	1884703a 	and	r2,r3,r2
 401b468:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 401b46c:	e0bff817 	ldw	r2,-32(fp)
 401b470:	1080040b 	ldhu	r2,16(r2)
 401b474:	10ffffcc 	andi	r3,r2,65535
 401b478:	e0bff68b 	ldhu	r2,-38(fp)
 401b47c:	1880521e 	bne	r3,r2,401b5c8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 401b480:	e17ff68b 	ldhu	r5,-38(fp)
 401b484:	e13ff817 	ldw	r4,-32(fp)
 401b488:	401b9e00 	call	401b9e0 <OS_FlagTaskRdy>
 401b48c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 401b490:	e0bff603 	ldbu	r2,-40(fp)
 401b494:	10800058 	cmpnei	r2,r2,1
 401b498:	10004b1e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401b49c:	00800044 	movi	r2,1
 401b4a0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 401b4a4:	00004806 	br	401b5c8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401b4a8:	e0bff917 	ldw	r2,-28(fp)
 401b4ac:	10c0020b 	ldhu	r3,8(r2)
 401b4b0:	e0bff817 	ldw	r2,-32(fp)
 401b4b4:	1080040b 	ldhu	r2,16(r2)
 401b4b8:	1884703a 	and	r2,r3,r2
 401b4bc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 401b4c0:	e0bff68b 	ldhu	r2,-38(fp)
 401b4c4:	1005003a 	cmpeq	r2,r2,zero
 401b4c8:	10003f1e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 401b4cc:	e17ff68b 	ldhu	r5,-38(fp)
 401b4d0:	e13ff817 	ldw	r4,-32(fp)
 401b4d4:	401b9e00 	call	401b9e0 <OS_FlagTaskRdy>
 401b4d8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 401b4dc:	e0bff603 	ldbu	r2,-40(fp)
 401b4e0:	10800058 	cmpnei	r2,r2,1
 401b4e4:	1000381e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401b4e8:	00800044 	movi	r2,1
 401b4ec:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 401b4f0:	00003506 	br	401b5c8 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401b4f4:	e0bff917 	ldw	r2,-28(fp)
 401b4f8:	1080020b 	ldhu	r2,8(r2)
 401b4fc:	0084303a 	nor	r2,zero,r2
 401b500:	1007883a 	mov	r3,r2
 401b504:	e0bff817 	ldw	r2,-32(fp)
 401b508:	1080040b 	ldhu	r2,16(r2)
 401b50c:	1884703a 	and	r2,r3,r2
 401b510:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 401b514:	e0bff817 	ldw	r2,-32(fp)
 401b518:	1080040b 	ldhu	r2,16(r2)
 401b51c:	10ffffcc 	andi	r3,r2,65535
 401b520:	e0bff68b 	ldhu	r2,-38(fp)
 401b524:	1880281e 	bne	r3,r2,401b5c8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 401b528:	e17ff68b 	ldhu	r5,-38(fp)
 401b52c:	e13ff817 	ldw	r4,-32(fp)
 401b530:	401b9e00 	call	401b9e0 <OS_FlagTaskRdy>
 401b534:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 401b538:	e0bff603 	ldbu	r2,-40(fp)
 401b53c:	10800058 	cmpnei	r2,r2,1
 401b540:	1000211e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401b544:	00800044 	movi	r2,1
 401b548:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 401b54c:	00001e06 	br	401b5c8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401b550:	e0bff917 	ldw	r2,-28(fp)
 401b554:	1080020b 	ldhu	r2,8(r2)
 401b558:	0084303a 	nor	r2,zero,r2
 401b55c:	1007883a 	mov	r3,r2
 401b560:	e0bff817 	ldw	r2,-32(fp)
 401b564:	1080040b 	ldhu	r2,16(r2)
 401b568:	1884703a 	and	r2,r3,r2
 401b56c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 401b570:	e0bff68b 	ldhu	r2,-38(fp)
 401b574:	1005003a 	cmpeq	r2,r2,zero
 401b578:	1000131e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 401b57c:	e17ff68b 	ldhu	r5,-38(fp)
 401b580:	e13ff817 	ldw	r4,-32(fp)
 401b584:	401b9e00 	call	401b9e0 <OS_FlagTaskRdy>
 401b588:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 401b58c:	e0bff603 	ldbu	r2,-40(fp)
 401b590:	10800058 	cmpnei	r2,r2,1
 401b594:	10000c1e 	bne	r2,zero,401b5c8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401b598:	00800044 	movi	r2,1
 401b59c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 401b5a0:	00000906 	br	401b5c8 <OSFlagPost+0x30c>
 401b5a4:	e0bff517 	ldw	r2,-44(fp)
 401b5a8:	e0bff215 	stw	r2,-56(fp)
 401b5ac:	e0bff217 	ldw	r2,-56(fp)
 401b5b0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 401b5b4:	e0fffc17 	ldw	r3,-16(fp)
 401b5b8:	00801bc4 	movi	r2,111
 401b5bc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 401b5c0:	e03fff15 	stw	zero,-4(fp)
 401b5c4:	00002106 	br	401b64c <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 401b5c8:	e0bff817 	ldw	r2,-32(fp)
 401b5cc:	10800017 	ldw	r2,0(r2)
 401b5d0:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 401b5d4:	e0bff817 	ldw	r2,-32(fp)
 401b5d8:	1004c03a 	cmpne	r2,r2,zero
 401b5dc:	103f881e 	bne	r2,zero,401b400 <OSFlagPost+0x144>
 401b5e0:	e0bff517 	ldw	r2,-44(fp)
 401b5e4:	e0bff115 	stw	r2,-60(fp)
 401b5e8:	e0bff117 	ldw	r2,-60(fp)
 401b5ec:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 401b5f0:	e0bff783 	ldbu	r2,-34(fp)
 401b5f4:	10800058 	cmpnei	r2,r2,1
 401b5f8:	1000011e 	bne	r2,zero,401b600 <OSFlagPost+0x344>
        OS_Sched();
 401b5fc:	40199ec0 	call	40199ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b600:	0005303a 	rdctl	r2,status
 401b604:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b608:	e0fff017 	ldw	r3,-64(fp)
 401b60c:	00bfff84 	movi	r2,-2
 401b610:	1884703a 	and	r2,r3,r2
 401b614:	1001703a 	wrctl	status,r2
  
  return context;
 401b618:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 401b61c:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 401b620:	e0bff917 	ldw	r2,-28(fp)
 401b624:	1080020b 	ldhu	r2,8(r2)
 401b628:	e0bff70d 	sth	r2,-36(fp)
 401b62c:	e0bff517 	ldw	r2,-44(fp)
 401b630:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b634:	e0bfef17 	ldw	r2,-68(fp)
 401b638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 401b63c:	e0bffc17 	ldw	r2,-16(fp)
 401b640:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 401b644:	e0bff70b 	ldhu	r2,-36(fp)
 401b648:	e0bfff15 	stw	r2,-4(fp)
 401b64c:	e0bfff17 	ldw	r2,-4(fp)
}
 401b650:	e037883a 	mov	sp,fp
 401b654:	dfc00117 	ldw	ra,4(sp)
 401b658:	df000017 	ldw	fp,0(sp)
 401b65c:	dec00204 	addi	sp,sp,8
 401b660:	f800283a 	ret

0401b664 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 401b664:	defff804 	addi	sp,sp,-32
 401b668:	df000715 	stw	fp,28(sp)
 401b66c:	df000704 	addi	fp,sp,28
 401b670:	e13ffd15 	stw	r4,-12(fp)
 401b674:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 401b678:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 401b67c:	e0bffe17 	ldw	r2,-8(fp)
 401b680:	1004c03a 	cmpne	r2,r2,zero
 401b684:	1000021e 	bne	r2,zero,401b690 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 401b688:	e03fff15 	stw	zero,-4(fp)
 401b68c:	00002506 	br	401b724 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 401b690:	e0bffd17 	ldw	r2,-12(fp)
 401b694:	1004c03a 	cmpne	r2,r2,zero
 401b698:	1000051e 	bne	r2,zero,401b6b0 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401b69c:	e0fffe17 	ldw	r3,-8(fp)
 401b6a0:	00801b84 	movi	r2,110
 401b6a4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401b6a8:	e03fff15 	stw	zero,-4(fp)
 401b6ac:	00001d06 	br	401b724 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 401b6b0:	e0bffd17 	ldw	r2,-12(fp)
 401b6b4:	10800003 	ldbu	r2,0(r2)
 401b6b8:	10803fcc 	andi	r2,r2,255
 401b6bc:	10800160 	cmpeqi	r2,r2,5
 401b6c0:	1000051e 	bne	r2,zero,401b6d8 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 401b6c4:	e0fffe17 	ldw	r3,-8(fp)
 401b6c8:	00800044 	movi	r2,1
 401b6cc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401b6d0:	e03fff15 	stw	zero,-4(fp)
 401b6d4:	00001306 	br	401b724 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b6d8:	0005303a 	rdctl	r2,status
 401b6dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b6e0:	e0fffa17 	ldw	r3,-24(fp)
 401b6e4:	00bfff84 	movi	r2,-2
 401b6e8:	1884703a 	and	r2,r3,r2
 401b6ec:	1001703a 	wrctl	status,r2
  
  return context;
 401b6f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401b6f4:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 401b6f8:	e0bffd17 	ldw	r2,-12(fp)
 401b6fc:	1080020b 	ldhu	r2,8(r2)
 401b700:	e0bffc0d 	sth	r2,-16(fp)
 401b704:	e0bffb17 	ldw	r2,-20(fp)
 401b708:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b70c:	e0bff917 	ldw	r2,-28(fp)
 401b710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401b714:	e0bffe17 	ldw	r2,-8(fp)
 401b718:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 401b71c:	e0bffc0b 	ldhu	r2,-16(fp)
 401b720:	e0bfff15 	stw	r2,-4(fp)
 401b724:	e0bfff17 	ldw	r2,-4(fp)
}
 401b728:	e037883a 	mov	sp,fp
 401b72c:	df000017 	ldw	fp,0(sp)
 401b730:	dec00104 	addi	sp,sp,4
 401b734:	f800283a 	ret

0401b738 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 401b738:	defff804 	addi	sp,sp,-32
 401b73c:	df000715 	stw	fp,28(sp)
 401b740:	df000704 	addi	fp,sp,28
 401b744:	e13ffb15 	stw	r4,-20(fp)
 401b748:	e17ffc15 	stw	r5,-16(fp)
 401b74c:	e0800117 	ldw	r2,4(fp)
 401b750:	e1bffd0d 	sth	r6,-12(fp)
 401b754:	e1fffe05 	stb	r7,-8(fp)
 401b758:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 401b75c:	008100b4 	movhi	r2,1026
 401b760:	109ab304 	addi	r2,r2,27340
 401b764:	10c00017 	ldw	r3,0(r2)
 401b768:	008100b4 	movhi	r2,1026
 401b76c:	109ab304 	addi	r2,r2,27340
 401b770:	10800017 	ldw	r2,0(r2)
 401b774:	10800c03 	ldbu	r2,48(r2)
 401b778:	10800814 	ori	r2,r2,32
 401b77c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 401b780:	008100b4 	movhi	r2,1026
 401b784:	109ab304 	addi	r2,r2,27340
 401b788:	10800017 	ldw	r2,0(r2)
 401b78c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 401b790:	008100b4 	movhi	r2,1026
 401b794:	109ab304 	addi	r2,r2,27340
 401b798:	10c00017 	ldw	r3,0(r2)
 401b79c:	e0bfff0b 	ldhu	r2,-4(fp)
 401b7a0:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 401b7a4:	008100b4 	movhi	r2,1026
 401b7a8:	109ab304 	addi	r2,r2,27340
 401b7ac:	10c00017 	ldw	r3,0(r2)
 401b7b0:	e0bffc17 	ldw	r2,-16(fp)
 401b7b4:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 401b7b8:	e0fffc17 	ldw	r3,-16(fp)
 401b7bc:	e0bffd0b 	ldhu	r2,-12(fp)
 401b7c0:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 401b7c4:	e0fffc17 	ldw	r3,-16(fp)
 401b7c8:	e0bffe03 	ldbu	r2,-8(fp)
 401b7cc:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 401b7d0:	008100b4 	movhi	r2,1026
 401b7d4:	109ab304 	addi	r2,r2,27340
 401b7d8:	10c00017 	ldw	r3,0(r2)
 401b7dc:	e0bffc17 	ldw	r2,-16(fp)
 401b7e0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 401b7e4:	e0bffb17 	ldw	r2,-20(fp)
 401b7e8:	10c00117 	ldw	r3,4(r2)
 401b7ec:	e0bffc17 	ldw	r2,-16(fp)
 401b7f0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 401b7f4:	e0bffc17 	ldw	r2,-16(fp)
 401b7f8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 401b7fc:	e0fffc17 	ldw	r3,-16(fp)
 401b800:	e0bffb17 	ldw	r2,-20(fp)
 401b804:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 401b808:	e0bffb17 	ldw	r2,-20(fp)
 401b80c:	10800117 	ldw	r2,4(r2)
 401b810:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 401b814:	e0bffa17 	ldw	r2,-24(fp)
 401b818:	1005003a 	cmpeq	r2,r2,zero
 401b81c:	1000031e 	bne	r2,zero,401b82c <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 401b820:	e0fffa17 	ldw	r3,-24(fp)
 401b824:	e0bffc17 	ldw	r2,-16(fp)
 401b828:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 401b82c:	e0fffb17 	ldw	r3,-20(fp)
 401b830:	e0bffc17 	ldw	r2,-16(fp)
 401b834:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 401b838:	008100b4 	movhi	r2,1026
 401b83c:	109ab304 	addi	r2,r2,27340
 401b840:	10800017 	ldw	r2,0(r2)
 401b844:	10800d03 	ldbu	r2,52(r2)
 401b848:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 401b84c:	e13ff903 	ldbu	r4,-28(fp)
 401b850:	e0fff903 	ldbu	r3,-28(fp)
 401b854:	008100b4 	movhi	r2,1026
 401b858:	109ab044 	addi	r2,r2,27329
 401b85c:	10c5883a 	add	r2,r2,r3
 401b860:	10800003 	ldbu	r2,0(r2)
 401b864:	1007883a 	mov	r3,r2
 401b868:	008100b4 	movhi	r2,1026
 401b86c:	109ab304 	addi	r2,r2,27340
 401b870:	10800017 	ldw	r2,0(r2)
 401b874:	10800d43 	ldbu	r2,53(r2)
 401b878:	0084303a 	nor	r2,zero,r2
 401b87c:	1884703a 	and	r2,r3,r2
 401b880:	1007883a 	mov	r3,r2
 401b884:	008100b4 	movhi	r2,1026
 401b888:	109ab044 	addi	r2,r2,27329
 401b88c:	1105883a 	add	r2,r2,r4
 401b890:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 401b894:	e0fff903 	ldbu	r3,-28(fp)
 401b898:	008100b4 	movhi	r2,1026
 401b89c:	109ab044 	addi	r2,r2,27329
 401b8a0:	10c5883a 	add	r2,r2,r3
 401b8a4:	10800003 	ldbu	r2,0(r2)
 401b8a8:	10803fcc 	andi	r2,r2,255
 401b8ac:	1004c03a 	cmpne	r2,r2,zero
 401b8b0:	10000e1e 	bne	r2,zero,401b8ec <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 401b8b4:	008100b4 	movhi	r2,1026
 401b8b8:	109ab304 	addi	r2,r2,27340
 401b8bc:	10800017 	ldw	r2,0(r2)
 401b8c0:	10800d83 	ldbu	r2,54(r2)
 401b8c4:	0084303a 	nor	r2,zero,r2
 401b8c8:	1007883a 	mov	r3,r2
 401b8cc:	008100b4 	movhi	r2,1026
 401b8d0:	109ab004 	addi	r2,r2,27328
 401b8d4:	10800003 	ldbu	r2,0(r2)
 401b8d8:	1884703a 	and	r2,r3,r2
 401b8dc:	1007883a 	mov	r3,r2
 401b8e0:	008100b4 	movhi	r2,1026
 401b8e4:	109ab004 	addi	r2,r2,27328
 401b8e8:	10c00005 	stb	r3,0(r2)
    }
}
 401b8ec:	e037883a 	mov	sp,fp
 401b8f0:	df000017 	ldw	fp,0(sp)
 401b8f4:	dec00104 	addi	sp,sp,4
 401b8f8:	f800283a 	ret

0401b8fc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 401b8fc:	defffb04 	addi	sp,sp,-20
 401b900:	dfc00415 	stw	ra,16(sp)
 401b904:	df000315 	stw	fp,12(sp)
 401b908:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 401b90c:	010100f4 	movhi	r4,1027
 401b910:	210aec04 	addi	r4,r4,11184
 401b914:	0140dc04 	movi	r5,880
 401b918:	401992c0 	call	401992c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 401b91c:	008100f4 	movhi	r2,1027
 401b920:	108aec04 	addi	r2,r2,11184
 401b924:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 401b928:	008100f4 	movhi	r2,1027
 401b92c:	108af704 	addi	r2,r2,11228
 401b930:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 401b934:	e03fff0d 	sth	zero,-4(fp)
 401b938:	00001306 	br	401b988 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401b93c:	e0bffe17 	ldw	r2,-8(fp)
 401b940:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 401b944:	e0fffe17 	ldw	r3,-8(fp)
 401b948:	e0bffd17 	ldw	r2,-12(fp)
 401b94c:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 401b950:	e0fffe17 	ldw	r3,-8(fp)
 401b954:	00800fc4 	movi	r2,63
 401b958:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 401b95c:	e0bffe17 	ldw	r2,-8(fp)
 401b960:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 401b964:	e0bffe17 	ldw	r2,-8(fp)
 401b968:	10800b04 	addi	r2,r2,44
 401b96c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 401b970:	e0bffd17 	ldw	r2,-12(fp)
 401b974:	10800b04 	addi	r2,r2,44
 401b978:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 401b97c:	e0bfff0b 	ldhu	r2,-4(fp)
 401b980:	10800044 	addi	r2,r2,1
 401b984:	e0bfff0d 	sth	r2,-4(fp)
 401b988:	e0bfff0b 	ldhu	r2,-4(fp)
 401b98c:	108004f0 	cmpltui	r2,r2,19
 401b990:	103fea1e 	bne	r2,zero,401b93c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401b994:	e0bffe17 	ldw	r2,-8(fp)
 401b998:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 401b99c:	e0bffe17 	ldw	r2,-8(fp)
 401b9a0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 401b9a4:	e0fffe17 	ldw	r3,-8(fp)
 401b9a8:	00800fc4 	movi	r2,63
 401b9ac:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 401b9b0:	e0bffe17 	ldw	r2,-8(fp)
 401b9b4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 401b9b8:	00c100b4 	movhi	r3,1026
 401b9bc:	18dab504 	addi	r3,r3,27348
 401b9c0:	008100f4 	movhi	r2,1027
 401b9c4:	108aec04 	addi	r2,r2,11184
 401b9c8:	18800015 	stw	r2,0(r3)
#endif
}
 401b9cc:	e037883a 	mov	sp,fp
 401b9d0:	dfc00117 	ldw	ra,4(sp)
 401b9d4:	df000017 	ldw	fp,0(sp)
 401b9d8:	dec00204 	addi	sp,sp,8
 401b9dc:	f800283a 	ret

0401b9e0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 401b9e0:	defffa04 	addi	sp,sp,-24
 401b9e4:	dfc00515 	stw	ra,20(sp)
 401b9e8:	df000415 	stw	fp,16(sp)
 401b9ec:	df000404 	addi	fp,sp,16
 401b9f0:	e13ffe15 	stw	r4,-8(fp)
 401b9f4:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 401b9f8:	e0bffe17 	ldw	r2,-8(fp)
 401b9fc:	10800217 	ldw	r2,8(r2)
 401ba00:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 401ba04:	e0bffd17 	ldw	r2,-12(fp)
 401ba08:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 401ba0c:	e0fffd17 	ldw	r3,-12(fp)
 401ba10:	e0bfff0b 	ldhu	r2,-4(fp)
 401ba14:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 401ba18:	e0bffd17 	ldw	r2,-12(fp)
 401ba1c:	10c00c03 	ldbu	r3,48(r2)
 401ba20:	00bff7c4 	movi	r2,-33
 401ba24:	1884703a 	and	r2,r3,r2
 401ba28:	1007883a 	mov	r3,r2
 401ba2c:	e0bffd17 	ldw	r2,-12(fp)
 401ba30:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 401ba34:	e0bffd17 	ldw	r2,-12(fp)
 401ba38:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 401ba3c:	e0bffd17 	ldw	r2,-12(fp)
 401ba40:	10800c03 	ldbu	r2,48(r2)
 401ba44:	10803fcc 	andi	r2,r2,255
 401ba48:	1004c03a 	cmpne	r2,r2,zero
 401ba4c:	10001f1e 	bne	r2,zero,401bacc <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 401ba50:	e0bffd17 	ldw	r2,-12(fp)
 401ba54:	10c00d83 	ldbu	r3,54(r2)
 401ba58:	008100b4 	movhi	r2,1026
 401ba5c:	109ab004 	addi	r2,r2,27328
 401ba60:	10800003 	ldbu	r2,0(r2)
 401ba64:	1884b03a 	or	r2,r3,r2
 401ba68:	1007883a 	mov	r3,r2
 401ba6c:	008100b4 	movhi	r2,1026
 401ba70:	109ab004 	addi	r2,r2,27328
 401ba74:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401ba78:	e0bffd17 	ldw	r2,-12(fp)
 401ba7c:	10800d03 	ldbu	r2,52(r2)
 401ba80:	11003fcc 	andi	r4,r2,255
 401ba84:	e0bffd17 	ldw	r2,-12(fp)
 401ba88:	10800d03 	ldbu	r2,52(r2)
 401ba8c:	10c03fcc 	andi	r3,r2,255
 401ba90:	008100b4 	movhi	r2,1026
 401ba94:	109ab044 	addi	r2,r2,27329
 401ba98:	10c5883a 	add	r2,r2,r3
 401ba9c:	10c00003 	ldbu	r3,0(r2)
 401baa0:	e0bffd17 	ldw	r2,-12(fp)
 401baa4:	10800d43 	ldbu	r2,53(r2)
 401baa8:	1884b03a 	or	r2,r3,r2
 401baac:	1007883a 	mov	r3,r2
 401bab0:	008100b4 	movhi	r2,1026
 401bab4:	109ab044 	addi	r2,r2,27329
 401bab8:	1105883a 	add	r2,r2,r4
 401babc:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 401bac0:	00800044 	movi	r2,1
 401bac4:	e0bffc05 	stb	r2,-16(fp)
 401bac8:	00000106 	br	401bad0 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 401bacc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 401bad0:	e13ffe17 	ldw	r4,-8(fp)
 401bad4:	401baf00 	call	401baf0 <OS_FlagUnlink>
    return (sched);
 401bad8:	e0bffc03 	ldbu	r2,-16(fp)
}
 401badc:	e037883a 	mov	sp,fp
 401bae0:	dfc00117 	ldw	ra,4(sp)
 401bae4:	df000017 	ldw	fp,0(sp)
 401bae8:	dec00204 	addi	sp,sp,8
 401baec:	f800283a 	ret

0401baf0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 401baf0:	defffa04 	addi	sp,sp,-24
 401baf4:	df000515 	stw	fp,20(sp)
 401baf8:	df000504 	addi	fp,sp,20
 401bafc:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 401bb00:	e0bfff17 	ldw	r2,-4(fp)
 401bb04:	10800117 	ldw	r2,4(r2)
 401bb08:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 401bb0c:	e0bfff17 	ldw	r2,-4(fp)
 401bb10:	10800017 	ldw	r2,0(r2)
 401bb14:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 401bb18:	e0bffc17 	ldw	r2,-16(fp)
 401bb1c:	1004c03a 	cmpne	r2,r2,zero
 401bb20:	10000c1e 	bne	r2,zero,401bb54 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 401bb24:	e0bfff17 	ldw	r2,-4(fp)
 401bb28:	10800317 	ldw	r2,12(r2)
 401bb2c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 401bb30:	e0fffd17 	ldw	r3,-12(fp)
 401bb34:	e0bffb17 	ldw	r2,-20(fp)
 401bb38:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 401bb3c:	e0bffb17 	ldw	r2,-20(fp)
 401bb40:	1005003a 	cmpeq	r2,r2,zero
 401bb44:	10000c1e 	bne	r2,zero,401bb78 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 401bb48:	e0bffb17 	ldw	r2,-20(fp)
 401bb4c:	10000115 	stw	zero,4(r2)
 401bb50:	00000906 	br	401bb78 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 401bb54:	e0fffc17 	ldw	r3,-16(fp)
 401bb58:	e0bffb17 	ldw	r2,-20(fp)
 401bb5c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 401bb60:	e0bffb17 	ldw	r2,-20(fp)
 401bb64:	1005003a 	cmpeq	r2,r2,zero
 401bb68:	1000031e 	bne	r2,zero,401bb78 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 401bb6c:	e0fffb17 	ldw	r3,-20(fp)
 401bb70:	e0bffc17 	ldw	r2,-16(fp)
 401bb74:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 401bb78:	e0bfff17 	ldw	r2,-4(fp)
 401bb7c:	10800217 	ldw	r2,8(r2)
 401bb80:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 401bb84:	e0bffe17 	ldw	r2,-8(fp)
 401bb88:	10000a15 	stw	zero,40(r2)
#endif
}
 401bb8c:	e037883a 	mov	sp,fp
 401bb90:	df000017 	ldw	fp,0(sp)
 401bb94:	dec00104 	addi	sp,sp,4
 401bb98:	f800283a 	ret

0401bb9c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 401bb9c:	defff304 	addi	sp,sp,-52
 401bba0:	df000c15 	stw	fp,48(sp)
 401bba4:	df000c04 	addi	fp,sp,48
 401bba8:	e13ffb15 	stw	r4,-20(fp)
 401bbac:	e17ffc15 	stw	r5,-16(fp)
 401bbb0:	e1bffd15 	stw	r6,-12(fp)
 401bbb4:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401bbb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401bbbc:	e0bffe17 	ldw	r2,-8(fp)
 401bbc0:	1004c03a 	cmpne	r2,r2,zero
 401bbc4:	1000021e 	bne	r2,zero,401bbd0 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 401bbc8:	e03fff15 	stw	zero,-4(fp)
 401bbcc:	00007506 	br	401bda4 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 401bbd0:	e0bffb17 	ldw	r2,-20(fp)
 401bbd4:	1004c03a 	cmpne	r2,r2,zero
 401bbd8:	1000051e 	bne	r2,zero,401bbf0 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 401bbdc:	e0fffe17 	ldw	r3,-8(fp)
 401bbe0:	00801884 	movi	r2,98
 401bbe4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401bbe8:	e03fff15 	stw	zero,-4(fp)
 401bbec:	00006d06 	br	401bda4 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 401bbf0:	e0bffb17 	ldw	r2,-20(fp)
 401bbf4:	108000cc 	andi	r2,r2,3
 401bbf8:	1005003a 	cmpeq	r2,r2,zero
 401bbfc:	1000051e 	bne	r2,zero,401bc14 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 401bc00:	e0fffe17 	ldw	r3,-8(fp)
 401bc04:	00801884 	movi	r2,98
 401bc08:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401bc0c:	e03fff15 	stw	zero,-4(fp)
 401bc10:	00006406 	br	401bda4 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 401bc14:	e0bffc17 	ldw	r2,-16(fp)
 401bc18:	108000a8 	cmpgeui	r2,r2,2
 401bc1c:	1000051e 	bne	r2,zero,401bc34 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 401bc20:	e0fffe17 	ldw	r3,-8(fp)
 401bc24:	008016c4 	movi	r2,91
 401bc28:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401bc2c:	e03fff15 	stw	zero,-4(fp)
 401bc30:	00005c06 	br	401bda4 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 401bc34:	e0bffd17 	ldw	r2,-12(fp)
 401bc38:	10800128 	cmpgeui	r2,r2,4
 401bc3c:	1000051e 	bne	r2,zero,401bc54 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 401bc40:	e0fffe17 	ldw	r3,-8(fp)
 401bc44:	00801704 	movi	r2,92
 401bc48:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401bc4c:	e03fff15 	stw	zero,-4(fp)
 401bc50:	00005406 	br	401bda4 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bc54:	0005303a 	rdctl	r2,status
 401bc58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bc5c:	e0fff517 	ldw	r3,-44(fp)
 401bc60:	00bfff84 	movi	r2,-2
 401bc64:	1884703a 	and	r2,r3,r2
 401bc68:	1001703a 	wrctl	status,r2
  
  return context;
 401bc6c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401bc70:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 401bc74:	008100b4 	movhi	r2,1026
 401bc78:	109aad04 	addi	r2,r2,27316
 401bc7c:	10800017 	ldw	r2,0(r2)
 401bc80:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 401bc84:	008100b4 	movhi	r2,1026
 401bc88:	109aad04 	addi	r2,r2,27316
 401bc8c:	10800017 	ldw	r2,0(r2)
 401bc90:	1005003a 	cmpeq	r2,r2,zero
 401bc94:	1000081e 	bne	r2,zero,401bcb8 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 401bc98:	008100b4 	movhi	r2,1026
 401bc9c:	109aad04 	addi	r2,r2,27316
 401bca0:	10800017 	ldw	r2,0(r2)
 401bca4:	10800117 	ldw	r2,4(r2)
 401bca8:	1007883a 	mov	r3,r2
 401bcac:	008100b4 	movhi	r2,1026
 401bcb0:	109aad04 	addi	r2,r2,27316
 401bcb4:	10c00015 	stw	r3,0(r2)
 401bcb8:	e0bff617 	ldw	r2,-40(fp)
 401bcbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bcc0:	e0bff417 	ldw	r2,-48(fp)
 401bcc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 401bcc8:	e0bffa17 	ldw	r2,-24(fp)
 401bccc:	1004c03a 	cmpne	r2,r2,zero
 401bcd0:	1000051e 	bne	r2,zero,401bce8 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 401bcd4:	e0fffe17 	ldw	r3,-8(fp)
 401bcd8:	00801684 	movi	r2,90
 401bcdc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401bce0:	e03fff15 	stw	zero,-4(fp)
 401bce4:	00002f06 	br	401bda4 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 401bce8:	e0bffb17 	ldw	r2,-20(fp)
 401bcec:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 401bcf0:	e0bffb17 	ldw	r2,-20(fp)
 401bcf4:	1007883a 	mov	r3,r2
 401bcf8:	e0bffd17 	ldw	r2,-12(fp)
 401bcfc:	1885883a 	add	r2,r3,r2
 401bd00:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 401bd04:	e03ff715 	stw	zero,-36(fp)
 401bd08:	00000d06 	br	401bd40 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 401bd0c:	e0fff817 	ldw	r3,-32(fp)
 401bd10:	e0bff917 	ldw	r2,-28(fp)
 401bd14:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 401bd18:	e0bff917 	ldw	r2,-28(fp)
 401bd1c:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 401bd20:	e0bff917 	ldw	r2,-28(fp)
 401bd24:	1007883a 	mov	r3,r2
 401bd28:	e0bffd17 	ldw	r2,-12(fp)
 401bd2c:	1885883a 	add	r2,r3,r2
 401bd30:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 401bd34:	e0bff717 	ldw	r2,-36(fp)
 401bd38:	10800044 	addi	r2,r2,1
 401bd3c:	e0bff715 	stw	r2,-36(fp)
 401bd40:	e0bffc17 	ldw	r2,-16(fp)
 401bd44:	10ffffc4 	addi	r3,r2,-1
 401bd48:	e0bff717 	ldw	r2,-36(fp)
 401bd4c:	10ffef36 	bltu	r2,r3,401bd0c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 401bd50:	e0bff817 	ldw	r2,-32(fp)
 401bd54:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 401bd58:	e0fffa17 	ldw	r3,-24(fp)
 401bd5c:	e0bffb17 	ldw	r2,-20(fp)
 401bd60:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 401bd64:	e0fffa17 	ldw	r3,-24(fp)
 401bd68:	e0bffb17 	ldw	r2,-20(fp)
 401bd6c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 401bd70:	e0fffa17 	ldw	r3,-24(fp)
 401bd74:	e0bffc17 	ldw	r2,-16(fp)
 401bd78:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 401bd7c:	e0fffa17 	ldw	r3,-24(fp)
 401bd80:	e0bffc17 	ldw	r2,-16(fp)
 401bd84:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 401bd88:	e0fffa17 	ldw	r3,-24(fp)
 401bd8c:	e0bffd17 	ldw	r2,-12(fp)
 401bd90:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 401bd94:	e0bffe17 	ldw	r2,-8(fp)
 401bd98:	10000005 	stb	zero,0(r2)
    return (pmem);
 401bd9c:	e0bffa17 	ldw	r2,-24(fp)
 401bda0:	e0bfff15 	stw	r2,-4(fp)
 401bda4:	e0bfff17 	ldw	r2,-4(fp)
}
 401bda8:	e037883a 	mov	sp,fp
 401bdac:	df000017 	ldw	fp,0(sp)
 401bdb0:	dec00104 	addi	sp,sp,4
 401bdb4:	f800283a 	ret

0401bdb8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 401bdb8:	defff704 	addi	sp,sp,-36
 401bdbc:	df000815 	stw	fp,32(sp)
 401bdc0:	df000804 	addi	fp,sp,32
 401bdc4:	e13ffd15 	stw	r4,-12(fp)
 401bdc8:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401bdcc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401bdd0:	e0bffe17 	ldw	r2,-8(fp)
 401bdd4:	1004c03a 	cmpne	r2,r2,zero
 401bdd8:	1000021e 	bne	r2,zero,401bde4 <OSMemGet+0x2c>
        return ((void *)0);
 401bddc:	e03fff15 	stw	zero,-4(fp)
 401bde0:	00003106 	br	401bea8 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 401bde4:	e0bffd17 	ldw	r2,-12(fp)
 401bde8:	1004c03a 	cmpne	r2,r2,zero
 401bdec:	1000051e 	bne	r2,zero,401be04 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 401bdf0:	e0fffe17 	ldw	r3,-8(fp)
 401bdf4:	00801804 	movi	r2,96
 401bdf8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401bdfc:	e03fff15 	stw	zero,-4(fp)
 401be00:	00002906 	br	401bea8 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401be04:	0005303a 	rdctl	r2,status
 401be08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401be0c:	e0fffa17 	ldw	r3,-24(fp)
 401be10:	00bfff84 	movi	r2,-2
 401be14:	1884703a 	and	r2,r3,r2
 401be18:	1001703a 	wrctl	status,r2
  
  return context;
 401be1c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401be20:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 401be24:	e0bffd17 	ldw	r2,-12(fp)
 401be28:	10800417 	ldw	r2,16(r2)
 401be2c:	1005003a 	cmpeq	r2,r2,zero
 401be30:	1000151e 	bne	r2,zero,401be88 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 401be34:	e0bffd17 	ldw	r2,-12(fp)
 401be38:	10800117 	ldw	r2,4(r2)
 401be3c:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 401be40:	e0bffc17 	ldw	r2,-16(fp)
 401be44:	10c00017 	ldw	r3,0(r2)
 401be48:	e0bffd17 	ldw	r2,-12(fp)
 401be4c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 401be50:	e0bffd17 	ldw	r2,-12(fp)
 401be54:	10800417 	ldw	r2,16(r2)
 401be58:	10ffffc4 	addi	r3,r2,-1
 401be5c:	e0bffd17 	ldw	r2,-12(fp)
 401be60:	10c00415 	stw	r3,16(r2)
 401be64:	e0bffb17 	ldw	r2,-20(fp)
 401be68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401be6c:	e0bff917 	ldw	r2,-28(fp)
 401be70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 401be74:	e0bffe17 	ldw	r2,-8(fp)
 401be78:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 401be7c:	e0bffc17 	ldw	r2,-16(fp)
 401be80:	e0bfff15 	stw	r2,-4(fp)
 401be84:	00000806 	br	401bea8 <OSMemGet+0xf0>
 401be88:	e0bffb17 	ldw	r2,-20(fp)
 401be8c:	e0bff815 	stw	r2,-32(fp)
 401be90:	e0bff817 	ldw	r2,-32(fp)
 401be94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 401be98:	e0fffe17 	ldw	r3,-8(fp)
 401be9c:	00801744 	movi	r2,93
 401bea0:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 401bea4:	e03fff15 	stw	zero,-4(fp)
 401bea8:	e0bfff17 	ldw	r2,-4(fp)
}
 401beac:	e037883a 	mov	sp,fp
 401beb0:	df000017 	ldw	fp,0(sp)
 401beb4:	dec00104 	addi	sp,sp,4
 401beb8:	f800283a 	ret

0401bebc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 401bebc:	defff604 	addi	sp,sp,-40
 401bec0:	dfc00915 	stw	ra,36(sp)
 401bec4:	df000815 	stw	fp,32(sp)
 401bec8:	df000804 	addi	fp,sp,32
 401becc:	e13ffc15 	stw	r4,-16(fp)
 401bed0:	e17ffd15 	stw	r5,-12(fp)
 401bed4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401bed8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401bedc:	e0bffe17 	ldw	r2,-8(fp)
 401bee0:	1004c03a 	cmpne	r2,r2,zero
 401bee4:	1000021e 	bne	r2,zero,401bef0 <OSMemNameGet+0x34>
        return (0);
 401bee8:	e03fff15 	stw	zero,-4(fp)
 401beec:	00003006 	br	401bfb0 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 401bef0:	e0bffc17 	ldw	r2,-16(fp)
 401bef4:	1004c03a 	cmpne	r2,r2,zero
 401bef8:	1000051e 	bne	r2,zero,401bf10 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 401befc:	e0fffe17 	ldw	r3,-8(fp)
 401bf00:	00801804 	movi	r2,96
 401bf04:	18800005 	stb	r2,0(r3)
        return (0);
 401bf08:	e03fff15 	stw	zero,-4(fp)
 401bf0c:	00002806 	br	401bfb0 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 401bf10:	e0bffd17 	ldw	r2,-12(fp)
 401bf14:	1004c03a 	cmpne	r2,r2,zero
 401bf18:	1000051e 	bne	r2,zero,401bf30 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 401bf1c:	e0fffe17 	ldw	r3,-8(fp)
 401bf20:	00800304 	movi	r2,12
 401bf24:	18800005 	stb	r2,0(r3)
        return (0);
 401bf28:	e03fff15 	stw	zero,-4(fp)
 401bf2c:	00002006 	br	401bfb0 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401bf30:	008100b4 	movhi	r2,1026
 401bf34:	109ab204 	addi	r2,r2,27336
 401bf38:	10800003 	ldbu	r2,0(r2)
 401bf3c:	10803fcc 	andi	r2,r2,255
 401bf40:	1005003a 	cmpeq	r2,r2,zero
 401bf44:	1000051e 	bne	r2,zero,401bf5c <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 401bf48:	e0fffe17 	ldw	r3,-8(fp)
 401bf4c:	00800444 	movi	r2,17
 401bf50:	18800005 	stb	r2,0(r3)
        return (0);
 401bf54:	e03fff15 	stw	zero,-4(fp)
 401bf58:	00001506 	br	401bfb0 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bf5c:	0005303a 	rdctl	r2,status
 401bf60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bf64:	e0fff917 	ldw	r3,-28(fp)
 401bf68:	00bfff84 	movi	r2,-2
 401bf6c:	1884703a 	and	r2,r3,r2
 401bf70:	1001703a 	wrctl	status,r2
  
  return context;
 401bf74:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401bf78:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 401bf7c:	e0bffc17 	ldw	r2,-16(fp)
 401bf80:	11400504 	addi	r5,r2,20
 401bf84:	e13ffd17 	ldw	r4,-12(fp)
 401bf88:	4019b300 	call	4019b30 <OS_StrCopy>
 401bf8c:	e0bffb05 	stb	r2,-20(fp)
 401bf90:	e0bffa17 	ldw	r2,-24(fp)
 401bf94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bf98:	e0bff817 	ldw	r2,-32(fp)
 401bf9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401bfa0:	e0bffe17 	ldw	r2,-8(fp)
 401bfa4:	10000005 	stb	zero,0(r2)
    return (len);
 401bfa8:	e0bffb03 	ldbu	r2,-20(fp)
 401bfac:	e0bfff15 	stw	r2,-4(fp)
 401bfb0:	e0bfff17 	ldw	r2,-4(fp)
}
 401bfb4:	e037883a 	mov	sp,fp
 401bfb8:	dfc00117 	ldw	ra,4(sp)
 401bfbc:	df000017 	ldw	fp,0(sp)
 401bfc0:	dec00204 	addi	sp,sp,8
 401bfc4:	f800283a 	ret

0401bfc8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 401bfc8:	defff604 	addi	sp,sp,-40
 401bfcc:	dfc00915 	stw	ra,36(sp)
 401bfd0:	df000815 	stw	fp,32(sp)
 401bfd4:	df000804 	addi	fp,sp,32
 401bfd8:	e13ffd15 	stw	r4,-12(fp)
 401bfdc:	e17ffe15 	stw	r5,-8(fp)
 401bfe0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401bfe4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401bfe8:	e0bfff17 	ldw	r2,-4(fp)
 401bfec:	1005003a 	cmpeq	r2,r2,zero
 401bff0:	1000381e 	bne	r2,zero,401c0d4 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 401bff4:	e0bffd17 	ldw	r2,-12(fp)
 401bff8:	1004c03a 	cmpne	r2,r2,zero
 401bffc:	1000041e 	bne	r2,zero,401c010 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 401c000:	e0ffff17 	ldw	r3,-4(fp)
 401c004:	00801804 	movi	r2,96
 401c008:	18800005 	stb	r2,0(r3)
        return;
 401c00c:	00003106 	br	401c0d4 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 401c010:	e0bffe17 	ldw	r2,-8(fp)
 401c014:	1004c03a 	cmpne	r2,r2,zero
 401c018:	1000041e 	bne	r2,zero,401c02c <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 401c01c:	e0ffff17 	ldw	r3,-4(fp)
 401c020:	00800304 	movi	r2,12
 401c024:	18800005 	stb	r2,0(r3)
        return;
 401c028:	00002a06 	br	401c0d4 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401c02c:	008100b4 	movhi	r2,1026
 401c030:	109ab204 	addi	r2,r2,27336
 401c034:	10800003 	ldbu	r2,0(r2)
 401c038:	10803fcc 	andi	r2,r2,255
 401c03c:	1005003a 	cmpeq	r2,r2,zero
 401c040:	1000041e 	bne	r2,zero,401c054 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 401c044:	e0ffff17 	ldw	r3,-4(fp)
 401c048:	00800484 	movi	r2,18
 401c04c:	18800005 	stb	r2,0(r3)
        return;
 401c050:	00002006 	br	401c0d4 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c054:	0005303a 	rdctl	r2,status
 401c058:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c05c:	e0fffa17 	ldw	r3,-24(fp)
 401c060:	00bfff84 	movi	r2,-2
 401c064:	1884703a 	and	r2,r3,r2
 401c068:	1001703a 	wrctl	status,r2
  
  return context;
 401c06c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401c070:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 401c074:	e13ffe17 	ldw	r4,-8(fp)
 401c078:	4019bb00 	call	4019bb0 <OS_StrLen>
 401c07c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 401c080:	e0bffc03 	ldbu	r2,-16(fp)
 401c084:	10800830 	cmpltui	r2,r2,32
 401c088:	1000081e 	bne	r2,zero,401c0ac <OSMemNameSet+0xe4>
 401c08c:	e0bffb17 	ldw	r2,-20(fp)
 401c090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c094:	e0bff917 	ldw	r2,-28(fp)
 401c098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 401c09c:	e0ffff17 	ldw	r3,-4(fp)
 401c0a0:	008018c4 	movi	r2,99
 401c0a4:	18800005 	stb	r2,0(r3)
        return;
 401c0a8:	00000a06 	br	401c0d4 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 401c0ac:	e0bffd17 	ldw	r2,-12(fp)
 401c0b0:	11000504 	addi	r4,r2,20
 401c0b4:	e17ffe17 	ldw	r5,-8(fp)
 401c0b8:	4019b300 	call	4019b30 <OS_StrCopy>
 401c0bc:	e0bffb17 	ldw	r2,-20(fp)
 401c0c0:	e0bff815 	stw	r2,-32(fp)
 401c0c4:	e0bff817 	ldw	r2,-32(fp)
 401c0c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401c0cc:	e0bfff17 	ldw	r2,-4(fp)
 401c0d0:	10000005 	stb	zero,0(r2)
}
 401c0d4:	e037883a 	mov	sp,fp
 401c0d8:	dfc00117 	ldw	ra,4(sp)
 401c0dc:	df000017 	ldw	fp,0(sp)
 401c0e0:	dec00204 	addi	sp,sp,8
 401c0e4:	f800283a 	ret

0401c0e8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 401c0e8:	defff804 	addi	sp,sp,-32
 401c0ec:	df000715 	stw	fp,28(sp)
 401c0f0:	df000704 	addi	fp,sp,28
 401c0f4:	e13ffd15 	stw	r4,-12(fp)
 401c0f8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401c0fc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 401c100:	e0bffd17 	ldw	r2,-12(fp)
 401c104:	1004c03a 	cmpne	r2,r2,zero
 401c108:	1000031e 	bne	r2,zero,401c118 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 401c10c:	00801804 	movi	r2,96
 401c110:	e0bfff15 	stw	r2,-4(fp)
 401c114:	00002b06 	br	401c1c4 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 401c118:	e0bffe17 	ldw	r2,-8(fp)
 401c11c:	1004c03a 	cmpne	r2,r2,zero
 401c120:	1000031e 	bne	r2,zero,401c130 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 401c124:	008017c4 	movi	r2,95
 401c128:	e0bfff15 	stw	r2,-4(fp)
 401c12c:	00002506 	br	401c1c4 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c130:	0005303a 	rdctl	r2,status
 401c134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c138:	e0fffb17 	ldw	r3,-20(fp)
 401c13c:	00bfff84 	movi	r2,-2
 401c140:	1884703a 	and	r2,r3,r2
 401c144:	1001703a 	wrctl	status,r2
  
  return context;
 401c148:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401c14c:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 401c150:	e0bffd17 	ldw	r2,-12(fp)
 401c154:	10c00417 	ldw	r3,16(r2)
 401c158:	e0bffd17 	ldw	r2,-12(fp)
 401c15c:	10800317 	ldw	r2,12(r2)
 401c160:	18800736 	bltu	r3,r2,401c180 <OSMemPut+0x98>
 401c164:	e0bffc17 	ldw	r2,-16(fp)
 401c168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c16c:	e0bffa17 	ldw	r2,-24(fp)
 401c170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 401c174:	00801784 	movi	r2,94
 401c178:	e0bfff15 	stw	r2,-4(fp)
 401c17c:	00001106 	br	401c1c4 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 401c180:	e0fffe17 	ldw	r3,-8(fp)
 401c184:	e0bffd17 	ldw	r2,-12(fp)
 401c188:	10800117 	ldw	r2,4(r2)
 401c18c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 401c190:	e0fffd17 	ldw	r3,-12(fp)
 401c194:	e0bffe17 	ldw	r2,-8(fp)
 401c198:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 401c19c:	e0bffd17 	ldw	r2,-12(fp)
 401c1a0:	10800417 	ldw	r2,16(r2)
 401c1a4:	10c00044 	addi	r3,r2,1
 401c1a8:	e0bffd17 	ldw	r2,-12(fp)
 401c1ac:	10c00415 	stw	r3,16(r2)
 401c1b0:	e0bffc17 	ldw	r2,-16(fp)
 401c1b4:	e0bff915 	stw	r2,-28(fp)
 401c1b8:	e0bff917 	ldw	r2,-28(fp)
 401c1bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 401c1c0:	e03fff15 	stw	zero,-4(fp)
 401c1c4:	e0bfff17 	ldw	r2,-4(fp)
}
 401c1c8:	e037883a 	mov	sp,fp
 401c1cc:	df000017 	ldw	fp,0(sp)
 401c1d0:	dec00104 	addi	sp,sp,4
 401c1d4:	f800283a 	ret

0401c1d8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 401c1d8:	defff904 	addi	sp,sp,-28
 401c1dc:	df000615 	stw	fp,24(sp)
 401c1e0:	df000604 	addi	fp,sp,24
 401c1e4:	e13ffd15 	stw	r4,-12(fp)
 401c1e8:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401c1ec:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 401c1f0:	e0bffd17 	ldw	r2,-12(fp)
 401c1f4:	1004c03a 	cmpne	r2,r2,zero
 401c1f8:	1000031e 	bne	r2,zero,401c208 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 401c1fc:	00801804 	movi	r2,96
 401c200:	e0bfff15 	stw	r2,-4(fp)
 401c204:	00002e06 	br	401c2c0 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 401c208:	e0bffe17 	ldw	r2,-8(fp)
 401c20c:	1004c03a 	cmpne	r2,r2,zero
 401c210:	1000031e 	bne	r2,zero,401c220 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 401c214:	00801844 	movi	r2,97
 401c218:	e0bfff15 	stw	r2,-4(fp)
 401c21c:	00002806 	br	401c2c0 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c220:	0005303a 	rdctl	r2,status
 401c224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c228:	e0fffb17 	ldw	r3,-20(fp)
 401c22c:	00bfff84 	movi	r2,-2
 401c230:	1884703a 	and	r2,r3,r2
 401c234:	1001703a 	wrctl	status,r2
  
  return context;
 401c238:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401c23c:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 401c240:	e0bffd17 	ldw	r2,-12(fp)
 401c244:	10c00017 	ldw	r3,0(r2)
 401c248:	e0bffe17 	ldw	r2,-8(fp)
 401c24c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 401c250:	e0bffd17 	ldw	r2,-12(fp)
 401c254:	10c00117 	ldw	r3,4(r2)
 401c258:	e0bffe17 	ldw	r2,-8(fp)
 401c25c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 401c260:	e0bffd17 	ldw	r2,-12(fp)
 401c264:	10c00217 	ldw	r3,8(r2)
 401c268:	e0bffe17 	ldw	r2,-8(fp)
 401c26c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 401c270:	e0bffd17 	ldw	r2,-12(fp)
 401c274:	10c00317 	ldw	r3,12(r2)
 401c278:	e0bffe17 	ldw	r2,-8(fp)
 401c27c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 401c280:	e0bffd17 	ldw	r2,-12(fp)
 401c284:	10c00417 	ldw	r3,16(r2)
 401c288:	e0bffe17 	ldw	r2,-8(fp)
 401c28c:	10c00415 	stw	r3,16(r2)
 401c290:	e0bffc17 	ldw	r2,-16(fp)
 401c294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c298:	e0bffa17 	ldw	r2,-24(fp)
 401c29c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 401c2a0:	e0bffe17 	ldw	r2,-8(fp)
 401c2a4:	10c00317 	ldw	r3,12(r2)
 401c2a8:	e0bffe17 	ldw	r2,-8(fp)
 401c2ac:	10800417 	ldw	r2,16(r2)
 401c2b0:	1887c83a 	sub	r3,r3,r2
 401c2b4:	e0bffe17 	ldw	r2,-8(fp)
 401c2b8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 401c2bc:	e03fff15 	stw	zero,-4(fp)
 401c2c0:	e0bfff17 	ldw	r2,-4(fp)
}
 401c2c4:	e037883a 	mov	sp,fp
 401c2c8:	df000017 	ldw	fp,0(sp)
 401c2cc:	dec00104 	addi	sp,sp,4
 401c2d0:	f800283a 	ret

0401c2d4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 401c2d4:	defffc04 	addi	sp,sp,-16
 401c2d8:	dfc00315 	stw	ra,12(sp)
 401c2dc:	df000215 	stw	fp,8(sp)
 401c2e0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 401c2e4:	010100f4 	movhi	r4,1027
 401c2e8:	210bc804 	addi	r4,r4,12064
 401c2ec:	01430c04 	movi	r5,3120
 401c2f0:	401992c0 	call	401992c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 401c2f4:	008100f4 	movhi	r2,1027
 401c2f8:	108bc804 	addi	r2,r2,12064
 401c2fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 401c300:	e03ffe0d 	sth	zero,-8(fp)
 401c304:	00001406 	br	401c358 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 401c308:	e13ffe0b 	ldhu	r4,-8(fp)
 401c30c:	01400d04 	movi	r5,52
 401c310:	4008ff80 	call	4008ff8 <__mulsi3>
 401c314:	1007883a 	mov	r3,r2
 401c318:	008100f4 	movhi	r2,1027
 401c31c:	108bd504 	addi	r2,r2,12116
 401c320:	1887883a 	add	r3,r3,r2
 401c324:	e0bfff17 	ldw	r2,-4(fp)
 401c328:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 401c32c:	e0ffff17 	ldw	r3,-4(fp)
 401c330:	00800fc4 	movi	r2,63
 401c334:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 401c338:	e0bfff17 	ldw	r2,-4(fp)
 401c33c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 401c340:	e0bfff17 	ldw	r2,-4(fp)
 401c344:	10800d04 	addi	r2,r2,52
 401c348:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 401c34c:	e0bffe0b 	ldhu	r2,-8(fp)
 401c350:	10800044 	addi	r2,r2,1
 401c354:	e0bffe0d 	sth	r2,-8(fp)
 401c358:	e0bffe0b 	ldhu	r2,-8(fp)
 401c35c:	10800ef0 	cmpltui	r2,r2,59
 401c360:	103fe91e 	bne	r2,zero,401c308 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 401c364:	e0bfff17 	ldw	r2,-4(fp)
 401c368:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 401c36c:	e0ffff17 	ldw	r3,-4(fp)
 401c370:	00800fc4 	movi	r2,63
 401c374:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 401c378:	e0bfff17 	ldw	r2,-4(fp)
 401c37c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 401c380:	00c100b4 	movhi	r3,1026
 401c384:	18daad04 	addi	r3,r3,27316
 401c388:	008100f4 	movhi	r2,1027
 401c38c:	108bc804 	addi	r2,r2,12064
 401c390:	18800015 	stw	r2,0(r3)
#endif
}
 401c394:	e037883a 	mov	sp,fp
 401c398:	dfc00117 	ldw	ra,4(sp)
 401c39c:	df000017 	ldw	fp,0(sp)
 401c3a0:	dec00204 	addi	sp,sp,8
 401c3a4:	f800283a 	ret

0401c3a8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 401c3a8:	defff704 	addi	sp,sp,-36
 401c3ac:	df000815 	stw	fp,32(sp)
 401c3b0:	df000804 	addi	fp,sp,32
 401c3b4:	e13ffd15 	stw	r4,-12(fp)
 401c3b8:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401c3bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401c3c0:	e0bffe17 	ldw	r2,-8(fp)
 401c3c4:	1004c03a 	cmpne	r2,r2,zero
 401c3c8:	1000021e 	bne	r2,zero,401c3d4 <OSQAccept+0x2c>
        return ((void *)0);
 401c3cc:	e03fff15 	stw	zero,-4(fp)
 401c3d0:	00004506 	br	401c4e8 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 401c3d4:	e0bffd17 	ldw	r2,-12(fp)
 401c3d8:	1004c03a 	cmpne	r2,r2,zero
 401c3dc:	1000051e 	bne	r2,zero,401c3f4 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 401c3e0:	e0fffe17 	ldw	r3,-8(fp)
 401c3e4:	00800104 	movi	r2,4
 401c3e8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401c3ec:	e03fff15 	stw	zero,-4(fp)
 401c3f0:	00003d06 	br	401c4e8 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 401c3f4:	e0bffd17 	ldw	r2,-12(fp)
 401c3f8:	10800003 	ldbu	r2,0(r2)
 401c3fc:	10803fcc 	andi	r2,r2,255
 401c400:	108000a0 	cmpeqi	r2,r2,2
 401c404:	1000051e 	bne	r2,zero,401c41c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 401c408:	e0fffe17 	ldw	r3,-8(fp)
 401c40c:	00800044 	movi	r2,1
 401c410:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401c414:	e03fff15 	stw	zero,-4(fp)
 401c418:	00003306 	br	401c4e8 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c41c:	0005303a 	rdctl	r2,status
 401c420:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c424:	e0fff917 	ldw	r3,-28(fp)
 401c428:	00bfff84 	movi	r2,-2
 401c42c:	1884703a 	and	r2,r3,r2
 401c430:	1001703a 	wrctl	status,r2
  
  return context;
 401c434:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401c438:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 401c43c:	e0bffd17 	ldw	r2,-12(fp)
 401c440:	10800117 	ldw	r2,4(r2)
 401c444:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 401c448:	e0bffb17 	ldw	r2,-20(fp)
 401c44c:	1080058b 	ldhu	r2,22(r2)
 401c450:	10bfffcc 	andi	r2,r2,65535
 401c454:	1005003a 	cmpeq	r2,r2,zero
 401c458:	1000191e 	bne	r2,zero,401c4c0 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 401c45c:	e0bffb17 	ldw	r2,-20(fp)
 401c460:	10c00417 	ldw	r3,16(r2)
 401c464:	18800017 	ldw	r2,0(r3)
 401c468:	e0bffc15 	stw	r2,-16(fp)
 401c46c:	18c00104 	addi	r3,r3,4
 401c470:	e0bffb17 	ldw	r2,-20(fp)
 401c474:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 401c478:	e0bffb17 	ldw	r2,-20(fp)
 401c47c:	1080058b 	ldhu	r2,22(r2)
 401c480:	10bfffc4 	addi	r2,r2,-1
 401c484:	1007883a 	mov	r3,r2
 401c488:	e0bffb17 	ldw	r2,-20(fp)
 401c48c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 401c490:	e0bffb17 	ldw	r2,-20(fp)
 401c494:	10c00417 	ldw	r3,16(r2)
 401c498:	e0bffb17 	ldw	r2,-20(fp)
 401c49c:	10800217 	ldw	r2,8(r2)
 401c4a0:	1880041e 	bne	r3,r2,401c4b4 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 401c4a4:	e0bffb17 	ldw	r2,-20(fp)
 401c4a8:	10c00117 	ldw	r3,4(r2)
 401c4ac:	e0bffb17 	ldw	r2,-20(fp)
 401c4b0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 401c4b4:	e0bffe17 	ldw	r2,-8(fp)
 401c4b8:	10000005 	stb	zero,0(r2)
 401c4bc:	00000406 	br	401c4d0 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 401c4c0:	e0fffe17 	ldw	r3,-8(fp)
 401c4c4:	008007c4 	movi	r2,31
 401c4c8:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 401c4cc:	e03ffc15 	stw	zero,-16(fp)
 401c4d0:	e0bffa17 	ldw	r2,-24(fp)
 401c4d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c4d8:	e0bff817 	ldw	r2,-32(fp)
 401c4dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 401c4e0:	e0bffc17 	ldw	r2,-16(fp)
 401c4e4:	e0bfff15 	stw	r2,-4(fp)
 401c4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 401c4ec:	e037883a 	mov	sp,fp
 401c4f0:	df000017 	ldw	fp,0(sp)
 401c4f4:	dec00104 	addi	sp,sp,4
 401c4f8:	f800283a 	ret

0401c4fc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 401c4fc:	defff304 	addi	sp,sp,-52
 401c500:	dfc00c15 	stw	ra,48(sp)
 401c504:	df000b15 	stw	fp,44(sp)
 401c508:	df000b04 	addi	fp,sp,44
 401c50c:	e13ffd15 	stw	r4,-12(fp)
 401c510:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401c514:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 401c518:	008100b4 	movhi	r2,1026
 401c51c:	109ab204 	addi	r2,r2,27336
 401c520:	10800003 	ldbu	r2,0(r2)
 401c524:	10803fcc 	andi	r2,r2,255
 401c528:	1005003a 	cmpeq	r2,r2,zero
 401c52c:	1000021e 	bne	r2,zero,401c538 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 401c530:	e03fff15 	stw	zero,-4(fp)
 401c534:	00007006 	br	401c6f8 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c538:	0005303a 	rdctl	r2,status
 401c53c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c540:	e0fff917 	ldw	r3,-28(fp)
 401c544:	00bfff84 	movi	r2,-2
 401c548:	1884703a 	and	r2,r3,r2
 401c54c:	1001703a 	wrctl	status,r2
  
  return context;
 401c550:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401c554:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 401c558:	008100b4 	movhi	r2,1026
 401c55c:	109ab104 	addi	r2,r2,27332
 401c560:	10800017 	ldw	r2,0(r2)
 401c564:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 401c568:	008100b4 	movhi	r2,1026
 401c56c:	109ab104 	addi	r2,r2,27332
 401c570:	10800017 	ldw	r2,0(r2)
 401c574:	1005003a 	cmpeq	r2,r2,zero
 401c578:	1000081e 	bne	r2,zero,401c59c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 401c57c:	008100b4 	movhi	r2,1026
 401c580:	109ab104 	addi	r2,r2,27332
 401c584:	10800017 	ldw	r2,0(r2)
 401c588:	10800117 	ldw	r2,4(r2)
 401c58c:	1007883a 	mov	r3,r2
 401c590:	008100b4 	movhi	r2,1026
 401c594:	109ab104 	addi	r2,r2,27332
 401c598:	10c00015 	stw	r3,0(r2)
 401c59c:	e0bffa17 	ldw	r2,-24(fp)
 401c5a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c5a4:	e0bff817 	ldw	r2,-32(fp)
 401c5a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 401c5ac:	e0bffc17 	ldw	r2,-16(fp)
 401c5b0:	1005003a 	cmpeq	r2,r2,zero
 401c5b4:	10004e1e 	bne	r2,zero,401c6f0 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c5b8:	0005303a 	rdctl	r2,status
 401c5bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c5c0:	e0fff717 	ldw	r3,-36(fp)
 401c5c4:	00bfff84 	movi	r2,-2
 401c5c8:	1884703a 	and	r2,r3,r2
 401c5cc:	1001703a 	wrctl	status,r2
  
  return context;
 401c5d0:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 401c5d4:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 401c5d8:	008100b4 	movhi	r2,1026
 401c5dc:	109aaf04 	addi	r2,r2,27324
 401c5e0:	10800017 	ldw	r2,0(r2)
 401c5e4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 401c5e8:	e0bffb17 	ldw	r2,-20(fp)
 401c5ec:	1005003a 	cmpeq	r2,r2,zero
 401c5f0:	1000311e 	bne	r2,zero,401c6b8 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 401c5f4:	008100b4 	movhi	r2,1026
 401c5f8:	109aaf04 	addi	r2,r2,27324
 401c5fc:	10800017 	ldw	r2,0(r2)
 401c600:	10c00017 	ldw	r3,0(r2)
 401c604:	008100b4 	movhi	r2,1026
 401c608:	109aaf04 	addi	r2,r2,27324
 401c60c:	10c00015 	stw	r3,0(r2)
 401c610:	e0bffa17 	ldw	r2,-24(fp)
 401c614:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c618:	e0bff617 	ldw	r2,-40(fp)
 401c61c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 401c620:	e0fffb17 	ldw	r3,-20(fp)
 401c624:	e0bffd17 	ldw	r2,-12(fp)
 401c628:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 401c62c:	e0bffe0b 	ldhu	r2,-8(fp)
 401c630:	1085883a 	add	r2,r2,r2
 401c634:	1085883a 	add	r2,r2,r2
 401c638:	1007883a 	mov	r3,r2
 401c63c:	e0bffd17 	ldw	r2,-12(fp)
 401c640:	1887883a 	add	r3,r3,r2
 401c644:	e0bffb17 	ldw	r2,-20(fp)
 401c648:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 401c64c:	e0fffb17 	ldw	r3,-20(fp)
 401c650:	e0bffd17 	ldw	r2,-12(fp)
 401c654:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 401c658:	e0fffb17 	ldw	r3,-20(fp)
 401c65c:	e0bffd17 	ldw	r2,-12(fp)
 401c660:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 401c664:	e0fffb17 	ldw	r3,-20(fp)
 401c668:	e0bffe0b 	ldhu	r2,-8(fp)
 401c66c:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 401c670:	e0bffb17 	ldw	r2,-20(fp)
 401c674:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 401c678:	e0fffc17 	ldw	r3,-16(fp)
 401c67c:	00800084 	movi	r2,2
 401c680:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 401c684:	e0bffc17 	ldw	r2,-16(fp)
 401c688:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 401c68c:	e0fffc17 	ldw	r3,-16(fp)
 401c690:	e0bffb17 	ldw	r2,-20(fp)
 401c694:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 401c698:	e0fffc17 	ldw	r3,-16(fp)
 401c69c:	00800fc4 	movi	r2,63
 401c6a0:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 401c6a4:	e0bffc17 	ldw	r2,-16(fp)
 401c6a8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 401c6ac:	e13ffc17 	ldw	r4,-16(fp)
 401c6b0:	40195600 	call	4019560 <OS_EventWaitListInit>
 401c6b4:	00000e06 	br	401c6f0 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 401c6b8:	008100b4 	movhi	r2,1026
 401c6bc:	109ab104 	addi	r2,r2,27332
 401c6c0:	10c00017 	ldw	r3,0(r2)
 401c6c4:	e0bffc17 	ldw	r2,-16(fp)
 401c6c8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 401c6cc:	00c100b4 	movhi	r3,1026
 401c6d0:	18dab104 	addi	r3,r3,27332
 401c6d4:	e0bffc17 	ldw	r2,-16(fp)
 401c6d8:	18800015 	stw	r2,0(r3)
 401c6dc:	e0bffa17 	ldw	r2,-24(fp)
 401c6e0:	e0bff515 	stw	r2,-44(fp)
 401c6e4:	e0bff517 	ldw	r2,-44(fp)
 401c6e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 401c6ec:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 401c6f0:	e0bffc17 	ldw	r2,-16(fp)
 401c6f4:	e0bfff15 	stw	r2,-4(fp)
 401c6f8:	e0bfff17 	ldw	r2,-4(fp)
}
 401c6fc:	e037883a 	mov	sp,fp
 401c700:	dfc00117 	ldw	ra,4(sp)
 401c704:	df000017 	ldw	fp,0(sp)
 401c708:	dec00204 	addi	sp,sp,8
 401c70c:	f800283a 	ret

0401c710 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401c710:	defff004 	addi	sp,sp,-64
 401c714:	dfc00f15 	stw	ra,60(sp)
 401c718:	df000e15 	stw	fp,56(sp)
 401c71c:	df000e04 	addi	fp,sp,56
 401c720:	e13ffb15 	stw	r4,-20(fp)
 401c724:	e1bffd15 	stw	r6,-12(fp)
 401c728:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401c72c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401c730:	e0bffd17 	ldw	r2,-12(fp)
 401c734:	1004c03a 	cmpne	r2,r2,zero
 401c738:	1000031e 	bne	r2,zero,401c748 <OSQDel+0x38>
        return (pevent);
 401c73c:	e0bffb17 	ldw	r2,-20(fp)
 401c740:	e0bfff15 	stw	r2,-4(fp)
 401c744:	0000ac06 	br	401c9f8 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401c748:	e0bffb17 	ldw	r2,-20(fp)
 401c74c:	1004c03a 	cmpne	r2,r2,zero
 401c750:	1000061e 	bne	r2,zero,401c76c <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 401c754:	e0fffd17 	ldw	r3,-12(fp)
 401c758:	00800104 	movi	r2,4
 401c75c:	18800005 	stb	r2,0(r3)
        return (pevent);
 401c760:	e0fffb17 	ldw	r3,-20(fp)
 401c764:	e0ffff15 	stw	r3,-4(fp)
 401c768:	0000a306 	br	401c9f8 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 401c76c:	e0bffb17 	ldw	r2,-20(fp)
 401c770:	10800003 	ldbu	r2,0(r2)
 401c774:	10803fcc 	andi	r2,r2,255
 401c778:	108000a0 	cmpeqi	r2,r2,2
 401c77c:	1000061e 	bne	r2,zero,401c798 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 401c780:	e0fffd17 	ldw	r3,-12(fp)
 401c784:	00800044 	movi	r2,1
 401c788:	18800005 	stb	r2,0(r3)
        return (pevent);
 401c78c:	e0bffb17 	ldw	r2,-20(fp)
 401c790:	e0bfff15 	stw	r2,-4(fp)
 401c794:	00009806 	br	401c9f8 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401c798:	008100b4 	movhi	r2,1026
 401c79c:	109ab204 	addi	r2,r2,27336
 401c7a0:	10800003 	ldbu	r2,0(r2)
 401c7a4:	10803fcc 	andi	r2,r2,255
 401c7a8:	1005003a 	cmpeq	r2,r2,zero
 401c7ac:	1000061e 	bne	r2,zero,401c7c8 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 401c7b0:	e0fffd17 	ldw	r3,-12(fp)
 401c7b4:	008003c4 	movi	r2,15
 401c7b8:	18800005 	stb	r2,0(r3)
        return (pevent);
 401c7bc:	e0fffb17 	ldw	r3,-20(fp)
 401c7c0:	e0ffff15 	stw	r3,-4(fp)
 401c7c4:	00008c06 	br	401c9f8 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c7c8:	0005303a 	rdctl	r2,status
 401c7cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c7d0:	e0fff617 	ldw	r3,-40(fp)
 401c7d4:	00bfff84 	movi	r2,-2
 401c7d8:	1884703a 	and	r2,r3,r2
 401c7dc:	1001703a 	wrctl	status,r2
  
  return context;
 401c7e0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 401c7e4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 401c7e8:	e0bffb17 	ldw	r2,-20(fp)
 401c7ec:	10800283 	ldbu	r2,10(r2)
 401c7f0:	10803fcc 	andi	r2,r2,255
 401c7f4:	1005003a 	cmpeq	r2,r2,zero
 401c7f8:	1000031e 	bne	r2,zero,401c808 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401c7fc:	00800044 	movi	r2,1
 401c800:	e0bffa05 	stb	r2,-24(fp)
 401c804:	00000106 	br	401c80c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 401c808:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401c80c:	e0bffc03 	ldbu	r2,-16(fp)
 401c810:	e0bffe15 	stw	r2,-8(fp)
 401c814:	e0fffe17 	ldw	r3,-8(fp)
 401c818:	1805003a 	cmpeq	r2,r3,zero
 401c81c:	1000041e 	bne	r2,zero,401c830 <OSQDel+0x120>
 401c820:	e0fffe17 	ldw	r3,-8(fp)
 401c824:	18800060 	cmpeqi	r2,r3,1
 401c828:	1000391e 	bne	r2,zero,401c910 <OSQDel+0x200>
 401c82c:	00006706 	br	401c9cc <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 401c830:	e0bffa03 	ldbu	r2,-24(fp)
 401c834:	1004c03a 	cmpne	r2,r2,zero
 401c838:	1000261e 	bne	r2,zero,401c8d4 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401c83c:	e0fffb17 	ldw	r3,-20(fp)
 401c840:	00800fc4 	movi	r2,63
 401c844:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 401c848:	e0bffb17 	ldw	r2,-20(fp)
 401c84c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 401c850:	e0bffb17 	ldw	r2,-20(fp)
 401c854:	10800117 	ldw	r2,4(r2)
 401c858:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 401c85c:	008100b4 	movhi	r2,1026
 401c860:	109aaf04 	addi	r2,r2,27324
 401c864:	10c00017 	ldw	r3,0(r2)
 401c868:	e0bff817 	ldw	r2,-32(fp)
 401c86c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 401c870:	00c100b4 	movhi	r3,1026
 401c874:	18daaf04 	addi	r3,r3,27324
 401c878:	e0bff817 	ldw	r2,-32(fp)
 401c87c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 401c880:	e0bffb17 	ldw	r2,-20(fp)
 401c884:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 401c888:	008100b4 	movhi	r2,1026
 401c88c:	109ab104 	addi	r2,r2,27332
 401c890:	10c00017 	ldw	r3,0(r2)
 401c894:	e0bffb17 	ldw	r2,-20(fp)
 401c898:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 401c89c:	e0bffb17 	ldw	r2,-20(fp)
 401c8a0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 401c8a4:	00c100b4 	movhi	r3,1026
 401c8a8:	18dab104 	addi	r3,r3,27332
 401c8ac:	e0bffb17 	ldw	r2,-20(fp)
 401c8b0:	18800015 	stw	r2,0(r3)
 401c8b4:	e0bff717 	ldw	r2,-36(fp)
 401c8b8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c8bc:	e0bff517 	ldw	r2,-44(fp)
 401c8c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 401c8c4:	e0bffd17 	ldw	r2,-12(fp)
 401c8c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 401c8cc:	e03ff915 	stw	zero,-28(fp)
 401c8d0:	00004706 	br	401c9f0 <OSQDel+0x2e0>
 401c8d4:	e0bff717 	ldw	r2,-36(fp)
 401c8d8:	e0bff415 	stw	r2,-48(fp)
 401c8dc:	e0bff417 	ldw	r2,-48(fp)
 401c8e0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 401c8e4:	e0fffd17 	ldw	r3,-12(fp)
 401c8e8:	00801244 	movi	r2,73
 401c8ec:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 401c8f0:	e0bffb17 	ldw	r2,-20(fp)
 401c8f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 401c8f8:	00003d06 	br	401c9f0 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 401c8fc:	e13ffb17 	ldw	r4,-20(fp)
 401c900:	000b883a 	mov	r5,zero
 401c904:	01800104 	movi	r6,4
 401c908:	000f883a 	mov	r7,zero
 401c90c:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 401c910:	e0bffb17 	ldw	r2,-20(fp)
 401c914:	10800283 	ldbu	r2,10(r2)
 401c918:	10803fcc 	andi	r2,r2,255
 401c91c:	1004c03a 	cmpne	r2,r2,zero
 401c920:	103ff61e 	bne	r2,zero,401c8fc <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 401c924:	e0fffb17 	ldw	r3,-20(fp)
 401c928:	00800fc4 	movi	r2,63
 401c92c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 401c930:	e0bffb17 	ldw	r2,-20(fp)
 401c934:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 401c938:	e0bffb17 	ldw	r2,-20(fp)
 401c93c:	10800117 	ldw	r2,4(r2)
 401c940:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 401c944:	008100b4 	movhi	r2,1026
 401c948:	109aaf04 	addi	r2,r2,27324
 401c94c:	10c00017 	ldw	r3,0(r2)
 401c950:	e0bff817 	ldw	r2,-32(fp)
 401c954:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 401c958:	00c100b4 	movhi	r3,1026
 401c95c:	18daaf04 	addi	r3,r3,27324
 401c960:	e0bff817 	ldw	r2,-32(fp)
 401c964:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 401c968:	e0bffb17 	ldw	r2,-20(fp)
 401c96c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 401c970:	008100b4 	movhi	r2,1026
 401c974:	109ab104 	addi	r2,r2,27332
 401c978:	10c00017 	ldw	r3,0(r2)
 401c97c:	e0bffb17 	ldw	r2,-20(fp)
 401c980:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 401c984:	e0bffb17 	ldw	r2,-20(fp)
 401c988:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401c98c:	00c100b4 	movhi	r3,1026
 401c990:	18dab104 	addi	r3,r3,27332
 401c994:	e0bffb17 	ldw	r2,-20(fp)
 401c998:	18800015 	stw	r2,0(r3)
 401c99c:	e0bff717 	ldw	r2,-36(fp)
 401c9a0:	e0bff315 	stw	r2,-52(fp)
 401c9a4:	e0bff317 	ldw	r2,-52(fp)
 401c9a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401c9ac:	e0bffa03 	ldbu	r2,-24(fp)
 401c9b0:	10800058 	cmpnei	r2,r2,1
 401c9b4:	1000011e 	bne	r2,zero,401c9bc <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 401c9b8:	40199ec0 	call	40199ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 401c9bc:	e0bffd17 	ldw	r2,-12(fp)
 401c9c0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 401c9c4:	e03ff915 	stw	zero,-28(fp)
             break;
 401c9c8:	00000906 	br	401c9f0 <OSQDel+0x2e0>
 401c9cc:	e0bff717 	ldw	r2,-36(fp)
 401c9d0:	e0bff215 	stw	r2,-56(fp)
 401c9d4:	e0bff217 	ldw	r2,-56(fp)
 401c9d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 401c9dc:	e0fffd17 	ldw	r3,-12(fp)
 401c9e0:	008001c4 	movi	r2,7
 401c9e4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 401c9e8:	e0bffb17 	ldw	r2,-20(fp)
 401c9ec:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 401c9f0:	e0bff917 	ldw	r2,-28(fp)
 401c9f4:	e0bfff15 	stw	r2,-4(fp)
 401c9f8:	e0bfff17 	ldw	r2,-4(fp)
}
 401c9fc:	e037883a 	mov	sp,fp
 401ca00:	dfc00117 	ldw	ra,4(sp)
 401ca04:	df000017 	ldw	fp,0(sp)
 401ca08:	dec00204 	addi	sp,sp,8
 401ca0c:	f800283a 	ret

0401ca10 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 401ca10:	defff904 	addi	sp,sp,-28
 401ca14:	df000615 	stw	fp,24(sp)
 401ca18:	df000604 	addi	fp,sp,24
 401ca1c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401ca20:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401ca24:	e0bffe17 	ldw	r2,-8(fp)
 401ca28:	1004c03a 	cmpne	r2,r2,zero
 401ca2c:	1000031e 	bne	r2,zero,401ca3c <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 401ca30:	00800104 	movi	r2,4
 401ca34:	e0bfff15 	stw	r2,-4(fp)
 401ca38:	00002206 	br	401cac4 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401ca3c:	e0bffe17 	ldw	r2,-8(fp)
 401ca40:	10800003 	ldbu	r2,0(r2)
 401ca44:	10803fcc 	andi	r2,r2,255
 401ca48:	108000a0 	cmpeqi	r2,r2,2
 401ca4c:	1000031e 	bne	r2,zero,401ca5c <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 401ca50:	00800044 	movi	r2,1
 401ca54:	e0bfff15 	stw	r2,-4(fp)
 401ca58:	00001a06 	br	401cac4 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ca5c:	0005303a 	rdctl	r2,status
 401ca60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ca64:	e0fffb17 	ldw	r3,-20(fp)
 401ca68:	00bfff84 	movi	r2,-2
 401ca6c:	1884703a 	and	r2,r3,r2
 401ca70:	1001703a 	wrctl	status,r2
  
  return context;
 401ca74:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401ca78:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 401ca7c:	e0bffe17 	ldw	r2,-8(fp)
 401ca80:	10800117 	ldw	r2,4(r2)
 401ca84:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 401ca88:	e0bffd17 	ldw	r2,-12(fp)
 401ca8c:	10c00117 	ldw	r3,4(r2)
 401ca90:	e0bffd17 	ldw	r2,-12(fp)
 401ca94:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 401ca98:	e0bffd17 	ldw	r2,-12(fp)
 401ca9c:	10c00117 	ldw	r3,4(r2)
 401caa0:	e0bffd17 	ldw	r2,-12(fp)
 401caa4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 401caa8:	e0bffd17 	ldw	r2,-12(fp)
 401caac:	1000058d 	sth	zero,22(r2)
 401cab0:	e0bffc17 	ldw	r2,-16(fp)
 401cab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cab8:	e0bffa17 	ldw	r2,-24(fp)
 401cabc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401cac0:	e03fff15 	stw	zero,-4(fp)
 401cac4:	e0bfff17 	ldw	r2,-4(fp)
}
 401cac8:	e037883a 	mov	sp,fp
 401cacc:	df000017 	ldw	fp,0(sp)
 401cad0:	dec00104 	addi	sp,sp,4
 401cad4:	f800283a 	ret

0401cad8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 401cad8:	defff104 	addi	sp,sp,-60
 401cadc:	dfc00e15 	stw	ra,56(sp)
 401cae0:	df000d15 	stw	fp,52(sp)
 401cae4:	df000d04 	addi	fp,sp,52
 401cae8:	e13ffb15 	stw	r4,-20(fp)
 401caec:	e1bffd15 	stw	r6,-12(fp)
 401caf0:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401caf4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401caf8:	e0bffd17 	ldw	r2,-12(fp)
 401cafc:	1004c03a 	cmpne	r2,r2,zero
 401cb00:	1000021e 	bne	r2,zero,401cb0c <OSQPend+0x34>
        return ((void *)0);
 401cb04:	e03fff15 	stw	zero,-4(fp)
 401cb08:	0000b506 	br	401cde0 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 401cb0c:	e0bffb17 	ldw	r2,-20(fp)
 401cb10:	1004c03a 	cmpne	r2,r2,zero
 401cb14:	1000051e 	bne	r2,zero,401cb2c <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 401cb18:	e0fffd17 	ldw	r3,-12(fp)
 401cb1c:	00800104 	movi	r2,4
 401cb20:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401cb24:	e03fff15 	stw	zero,-4(fp)
 401cb28:	0000ad06 	br	401cde0 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 401cb2c:	e0bffb17 	ldw	r2,-20(fp)
 401cb30:	10800003 	ldbu	r2,0(r2)
 401cb34:	10803fcc 	andi	r2,r2,255
 401cb38:	108000a0 	cmpeqi	r2,r2,2
 401cb3c:	1000051e 	bne	r2,zero,401cb54 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 401cb40:	e0fffd17 	ldw	r3,-12(fp)
 401cb44:	00800044 	movi	r2,1
 401cb48:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401cb4c:	e03fff15 	stw	zero,-4(fp)
 401cb50:	0000a306 	br	401cde0 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 401cb54:	008100b4 	movhi	r2,1026
 401cb58:	109ab204 	addi	r2,r2,27336
 401cb5c:	10800003 	ldbu	r2,0(r2)
 401cb60:	10803fcc 	andi	r2,r2,255
 401cb64:	1005003a 	cmpeq	r2,r2,zero
 401cb68:	1000051e 	bne	r2,zero,401cb80 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 401cb6c:	e0fffd17 	ldw	r3,-12(fp)
 401cb70:	00800084 	movi	r2,2
 401cb74:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401cb78:	e03fff15 	stw	zero,-4(fp)
 401cb7c:	00009806 	br	401cde0 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 401cb80:	008100b4 	movhi	r2,1026
 401cb84:	109aa404 	addi	r2,r2,27280
 401cb88:	10800003 	ldbu	r2,0(r2)
 401cb8c:	10803fcc 	andi	r2,r2,255
 401cb90:	1005003a 	cmpeq	r2,r2,zero
 401cb94:	1000051e 	bne	r2,zero,401cbac <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 401cb98:	e0fffd17 	ldw	r3,-12(fp)
 401cb9c:	00800344 	movi	r2,13
 401cba0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 401cba4:	e03fff15 	stw	zero,-4(fp)
 401cba8:	00008d06 	br	401cde0 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cbac:	0005303a 	rdctl	r2,status
 401cbb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cbb4:	e0fff717 	ldw	r3,-36(fp)
 401cbb8:	00bfff84 	movi	r2,-2
 401cbbc:	1884703a 	and	r2,r3,r2
 401cbc0:	1001703a 	wrctl	status,r2
  
  return context;
 401cbc4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 401cbc8:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 401cbcc:	e0bffb17 	ldw	r2,-20(fp)
 401cbd0:	10800117 	ldw	r2,4(r2)
 401cbd4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 401cbd8:	e0bff917 	ldw	r2,-28(fp)
 401cbdc:	1080058b 	ldhu	r2,22(r2)
 401cbe0:	10bfffcc 	andi	r2,r2,65535
 401cbe4:	1005003a 	cmpeq	r2,r2,zero
 401cbe8:	10001f1e 	bne	r2,zero,401cc68 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 401cbec:	e0bff917 	ldw	r2,-28(fp)
 401cbf0:	10c00417 	ldw	r3,16(r2)
 401cbf4:	18800017 	ldw	r2,0(r3)
 401cbf8:	e0bffa15 	stw	r2,-24(fp)
 401cbfc:	18c00104 	addi	r3,r3,4
 401cc00:	e0bff917 	ldw	r2,-28(fp)
 401cc04:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 401cc08:	e0bff917 	ldw	r2,-28(fp)
 401cc0c:	1080058b 	ldhu	r2,22(r2)
 401cc10:	10bfffc4 	addi	r2,r2,-1
 401cc14:	1007883a 	mov	r3,r2
 401cc18:	e0bff917 	ldw	r2,-28(fp)
 401cc1c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 401cc20:	e0bff917 	ldw	r2,-28(fp)
 401cc24:	10c00417 	ldw	r3,16(r2)
 401cc28:	e0bff917 	ldw	r2,-28(fp)
 401cc2c:	10800217 	ldw	r2,8(r2)
 401cc30:	1880041e 	bne	r3,r2,401cc44 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 401cc34:	e0bff917 	ldw	r2,-28(fp)
 401cc38:	10c00117 	ldw	r3,4(r2)
 401cc3c:	e0bff917 	ldw	r2,-28(fp)
 401cc40:	10c00415 	stw	r3,16(r2)
 401cc44:	e0bff817 	ldw	r2,-32(fp)
 401cc48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cc4c:	e0bff617 	ldw	r2,-40(fp)
 401cc50:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 401cc54:	e0bffd17 	ldw	r2,-12(fp)
 401cc58:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 401cc5c:	e0bffa17 	ldw	r2,-24(fp)
 401cc60:	e0bfff15 	stw	r2,-4(fp)
 401cc64:	00005e06 	br	401cde0 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 401cc68:	008100b4 	movhi	r2,1026
 401cc6c:	109ab304 	addi	r2,r2,27340
 401cc70:	10c00017 	ldw	r3,0(r2)
 401cc74:	008100b4 	movhi	r2,1026
 401cc78:	109ab304 	addi	r2,r2,27340
 401cc7c:	10800017 	ldw	r2,0(r2)
 401cc80:	10800c03 	ldbu	r2,48(r2)
 401cc84:	10800114 	ori	r2,r2,4
 401cc88:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401cc8c:	008100b4 	movhi	r2,1026
 401cc90:	109ab304 	addi	r2,r2,27340
 401cc94:	10800017 	ldw	r2,0(r2)
 401cc98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 401cc9c:	008100b4 	movhi	r2,1026
 401cca0:	109ab304 	addi	r2,r2,27340
 401cca4:	10c00017 	ldw	r3,0(r2)
 401cca8:	e0bffc0b 	ldhu	r2,-16(fp)
 401ccac:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 401ccb0:	e13ffb17 	ldw	r4,-20(fp)
 401ccb4:	40191400 	call	4019140 <OS_EventTaskWait>
 401ccb8:	e0bff817 	ldw	r2,-32(fp)
 401ccbc:	e0bff515 	stw	r2,-44(fp)
 401ccc0:	e0bff517 	ldw	r2,-44(fp)
 401ccc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 401ccc8:	40199ec0 	call	40199ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cccc:	0005303a 	rdctl	r2,status
 401ccd0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ccd4:	e0fff417 	ldw	r3,-48(fp)
 401ccd8:	00bfff84 	movi	r2,-2
 401ccdc:	1884703a 	and	r2,r3,r2
 401cce0:	1001703a 	wrctl	status,r2
  
  return context;
 401cce4:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 401cce8:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 401ccec:	008100b4 	movhi	r2,1026
 401ccf0:	109ab304 	addi	r2,r2,27340
 401ccf4:	10800017 	ldw	r2,0(r2)
 401ccf8:	10800c43 	ldbu	r2,49(r2)
 401ccfc:	10803fcc 	andi	r2,r2,255
 401cd00:	e0bffe15 	stw	r2,-8(fp)
 401cd04:	e0fffe17 	ldw	r3,-8(fp)
 401cd08:	1805003a 	cmpeq	r2,r3,zero
 401cd0c:	1000041e 	bne	r2,zero,401cd20 <OSQPend+0x248>
 401cd10:	e0fffe17 	ldw	r3,-8(fp)
 401cd14:	188000a0 	cmpeqi	r2,r3,2
 401cd18:	1000091e 	bne	r2,zero,401cd40 <OSQPend+0x268>
 401cd1c:	00000d06 	br	401cd54 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 401cd20:	008100b4 	movhi	r2,1026
 401cd24:	109ab304 	addi	r2,r2,27340
 401cd28:	10800017 	ldw	r2,0(r2)
 401cd2c:	10800917 	ldw	r2,36(r2)
 401cd30:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 401cd34:	e0bffd17 	ldw	r2,-12(fp)
 401cd38:	10000005 	stb	zero,0(r2)
             break;
 401cd3c:	00000e06 	br	401cd78 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 401cd40:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 401cd44:	e0fffd17 	ldw	r3,-12(fp)
 401cd48:	00800384 	movi	r2,14
 401cd4c:	18800005 	stb	r2,0(r3)
             break;
 401cd50:	00000906 	br	401cd78 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 401cd54:	008100b4 	movhi	r2,1026
 401cd58:	109ab304 	addi	r2,r2,27340
 401cd5c:	11000017 	ldw	r4,0(r2)
 401cd60:	e17ffb17 	ldw	r5,-20(fp)
 401cd64:	40193a40 	call	40193a4 <OS_EventTaskRemove>
             pmsg = (void *)0;
 401cd68:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 401cd6c:	e0fffd17 	ldw	r3,-12(fp)
 401cd70:	00800284 	movi	r2,10
 401cd74:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 401cd78:	008100b4 	movhi	r2,1026
 401cd7c:	109ab304 	addi	r2,r2,27340
 401cd80:	10800017 	ldw	r2,0(r2)
 401cd84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 401cd88:	008100b4 	movhi	r2,1026
 401cd8c:	109ab304 	addi	r2,r2,27340
 401cd90:	10800017 	ldw	r2,0(r2)
 401cd94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 401cd98:	008100b4 	movhi	r2,1026
 401cd9c:	109ab304 	addi	r2,r2,27340
 401cda0:	10800017 	ldw	r2,0(r2)
 401cda4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 401cda8:	008100b4 	movhi	r2,1026
 401cdac:	109ab304 	addi	r2,r2,27340
 401cdb0:	10800017 	ldw	r2,0(r2)
 401cdb4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 401cdb8:	008100b4 	movhi	r2,1026
 401cdbc:	109ab304 	addi	r2,r2,27340
 401cdc0:	10800017 	ldw	r2,0(r2)
 401cdc4:	10000915 	stw	zero,36(r2)
 401cdc8:	e0bff817 	ldw	r2,-32(fp)
 401cdcc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cdd0:	e0bff317 	ldw	r2,-52(fp)
 401cdd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 401cdd8:	e0bffa17 	ldw	r2,-24(fp)
 401cddc:	e0bfff15 	stw	r2,-4(fp)
 401cde0:	e0bfff17 	ldw	r2,-4(fp)
}
 401cde4:	e037883a 	mov	sp,fp
 401cde8:	dfc00117 	ldw	ra,4(sp)
 401cdec:	df000017 	ldw	fp,0(sp)
 401cdf0:	dec00204 	addi	sp,sp,8
 401cdf4:	f800283a 	ret

0401cdf8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401cdf8:	defff504 	addi	sp,sp,-44
 401cdfc:	dfc00a15 	stw	ra,40(sp)
 401ce00:	df000915 	stw	fp,36(sp)
 401ce04:	df000904 	addi	fp,sp,36
 401ce08:	e13ffc15 	stw	r4,-16(fp)
 401ce0c:	e1bffe15 	stw	r6,-8(fp)
 401ce10:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401ce14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401ce18:	e0bffe17 	ldw	r2,-8(fp)
 401ce1c:	1004c03a 	cmpne	r2,r2,zero
 401ce20:	1000021e 	bne	r2,zero,401ce2c <OSQPendAbort+0x34>
        return (0);
 401ce24:	e03fff15 	stw	zero,-4(fp)
 401ce28:	00004c06 	br	401cf5c <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401ce2c:	e0bffc17 	ldw	r2,-16(fp)
 401ce30:	1004c03a 	cmpne	r2,r2,zero
 401ce34:	1000051e 	bne	r2,zero,401ce4c <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 401ce38:	e0fffe17 	ldw	r3,-8(fp)
 401ce3c:	00800104 	movi	r2,4
 401ce40:	18800005 	stb	r2,0(r3)
        return (0);
 401ce44:	e03fff15 	stw	zero,-4(fp)
 401ce48:	00004406 	br	401cf5c <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 401ce4c:	e0bffc17 	ldw	r2,-16(fp)
 401ce50:	10800003 	ldbu	r2,0(r2)
 401ce54:	10803fcc 	andi	r2,r2,255
 401ce58:	108000a0 	cmpeqi	r2,r2,2
 401ce5c:	1000051e 	bne	r2,zero,401ce74 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 401ce60:	e0fffe17 	ldw	r3,-8(fp)
 401ce64:	00800044 	movi	r2,1
 401ce68:	18800005 	stb	r2,0(r3)
        return (0);
 401ce6c:	e03fff15 	stw	zero,-4(fp)
 401ce70:	00003a06 	br	401cf5c <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ce74:	0005303a 	rdctl	r2,status
 401ce78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ce7c:	e0fff917 	ldw	r3,-28(fp)
 401ce80:	00bfff84 	movi	r2,-2
 401ce84:	1884703a 	and	r2,r3,r2
 401ce88:	1001703a 	wrctl	status,r2
  
  return context;
 401ce8c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401ce90:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 401ce94:	e0bffc17 	ldw	r2,-16(fp)
 401ce98:	10800283 	ldbu	r2,10(r2)
 401ce9c:	10803fcc 	andi	r2,r2,255
 401cea0:	1005003a 	cmpeq	r2,r2,zero
 401cea4:	1000261e 	bne	r2,zero,401cf40 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 401cea8:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 401ceac:	e0bffd03 	ldbu	r2,-12(fp)
 401ceb0:	10800060 	cmpeqi	r2,r2,1
 401ceb4:	1000091e 	bne	r2,zero,401cedc <OSQPendAbort+0xe4>
 401ceb8:	00000e06 	br	401cef4 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 401cebc:	e13ffc17 	ldw	r4,-16(fp)
 401cec0:	000b883a 	mov	r5,zero
 401cec4:	01800104 	movi	r6,4
 401cec8:	01c00084 	movi	r7,2
 401cecc:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                     nbr_tasks++;
 401ced0:	e0bffb03 	ldbu	r2,-20(fp)
 401ced4:	10800044 	addi	r2,r2,1
 401ced8:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 401cedc:	e0bffc17 	ldw	r2,-16(fp)
 401cee0:	10800283 	ldbu	r2,10(r2)
 401cee4:	10803fcc 	andi	r2,r2,255
 401cee8:	1004c03a 	cmpne	r2,r2,zero
 401ceec:	103ff31e 	bne	r2,zero,401cebc <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 401cef0:	00000806 	br	401cf14 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 401cef4:	e13ffc17 	ldw	r4,-16(fp)
 401cef8:	000b883a 	mov	r5,zero
 401cefc:	01800104 	movi	r6,4
 401cf00:	01c00084 	movi	r7,2
 401cf04:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                 nbr_tasks++;
 401cf08:	e0bffb03 	ldbu	r2,-20(fp)
 401cf0c:	10800044 	addi	r2,r2,1
 401cf10:	e0bffb05 	stb	r2,-20(fp)
 401cf14:	e0bffa17 	ldw	r2,-24(fp)
 401cf18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cf1c:	e0bff817 	ldw	r2,-32(fp)
 401cf20:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 401cf24:	40199ec0 	call	40199ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 401cf28:	e0fffe17 	ldw	r3,-8(fp)
 401cf2c:	00800384 	movi	r2,14
 401cf30:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 401cf34:	e0bffb03 	ldbu	r2,-20(fp)
 401cf38:	e0bfff15 	stw	r2,-4(fp)
 401cf3c:	00000706 	br	401cf5c <OSQPendAbort+0x164>
 401cf40:	e0bffa17 	ldw	r2,-24(fp)
 401cf44:	e0bff715 	stw	r2,-36(fp)
 401cf48:	e0bff717 	ldw	r2,-36(fp)
 401cf4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401cf50:	e0bffe17 	ldw	r2,-8(fp)
 401cf54:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 401cf58:	e03fff15 	stw	zero,-4(fp)
 401cf5c:	e0bfff17 	ldw	r2,-4(fp)
}
 401cf60:	e037883a 	mov	sp,fp
 401cf64:	dfc00117 	ldw	ra,4(sp)
 401cf68:	df000017 	ldw	fp,0(sp)
 401cf6c:	dec00204 	addi	sp,sp,8
 401cf70:	f800283a 	ret

0401cf74 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 401cf74:	defff504 	addi	sp,sp,-44
 401cf78:	dfc00a15 	stw	ra,40(sp)
 401cf7c:	df000915 	stw	fp,36(sp)
 401cf80:	df000904 	addi	fp,sp,36
 401cf84:	e13ffd15 	stw	r4,-12(fp)
 401cf88:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 401cf8c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 401cf90:	e0bffd17 	ldw	r2,-12(fp)
 401cf94:	1004c03a 	cmpne	r2,r2,zero
 401cf98:	1000031e 	bne	r2,zero,401cfa8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 401cf9c:	00800104 	movi	r2,4
 401cfa0:	e0bfff15 	stw	r2,-4(fp)
 401cfa4:	00004d06 	br	401d0dc <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 401cfa8:	e0bffd17 	ldw	r2,-12(fp)
 401cfac:	10800003 	ldbu	r2,0(r2)
 401cfb0:	10803fcc 	andi	r2,r2,255
 401cfb4:	108000a0 	cmpeqi	r2,r2,2
 401cfb8:	1000031e 	bne	r2,zero,401cfc8 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 401cfbc:	00800044 	movi	r2,1
 401cfc0:	e0bfff15 	stw	r2,-4(fp)
 401cfc4:	00004506 	br	401d0dc <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cfc8:	0005303a 	rdctl	r2,status
 401cfcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cfd0:	e0fffa17 	ldw	r3,-24(fp)
 401cfd4:	00bfff84 	movi	r2,-2
 401cfd8:	1884703a 	and	r2,r3,r2
 401cfdc:	1001703a 	wrctl	status,r2
  
  return context;
 401cfe0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401cfe4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 401cfe8:	e0bffd17 	ldw	r2,-12(fp)
 401cfec:	10800283 	ldbu	r2,10(r2)
 401cff0:	10803fcc 	andi	r2,r2,255
 401cff4:	1005003a 	cmpeq	r2,r2,zero
 401cff8:	10000c1e 	bne	r2,zero,401d02c <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 401cffc:	e13ffd17 	ldw	r4,-12(fp)
 401d000:	e17ffe17 	ldw	r5,-8(fp)
 401d004:	01800104 	movi	r6,4
 401d008:	000f883a 	mov	r7,zero
 401d00c:	4018fac0 	call	4018fac <OS_EventTaskRdy>
 401d010:	e0bffb17 	ldw	r2,-20(fp)
 401d014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d018:	e0bff917 	ldw	r2,-28(fp)
 401d01c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 401d020:	40199ec0 	call	40199ec <OS_Sched>
        return (OS_ERR_NONE);
 401d024:	e03fff15 	stw	zero,-4(fp)
 401d028:	00002c06 	br	401d0dc <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 401d02c:	e0bffd17 	ldw	r2,-12(fp)
 401d030:	10800117 	ldw	r2,4(r2)
 401d034:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 401d038:	e0bffc17 	ldw	r2,-16(fp)
 401d03c:	10c0058b 	ldhu	r3,22(r2)
 401d040:	e0bffc17 	ldw	r2,-16(fp)
 401d044:	1080050b 	ldhu	r2,20(r2)
 401d048:	18ffffcc 	andi	r3,r3,65535
 401d04c:	10bfffcc 	andi	r2,r2,65535
 401d050:	18800736 	bltu	r3,r2,401d070 <OSQPost+0xfc>
 401d054:	e0bffb17 	ldw	r2,-20(fp)
 401d058:	e0bff815 	stw	r2,-32(fp)
 401d05c:	e0bff817 	ldw	r2,-32(fp)
 401d060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 401d064:	00800784 	movi	r2,30
 401d068:	e0bfff15 	stw	r2,-4(fp)
 401d06c:	00001b06 	br	401d0dc <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 401d070:	e0bffc17 	ldw	r2,-16(fp)
 401d074:	10c00317 	ldw	r3,12(r2)
 401d078:	e0bffe17 	ldw	r2,-8(fp)
 401d07c:	18800015 	stw	r2,0(r3)
 401d080:	18c00104 	addi	r3,r3,4
 401d084:	e0bffc17 	ldw	r2,-16(fp)
 401d088:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 401d08c:	e0bffc17 	ldw	r2,-16(fp)
 401d090:	1080058b 	ldhu	r2,22(r2)
 401d094:	10800044 	addi	r2,r2,1
 401d098:	1007883a 	mov	r3,r2
 401d09c:	e0bffc17 	ldw	r2,-16(fp)
 401d0a0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 401d0a4:	e0bffc17 	ldw	r2,-16(fp)
 401d0a8:	10c00317 	ldw	r3,12(r2)
 401d0ac:	e0bffc17 	ldw	r2,-16(fp)
 401d0b0:	10800217 	ldw	r2,8(r2)
 401d0b4:	1880041e 	bne	r3,r2,401d0c8 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 401d0b8:	e0bffc17 	ldw	r2,-16(fp)
 401d0bc:	10c00117 	ldw	r3,4(r2)
 401d0c0:	e0bffc17 	ldw	r2,-16(fp)
 401d0c4:	10c00315 	stw	r3,12(r2)
 401d0c8:	e0bffb17 	ldw	r2,-20(fp)
 401d0cc:	e0bff715 	stw	r2,-36(fp)
 401d0d0:	e0bff717 	ldw	r2,-36(fp)
 401d0d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401d0d8:	e03fff15 	stw	zero,-4(fp)
 401d0dc:	e0bfff17 	ldw	r2,-4(fp)
}
 401d0e0:	e037883a 	mov	sp,fp
 401d0e4:	dfc00117 	ldw	ra,4(sp)
 401d0e8:	df000017 	ldw	fp,0(sp)
 401d0ec:	dec00204 	addi	sp,sp,8
 401d0f0:	f800283a 	ret

0401d0f4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 401d0f4:	defff504 	addi	sp,sp,-44
 401d0f8:	dfc00a15 	stw	ra,40(sp)
 401d0fc:	df000915 	stw	fp,36(sp)
 401d100:	df000904 	addi	fp,sp,36
 401d104:	e13ffd15 	stw	r4,-12(fp)
 401d108:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401d10c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401d110:	e0bffd17 	ldw	r2,-12(fp)
 401d114:	1004c03a 	cmpne	r2,r2,zero
 401d118:	1000031e 	bne	r2,zero,401d128 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 401d11c:	00800104 	movi	r2,4
 401d120:	e0bfff15 	stw	r2,-4(fp)
 401d124:	00004f06 	br	401d264 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401d128:	e0bffd17 	ldw	r2,-12(fp)
 401d12c:	10800003 	ldbu	r2,0(r2)
 401d130:	10803fcc 	andi	r2,r2,255
 401d134:	108000a0 	cmpeqi	r2,r2,2
 401d138:	1000031e 	bne	r2,zero,401d148 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 401d13c:	00800044 	movi	r2,1
 401d140:	e0bfff15 	stw	r2,-4(fp)
 401d144:	00004706 	br	401d264 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d148:	0005303a 	rdctl	r2,status
 401d14c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d150:	e0fffa17 	ldw	r3,-24(fp)
 401d154:	00bfff84 	movi	r2,-2
 401d158:	1884703a 	and	r2,r3,r2
 401d15c:	1001703a 	wrctl	status,r2
  
  return context;
 401d160:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401d164:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 401d168:	e0bffd17 	ldw	r2,-12(fp)
 401d16c:	10800283 	ldbu	r2,10(r2)
 401d170:	10803fcc 	andi	r2,r2,255
 401d174:	1005003a 	cmpeq	r2,r2,zero
 401d178:	10000c1e 	bne	r2,zero,401d1ac <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 401d17c:	e13ffd17 	ldw	r4,-12(fp)
 401d180:	e17ffe17 	ldw	r5,-8(fp)
 401d184:	01800104 	movi	r6,4
 401d188:	000f883a 	mov	r7,zero
 401d18c:	4018fac0 	call	4018fac <OS_EventTaskRdy>
 401d190:	e0bffb17 	ldw	r2,-20(fp)
 401d194:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d198:	e0bff917 	ldw	r2,-28(fp)
 401d19c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 401d1a0:	40199ec0 	call	40199ec <OS_Sched>
        return (OS_ERR_NONE);
 401d1a4:	e03fff15 	stw	zero,-4(fp)
 401d1a8:	00002e06 	br	401d264 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 401d1ac:	e0bffd17 	ldw	r2,-12(fp)
 401d1b0:	10800117 	ldw	r2,4(r2)
 401d1b4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 401d1b8:	e0bffc17 	ldw	r2,-16(fp)
 401d1bc:	10c0058b 	ldhu	r3,22(r2)
 401d1c0:	e0bffc17 	ldw	r2,-16(fp)
 401d1c4:	1080050b 	ldhu	r2,20(r2)
 401d1c8:	18ffffcc 	andi	r3,r3,65535
 401d1cc:	10bfffcc 	andi	r2,r2,65535
 401d1d0:	18800736 	bltu	r3,r2,401d1f0 <OSQPostFront+0xfc>
 401d1d4:	e0bffb17 	ldw	r2,-20(fp)
 401d1d8:	e0bff815 	stw	r2,-32(fp)
 401d1dc:	e0bff817 	ldw	r2,-32(fp)
 401d1e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 401d1e4:	00800784 	movi	r2,30
 401d1e8:	e0bfff15 	stw	r2,-4(fp)
 401d1ec:	00001d06 	br	401d264 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 401d1f0:	e0bffc17 	ldw	r2,-16(fp)
 401d1f4:	10c00417 	ldw	r3,16(r2)
 401d1f8:	e0bffc17 	ldw	r2,-16(fp)
 401d1fc:	10800117 	ldw	r2,4(r2)
 401d200:	1880041e 	bne	r3,r2,401d214 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 401d204:	e0bffc17 	ldw	r2,-16(fp)
 401d208:	10c00217 	ldw	r3,8(r2)
 401d20c:	e0bffc17 	ldw	r2,-16(fp)
 401d210:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 401d214:	e0bffc17 	ldw	r2,-16(fp)
 401d218:	10800417 	ldw	r2,16(r2)
 401d21c:	10ffff04 	addi	r3,r2,-4
 401d220:	e0bffc17 	ldw	r2,-16(fp)
 401d224:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 401d228:	e0bffc17 	ldw	r2,-16(fp)
 401d22c:	10c00417 	ldw	r3,16(r2)
 401d230:	e0bffe17 	ldw	r2,-8(fp)
 401d234:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 401d238:	e0bffc17 	ldw	r2,-16(fp)
 401d23c:	1080058b 	ldhu	r2,22(r2)
 401d240:	10800044 	addi	r2,r2,1
 401d244:	1007883a 	mov	r3,r2
 401d248:	e0bffc17 	ldw	r2,-16(fp)
 401d24c:	10c0058d 	sth	r3,22(r2)
 401d250:	e0bffb17 	ldw	r2,-20(fp)
 401d254:	e0bff715 	stw	r2,-36(fp)
 401d258:	e0bff717 	ldw	r2,-36(fp)
 401d25c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401d260:	e03fff15 	stw	zero,-4(fp)
 401d264:	e0bfff17 	ldw	r2,-4(fp)
}
 401d268:	e037883a 	mov	sp,fp
 401d26c:	dfc00117 	ldw	ra,4(sp)
 401d270:	df000017 	ldw	fp,0(sp)
 401d274:	dec00204 	addi	sp,sp,8
 401d278:	f800283a 	ret

0401d27c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 401d27c:	defff404 	addi	sp,sp,-48
 401d280:	dfc00b15 	stw	ra,44(sp)
 401d284:	df000a15 	stw	fp,40(sp)
 401d288:	df000a04 	addi	fp,sp,40
 401d28c:	e13ffc15 	stw	r4,-16(fp)
 401d290:	e17ffd15 	stw	r5,-12(fp)
 401d294:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401d298:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401d29c:	e0bffc17 	ldw	r2,-16(fp)
 401d2a0:	1004c03a 	cmpne	r2,r2,zero
 401d2a4:	1000031e 	bne	r2,zero,401d2b4 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 401d2a8:	00800104 	movi	r2,4
 401d2ac:	e0bfff15 	stw	r2,-4(fp)
 401d2b0:	00007906 	br	401d498 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401d2b4:	e0bffc17 	ldw	r2,-16(fp)
 401d2b8:	10800003 	ldbu	r2,0(r2)
 401d2bc:	10803fcc 	andi	r2,r2,255
 401d2c0:	108000a0 	cmpeqi	r2,r2,2
 401d2c4:	1000031e 	bne	r2,zero,401d2d4 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 401d2c8:	00800044 	movi	r2,1
 401d2cc:	e0bfff15 	stw	r2,-4(fp)
 401d2d0:	00007106 	br	401d498 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d2d4:	0005303a 	rdctl	r2,status
 401d2d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d2dc:	e0fff917 	ldw	r3,-28(fp)
 401d2e0:	00bfff84 	movi	r2,-2
 401d2e4:	1884703a 	and	r2,r3,r2
 401d2e8:	1001703a 	wrctl	status,r2
  
  return context;
 401d2ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401d2f0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 401d2f4:	e0bffc17 	ldw	r2,-16(fp)
 401d2f8:	10800283 	ldbu	r2,10(r2)
 401d2fc:	10803fcc 	andi	r2,r2,255
 401d300:	1005003a 	cmpeq	r2,r2,zero
 401d304:	1000211e 	bne	r2,zero,401d38c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 401d308:	e0bffe03 	ldbu	r2,-8(fp)
 401d30c:	1080004c 	andi	r2,r2,1
 401d310:	10803fcc 	andi	r2,r2,255
 401d314:	1005003a 	cmpeq	r2,r2,zero
 401d318:	10000c1e 	bne	r2,zero,401d34c <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 401d31c:	00000506 	br	401d334 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 401d320:	e13ffc17 	ldw	r4,-16(fp)
 401d324:	e17ffd17 	ldw	r5,-12(fp)
 401d328:	01800104 	movi	r6,4
 401d32c:	000f883a 	mov	r7,zero
 401d330:	4018fac0 	call	4018fac <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 401d334:	e0bffc17 	ldw	r2,-16(fp)
 401d338:	10800283 	ldbu	r2,10(r2)
 401d33c:	10803fcc 	andi	r2,r2,255
 401d340:	1004c03a 	cmpne	r2,r2,zero
 401d344:	103ff61e 	bne	r2,zero,401d320 <OSQPostOpt+0xa4>
 401d348:	00000506 	br	401d360 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 401d34c:	e13ffc17 	ldw	r4,-16(fp)
 401d350:	e17ffd17 	ldw	r5,-12(fp)
 401d354:	01800104 	movi	r6,4
 401d358:	000f883a 	mov	r7,zero
 401d35c:	4018fac0 	call	4018fac <OS_EventTaskRdy>
 401d360:	e0bffa17 	ldw	r2,-24(fp)
 401d364:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d368:	e0bff817 	ldw	r2,-32(fp)
 401d36c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 401d370:	e0bffe03 	ldbu	r2,-8(fp)
 401d374:	1080010c 	andi	r2,r2,4
 401d378:	1004c03a 	cmpne	r2,r2,zero
 401d37c:	1000011e 	bne	r2,zero,401d384 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 401d380:	40199ec0 	call	40199ec <OS_Sched>
        }
        return (OS_ERR_NONE);
 401d384:	e03fff15 	stw	zero,-4(fp)
 401d388:	00004306 	br	401d498 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 401d38c:	e0bffc17 	ldw	r2,-16(fp)
 401d390:	10800117 	ldw	r2,4(r2)
 401d394:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 401d398:	e0bffb17 	ldw	r2,-20(fp)
 401d39c:	10c0058b 	ldhu	r3,22(r2)
 401d3a0:	e0bffb17 	ldw	r2,-20(fp)
 401d3a4:	1080050b 	ldhu	r2,20(r2)
 401d3a8:	18ffffcc 	andi	r3,r3,65535
 401d3ac:	10bfffcc 	andi	r2,r2,65535
 401d3b0:	18800736 	bltu	r3,r2,401d3d0 <OSQPostOpt+0x154>
 401d3b4:	e0bffa17 	ldw	r2,-24(fp)
 401d3b8:	e0bff715 	stw	r2,-36(fp)
 401d3bc:	e0bff717 	ldw	r2,-36(fp)
 401d3c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 401d3c4:	00800784 	movi	r2,30
 401d3c8:	e0bfff15 	stw	r2,-4(fp)
 401d3cc:	00003206 	br	401d498 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 401d3d0:	e0bffe03 	ldbu	r2,-8(fp)
 401d3d4:	1080008c 	andi	r2,r2,2
 401d3d8:	1005003a 	cmpeq	r2,r2,zero
 401d3dc:	1000131e 	bne	r2,zero,401d42c <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 401d3e0:	e0bffb17 	ldw	r2,-20(fp)
 401d3e4:	10c00417 	ldw	r3,16(r2)
 401d3e8:	e0bffb17 	ldw	r2,-20(fp)
 401d3ec:	10800117 	ldw	r2,4(r2)
 401d3f0:	1880041e 	bne	r3,r2,401d404 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 401d3f4:	e0bffb17 	ldw	r2,-20(fp)
 401d3f8:	10c00217 	ldw	r3,8(r2)
 401d3fc:	e0bffb17 	ldw	r2,-20(fp)
 401d400:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 401d404:	e0bffb17 	ldw	r2,-20(fp)
 401d408:	10800417 	ldw	r2,16(r2)
 401d40c:	10ffff04 	addi	r3,r2,-4
 401d410:	e0bffb17 	ldw	r2,-20(fp)
 401d414:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 401d418:	e0bffb17 	ldw	r2,-20(fp)
 401d41c:	10c00417 	ldw	r3,16(r2)
 401d420:	e0bffd17 	ldw	r2,-12(fp)
 401d424:	18800015 	stw	r2,0(r3)
 401d428:	00001006 	br	401d46c <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 401d42c:	e0bffb17 	ldw	r2,-20(fp)
 401d430:	10c00317 	ldw	r3,12(r2)
 401d434:	e0bffd17 	ldw	r2,-12(fp)
 401d438:	18800015 	stw	r2,0(r3)
 401d43c:	18c00104 	addi	r3,r3,4
 401d440:	e0bffb17 	ldw	r2,-20(fp)
 401d444:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 401d448:	e0bffb17 	ldw	r2,-20(fp)
 401d44c:	10c00317 	ldw	r3,12(r2)
 401d450:	e0bffb17 	ldw	r2,-20(fp)
 401d454:	10800217 	ldw	r2,8(r2)
 401d458:	1880041e 	bne	r3,r2,401d46c <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 401d45c:	e0bffb17 	ldw	r2,-20(fp)
 401d460:	10c00117 	ldw	r3,4(r2)
 401d464:	e0bffb17 	ldw	r2,-20(fp)
 401d468:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 401d46c:	e0bffb17 	ldw	r2,-20(fp)
 401d470:	1080058b 	ldhu	r2,22(r2)
 401d474:	10800044 	addi	r2,r2,1
 401d478:	1007883a 	mov	r3,r2
 401d47c:	e0bffb17 	ldw	r2,-20(fp)
 401d480:	10c0058d 	sth	r3,22(r2)
 401d484:	e0bffa17 	ldw	r2,-24(fp)
 401d488:	e0bff615 	stw	r2,-40(fp)
 401d48c:	e0bff617 	ldw	r2,-40(fp)
 401d490:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401d494:	e03fff15 	stw	zero,-4(fp)
 401d498:	e0bfff17 	ldw	r2,-4(fp)
}
 401d49c:	e037883a 	mov	sp,fp
 401d4a0:	dfc00117 	ldw	ra,4(sp)
 401d4a4:	df000017 	ldw	fp,0(sp)
 401d4a8:	dec00204 	addi	sp,sp,8
 401d4ac:	f800283a 	ret

0401d4b0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 401d4b0:	defff504 	addi	sp,sp,-44
 401d4b4:	df000a15 	stw	fp,40(sp)
 401d4b8:	df000a04 	addi	fp,sp,40
 401d4bc:	e13ffd15 	stw	r4,-12(fp)
 401d4c0:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 401d4c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 401d4c8:	e0bffd17 	ldw	r2,-12(fp)
 401d4cc:	1004c03a 	cmpne	r2,r2,zero
 401d4d0:	1000031e 	bne	r2,zero,401d4e0 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 401d4d4:	00800104 	movi	r2,4
 401d4d8:	e0bfff15 	stw	r2,-4(fp)
 401d4dc:	00004f06 	br	401d61c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 401d4e0:	e0bffe17 	ldw	r2,-8(fp)
 401d4e4:	1004c03a 	cmpne	r2,r2,zero
 401d4e8:	1000031e 	bne	r2,zero,401d4f8 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401d4ec:	00800244 	movi	r2,9
 401d4f0:	e0bfff15 	stw	r2,-4(fp)
 401d4f4:	00004906 	br	401d61c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 401d4f8:	e0bffd17 	ldw	r2,-12(fp)
 401d4fc:	10800003 	ldbu	r2,0(r2)
 401d500:	10803fcc 	andi	r2,r2,255
 401d504:	108000a0 	cmpeqi	r2,r2,2
 401d508:	1000031e 	bne	r2,zero,401d518 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 401d50c:	00800044 	movi	r2,1
 401d510:	e0bfff15 	stw	r2,-4(fp)
 401d514:	00004106 	br	401d61c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d518:	0005303a 	rdctl	r2,status
 401d51c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d520:	e0fff717 	ldw	r3,-36(fp)
 401d524:	00bfff84 	movi	r2,-2
 401d528:	1884703a 	and	r2,r3,r2
 401d52c:	1001703a 	wrctl	status,r2
  
  return context;
 401d530:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 401d534:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 401d538:	e0bffd17 	ldw	r2,-12(fp)
 401d53c:	10c00283 	ldbu	r3,10(r2)
 401d540:	e0bffe17 	ldw	r2,-8(fp)
 401d544:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 401d548:	e0bffd17 	ldw	r2,-12(fp)
 401d54c:	108002c4 	addi	r2,r2,11
 401d550:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 401d554:	e0bffe17 	ldw	r2,-8(fp)
 401d558:	10800204 	addi	r2,r2,8
 401d55c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401d560:	e03ffb05 	stb	zero,-20(fp)
 401d564:	00000d06 	br	401d59c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 401d568:	e0bffa17 	ldw	r2,-24(fp)
 401d56c:	10c00003 	ldbu	r3,0(r2)
 401d570:	e0bff917 	ldw	r2,-28(fp)
 401d574:	10c00005 	stb	r3,0(r2)
 401d578:	e0bff917 	ldw	r2,-28(fp)
 401d57c:	10800044 	addi	r2,r2,1
 401d580:	e0bff915 	stw	r2,-28(fp)
 401d584:	e0bffa17 	ldw	r2,-24(fp)
 401d588:	10800044 	addi	r2,r2,1
 401d58c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401d590:	e0bffb03 	ldbu	r2,-20(fp)
 401d594:	10800044 	addi	r2,r2,1
 401d598:	e0bffb05 	stb	r2,-20(fp)
 401d59c:	e0bffb03 	ldbu	r2,-20(fp)
 401d5a0:	108000f0 	cmpltui	r2,r2,3
 401d5a4:	103ff01e 	bne	r2,zero,401d568 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 401d5a8:	e0bffd17 	ldw	r2,-12(fp)
 401d5ac:	10800117 	ldw	r2,4(r2)
 401d5b0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 401d5b4:	e0bffc17 	ldw	r2,-16(fp)
 401d5b8:	1080058b 	ldhu	r2,22(r2)
 401d5bc:	10bfffcc 	andi	r2,r2,65535
 401d5c0:	1005003a 	cmpeq	r2,r2,zero
 401d5c4:	1000061e 	bne	r2,zero,401d5e0 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 401d5c8:	e0bffc17 	ldw	r2,-16(fp)
 401d5cc:	10800417 	ldw	r2,16(r2)
 401d5d0:	10c00017 	ldw	r3,0(r2)
 401d5d4:	e0bffe17 	ldw	r2,-8(fp)
 401d5d8:	10c00015 	stw	r3,0(r2)
 401d5dc:	00000206 	br	401d5e8 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 401d5e0:	e0bffe17 	ldw	r2,-8(fp)
 401d5e4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 401d5e8:	e0bffc17 	ldw	r2,-16(fp)
 401d5ec:	10c0058b 	ldhu	r3,22(r2)
 401d5f0:	e0bffe17 	ldw	r2,-8(fp)
 401d5f4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 401d5f8:	e0bffc17 	ldw	r2,-16(fp)
 401d5fc:	10c0050b 	ldhu	r3,20(r2)
 401d600:	e0bffe17 	ldw	r2,-8(fp)
 401d604:	10c0018d 	sth	r3,6(r2)
 401d608:	e0bff817 	ldw	r2,-32(fp)
 401d60c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d610:	e0bff617 	ldw	r2,-40(fp)
 401d614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401d618:	e03fff15 	stw	zero,-4(fp)
 401d61c:	e0bfff17 	ldw	r2,-4(fp)
}
 401d620:	e037883a 	mov	sp,fp
 401d624:	df000017 	ldw	fp,0(sp)
 401d628:	dec00104 	addi	sp,sp,4
 401d62c:	f800283a 	ret

0401d630 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 401d630:	defffb04 	addi	sp,sp,-20
 401d634:	dfc00415 	stw	ra,16(sp)
 401d638:	df000315 	stw	fp,12(sp)
 401d63c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 401d640:	010100f4 	movhi	r4,1027
 401d644:	2110d404 	addi	r4,r4,17232
 401d648:	01407804 	movi	r5,480
 401d64c:	401992c0 	call	401992c <OS_MemClr>
    pq1 = &OSQTbl[0];
 401d650:	008100f4 	movhi	r2,1027
 401d654:	1090d404 	addi	r2,r2,17232
 401d658:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 401d65c:	008100f4 	movhi	r2,1027
 401d660:	1090da04 	addi	r2,r2,17256
 401d664:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 401d668:	e03fff0d 	sth	zero,-4(fp)
 401d66c:	00000c06 	br	401d6a0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 401d670:	e0fffe17 	ldw	r3,-8(fp)
 401d674:	e0bffd17 	ldw	r2,-12(fp)
 401d678:	18800015 	stw	r2,0(r3)
        pq1++;
 401d67c:	e0bffe17 	ldw	r2,-8(fp)
 401d680:	10800604 	addi	r2,r2,24
 401d684:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 401d688:	e0bffd17 	ldw	r2,-12(fp)
 401d68c:	10800604 	addi	r2,r2,24
 401d690:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 401d694:	e0bfff0b 	ldhu	r2,-4(fp)
 401d698:	10800044 	addi	r2,r2,1
 401d69c:	e0bfff0d 	sth	r2,-4(fp)
 401d6a0:	e0bfff0b 	ldhu	r2,-4(fp)
 401d6a4:	108004f0 	cmpltui	r2,r2,19
 401d6a8:	103ff11e 	bne	r2,zero,401d670 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 401d6ac:	e0bffe17 	ldw	r2,-8(fp)
 401d6b0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 401d6b4:	00c100b4 	movhi	r3,1026
 401d6b8:	18daaf04 	addi	r3,r3,27324
 401d6bc:	008100f4 	movhi	r2,1027
 401d6c0:	1090d404 	addi	r2,r2,17232
 401d6c4:	18800015 	stw	r2,0(r3)
#endif
}
 401d6c8:	e037883a 	mov	sp,fp
 401d6cc:	dfc00117 	ldw	ra,4(sp)
 401d6d0:	df000017 	ldw	fp,0(sp)
 401d6d4:	dec00204 	addi	sp,sp,8
 401d6d8:	f800283a 	ret

0401d6dc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 401d6dc:	defff904 	addi	sp,sp,-28
 401d6e0:	df000615 	stw	fp,24(sp)
 401d6e4:	df000604 	addi	fp,sp,24
 401d6e8:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401d6ec:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401d6f0:	e0bffe17 	ldw	r2,-8(fp)
 401d6f4:	1004c03a 	cmpne	r2,r2,zero
 401d6f8:	1000021e 	bne	r2,zero,401d704 <OSSemAccept+0x28>
        return (0);
 401d6fc:	e03fff15 	stw	zero,-4(fp)
 401d700:	00002106 	br	401d788 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401d704:	e0bffe17 	ldw	r2,-8(fp)
 401d708:	10800003 	ldbu	r2,0(r2)
 401d70c:	10803fcc 	andi	r2,r2,255
 401d710:	108000e0 	cmpeqi	r2,r2,3
 401d714:	1000021e 	bne	r2,zero,401d720 <OSSemAccept+0x44>
        return (0);
 401d718:	e03fff15 	stw	zero,-4(fp)
 401d71c:	00001a06 	br	401d788 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d720:	0005303a 	rdctl	r2,status
 401d724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d728:	e0fffb17 	ldw	r3,-20(fp)
 401d72c:	00bfff84 	movi	r2,-2
 401d730:	1884703a 	and	r2,r3,r2
 401d734:	1001703a 	wrctl	status,r2
  
  return context;
 401d738:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 401d73c:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 401d740:	e0bffe17 	ldw	r2,-8(fp)
 401d744:	1080020b 	ldhu	r2,8(r2)
 401d748:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 401d74c:	e0bffd0b 	ldhu	r2,-12(fp)
 401d750:	1005003a 	cmpeq	r2,r2,zero
 401d754:	1000061e 	bne	r2,zero,401d770 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 401d758:	e0bffe17 	ldw	r2,-8(fp)
 401d75c:	1080020b 	ldhu	r2,8(r2)
 401d760:	10bfffc4 	addi	r2,r2,-1
 401d764:	1007883a 	mov	r3,r2
 401d768:	e0bffe17 	ldw	r2,-8(fp)
 401d76c:	10c0020d 	sth	r3,8(r2)
 401d770:	e0bffc17 	ldw	r2,-16(fp)
 401d774:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d778:	e0bffa17 	ldw	r2,-24(fp)
 401d77c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 401d780:	e0bffd0b 	ldhu	r2,-12(fp)
 401d784:	e0bfff15 	stw	r2,-4(fp)
 401d788:	e0bfff17 	ldw	r2,-4(fp)
}
 401d78c:	e037883a 	mov	sp,fp
 401d790:	df000017 	ldw	fp,0(sp)
 401d794:	dec00104 	addi	sp,sp,4
 401d798:	f800283a 	ret

0401d79c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 401d79c:	defff804 	addi	sp,sp,-32
 401d7a0:	dfc00715 	stw	ra,28(sp)
 401d7a4:	df000615 	stw	fp,24(sp)
 401d7a8:	df000604 	addi	fp,sp,24
 401d7ac:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401d7b0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401d7b4:	008100b4 	movhi	r2,1026
 401d7b8:	109ab204 	addi	r2,r2,27336
 401d7bc:	10800003 	ldbu	r2,0(r2)
 401d7c0:	10803fcc 	andi	r2,r2,255
 401d7c4:	1005003a 	cmpeq	r2,r2,zero
 401d7c8:	1000021e 	bne	r2,zero,401d7d4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 401d7cc:	e03fff15 	stw	zero,-4(fp)
 401d7d0:	00003106 	br	401d898 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d7d4:	0005303a 	rdctl	r2,status
 401d7d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d7dc:	e0fffb17 	ldw	r3,-20(fp)
 401d7e0:	00bfff84 	movi	r2,-2
 401d7e4:	1884703a 	and	r2,r3,r2
 401d7e8:	1001703a 	wrctl	status,r2
  
  return context;
 401d7ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 401d7f0:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 401d7f4:	008100b4 	movhi	r2,1026
 401d7f8:	109ab104 	addi	r2,r2,27332
 401d7fc:	10800017 	ldw	r2,0(r2)
 401d800:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 401d804:	008100b4 	movhi	r2,1026
 401d808:	109ab104 	addi	r2,r2,27332
 401d80c:	10800017 	ldw	r2,0(r2)
 401d810:	1005003a 	cmpeq	r2,r2,zero
 401d814:	1000081e 	bne	r2,zero,401d838 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 401d818:	008100b4 	movhi	r2,1026
 401d81c:	109ab104 	addi	r2,r2,27332
 401d820:	10800017 	ldw	r2,0(r2)
 401d824:	10800117 	ldw	r2,4(r2)
 401d828:	1007883a 	mov	r3,r2
 401d82c:	008100b4 	movhi	r2,1026
 401d830:	109ab104 	addi	r2,r2,27332
 401d834:	10c00015 	stw	r3,0(r2)
 401d838:	e0bffc17 	ldw	r2,-16(fp)
 401d83c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d840:	e0bffa17 	ldw	r2,-24(fp)
 401d844:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 401d848:	e0bffd17 	ldw	r2,-12(fp)
 401d84c:	1005003a 	cmpeq	r2,r2,zero
 401d850:	10000f1e 	bne	r2,zero,401d890 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 401d854:	e0fffd17 	ldw	r3,-12(fp)
 401d858:	008000c4 	movi	r2,3
 401d85c:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 401d860:	e0fffd17 	ldw	r3,-12(fp)
 401d864:	e0bffe0b 	ldhu	r2,-8(fp)
 401d868:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 401d86c:	e0bffd17 	ldw	r2,-12(fp)
 401d870:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 401d874:	e0fffd17 	ldw	r3,-12(fp)
 401d878:	00800fc4 	movi	r2,63
 401d87c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 401d880:	e0bffd17 	ldw	r2,-12(fp)
 401d884:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 401d888:	e13ffd17 	ldw	r4,-12(fp)
 401d88c:	40195600 	call	4019560 <OS_EventWaitListInit>
    }
    return (pevent);
 401d890:	e0bffd17 	ldw	r2,-12(fp)
 401d894:	e0bfff15 	stw	r2,-4(fp)
 401d898:	e0bfff17 	ldw	r2,-4(fp)
}
 401d89c:	e037883a 	mov	sp,fp
 401d8a0:	dfc00117 	ldw	ra,4(sp)
 401d8a4:	df000017 	ldw	fp,0(sp)
 401d8a8:	dec00204 	addi	sp,sp,8
 401d8ac:	f800283a 	ret

0401d8b0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401d8b0:	defff104 	addi	sp,sp,-60
 401d8b4:	dfc00e15 	stw	ra,56(sp)
 401d8b8:	df000d15 	stw	fp,52(sp)
 401d8bc:	df000d04 	addi	fp,sp,52
 401d8c0:	e13ffb15 	stw	r4,-20(fp)
 401d8c4:	e1bffd15 	stw	r6,-12(fp)
 401d8c8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401d8cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 401d8d0:	e0bffd17 	ldw	r2,-12(fp)
 401d8d4:	1004c03a 	cmpne	r2,r2,zero
 401d8d8:	1000031e 	bne	r2,zero,401d8e8 <OSSemDel+0x38>
        return (pevent);
 401d8dc:	e0bffb17 	ldw	r2,-20(fp)
 401d8e0:	e0bfff15 	stw	r2,-4(fp)
 401d8e4:	00009406 	br	401db38 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401d8e8:	e0bffb17 	ldw	r2,-20(fp)
 401d8ec:	1004c03a 	cmpne	r2,r2,zero
 401d8f0:	1000061e 	bne	r2,zero,401d90c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 401d8f4:	e0fffd17 	ldw	r3,-12(fp)
 401d8f8:	00800104 	movi	r2,4
 401d8fc:	18800005 	stb	r2,0(r3)
        return (pevent);
 401d900:	e0fffb17 	ldw	r3,-20(fp)
 401d904:	e0ffff15 	stw	r3,-4(fp)
 401d908:	00008b06 	br	401db38 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 401d90c:	e0bffb17 	ldw	r2,-20(fp)
 401d910:	10800003 	ldbu	r2,0(r2)
 401d914:	10803fcc 	andi	r2,r2,255
 401d918:	108000e0 	cmpeqi	r2,r2,3
 401d91c:	1000061e 	bne	r2,zero,401d938 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 401d920:	e0fffd17 	ldw	r3,-12(fp)
 401d924:	00800044 	movi	r2,1
 401d928:	18800005 	stb	r2,0(r3)
        return (pevent);
 401d92c:	e0bffb17 	ldw	r2,-20(fp)
 401d930:	e0bfff15 	stw	r2,-4(fp)
 401d934:	00008006 	br	401db38 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401d938:	008100b4 	movhi	r2,1026
 401d93c:	109ab204 	addi	r2,r2,27336
 401d940:	10800003 	ldbu	r2,0(r2)
 401d944:	10803fcc 	andi	r2,r2,255
 401d948:	1005003a 	cmpeq	r2,r2,zero
 401d94c:	1000061e 	bne	r2,zero,401d968 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 401d950:	e0fffd17 	ldw	r3,-12(fp)
 401d954:	008003c4 	movi	r2,15
 401d958:	18800005 	stb	r2,0(r3)
        return (pevent);
 401d95c:	e0fffb17 	ldw	r3,-20(fp)
 401d960:	e0ffff15 	stw	r3,-4(fp)
 401d964:	00007406 	br	401db38 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d968:	0005303a 	rdctl	r2,status
 401d96c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d970:	e0fff717 	ldw	r3,-36(fp)
 401d974:	00bfff84 	movi	r2,-2
 401d978:	1884703a 	and	r2,r3,r2
 401d97c:	1001703a 	wrctl	status,r2
  
  return context;
 401d980:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 401d984:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 401d988:	e0bffb17 	ldw	r2,-20(fp)
 401d98c:	10800283 	ldbu	r2,10(r2)
 401d990:	10803fcc 	andi	r2,r2,255
 401d994:	1005003a 	cmpeq	r2,r2,zero
 401d998:	1000031e 	bne	r2,zero,401d9a8 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401d99c:	00800044 	movi	r2,1
 401d9a0:	e0bffa05 	stb	r2,-24(fp)
 401d9a4:	00000106 	br	401d9ac <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 401d9a8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401d9ac:	e0bffc03 	ldbu	r2,-16(fp)
 401d9b0:	e0bffe15 	stw	r2,-8(fp)
 401d9b4:	e0fffe17 	ldw	r3,-8(fp)
 401d9b8:	1805003a 	cmpeq	r2,r3,zero
 401d9bc:	1000041e 	bne	r2,zero,401d9d0 <OSSemDel+0x120>
 401d9c0:	e0fffe17 	ldw	r3,-8(fp)
 401d9c4:	18800060 	cmpeqi	r2,r3,1
 401d9c8:	10002d1e 	bne	r2,zero,401da80 <OSSemDel+0x1d0>
 401d9cc:	00004f06 	br	401db0c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 401d9d0:	e0bffa03 	ldbu	r2,-24(fp)
 401d9d4:	1004c03a 	cmpne	r2,r2,zero
 401d9d8:	10001a1e 	bne	r2,zero,401da44 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401d9dc:	e0fffb17 	ldw	r3,-20(fp)
 401d9e0:	00800fc4 	movi	r2,63
 401d9e4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 401d9e8:	e0bffb17 	ldw	r2,-20(fp)
 401d9ec:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 401d9f0:	e0bffb17 	ldw	r2,-20(fp)
 401d9f4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 401d9f8:	008100b4 	movhi	r2,1026
 401d9fc:	109ab104 	addi	r2,r2,27332
 401da00:	10c00017 	ldw	r3,0(r2)
 401da04:	e0bffb17 	ldw	r2,-20(fp)
 401da08:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 401da0c:	e0bffb17 	ldw	r2,-20(fp)
 401da10:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 401da14:	00c100b4 	movhi	r3,1026
 401da18:	18dab104 	addi	r3,r3,27332
 401da1c:	e0bffb17 	ldw	r2,-20(fp)
 401da20:	18800015 	stw	r2,0(r3)
 401da24:	e0bff817 	ldw	r2,-32(fp)
 401da28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401da2c:	e0bff617 	ldw	r2,-40(fp)
 401da30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 401da34:	e0bffd17 	ldw	r2,-12(fp)
 401da38:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 401da3c:	e03ff915 	stw	zero,-28(fp)
 401da40:	00003b06 	br	401db30 <OSSemDel+0x280>
 401da44:	e0bff817 	ldw	r2,-32(fp)
 401da48:	e0bff515 	stw	r2,-44(fp)
 401da4c:	e0bff517 	ldw	r2,-44(fp)
 401da50:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 401da54:	e0fffd17 	ldw	r3,-12(fp)
 401da58:	00801244 	movi	r2,73
 401da5c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 401da60:	e0bffb17 	ldw	r2,-20(fp)
 401da64:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 401da68:	00003106 	br	401db30 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 401da6c:	e13ffb17 	ldw	r4,-20(fp)
 401da70:	000b883a 	mov	r5,zero
 401da74:	01800044 	movi	r6,1
 401da78:	000f883a 	mov	r7,zero
 401da7c:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 401da80:	e0bffb17 	ldw	r2,-20(fp)
 401da84:	10800283 	ldbu	r2,10(r2)
 401da88:	10803fcc 	andi	r2,r2,255
 401da8c:	1004c03a 	cmpne	r2,r2,zero
 401da90:	103ff61e 	bne	r2,zero,401da6c <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 401da94:	e0fffb17 	ldw	r3,-20(fp)
 401da98:	00800fc4 	movi	r2,63
 401da9c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 401daa0:	e0bffb17 	ldw	r2,-20(fp)
 401daa4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 401daa8:	e0bffb17 	ldw	r2,-20(fp)
 401daac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 401dab0:	008100b4 	movhi	r2,1026
 401dab4:	109ab104 	addi	r2,r2,27332
 401dab8:	10c00017 	ldw	r3,0(r2)
 401dabc:	e0bffb17 	ldw	r2,-20(fp)
 401dac0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 401dac4:	e0bffb17 	ldw	r2,-20(fp)
 401dac8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401dacc:	00c100b4 	movhi	r3,1026
 401dad0:	18dab104 	addi	r3,r3,27332
 401dad4:	e0bffb17 	ldw	r2,-20(fp)
 401dad8:	18800015 	stw	r2,0(r3)
 401dadc:	e0bff817 	ldw	r2,-32(fp)
 401dae0:	e0bff415 	stw	r2,-48(fp)
 401dae4:	e0bff417 	ldw	r2,-48(fp)
 401dae8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401daec:	e0bffa03 	ldbu	r2,-24(fp)
 401daf0:	10800058 	cmpnei	r2,r2,1
 401daf4:	1000011e 	bne	r2,zero,401dafc <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 401daf8:	40199ec0 	call	40199ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 401dafc:	e0bffd17 	ldw	r2,-12(fp)
 401db00:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 401db04:	e03ff915 	stw	zero,-28(fp)
             break;
 401db08:	00000906 	br	401db30 <OSSemDel+0x280>
 401db0c:	e0bff817 	ldw	r2,-32(fp)
 401db10:	e0bff315 	stw	r2,-52(fp)
 401db14:	e0bff317 	ldw	r2,-52(fp)
 401db18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 401db1c:	e0fffd17 	ldw	r3,-12(fp)
 401db20:	008001c4 	movi	r2,7
 401db24:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 401db28:	e0bffb17 	ldw	r2,-20(fp)
 401db2c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 401db30:	e0bff917 	ldw	r2,-28(fp)
 401db34:	e0bfff15 	stw	r2,-4(fp)
 401db38:	e0bfff17 	ldw	r2,-4(fp)
}
 401db3c:	e037883a 	mov	sp,fp
 401db40:	dfc00117 	ldw	ra,4(sp)
 401db44:	df000017 	ldw	fp,0(sp)
 401db48:	dec00204 	addi	sp,sp,8
 401db4c:	f800283a 	ret

0401db50 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 401db50:	defff404 	addi	sp,sp,-48
 401db54:	dfc00b15 	stw	ra,44(sp)
 401db58:	df000a15 	stw	fp,40(sp)
 401db5c:	df000a04 	addi	fp,sp,40
 401db60:	e13ffc15 	stw	r4,-16(fp)
 401db64:	e1bffe15 	stw	r6,-8(fp)
 401db68:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401db6c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401db70:	e0bffe17 	ldw	r2,-8(fp)
 401db74:	1005003a 	cmpeq	r2,r2,zero
 401db78:	10008f1e 	bne	r2,zero,401ddb8 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401db7c:	e0bffc17 	ldw	r2,-16(fp)
 401db80:	1004c03a 	cmpne	r2,r2,zero
 401db84:	1000041e 	bne	r2,zero,401db98 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 401db88:	e0fffe17 	ldw	r3,-8(fp)
 401db8c:	00800104 	movi	r2,4
 401db90:	18800005 	stb	r2,0(r3)
        return;
 401db94:	00008806 	br	401ddb8 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401db98:	e0bffc17 	ldw	r2,-16(fp)
 401db9c:	10800003 	ldbu	r2,0(r2)
 401dba0:	10803fcc 	andi	r2,r2,255
 401dba4:	108000e0 	cmpeqi	r2,r2,3
 401dba8:	1000041e 	bne	r2,zero,401dbbc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 401dbac:	e0fffe17 	ldw	r3,-8(fp)
 401dbb0:	00800044 	movi	r2,1
 401dbb4:	18800005 	stb	r2,0(r3)
        return;
 401dbb8:	00007f06 	br	401ddb8 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 401dbbc:	008100b4 	movhi	r2,1026
 401dbc0:	109ab204 	addi	r2,r2,27336
 401dbc4:	10800003 	ldbu	r2,0(r2)
 401dbc8:	10803fcc 	andi	r2,r2,255
 401dbcc:	1005003a 	cmpeq	r2,r2,zero
 401dbd0:	1000041e 	bne	r2,zero,401dbe4 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 401dbd4:	e0fffe17 	ldw	r3,-8(fp)
 401dbd8:	00800084 	movi	r2,2
 401dbdc:	18800005 	stb	r2,0(r3)
        return;
 401dbe0:	00007506 	br	401ddb8 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 401dbe4:	008100b4 	movhi	r2,1026
 401dbe8:	109aa404 	addi	r2,r2,27280
 401dbec:	10800003 	ldbu	r2,0(r2)
 401dbf0:	10803fcc 	andi	r2,r2,255
 401dbf4:	1005003a 	cmpeq	r2,r2,zero
 401dbf8:	1000041e 	bne	r2,zero,401dc0c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 401dbfc:	e0fffe17 	ldw	r3,-8(fp)
 401dc00:	00800344 	movi	r2,13
 401dc04:	18800005 	stb	r2,0(r3)
        return;
 401dc08:	00006b06 	br	401ddb8 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401dc0c:	0005303a 	rdctl	r2,status
 401dc10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401dc14:	e0fffa17 	ldw	r3,-24(fp)
 401dc18:	00bfff84 	movi	r2,-2
 401dc1c:	1884703a 	and	r2,r3,r2
 401dc20:	1001703a 	wrctl	status,r2
  
  return context;
 401dc24:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 401dc28:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 401dc2c:	e0bffc17 	ldw	r2,-16(fp)
 401dc30:	1080020b 	ldhu	r2,8(r2)
 401dc34:	10bfffcc 	andi	r2,r2,65535
 401dc38:	1005003a 	cmpeq	r2,r2,zero
 401dc3c:	10000d1e 	bne	r2,zero,401dc74 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 401dc40:	e0bffc17 	ldw	r2,-16(fp)
 401dc44:	1080020b 	ldhu	r2,8(r2)
 401dc48:	10bfffc4 	addi	r2,r2,-1
 401dc4c:	1007883a 	mov	r3,r2
 401dc50:	e0bffc17 	ldw	r2,-16(fp)
 401dc54:	10c0020d 	sth	r3,8(r2)
 401dc58:	e0bffb17 	ldw	r2,-20(fp)
 401dc5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401dc60:	e0bff917 	ldw	r2,-28(fp)
 401dc64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 401dc68:	e0bffe17 	ldw	r2,-8(fp)
 401dc6c:	10000005 	stb	zero,0(r2)
        return;
 401dc70:	00005106 	br	401ddb8 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 401dc74:	008100b4 	movhi	r2,1026
 401dc78:	109ab304 	addi	r2,r2,27340
 401dc7c:	10c00017 	ldw	r3,0(r2)
 401dc80:	008100b4 	movhi	r2,1026
 401dc84:	109ab304 	addi	r2,r2,27340
 401dc88:	10800017 	ldw	r2,0(r2)
 401dc8c:	10800c03 	ldbu	r2,48(r2)
 401dc90:	10800054 	ori	r2,r2,1
 401dc94:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401dc98:	008100b4 	movhi	r2,1026
 401dc9c:	109ab304 	addi	r2,r2,27340
 401dca0:	10800017 	ldw	r2,0(r2)
 401dca4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 401dca8:	008100b4 	movhi	r2,1026
 401dcac:	109ab304 	addi	r2,r2,27340
 401dcb0:	10c00017 	ldw	r3,0(r2)
 401dcb4:	e0bffd0b 	ldhu	r2,-12(fp)
 401dcb8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 401dcbc:	e13ffc17 	ldw	r4,-16(fp)
 401dcc0:	40191400 	call	4019140 <OS_EventTaskWait>
 401dcc4:	e0bffb17 	ldw	r2,-20(fp)
 401dcc8:	e0bff815 	stw	r2,-32(fp)
 401dccc:	e0bff817 	ldw	r2,-32(fp)
 401dcd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 401dcd4:	40199ec0 	call	40199ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401dcd8:	0005303a 	rdctl	r2,status
 401dcdc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401dce0:	e0fff717 	ldw	r3,-36(fp)
 401dce4:	00bfff84 	movi	r2,-2
 401dce8:	1884703a 	and	r2,r3,r2
 401dcec:	1001703a 	wrctl	status,r2
  
  return context;
 401dcf0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 401dcf4:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 401dcf8:	008100b4 	movhi	r2,1026
 401dcfc:	109ab304 	addi	r2,r2,27340
 401dd00:	10800017 	ldw	r2,0(r2)
 401dd04:	10800c43 	ldbu	r2,49(r2)
 401dd08:	10803fcc 	andi	r2,r2,255
 401dd0c:	e0bfff15 	stw	r2,-4(fp)
 401dd10:	e0ffff17 	ldw	r3,-4(fp)
 401dd14:	1805003a 	cmpeq	r2,r3,zero
 401dd18:	1000041e 	bne	r2,zero,401dd2c <OSSemPend+0x1dc>
 401dd1c:	e0ffff17 	ldw	r3,-4(fp)
 401dd20:	188000a0 	cmpeqi	r2,r3,2
 401dd24:	1000041e 	bne	r2,zero,401dd38 <OSSemPend+0x1e8>
 401dd28:	00000706 	br	401dd48 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 401dd2c:	e0bffe17 	ldw	r2,-8(fp)
 401dd30:	10000005 	stb	zero,0(r2)
             break;
 401dd34:	00000c06 	br	401dd68 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 401dd38:	e0fffe17 	ldw	r3,-8(fp)
 401dd3c:	00800384 	movi	r2,14
 401dd40:	18800005 	stb	r2,0(r3)
             break;
 401dd44:	00000806 	br	401dd68 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 401dd48:	008100b4 	movhi	r2,1026
 401dd4c:	109ab304 	addi	r2,r2,27340
 401dd50:	11000017 	ldw	r4,0(r2)
 401dd54:	e17ffc17 	ldw	r5,-16(fp)
 401dd58:	40193a40 	call	40193a4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 401dd5c:	e0fffe17 	ldw	r3,-8(fp)
 401dd60:	00800284 	movi	r2,10
 401dd64:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 401dd68:	008100b4 	movhi	r2,1026
 401dd6c:	109ab304 	addi	r2,r2,27340
 401dd70:	10800017 	ldw	r2,0(r2)
 401dd74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 401dd78:	008100b4 	movhi	r2,1026
 401dd7c:	109ab304 	addi	r2,r2,27340
 401dd80:	10800017 	ldw	r2,0(r2)
 401dd84:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 401dd88:	008100b4 	movhi	r2,1026
 401dd8c:	109ab304 	addi	r2,r2,27340
 401dd90:	10800017 	ldw	r2,0(r2)
 401dd94:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 401dd98:	008100b4 	movhi	r2,1026
 401dd9c:	109ab304 	addi	r2,r2,27340
 401dda0:	10800017 	ldw	r2,0(r2)
 401dda4:	10000815 	stw	zero,32(r2)
 401dda8:	e0bffb17 	ldw	r2,-20(fp)
 401ddac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ddb0:	e0bff617 	ldw	r2,-40(fp)
 401ddb4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 401ddb8:	e037883a 	mov	sp,fp
 401ddbc:	dfc00117 	ldw	ra,4(sp)
 401ddc0:	df000017 	ldw	fp,0(sp)
 401ddc4:	dec00204 	addi	sp,sp,8
 401ddc8:	f800283a 	ret

0401ddcc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401ddcc:	defff504 	addi	sp,sp,-44
 401ddd0:	dfc00a15 	stw	ra,40(sp)
 401ddd4:	df000915 	stw	fp,36(sp)
 401ddd8:	df000904 	addi	fp,sp,36
 401dddc:	e13ffc15 	stw	r4,-16(fp)
 401dde0:	e1bffe15 	stw	r6,-8(fp)
 401dde4:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401dde8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401ddec:	e0bffe17 	ldw	r2,-8(fp)
 401ddf0:	1004c03a 	cmpne	r2,r2,zero
 401ddf4:	1000021e 	bne	r2,zero,401de00 <OSSemPendAbort+0x34>
        return (0);
 401ddf8:	e03fff15 	stw	zero,-4(fp)
 401ddfc:	00004c06 	br	401df30 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401de00:	e0bffc17 	ldw	r2,-16(fp)
 401de04:	1004c03a 	cmpne	r2,r2,zero
 401de08:	1000051e 	bne	r2,zero,401de20 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 401de0c:	e0fffe17 	ldw	r3,-8(fp)
 401de10:	00800104 	movi	r2,4
 401de14:	18800005 	stb	r2,0(r3)
        return (0);
 401de18:	e03fff15 	stw	zero,-4(fp)
 401de1c:	00004406 	br	401df30 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401de20:	e0bffc17 	ldw	r2,-16(fp)
 401de24:	10800003 	ldbu	r2,0(r2)
 401de28:	10803fcc 	andi	r2,r2,255
 401de2c:	108000e0 	cmpeqi	r2,r2,3
 401de30:	1000051e 	bne	r2,zero,401de48 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 401de34:	e0fffe17 	ldw	r3,-8(fp)
 401de38:	00800044 	movi	r2,1
 401de3c:	18800005 	stb	r2,0(r3)
        return (0);
 401de40:	e03fff15 	stw	zero,-4(fp)
 401de44:	00003a06 	br	401df30 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401de48:	0005303a 	rdctl	r2,status
 401de4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401de50:	e0fff917 	ldw	r3,-28(fp)
 401de54:	00bfff84 	movi	r2,-2
 401de58:	1884703a 	and	r2,r3,r2
 401de5c:	1001703a 	wrctl	status,r2
  
  return context;
 401de60:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401de64:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 401de68:	e0bffc17 	ldw	r2,-16(fp)
 401de6c:	10800283 	ldbu	r2,10(r2)
 401de70:	10803fcc 	andi	r2,r2,255
 401de74:	1005003a 	cmpeq	r2,r2,zero
 401de78:	1000261e 	bne	r2,zero,401df14 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 401de7c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 401de80:	e0bffd03 	ldbu	r2,-12(fp)
 401de84:	10800060 	cmpeqi	r2,r2,1
 401de88:	1000091e 	bne	r2,zero,401deb0 <OSSemPendAbort+0xe4>
 401de8c:	00000e06 	br	401dec8 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 401de90:	e13ffc17 	ldw	r4,-16(fp)
 401de94:	000b883a 	mov	r5,zero
 401de98:	01800044 	movi	r6,1
 401de9c:	01c00084 	movi	r7,2
 401dea0:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                     nbr_tasks++;
 401dea4:	e0bffb03 	ldbu	r2,-20(fp)
 401dea8:	10800044 	addi	r2,r2,1
 401deac:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 401deb0:	e0bffc17 	ldw	r2,-16(fp)
 401deb4:	10800283 	ldbu	r2,10(r2)
 401deb8:	10803fcc 	andi	r2,r2,255
 401debc:	1004c03a 	cmpne	r2,r2,zero
 401dec0:	103ff31e 	bne	r2,zero,401de90 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 401dec4:	00000806 	br	401dee8 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 401dec8:	e13ffc17 	ldw	r4,-16(fp)
 401decc:	000b883a 	mov	r5,zero
 401ded0:	01800044 	movi	r6,1
 401ded4:	01c00084 	movi	r7,2
 401ded8:	4018fac0 	call	4018fac <OS_EventTaskRdy>
                 nbr_tasks++;
 401dedc:	e0bffb03 	ldbu	r2,-20(fp)
 401dee0:	10800044 	addi	r2,r2,1
 401dee4:	e0bffb05 	stb	r2,-20(fp)
 401dee8:	e0bffa17 	ldw	r2,-24(fp)
 401deec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401def0:	e0bff817 	ldw	r2,-32(fp)
 401def4:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 401def8:	40199ec0 	call	40199ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 401defc:	e0fffe17 	ldw	r3,-8(fp)
 401df00:	00800384 	movi	r2,14
 401df04:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 401df08:	e0bffb03 	ldbu	r2,-20(fp)
 401df0c:	e0bfff15 	stw	r2,-4(fp)
 401df10:	00000706 	br	401df30 <OSSemPendAbort+0x164>
 401df14:	e0bffa17 	ldw	r2,-24(fp)
 401df18:	e0bff715 	stw	r2,-36(fp)
 401df1c:	e0bff717 	ldw	r2,-36(fp)
 401df20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401df24:	e0bffe17 	ldw	r2,-8(fp)
 401df28:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 401df2c:	e03fff15 	stw	zero,-4(fp)
 401df30:	e0bfff17 	ldw	r2,-4(fp)
}
 401df34:	e037883a 	mov	sp,fp
 401df38:	dfc00117 	ldw	ra,4(sp)
 401df3c:	df000017 	ldw	fp,0(sp)
 401df40:	dec00204 	addi	sp,sp,8
 401df44:	f800283a 	ret

0401df48 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 401df48:	defff704 	addi	sp,sp,-36
 401df4c:	dfc00815 	stw	ra,32(sp)
 401df50:	df000715 	stw	fp,28(sp)
 401df54:	df000704 	addi	fp,sp,28
 401df58:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401df5c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401df60:	e0bffe17 	ldw	r2,-8(fp)
 401df64:	1004c03a 	cmpne	r2,r2,zero
 401df68:	1000031e 	bne	r2,zero,401df78 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 401df6c:	00800104 	movi	r2,4
 401df70:	e0bfff15 	stw	r2,-4(fp)
 401df74:	00003806 	br	401e058 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401df78:	e0bffe17 	ldw	r2,-8(fp)
 401df7c:	10800003 	ldbu	r2,0(r2)
 401df80:	10803fcc 	andi	r2,r2,255
 401df84:	108000e0 	cmpeqi	r2,r2,3
 401df88:	1000031e 	bne	r2,zero,401df98 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 401df8c:	00800044 	movi	r2,1
 401df90:	e0bfff15 	stw	r2,-4(fp)
 401df94:	00003006 	br	401e058 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401df98:	0005303a 	rdctl	r2,status
 401df9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401dfa0:	e0fffc17 	ldw	r3,-16(fp)
 401dfa4:	00bfff84 	movi	r2,-2
 401dfa8:	1884703a 	and	r2,r3,r2
 401dfac:	1001703a 	wrctl	status,r2
  
  return context;
 401dfb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401dfb4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 401dfb8:	e0bffe17 	ldw	r2,-8(fp)
 401dfbc:	10800283 	ldbu	r2,10(r2)
 401dfc0:	10803fcc 	andi	r2,r2,255
 401dfc4:	1005003a 	cmpeq	r2,r2,zero
 401dfc8:	10000c1e 	bne	r2,zero,401dffc <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 401dfcc:	e13ffe17 	ldw	r4,-8(fp)
 401dfd0:	000b883a 	mov	r5,zero
 401dfd4:	01800044 	movi	r6,1
 401dfd8:	000f883a 	mov	r7,zero
 401dfdc:	4018fac0 	call	4018fac <OS_EventTaskRdy>
 401dfe0:	e0bffd17 	ldw	r2,-12(fp)
 401dfe4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401dfe8:	e0bffb17 	ldw	r2,-20(fp)
 401dfec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 401dff0:	40199ec0 	call	40199ec <OS_Sched>
        return (OS_ERR_NONE);
 401dff4:	e03fff15 	stw	zero,-4(fp)
 401dff8:	00001706 	br	401e058 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 401dffc:	e0bffe17 	ldw	r2,-8(fp)
 401e000:	1080020b 	ldhu	r2,8(r2)
 401e004:	10ffffcc 	andi	r3,r2,65535
 401e008:	00bfffd4 	movui	r2,65535
 401e00c:	18800c26 	beq	r3,r2,401e040 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 401e010:	e0bffe17 	ldw	r2,-8(fp)
 401e014:	1080020b 	ldhu	r2,8(r2)
 401e018:	10800044 	addi	r2,r2,1
 401e01c:	1007883a 	mov	r3,r2
 401e020:	e0bffe17 	ldw	r2,-8(fp)
 401e024:	10c0020d 	sth	r3,8(r2)
 401e028:	e0bffd17 	ldw	r2,-12(fp)
 401e02c:	e0bffa15 	stw	r2,-24(fp)
 401e030:	e0bffa17 	ldw	r2,-24(fp)
 401e034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 401e038:	e03fff15 	stw	zero,-4(fp)
 401e03c:	00000606 	br	401e058 <OSSemPost+0x110>
 401e040:	e0bffd17 	ldw	r2,-12(fp)
 401e044:	e0bff915 	stw	r2,-28(fp)
 401e048:	e0bff917 	ldw	r2,-28(fp)
 401e04c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 401e050:	00800c84 	movi	r2,50
 401e054:	e0bfff15 	stw	r2,-4(fp)
 401e058:	e0bfff17 	ldw	r2,-4(fp)
}
 401e05c:	e037883a 	mov	sp,fp
 401e060:	dfc00117 	ldw	ra,4(sp)
 401e064:	df000017 	ldw	fp,0(sp)
 401e068:	dec00204 	addi	sp,sp,8
 401e06c:	f800283a 	ret

0401e070 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 401e070:	defff604 	addi	sp,sp,-40
 401e074:	df000915 	stw	fp,36(sp)
 401e078:	df000904 	addi	fp,sp,36
 401e07c:	e13ffd15 	stw	r4,-12(fp)
 401e080:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401e084:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401e088:	e0bffd17 	ldw	r2,-12(fp)
 401e08c:	1004c03a 	cmpne	r2,r2,zero
 401e090:	1000031e 	bne	r2,zero,401e0a0 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 401e094:	00800104 	movi	r2,4
 401e098:	e0bfff15 	stw	r2,-4(fp)
 401e09c:	00003b06 	br	401e18c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 401e0a0:	e0bffe17 	ldw	r2,-8(fp)
 401e0a4:	1004c03a 	cmpne	r2,r2,zero
 401e0a8:	1000031e 	bne	r2,zero,401e0b8 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401e0ac:	00800244 	movi	r2,9
 401e0b0:	e0bfff15 	stw	r2,-4(fp)
 401e0b4:	00003506 	br	401e18c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 401e0b8:	e0bffd17 	ldw	r2,-12(fp)
 401e0bc:	10800003 	ldbu	r2,0(r2)
 401e0c0:	10803fcc 	andi	r2,r2,255
 401e0c4:	108000e0 	cmpeqi	r2,r2,3
 401e0c8:	1000031e 	bne	r2,zero,401e0d8 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 401e0cc:	00800044 	movi	r2,1
 401e0d0:	e0bfff15 	stw	r2,-4(fp)
 401e0d4:	00002d06 	br	401e18c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e0d8:	0005303a 	rdctl	r2,status
 401e0dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e0e0:	e0fff817 	ldw	r3,-32(fp)
 401e0e4:	00bfff84 	movi	r2,-2
 401e0e8:	1884703a 	and	r2,r3,r2
 401e0ec:	1001703a 	wrctl	status,r2
  
  return context;
 401e0f0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 401e0f4:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 401e0f8:	e0bffd17 	ldw	r2,-12(fp)
 401e0fc:	10c00283 	ldbu	r3,10(r2)
 401e100:	e0bffe17 	ldw	r2,-8(fp)
 401e104:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 401e108:	e0bffd17 	ldw	r2,-12(fp)
 401e10c:	108002c4 	addi	r2,r2,11
 401e110:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 401e114:	e0bffe17 	ldw	r2,-8(fp)
 401e118:	10800084 	addi	r2,r2,2
 401e11c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401e120:	e03ffa05 	stb	zero,-24(fp)
 401e124:	00000d06 	br	401e15c <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 401e128:	e0bffc17 	ldw	r2,-16(fp)
 401e12c:	10c00003 	ldbu	r3,0(r2)
 401e130:	e0bffb17 	ldw	r2,-20(fp)
 401e134:	10c00005 	stb	r3,0(r2)
 401e138:	e0bffb17 	ldw	r2,-20(fp)
 401e13c:	10800044 	addi	r2,r2,1
 401e140:	e0bffb15 	stw	r2,-20(fp)
 401e144:	e0bffc17 	ldw	r2,-16(fp)
 401e148:	10800044 	addi	r2,r2,1
 401e14c:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401e150:	e0bffa03 	ldbu	r2,-24(fp)
 401e154:	10800044 	addi	r2,r2,1
 401e158:	e0bffa05 	stb	r2,-24(fp)
 401e15c:	e0bffa03 	ldbu	r2,-24(fp)
 401e160:	108000f0 	cmpltui	r2,r2,3
 401e164:	103ff01e 	bne	r2,zero,401e128 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 401e168:	e0bffd17 	ldw	r2,-12(fp)
 401e16c:	10c0020b 	ldhu	r3,8(r2)
 401e170:	e0bffe17 	ldw	r2,-8(fp)
 401e174:	10c0000d 	sth	r3,0(r2)
 401e178:	e0bff917 	ldw	r2,-28(fp)
 401e17c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e180:	e0bff717 	ldw	r2,-36(fp)
 401e184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401e188:	e03fff15 	stw	zero,-4(fp)
 401e18c:	e0bfff17 	ldw	r2,-4(fp)
}
 401e190:	e037883a 	mov	sp,fp
 401e194:	df000017 	ldw	fp,0(sp)
 401e198:	dec00104 	addi	sp,sp,4
 401e19c:	f800283a 	ret

0401e1a0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 401e1a0:	defff904 	addi	sp,sp,-28
 401e1a4:	df000615 	stw	fp,24(sp)
 401e1a8:	df000604 	addi	fp,sp,24
 401e1ac:	e13ffd15 	stw	r4,-12(fp)
 401e1b0:	e1bfff15 	stw	r6,-4(fp)
 401e1b4:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401e1b8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401e1bc:	e0bfff17 	ldw	r2,-4(fp)
 401e1c0:	1005003a 	cmpeq	r2,r2,zero
 401e1c4:	1000331e 	bne	r2,zero,401e294 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401e1c8:	e0bffd17 	ldw	r2,-12(fp)
 401e1cc:	1004c03a 	cmpne	r2,r2,zero
 401e1d0:	1000041e 	bne	r2,zero,401e1e4 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 401e1d4:	e0ffff17 	ldw	r3,-4(fp)
 401e1d8:	00800104 	movi	r2,4
 401e1dc:	18800005 	stb	r2,0(r3)
        return;
 401e1e0:	00002c06 	br	401e294 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 401e1e4:	e0bffd17 	ldw	r2,-12(fp)
 401e1e8:	10800003 	ldbu	r2,0(r2)
 401e1ec:	10803fcc 	andi	r2,r2,255
 401e1f0:	108000e0 	cmpeqi	r2,r2,3
 401e1f4:	1000041e 	bne	r2,zero,401e208 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 401e1f8:	e0ffff17 	ldw	r3,-4(fp)
 401e1fc:	00800044 	movi	r2,1
 401e200:	18800005 	stb	r2,0(r3)
        return;
 401e204:	00002306 	br	401e294 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e208:	0005303a 	rdctl	r2,status
 401e20c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e210:	e0fffb17 	ldw	r3,-20(fp)
 401e214:	00bfff84 	movi	r2,-2
 401e218:	1884703a 	and	r2,r3,r2
 401e21c:	1001703a 	wrctl	status,r2
  
  return context;
 401e220:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 401e224:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 401e228:	e0bfff17 	ldw	r2,-4(fp)
 401e22c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 401e230:	e0bffd17 	ldw	r2,-12(fp)
 401e234:	1080020b 	ldhu	r2,8(r2)
 401e238:	10bfffcc 	andi	r2,r2,65535
 401e23c:	1005003a 	cmpeq	r2,r2,zero
 401e240:	1000041e 	bne	r2,zero,401e254 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 401e244:	e0fffd17 	ldw	r3,-12(fp)
 401e248:	e0bffe0b 	ldhu	r2,-8(fp)
 401e24c:	1880020d 	sth	r2,8(r3)
 401e250:	00000c06 	br	401e284 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 401e254:	e0bffd17 	ldw	r2,-12(fp)
 401e258:	10800283 	ldbu	r2,10(r2)
 401e25c:	10803fcc 	andi	r2,r2,255
 401e260:	1004c03a 	cmpne	r2,r2,zero
 401e264:	1000041e 	bne	r2,zero,401e278 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 401e268:	e0fffd17 	ldw	r3,-12(fp)
 401e26c:	e0bffe0b 	ldhu	r2,-8(fp)
 401e270:	1880020d 	sth	r2,8(r3)
 401e274:	00000306 	br	401e284 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 401e278:	e0ffff17 	ldw	r3,-4(fp)
 401e27c:	00801244 	movi	r2,73
 401e280:	18800005 	stb	r2,0(r3)
 401e284:	e0bffc17 	ldw	r2,-16(fp)
 401e288:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e28c:	e0bffa17 	ldw	r2,-24(fp)
 401e290:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 401e294:	e037883a 	mov	sp,fp
 401e298:	df000017 	ldw	fp,0(sp)
 401e29c:	dec00104 	addi	sp,sp,4
 401e2a0:	f800283a 	ret

0401e2a4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 401e2a4:	defff004 	addi	sp,sp,-64
 401e2a8:	dfc00f15 	stw	ra,60(sp)
 401e2ac:	df000e15 	stw	fp,56(sp)
 401e2b0:	df000e04 	addi	fp,sp,56
 401e2b4:	e13ffd05 	stb	r4,-12(fp)
 401e2b8:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 401e2bc:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 401e2c0:	e0bffd03 	ldbu	r2,-12(fp)
 401e2c4:	10800530 	cmpltui	r2,r2,20
 401e2c8:	1000061e 	bne	r2,zero,401e2e4 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 401e2cc:	e0bffd03 	ldbu	r2,-12(fp)
 401e2d0:	10803fe0 	cmpeqi	r2,r2,255
 401e2d4:	1000031e 	bne	r2,zero,401e2e4 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 401e2d8:	00800a84 	movi	r2,42
 401e2dc:	e0bfff15 	stw	r2,-4(fp)
 401e2e0:	00014706 	br	401e800 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 401e2e4:	e0bffe03 	ldbu	r2,-8(fp)
 401e2e8:	10800530 	cmpltui	r2,r2,20
 401e2ec:	1000031e 	bne	r2,zero,401e2fc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 401e2f0:	00800a84 	movi	r2,42
 401e2f4:	e0bfff15 	stw	r2,-4(fp)
 401e2f8:	00014106 	br	401e800 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e2fc:	0005303a 	rdctl	r2,status
 401e300:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e304:	e0fff617 	ldw	r3,-40(fp)
 401e308:	00bfff84 	movi	r2,-2
 401e30c:	1884703a 	and	r2,r3,r2
 401e310:	1001703a 	wrctl	status,r2
  
  return context;
 401e314:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401e318:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 401e31c:	e0bffe03 	ldbu	r2,-8(fp)
 401e320:	00c100f4 	movhi	r3,1027
 401e324:	18d76004 	addi	r3,r3,23936
 401e328:	1085883a 	add	r2,r2,r2
 401e32c:	1085883a 	add	r2,r2,r2
 401e330:	10c5883a 	add	r2,r2,r3
 401e334:	10800017 	ldw	r2,0(r2)
 401e338:	1005003a 	cmpeq	r2,r2,zero
 401e33c:	1000071e 	bne	r2,zero,401e35c <OSTaskChangePrio+0xb8>
 401e340:	e0bff717 	ldw	r2,-36(fp)
 401e344:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e348:	e0bff517 	ldw	r2,-44(fp)
 401e34c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 401e350:	00800a04 	movi	r2,40
 401e354:	e0bfff15 	stw	r2,-4(fp)
 401e358:	00012906 	br	401e800 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 401e35c:	e0bffd03 	ldbu	r2,-12(fp)
 401e360:	10803fd8 	cmpnei	r2,r2,255
 401e364:	1000051e 	bne	r2,zero,401e37c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 401e368:	008100b4 	movhi	r2,1026
 401e36c:	109ab304 	addi	r2,r2,27340
 401e370:	10800017 	ldw	r2,0(r2)
 401e374:	10800c83 	ldbu	r2,50(r2)
 401e378:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 401e37c:	e0bffd03 	ldbu	r2,-12(fp)
 401e380:	00c100f4 	movhi	r3,1027
 401e384:	18d76004 	addi	r3,r3,23936
 401e388:	1085883a 	add	r2,r2,r2
 401e38c:	1085883a 	add	r2,r2,r2
 401e390:	10c5883a 	add	r2,r2,r3
 401e394:	10800017 	ldw	r2,0(r2)
 401e398:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 401e39c:	e0bffa17 	ldw	r2,-24(fp)
 401e3a0:	1004c03a 	cmpne	r2,r2,zero
 401e3a4:	1000071e 	bne	r2,zero,401e3c4 <OSTaskChangePrio+0x120>
 401e3a8:	e0bff717 	ldw	r2,-36(fp)
 401e3ac:	e0bff415 	stw	r2,-48(fp)
 401e3b0:	e0bff417 	ldw	r2,-48(fp)
 401e3b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 401e3b8:	00800a44 	movi	r2,41
 401e3bc:	e0bfff15 	stw	r2,-4(fp)
 401e3c0:	00010f06 	br	401e800 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 401e3c4:	e0bffa17 	ldw	r2,-24(fp)
 401e3c8:	10800058 	cmpnei	r2,r2,1
 401e3cc:	1000071e 	bne	r2,zero,401e3ec <OSTaskChangePrio+0x148>
 401e3d0:	e0bff717 	ldw	r2,-36(fp)
 401e3d4:	e0bff315 	stw	r2,-52(fp)
 401e3d8:	e0bff317 	ldw	r2,-52(fp)
 401e3dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 401e3e0:	008010c4 	movi	r2,67
 401e3e4:	e0bfff15 	stw	r2,-4(fp)
 401e3e8:	00010506 	br	401e800 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 401e3ec:	e0bffe03 	ldbu	r2,-8(fp)
 401e3f0:	1004d0fa 	srli	r2,r2,3
 401e3f4:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 401e3f8:	e0bffe03 	ldbu	r2,-8(fp)
 401e3fc:	108001cc 	andi	r2,r2,7
 401e400:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 401e404:	e0fff983 	ldbu	r3,-26(fp)
 401e408:	00800044 	movi	r2,1
 401e40c:	10c4983a 	sll	r2,r2,r3
 401e410:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 401e414:	e0fff943 	ldbu	r3,-27(fp)
 401e418:	00800044 	movi	r2,1
 401e41c:	10c4983a 	sll	r2,r2,r3
 401e420:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 401e424:	e0bffd03 	ldbu	r2,-12(fp)
 401e428:	00c100f4 	movhi	r3,1027
 401e42c:	18d76004 	addi	r3,r3,23936
 401e430:	1085883a 	add	r2,r2,r2
 401e434:	1085883a 	add	r2,r2,r2
 401e438:	10c5883a 	add	r2,r2,r3
 401e43c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 401e440:	e0bffe03 	ldbu	r2,-8(fp)
 401e444:	00c100f4 	movhi	r3,1027
 401e448:	18d76004 	addi	r3,r3,23936
 401e44c:	1085883a 	add	r2,r2,r2
 401e450:	1085883a 	add	r2,r2,r2
 401e454:	10c7883a 	add	r3,r2,r3
 401e458:	e0bffa17 	ldw	r2,-24(fp)
 401e45c:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 401e460:	e0bffa17 	ldw	r2,-24(fp)
 401e464:	10800d03 	ldbu	r2,52(r2)
 401e468:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 401e46c:	e0bffa17 	ldw	r2,-24(fp)
 401e470:	10800d83 	ldbu	r2,54(r2)
 401e474:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 401e478:	e0bffa17 	ldw	r2,-24(fp)
 401e47c:	10800d43 	ldbu	r2,53(r2)
 401e480:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 401e484:	e0fff903 	ldbu	r3,-28(fp)
 401e488:	008100b4 	movhi	r2,1026
 401e48c:	109ab044 	addi	r2,r2,27329
 401e490:	10c5883a 	add	r2,r2,r3
 401e494:	10c00003 	ldbu	r3,0(r2)
 401e498:	e0bff803 	ldbu	r2,-32(fp)
 401e49c:	1884703a 	and	r2,r3,r2
 401e4a0:	10803fcc 	andi	r2,r2,255
 401e4a4:	1005003a 	cmpeq	r2,r2,zero
 401e4a8:	1000381e 	bne	r2,zero,401e58c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 401e4ac:	e13ff903 	ldbu	r4,-28(fp)
 401e4b0:	e0fff903 	ldbu	r3,-28(fp)
 401e4b4:	008100b4 	movhi	r2,1026
 401e4b8:	109ab044 	addi	r2,r2,27329
 401e4bc:	10c5883a 	add	r2,r2,r3
 401e4c0:	10800003 	ldbu	r2,0(r2)
 401e4c4:	1007883a 	mov	r3,r2
 401e4c8:	e0bff803 	ldbu	r2,-32(fp)
 401e4cc:	0084303a 	nor	r2,zero,r2
 401e4d0:	1884703a 	and	r2,r3,r2
 401e4d4:	1007883a 	mov	r3,r2
 401e4d8:	008100b4 	movhi	r2,1026
 401e4dc:	109ab044 	addi	r2,r2,27329
 401e4e0:	1105883a 	add	r2,r2,r4
 401e4e4:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 401e4e8:	e0fff903 	ldbu	r3,-28(fp)
 401e4ec:	008100b4 	movhi	r2,1026
 401e4f0:	109ab044 	addi	r2,r2,27329
 401e4f4:	10c5883a 	add	r2,r2,r3
 401e4f8:	10800003 	ldbu	r2,0(r2)
 401e4fc:	10803fcc 	andi	r2,r2,255
 401e500:	1004c03a 	cmpne	r2,r2,zero
 401e504:	10000b1e 	bne	r2,zero,401e534 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 401e508:	e0bff843 	ldbu	r2,-31(fp)
 401e50c:	0084303a 	nor	r2,zero,r2
 401e510:	1007883a 	mov	r3,r2
 401e514:	008100b4 	movhi	r2,1026
 401e518:	109ab004 	addi	r2,r2,27328
 401e51c:	10800003 	ldbu	r2,0(r2)
 401e520:	1884703a 	and	r2,r3,r2
 401e524:	1007883a 	mov	r3,r2
 401e528:	008100b4 	movhi	r2,1026
 401e52c:	109ab004 	addi	r2,r2,27328
 401e530:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 401e534:	008100b4 	movhi	r2,1026
 401e538:	109ab004 	addi	r2,r2,27328
 401e53c:	10c00003 	ldbu	r3,0(r2)
 401e540:	e0bff8c3 	ldbu	r2,-29(fp)
 401e544:	1884b03a 	or	r2,r3,r2
 401e548:	1007883a 	mov	r3,r2
 401e54c:	008100b4 	movhi	r2,1026
 401e550:	109ab004 	addi	r2,r2,27328
 401e554:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 401e558:	e13ff983 	ldbu	r4,-26(fp)
 401e55c:	e0fff983 	ldbu	r3,-26(fp)
 401e560:	008100b4 	movhi	r2,1026
 401e564:	109ab044 	addi	r2,r2,27329
 401e568:	10c5883a 	add	r2,r2,r3
 401e56c:	10c00003 	ldbu	r3,0(r2)
 401e570:	e0bff883 	ldbu	r2,-30(fp)
 401e574:	1884b03a 	or	r2,r3,r2
 401e578:	1007883a 	mov	r3,r2
 401e57c:	008100b4 	movhi	r2,1026
 401e580:	109ab044 	addi	r2,r2,27329
 401e584:	1105883a 	add	r2,r2,r4
 401e588:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 401e58c:	e0bffa17 	ldw	r2,-24(fp)
 401e590:	10800717 	ldw	r2,28(r2)
 401e594:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 401e598:	e0bffc17 	ldw	r2,-16(fp)
 401e59c:	1005003a 	cmpeq	r2,r2,zero
 401e5a0:	1000341e 	bne	r2,zero,401e674 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 401e5a4:	e13ff903 	ldbu	r4,-28(fp)
 401e5a8:	e0fff903 	ldbu	r3,-28(fp)
 401e5ac:	e0bffc17 	ldw	r2,-16(fp)
 401e5b0:	1885883a 	add	r2,r3,r2
 401e5b4:	10800204 	addi	r2,r2,8
 401e5b8:	108000c3 	ldbu	r2,3(r2)
 401e5bc:	1007883a 	mov	r3,r2
 401e5c0:	e0bff803 	ldbu	r2,-32(fp)
 401e5c4:	0084303a 	nor	r2,zero,r2
 401e5c8:	1884703a 	and	r2,r3,r2
 401e5cc:	1007883a 	mov	r3,r2
 401e5d0:	e0bffc17 	ldw	r2,-16(fp)
 401e5d4:	2085883a 	add	r2,r4,r2
 401e5d8:	10800204 	addi	r2,r2,8
 401e5dc:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 401e5e0:	e0fff903 	ldbu	r3,-28(fp)
 401e5e4:	e0bffc17 	ldw	r2,-16(fp)
 401e5e8:	1885883a 	add	r2,r3,r2
 401e5ec:	10800204 	addi	r2,r2,8
 401e5f0:	108000c3 	ldbu	r2,3(r2)
 401e5f4:	10803fcc 	andi	r2,r2,255
 401e5f8:	1004c03a 	cmpne	r2,r2,zero
 401e5fc:	1000091e 	bne	r2,zero,401e624 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 401e600:	e0bffc17 	ldw	r2,-16(fp)
 401e604:	10800283 	ldbu	r2,10(r2)
 401e608:	1007883a 	mov	r3,r2
 401e60c:	e0bff843 	ldbu	r2,-31(fp)
 401e610:	0084303a 	nor	r2,zero,r2
 401e614:	1884703a 	and	r2,r3,r2
 401e618:	1007883a 	mov	r3,r2
 401e61c:	e0bffc17 	ldw	r2,-16(fp)
 401e620:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 401e624:	e0bffc17 	ldw	r2,-16(fp)
 401e628:	10c00283 	ldbu	r3,10(r2)
 401e62c:	e0bff8c3 	ldbu	r2,-29(fp)
 401e630:	1884b03a 	or	r2,r3,r2
 401e634:	1007883a 	mov	r3,r2
 401e638:	e0bffc17 	ldw	r2,-16(fp)
 401e63c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 401e640:	e13ff983 	ldbu	r4,-26(fp)
 401e644:	e0fff983 	ldbu	r3,-26(fp)
 401e648:	e0bffc17 	ldw	r2,-16(fp)
 401e64c:	1885883a 	add	r2,r3,r2
 401e650:	10800204 	addi	r2,r2,8
 401e654:	10c000c3 	ldbu	r3,3(r2)
 401e658:	e0bff883 	ldbu	r2,-30(fp)
 401e65c:	1884b03a 	or	r2,r3,r2
 401e660:	1007883a 	mov	r3,r2
 401e664:	e0bffc17 	ldw	r2,-16(fp)
 401e668:	2085883a 	add	r2,r4,r2
 401e66c:	10800204 	addi	r2,r2,8
 401e670:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 401e674:	e0bffa17 	ldw	r2,-24(fp)
 401e678:	10800817 	ldw	r2,32(r2)
 401e67c:	1005003a 	cmpeq	r2,r2,zero
 401e680:	1000441e 	bne	r2,zero,401e794 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 401e684:	e0bffa17 	ldw	r2,-24(fp)
 401e688:	10800817 	ldw	r2,32(r2)
 401e68c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 401e690:	e0bffb17 	ldw	r2,-20(fp)
 401e694:	10800017 	ldw	r2,0(r2)
 401e698:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 401e69c:	00003a06 	br	401e788 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 401e6a0:	e13ff903 	ldbu	r4,-28(fp)
 401e6a4:	e0fff903 	ldbu	r3,-28(fp)
 401e6a8:	e0bffc17 	ldw	r2,-16(fp)
 401e6ac:	1885883a 	add	r2,r3,r2
 401e6b0:	10800204 	addi	r2,r2,8
 401e6b4:	108000c3 	ldbu	r2,3(r2)
 401e6b8:	1007883a 	mov	r3,r2
 401e6bc:	e0bff803 	ldbu	r2,-32(fp)
 401e6c0:	0084303a 	nor	r2,zero,r2
 401e6c4:	1884703a 	and	r2,r3,r2
 401e6c8:	1007883a 	mov	r3,r2
 401e6cc:	e0bffc17 	ldw	r2,-16(fp)
 401e6d0:	2085883a 	add	r2,r4,r2
 401e6d4:	10800204 	addi	r2,r2,8
 401e6d8:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 401e6dc:	e0fff903 	ldbu	r3,-28(fp)
 401e6e0:	e0bffc17 	ldw	r2,-16(fp)
 401e6e4:	1885883a 	add	r2,r3,r2
 401e6e8:	10800204 	addi	r2,r2,8
 401e6ec:	108000c3 	ldbu	r2,3(r2)
 401e6f0:	10803fcc 	andi	r2,r2,255
 401e6f4:	1004c03a 	cmpne	r2,r2,zero
 401e6f8:	1000091e 	bne	r2,zero,401e720 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 401e6fc:	e0bffc17 	ldw	r2,-16(fp)
 401e700:	10800283 	ldbu	r2,10(r2)
 401e704:	1007883a 	mov	r3,r2
 401e708:	e0bff843 	ldbu	r2,-31(fp)
 401e70c:	0084303a 	nor	r2,zero,r2
 401e710:	1884703a 	and	r2,r3,r2
 401e714:	1007883a 	mov	r3,r2
 401e718:	e0bffc17 	ldw	r2,-16(fp)
 401e71c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 401e720:	e0bffc17 	ldw	r2,-16(fp)
 401e724:	10c00283 	ldbu	r3,10(r2)
 401e728:	e0bff8c3 	ldbu	r2,-29(fp)
 401e72c:	1884b03a 	or	r2,r3,r2
 401e730:	1007883a 	mov	r3,r2
 401e734:	e0bffc17 	ldw	r2,-16(fp)
 401e738:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 401e73c:	e13ff983 	ldbu	r4,-26(fp)
 401e740:	e0fff983 	ldbu	r3,-26(fp)
 401e744:	e0bffc17 	ldw	r2,-16(fp)
 401e748:	1885883a 	add	r2,r3,r2
 401e74c:	10800204 	addi	r2,r2,8
 401e750:	10c000c3 	ldbu	r3,3(r2)
 401e754:	e0bff883 	ldbu	r2,-30(fp)
 401e758:	1884b03a 	or	r2,r3,r2
 401e75c:	1007883a 	mov	r3,r2
 401e760:	e0bffc17 	ldw	r2,-16(fp)
 401e764:	2085883a 	add	r2,r4,r2
 401e768:	10800204 	addi	r2,r2,8
 401e76c:	10c000c5 	stb	r3,3(r2)
            pevents++;
 401e770:	e0bffb17 	ldw	r2,-20(fp)
 401e774:	10800104 	addi	r2,r2,4
 401e778:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 401e77c:	e0bffb17 	ldw	r2,-20(fp)
 401e780:	10800017 	ldw	r2,0(r2)
 401e784:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 401e788:	e0bffc17 	ldw	r2,-16(fp)
 401e78c:	1004c03a 	cmpne	r2,r2,zero
 401e790:	103fc31e 	bne	r2,zero,401e6a0 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 401e794:	e0fffa17 	ldw	r3,-24(fp)
 401e798:	e0bffe03 	ldbu	r2,-8(fp)
 401e79c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 401e7a0:	e0fffa17 	ldw	r3,-24(fp)
 401e7a4:	e0bff983 	ldbu	r2,-26(fp)
 401e7a8:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 401e7ac:	e0fffa17 	ldw	r3,-24(fp)
 401e7b0:	e0bff943 	ldbu	r2,-27(fp)
 401e7b4:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 401e7b8:	e0fffa17 	ldw	r3,-24(fp)
 401e7bc:	e0bff8c3 	ldbu	r2,-29(fp)
 401e7c0:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 401e7c4:	e0fffa17 	ldw	r3,-24(fp)
 401e7c8:	e0bff883 	ldbu	r2,-30(fp)
 401e7cc:	18800d45 	stb	r2,53(r3)
 401e7d0:	e0bff717 	ldw	r2,-36(fp)
 401e7d4:	e0bff215 	stw	r2,-56(fp)
 401e7d8:	e0bff217 	ldw	r2,-56(fp)
 401e7dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 401e7e0:	008100b4 	movhi	r2,1026
 401e7e4:	109aa444 	addi	r2,r2,27281
 401e7e8:	10800003 	ldbu	r2,0(r2)
 401e7ec:	10803fcc 	andi	r2,r2,255
 401e7f0:	10800058 	cmpnei	r2,r2,1
 401e7f4:	1000011e 	bne	r2,zero,401e7fc <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 401e7f8:	40199ec0 	call	40199ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 401e7fc:	e03fff15 	stw	zero,-4(fp)
 401e800:	e0bfff17 	ldw	r2,-4(fp)
}
 401e804:	e037883a 	mov	sp,fp
 401e808:	dfc00117 	ldw	ra,4(sp)
 401e80c:	df000017 	ldw	fp,0(sp)
 401e810:	dec00204 	addi	sp,sp,8
 401e814:	f800283a 	ret

0401e818 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 401e818:	deffed04 	addi	sp,sp,-76
 401e81c:	dfc01215 	stw	ra,72(sp)
 401e820:	df001115 	stw	fp,68(sp)
 401e824:	df001104 	addi	fp,sp,68
 401e828:	e13ffb15 	stw	r4,-20(fp)
 401e82c:	e17ffc15 	stw	r5,-16(fp)
 401e830:	e1bffd15 	stw	r6,-12(fp)
 401e834:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 401e838:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 401e83c:	e0bffe03 	ldbu	r2,-8(fp)
 401e840:	10800570 	cmpltui	r2,r2,21
 401e844:	1000031e 	bne	r2,zero,401e854 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 401e848:	00800a84 	movi	r2,42
 401e84c:	e0bfff15 	stw	r2,-4(fp)
 401e850:	00006006 	br	401e9d4 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e854:	0005303a 	rdctl	r2,status
 401e858:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e85c:	e0fff717 	ldw	r3,-36(fp)
 401e860:	00bfff84 	movi	r2,-2
 401e864:	1884703a 	and	r2,r3,r2
 401e868:	1001703a 	wrctl	status,r2
  
  return context;
 401e86c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401e870:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 401e874:	008100b4 	movhi	r2,1026
 401e878:	109ab204 	addi	r2,r2,27336
 401e87c:	10800003 	ldbu	r2,0(r2)
 401e880:	10803fcc 	andi	r2,r2,255
 401e884:	1005003a 	cmpeq	r2,r2,zero
 401e888:	1000071e 	bne	r2,zero,401e8a8 <OSTaskCreate+0x90>
 401e88c:	e0bff817 	ldw	r2,-32(fp)
 401e890:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e894:	e0bff617 	ldw	r2,-40(fp)
 401e898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 401e89c:	00800f04 	movi	r2,60
 401e8a0:	e0bfff15 	stw	r2,-4(fp)
 401e8a4:	00004b06 	br	401e9d4 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 401e8a8:	e0bffe03 	ldbu	r2,-8(fp)
 401e8ac:	00c100f4 	movhi	r3,1027
 401e8b0:	18d76004 	addi	r3,r3,23936
 401e8b4:	1085883a 	add	r2,r2,r2
 401e8b8:	1085883a 	add	r2,r2,r2
 401e8bc:	10c5883a 	add	r2,r2,r3
 401e8c0:	10800017 	ldw	r2,0(r2)
 401e8c4:	1004c03a 	cmpne	r2,r2,zero
 401e8c8:	10003c1e 	bne	r2,zero,401e9bc <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401e8cc:	e0bffe03 	ldbu	r2,-8(fp)
 401e8d0:	00c100f4 	movhi	r3,1027
 401e8d4:	18d76004 	addi	r3,r3,23936
 401e8d8:	1085883a 	add	r2,r2,r2
 401e8dc:	1085883a 	add	r2,r2,r2
 401e8e0:	10c7883a 	add	r3,r2,r3
 401e8e4:	00800044 	movi	r2,1
 401e8e8:	18800015 	stw	r2,0(r3)
 401e8ec:	e0bff817 	ldw	r2,-32(fp)
 401e8f0:	e0bff515 	stw	r2,-44(fp)
 401e8f4:	e0bff517 	ldw	r2,-44(fp)
 401e8f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 401e8fc:	e13ffb17 	ldw	r4,-20(fp)
 401e900:	e17ffc17 	ldw	r5,-16(fp)
 401e904:	e1bffd17 	ldw	r6,-12(fp)
 401e908:	000f883a 	mov	r7,zero
 401e90c:	4022f8c0 	call	4022f8c <OSTaskStkInit>
 401e910:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 401e914:	e13ffe03 	ldbu	r4,-8(fp)
 401e918:	d8000015 	stw	zero,0(sp)
 401e91c:	d8000115 	stw	zero,4(sp)
 401e920:	d8000215 	stw	zero,8(sp)
 401e924:	e17ffa17 	ldw	r5,-24(fp)
 401e928:	000d883a 	mov	r6,zero
 401e92c:	000f883a 	mov	r7,zero
 401e930:	4019df40 	call	4019df4 <OS_TCBInit>
 401e934:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 401e938:	e0bff903 	ldbu	r2,-28(fp)
 401e93c:	1004c03a 	cmpne	r2,r2,zero
 401e940:	1000081e 	bne	r2,zero,401e964 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 401e944:	008100b4 	movhi	r2,1026
 401e948:	109aa444 	addi	r2,r2,27281
 401e94c:	10800003 	ldbu	r2,0(r2)
 401e950:	10803fcc 	andi	r2,r2,255
 401e954:	10800058 	cmpnei	r2,r2,1
 401e958:	1000151e 	bne	r2,zero,401e9b0 <OSTaskCreate+0x198>
                OS_Sched();
 401e95c:	40199ec0 	call	40199ec <OS_Sched>
 401e960:	00001306 	br	401e9b0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e964:	0005303a 	rdctl	r2,status
 401e968:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e96c:	e0fff417 	ldw	r3,-48(fp)
 401e970:	00bfff84 	movi	r2,-2
 401e974:	1884703a 	and	r2,r3,r2
 401e978:	1001703a 	wrctl	status,r2
  
  return context;
 401e97c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 401e980:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 401e984:	e0bffe03 	ldbu	r2,-8(fp)
 401e988:	00c100f4 	movhi	r3,1027
 401e98c:	18d76004 	addi	r3,r3,23936
 401e990:	1085883a 	add	r2,r2,r2
 401e994:	1085883a 	add	r2,r2,r2
 401e998:	10c5883a 	add	r2,r2,r3
 401e99c:	10000015 	stw	zero,0(r2)
 401e9a0:	e0bff817 	ldw	r2,-32(fp)
 401e9a4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e9a8:	e0bff317 	ldw	r2,-52(fp)
 401e9ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 401e9b0:	e0bff903 	ldbu	r2,-28(fp)
 401e9b4:	e0bfff15 	stw	r2,-4(fp)
 401e9b8:	00000606 	br	401e9d4 <OSTaskCreate+0x1bc>
 401e9bc:	e0bff817 	ldw	r2,-32(fp)
 401e9c0:	e0bff215 	stw	r2,-56(fp)
 401e9c4:	e0bff217 	ldw	r2,-56(fp)
 401e9c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 401e9cc:	00800a04 	movi	r2,40
 401e9d0:	e0bfff15 	stw	r2,-4(fp)
 401e9d4:	e0bfff17 	ldw	r2,-4(fp)
}
 401e9d8:	e037883a 	mov	sp,fp
 401e9dc:	dfc00117 	ldw	ra,4(sp)
 401e9e0:	df000017 	ldw	fp,0(sp)
 401e9e4:	dec00204 	addi	sp,sp,8
 401e9e8:	f800283a 	ret

0401e9ec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 401e9ec:	deffeb04 	addi	sp,sp,-84
 401e9f0:	dfc01415 	stw	ra,80(sp)
 401e9f4:	df001315 	stw	fp,76(sp)
 401e9f8:	df001304 	addi	fp,sp,76
 401e9fc:	e13ff915 	stw	r4,-28(fp)
 401ea00:	e17ffa15 	stw	r5,-24(fp)
 401ea04:	e1bffb15 	stw	r6,-20(fp)
 401ea08:	e0800217 	ldw	r2,8(fp)
 401ea0c:	e0c00617 	ldw	r3,24(fp)
 401ea10:	e1fffc05 	stb	r7,-16(fp)
 401ea14:	e0bffd0d 	sth	r2,-12(fp)
 401ea18:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 401ea1c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 401ea20:	e0bffc03 	ldbu	r2,-16(fp)
 401ea24:	10800570 	cmpltui	r2,r2,21
 401ea28:	1000031e 	bne	r2,zero,401ea38 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 401ea2c:	00800a84 	movi	r2,42
 401ea30:	e0bfff15 	stw	r2,-4(fp)
 401ea34:	00006706 	br	401ebd4 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ea38:	0005303a 	rdctl	r2,status
 401ea3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ea40:	e0fff517 	ldw	r3,-44(fp)
 401ea44:	00bfff84 	movi	r2,-2
 401ea48:	1884703a 	and	r2,r3,r2
 401ea4c:	1001703a 	wrctl	status,r2
  
  return context;
 401ea50:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401ea54:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 401ea58:	008100b4 	movhi	r2,1026
 401ea5c:	109ab204 	addi	r2,r2,27336
 401ea60:	10800003 	ldbu	r2,0(r2)
 401ea64:	10803fcc 	andi	r2,r2,255
 401ea68:	1005003a 	cmpeq	r2,r2,zero
 401ea6c:	1000071e 	bne	r2,zero,401ea8c <OSTaskCreateExt+0xa0>
 401ea70:	e0bff617 	ldw	r2,-40(fp)
 401ea74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ea78:	e0bff417 	ldw	r2,-48(fp)
 401ea7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 401ea80:	00800f04 	movi	r2,60
 401ea84:	e0bfff15 	stw	r2,-4(fp)
 401ea88:	00005206 	br	401ebd4 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 401ea8c:	e0bffc03 	ldbu	r2,-16(fp)
 401ea90:	00c100f4 	movhi	r3,1027
 401ea94:	18d76004 	addi	r3,r3,23936
 401ea98:	1085883a 	add	r2,r2,r2
 401ea9c:	1085883a 	add	r2,r2,r2
 401eaa0:	10c5883a 	add	r2,r2,r3
 401eaa4:	10800017 	ldw	r2,0(r2)
 401eaa8:	1004c03a 	cmpne	r2,r2,zero
 401eaac:	1000431e 	bne	r2,zero,401ebbc <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401eab0:	e0bffc03 	ldbu	r2,-16(fp)
 401eab4:	00c100f4 	movhi	r3,1027
 401eab8:	18d76004 	addi	r3,r3,23936
 401eabc:	1085883a 	add	r2,r2,r2
 401eac0:	1085883a 	add	r2,r2,r2
 401eac4:	10c7883a 	add	r3,r2,r3
 401eac8:	00800044 	movi	r2,1
 401eacc:	18800015 	stw	r2,0(r3)
 401ead0:	e0bff617 	ldw	r2,-40(fp)
 401ead4:	e0bff315 	stw	r2,-52(fp)
 401ead8:	e0bff317 	ldw	r2,-52(fp)
 401eadc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 401eae0:	e1bffe0b 	ldhu	r6,-8(fp)
 401eae4:	e1000317 	ldw	r4,12(fp)
 401eae8:	e1400417 	ldw	r5,16(fp)
 401eaec:	401fc680 	call	401fc68 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 401eaf0:	e1fffe0b 	ldhu	r7,-8(fp)
 401eaf4:	e13ff917 	ldw	r4,-28(fp)
 401eaf8:	e17ffa17 	ldw	r5,-24(fp)
 401eafc:	e1bffb17 	ldw	r6,-20(fp)
 401eb00:	4022f8c0 	call	4022f8c <OSTaskStkInit>
 401eb04:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 401eb08:	e13ffc03 	ldbu	r4,-16(fp)
 401eb0c:	e1fffd0b 	ldhu	r7,-12(fp)
 401eb10:	e0fffe0b 	ldhu	r3,-8(fp)
 401eb14:	e0800417 	ldw	r2,16(fp)
 401eb18:	d8800015 	stw	r2,0(sp)
 401eb1c:	e0800517 	ldw	r2,20(fp)
 401eb20:	d8800115 	stw	r2,4(sp)
 401eb24:	d8c00215 	stw	r3,8(sp)
 401eb28:	e17ff817 	ldw	r5,-32(fp)
 401eb2c:	e1800317 	ldw	r6,12(fp)
 401eb30:	4019df40 	call	4019df4 <OS_TCBInit>
 401eb34:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 401eb38:	e0bff703 	ldbu	r2,-36(fp)
 401eb3c:	1004c03a 	cmpne	r2,r2,zero
 401eb40:	1000081e 	bne	r2,zero,401eb64 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 401eb44:	008100b4 	movhi	r2,1026
 401eb48:	109aa444 	addi	r2,r2,27281
 401eb4c:	10800003 	ldbu	r2,0(r2)
 401eb50:	10803fcc 	andi	r2,r2,255
 401eb54:	10800058 	cmpnei	r2,r2,1
 401eb58:	1000151e 	bne	r2,zero,401ebb0 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 401eb5c:	40199ec0 	call	40199ec <OS_Sched>
 401eb60:	00001306 	br	401ebb0 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401eb64:	0005303a 	rdctl	r2,status
 401eb68:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401eb6c:	e0fff217 	ldw	r3,-56(fp)
 401eb70:	00bfff84 	movi	r2,-2
 401eb74:	1884703a 	and	r2,r3,r2
 401eb78:	1001703a 	wrctl	status,r2
  
  return context;
 401eb7c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 401eb80:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 401eb84:	e0bffc03 	ldbu	r2,-16(fp)
 401eb88:	00c100f4 	movhi	r3,1027
 401eb8c:	18d76004 	addi	r3,r3,23936
 401eb90:	1085883a 	add	r2,r2,r2
 401eb94:	1085883a 	add	r2,r2,r2
 401eb98:	10c5883a 	add	r2,r2,r3
 401eb9c:	10000015 	stw	zero,0(r2)
 401eba0:	e0bff617 	ldw	r2,-40(fp)
 401eba4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401eba8:	e0bff117 	ldw	r2,-60(fp)
 401ebac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 401ebb0:	e0bff703 	ldbu	r2,-36(fp)
 401ebb4:	e0bfff15 	stw	r2,-4(fp)
 401ebb8:	00000606 	br	401ebd4 <OSTaskCreateExt+0x1e8>
 401ebbc:	e0bff617 	ldw	r2,-40(fp)
 401ebc0:	e0bff015 	stw	r2,-64(fp)
 401ebc4:	e0bff017 	ldw	r2,-64(fp)
 401ebc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 401ebcc:	00800a04 	movi	r2,40
 401ebd0:	e0bfff15 	stw	r2,-4(fp)
 401ebd4:	e0bfff17 	ldw	r2,-4(fp)
}
 401ebd8:	e037883a 	mov	sp,fp
 401ebdc:	dfc00117 	ldw	ra,4(sp)
 401ebe0:	df000017 	ldw	fp,0(sp)
 401ebe4:	dec00204 	addi	sp,sp,8
 401ebe8:	f800283a 	ret

0401ebec <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 401ebec:	defff304 	addi	sp,sp,-52
 401ebf0:	dfc00c15 	stw	ra,48(sp)
 401ebf4:	df000b15 	stw	fp,44(sp)
 401ebf8:	df000b04 	addi	fp,sp,44
 401ebfc:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 401ec00:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 401ec04:	008100b4 	movhi	r2,1026
 401ec08:	109ab204 	addi	r2,r2,27336
 401ec0c:	10800003 	ldbu	r2,0(r2)
 401ec10:	10803fcc 	andi	r2,r2,255
 401ec14:	1005003a 	cmpeq	r2,r2,zero
 401ec18:	1000031e 	bne	r2,zero,401ec28 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 401ec1c:	00801004 	movi	r2,64
 401ec20:	e0bfff15 	stw	r2,-4(fp)
 401ec24:	0000ee06 	br	401efe0 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 401ec28:	e0bffe03 	ldbu	r2,-8(fp)
 401ec2c:	10800518 	cmpnei	r2,r2,20
 401ec30:	1000031e 	bne	r2,zero,401ec40 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 401ec34:	00800f84 	movi	r2,62
 401ec38:	e0bfff15 	stw	r2,-4(fp)
 401ec3c:	0000e806 	br	401efe0 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 401ec40:	e0bffe03 	ldbu	r2,-8(fp)
 401ec44:	10800530 	cmpltui	r2,r2,20
 401ec48:	1000061e 	bne	r2,zero,401ec64 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 401ec4c:	e0bffe03 	ldbu	r2,-8(fp)
 401ec50:	10803fe0 	cmpeqi	r2,r2,255
 401ec54:	1000031e 	bne	r2,zero,401ec64 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 401ec58:	00800a84 	movi	r2,42
 401ec5c:	e0bfff15 	stw	r2,-4(fp)
 401ec60:	0000df06 	br	401efe0 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ec64:	0005303a 	rdctl	r2,status
 401ec68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ec6c:	e0fffa17 	ldw	r3,-24(fp)
 401ec70:	00bfff84 	movi	r2,-2
 401ec74:	1884703a 	and	r2,r3,r2
 401ec78:	1001703a 	wrctl	status,r2
  
  return context;
 401ec7c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 401ec80:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 401ec84:	e0bffe03 	ldbu	r2,-8(fp)
 401ec88:	10803fd8 	cmpnei	r2,r2,255
 401ec8c:	1000051e 	bne	r2,zero,401eca4 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 401ec90:	008100b4 	movhi	r2,1026
 401ec94:	109ab304 	addi	r2,r2,27340
 401ec98:	10800017 	ldw	r2,0(r2)
 401ec9c:	10800c83 	ldbu	r2,50(r2)
 401eca0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401eca4:	e0bffe03 	ldbu	r2,-8(fp)
 401eca8:	00c100f4 	movhi	r3,1027
 401ecac:	18d76004 	addi	r3,r3,23936
 401ecb0:	1085883a 	add	r2,r2,r2
 401ecb4:	1085883a 	add	r2,r2,r2
 401ecb8:	10c5883a 	add	r2,r2,r3
 401ecbc:	10800017 	ldw	r2,0(r2)
 401ecc0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 401ecc4:	e0bffc17 	ldw	r2,-16(fp)
 401ecc8:	1004c03a 	cmpne	r2,r2,zero
 401eccc:	1000071e 	bne	r2,zero,401ecec <OSTaskDel+0x100>
 401ecd0:	e0bffb17 	ldw	r2,-20(fp)
 401ecd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ecd8:	e0bff917 	ldw	r2,-28(fp)
 401ecdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401ece0:	008010c4 	movi	r2,67
 401ece4:	e0bfff15 	stw	r2,-4(fp)
 401ece8:	0000bd06 	br	401efe0 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 401ecec:	e0bffc17 	ldw	r2,-16(fp)
 401ecf0:	10800058 	cmpnei	r2,r2,1
 401ecf4:	1000071e 	bne	r2,zero,401ed14 <OSTaskDel+0x128>
 401ecf8:	e0bffb17 	ldw	r2,-20(fp)
 401ecfc:	e0bff815 	stw	r2,-32(fp)
 401ed00:	e0bff817 	ldw	r2,-32(fp)
 401ed04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 401ed08:	00800f44 	movi	r2,61
 401ed0c:	e0bfff15 	stw	r2,-4(fp)
 401ed10:	0000b306 	br	401efe0 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 401ed14:	e0bffc17 	ldw	r2,-16(fp)
 401ed18:	10800d03 	ldbu	r2,52(r2)
 401ed1c:	11003fcc 	andi	r4,r2,255
 401ed20:	e0bffc17 	ldw	r2,-16(fp)
 401ed24:	10800d03 	ldbu	r2,52(r2)
 401ed28:	10c03fcc 	andi	r3,r2,255
 401ed2c:	008100b4 	movhi	r2,1026
 401ed30:	109ab044 	addi	r2,r2,27329
 401ed34:	10c5883a 	add	r2,r2,r3
 401ed38:	10800003 	ldbu	r2,0(r2)
 401ed3c:	1007883a 	mov	r3,r2
 401ed40:	e0bffc17 	ldw	r2,-16(fp)
 401ed44:	10800d43 	ldbu	r2,53(r2)
 401ed48:	0084303a 	nor	r2,zero,r2
 401ed4c:	1884703a 	and	r2,r3,r2
 401ed50:	1007883a 	mov	r3,r2
 401ed54:	008100b4 	movhi	r2,1026
 401ed58:	109ab044 	addi	r2,r2,27329
 401ed5c:	1105883a 	add	r2,r2,r4
 401ed60:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 401ed64:	e0bffc17 	ldw	r2,-16(fp)
 401ed68:	10800d03 	ldbu	r2,52(r2)
 401ed6c:	10c03fcc 	andi	r3,r2,255
 401ed70:	008100b4 	movhi	r2,1026
 401ed74:	109ab044 	addi	r2,r2,27329
 401ed78:	10c5883a 	add	r2,r2,r3
 401ed7c:	10800003 	ldbu	r2,0(r2)
 401ed80:	10803fcc 	andi	r2,r2,255
 401ed84:	1004c03a 	cmpne	r2,r2,zero
 401ed88:	10000c1e 	bne	r2,zero,401edbc <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 401ed8c:	e0bffc17 	ldw	r2,-16(fp)
 401ed90:	10800d83 	ldbu	r2,54(r2)
 401ed94:	0084303a 	nor	r2,zero,r2
 401ed98:	1007883a 	mov	r3,r2
 401ed9c:	008100b4 	movhi	r2,1026
 401eda0:	109ab004 	addi	r2,r2,27328
 401eda4:	10800003 	ldbu	r2,0(r2)
 401eda8:	1884703a 	and	r2,r3,r2
 401edac:	1007883a 	mov	r3,r2
 401edb0:	008100b4 	movhi	r2,1026
 401edb4:	109ab004 	addi	r2,r2,27328
 401edb8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 401edbc:	e0bffc17 	ldw	r2,-16(fp)
 401edc0:	10800717 	ldw	r2,28(r2)
 401edc4:	1005003a 	cmpeq	r2,r2,zero
 401edc8:	1000041e 	bne	r2,zero,401eddc <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 401edcc:	e0bffc17 	ldw	r2,-16(fp)
 401edd0:	11400717 	ldw	r5,28(r2)
 401edd4:	e13ffc17 	ldw	r4,-16(fp)
 401edd8:	40193a40 	call	40193a4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 401eddc:	e0bffc17 	ldw	r2,-16(fp)
 401ede0:	10800817 	ldw	r2,32(r2)
 401ede4:	1005003a 	cmpeq	r2,r2,zero
 401ede8:	1000041e 	bne	r2,zero,401edfc <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 401edec:	e0bffc17 	ldw	r2,-16(fp)
 401edf0:	11400817 	ldw	r5,32(r2)
 401edf4:	e13ffc17 	ldw	r4,-16(fp)
 401edf8:	401945c0 	call	401945c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 401edfc:	e0bffc17 	ldw	r2,-16(fp)
 401ee00:	10800a17 	ldw	r2,40(r2)
 401ee04:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 401ee08:	e0bffd17 	ldw	r2,-12(fp)
 401ee0c:	1005003a 	cmpeq	r2,r2,zero
 401ee10:	1000021e 	bne	r2,zero,401ee1c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 401ee14:	e13ffd17 	ldw	r4,-12(fp)
 401ee18:	401baf00 	call	401baf0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 401ee1c:	e0bffc17 	ldw	r2,-16(fp)
 401ee20:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 401ee24:	e0bffc17 	ldw	r2,-16(fp)
 401ee28:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 401ee2c:	e0bffc17 	ldw	r2,-16(fp)
 401ee30:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 401ee34:	008100b4 	movhi	r2,1026
 401ee38:	109aa404 	addi	r2,r2,27280
 401ee3c:	10800003 	ldbu	r2,0(r2)
 401ee40:	10803fcc 	andi	r2,r2,255
 401ee44:	10803fe0 	cmpeqi	r2,r2,255
 401ee48:	1000081e 	bne	r2,zero,401ee6c <OSTaskDel+0x280>
        OSLockNesting++;
 401ee4c:	008100b4 	movhi	r2,1026
 401ee50:	109aa404 	addi	r2,r2,27280
 401ee54:	10800003 	ldbu	r2,0(r2)
 401ee58:	10800044 	addi	r2,r2,1
 401ee5c:	1007883a 	mov	r3,r2
 401ee60:	008100b4 	movhi	r2,1026
 401ee64:	109aa404 	addi	r2,r2,27280
 401ee68:	10c00005 	stb	r3,0(r2)
 401ee6c:	e0bffb17 	ldw	r2,-20(fp)
 401ee70:	e0bff715 	stw	r2,-36(fp)
 401ee74:	e0bff717 	ldw	r2,-36(fp)
 401ee78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 401ee7c:	4018f900 	call	4018f90 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ee80:	0005303a 	rdctl	r2,status
 401ee84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ee88:	e0fff617 	ldw	r3,-40(fp)
 401ee8c:	00bfff84 	movi	r2,-2
 401ee90:	1884703a 	and	r2,r3,r2
 401ee94:	1001703a 	wrctl	status,r2
  
  return context;
 401ee98:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 401ee9c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 401eea0:	008100b4 	movhi	r2,1026
 401eea4:	109aa404 	addi	r2,r2,27280
 401eea8:	10800003 	ldbu	r2,0(r2)
 401eeac:	10803fcc 	andi	r2,r2,255
 401eeb0:	1005003a 	cmpeq	r2,r2,zero
 401eeb4:	1000081e 	bne	r2,zero,401eed8 <OSTaskDel+0x2ec>
        OSLockNesting--;
 401eeb8:	008100b4 	movhi	r2,1026
 401eebc:	109aa404 	addi	r2,r2,27280
 401eec0:	10800003 	ldbu	r2,0(r2)
 401eec4:	10bfffc4 	addi	r2,r2,-1
 401eec8:	1007883a 	mov	r3,r2
 401eecc:	008100b4 	movhi	r2,1026
 401eed0:	109aa404 	addi	r2,r2,27280
 401eed4:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 401eed8:	e13ffc17 	ldw	r4,-16(fp)
 401eedc:	40232bc0 	call	40232bc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 401eee0:	008100b4 	movhi	r2,1026
 401eee4:	109aac44 	addi	r2,r2,27313
 401eee8:	10800003 	ldbu	r2,0(r2)
 401eeec:	10bfffc4 	addi	r2,r2,-1
 401eef0:	1007883a 	mov	r3,r2
 401eef4:	008100b4 	movhi	r2,1026
 401eef8:	109aac44 	addi	r2,r2,27313
 401eefc:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 401ef00:	e0bffe03 	ldbu	r2,-8(fp)
 401ef04:	00c100f4 	movhi	r3,1027
 401ef08:	18d76004 	addi	r3,r3,23936
 401ef0c:	1085883a 	add	r2,r2,r2
 401ef10:	1085883a 	add	r2,r2,r2
 401ef14:	10c5883a 	add	r2,r2,r3
 401ef18:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 401ef1c:	e0bffc17 	ldw	r2,-16(fp)
 401ef20:	10800617 	ldw	r2,24(r2)
 401ef24:	1004c03a 	cmpne	r2,r2,zero
 401ef28:	1000091e 	bne	r2,zero,401ef50 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 401ef2c:	e0bffc17 	ldw	r2,-16(fp)
 401ef30:	10800517 	ldw	r2,20(r2)
 401ef34:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 401ef38:	e0bffc17 	ldw	r2,-16(fp)
 401ef3c:	10c00517 	ldw	r3,20(r2)
 401ef40:	008100b4 	movhi	r2,1026
 401ef44:	109aa704 	addi	r2,r2,27292
 401ef48:	10c00015 	stw	r3,0(r2)
 401ef4c:	00000a06 	br	401ef78 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 401ef50:	e0bffc17 	ldw	r2,-16(fp)
 401ef54:	10c00617 	ldw	r3,24(r2)
 401ef58:	e0bffc17 	ldw	r2,-16(fp)
 401ef5c:	10800517 	ldw	r2,20(r2)
 401ef60:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 401ef64:	e0bffc17 	ldw	r2,-16(fp)
 401ef68:	10c00517 	ldw	r3,20(r2)
 401ef6c:	e0bffc17 	ldw	r2,-16(fp)
 401ef70:	10800617 	ldw	r2,24(r2)
 401ef74:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 401ef78:	008100b4 	movhi	r2,1026
 401ef7c:	109aab04 	addi	r2,r2,27308
 401ef80:	10c00017 	ldw	r3,0(r2)
 401ef84:	e0bffc17 	ldw	r2,-16(fp)
 401ef88:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 401ef8c:	00c100b4 	movhi	r3,1026
 401ef90:	18daab04 	addi	r3,r3,27308
 401ef94:	e0bffc17 	ldw	r2,-16(fp)
 401ef98:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 401ef9c:	e0fffc17 	ldw	r3,-16(fp)
 401efa0:	00800fc4 	movi	r2,63
 401efa4:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 401efa8:	e0bffc17 	ldw	r2,-16(fp)
 401efac:	10001345 	stb	zero,77(r2)
 401efb0:	e0bffb17 	ldw	r2,-20(fp)
 401efb4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401efb8:	e0bff517 	ldw	r2,-44(fp)
 401efbc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 401efc0:	008100b4 	movhi	r2,1026
 401efc4:	109aa444 	addi	r2,r2,27281
 401efc8:	10800003 	ldbu	r2,0(r2)
 401efcc:	10803fcc 	andi	r2,r2,255
 401efd0:	10800058 	cmpnei	r2,r2,1
 401efd4:	1000011e 	bne	r2,zero,401efdc <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 401efd8:	40199ec0 	call	40199ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 401efdc:	e03fff15 	stw	zero,-4(fp)
 401efe0:	e0bfff17 	ldw	r2,-4(fp)
}
 401efe4:	e037883a 	mov	sp,fp
 401efe8:	dfc00117 	ldw	ra,4(sp)
 401efec:	df000017 	ldw	fp,0(sp)
 401eff0:	dec00204 	addi	sp,sp,8
 401eff4:	f800283a 	ret

0401eff8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 401eff8:	defff404 	addi	sp,sp,-48
 401effc:	df000b15 	stw	fp,44(sp)
 401f000:	df000b04 	addi	fp,sp,44
 401f004:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401f008:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 401f00c:	e0bffe03 	ldbu	r2,-8(fp)
 401f010:	10800518 	cmpnei	r2,r2,20
 401f014:	1000031e 	bne	r2,zero,401f024 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 401f018:	00800f84 	movi	r2,62
 401f01c:	e0bfff15 	stw	r2,-4(fp)
 401f020:	00004c06 	br	401f154 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 401f024:	e0bffe03 	ldbu	r2,-8(fp)
 401f028:	10800530 	cmpltui	r2,r2,20
 401f02c:	1000061e 	bne	r2,zero,401f048 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 401f030:	e0bffe03 	ldbu	r2,-8(fp)
 401f034:	10803fe0 	cmpeqi	r2,r2,255
 401f038:	1000031e 	bne	r2,zero,401f048 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 401f03c:	00800a84 	movi	r2,42
 401f040:	e0bfff15 	stw	r2,-4(fp)
 401f044:	00004306 	br	401f154 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 401f048:	e0bffe03 	ldbu	r2,-8(fp)
 401f04c:	10803fd8 	cmpnei	r2,r2,255
 401f050:	1000141e 	bne	r2,zero,401f0a4 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f054:	0005303a 	rdctl	r2,status
 401f058:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f05c:	e0fffa17 	ldw	r3,-24(fp)
 401f060:	00bfff84 	movi	r2,-2
 401f064:	1884703a 	and	r2,r3,r2
 401f068:	1001703a 	wrctl	status,r2
  
  return context;
 401f06c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 401f070:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 401f074:	008100b4 	movhi	r2,1026
 401f078:	109ab304 	addi	r2,r2,27340
 401f07c:	10800017 	ldw	r2,0(r2)
 401f080:	10800dc3 	ldbu	r2,55(r2)
 401f084:	e0bffd05 	stb	r2,-12(fp)
 401f088:	e0bffb17 	ldw	r2,-20(fp)
 401f08c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f090:	e0bff917 	ldw	r2,-28(fp)
 401f094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 401f098:	e0bffd03 	ldbu	r2,-12(fp)
 401f09c:	e0bfff15 	stw	r2,-4(fp)
 401f0a0:	00002c06 	br	401f154 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f0a4:	0005303a 	rdctl	r2,status
 401f0a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f0ac:	e0fff817 	ldw	r3,-32(fp)
 401f0b0:	00bfff84 	movi	r2,-2
 401f0b4:	1884703a 	and	r2,r3,r2
 401f0b8:	1001703a 	wrctl	status,r2
  
  return context;
 401f0bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 401f0c0:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 401f0c4:	e0bffe03 	ldbu	r2,-8(fp)
 401f0c8:	00c100f4 	movhi	r3,1027
 401f0cc:	18d76004 	addi	r3,r3,23936
 401f0d0:	1085883a 	add	r2,r2,r2
 401f0d4:	1085883a 	add	r2,r2,r2
 401f0d8:	10c5883a 	add	r2,r2,r3
 401f0dc:	10800017 	ldw	r2,0(r2)
 401f0e0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 401f0e4:	e0bffc17 	ldw	r2,-16(fp)
 401f0e8:	1004c03a 	cmpne	r2,r2,zero
 401f0ec:	1000071e 	bne	r2,zero,401f10c <OSTaskDelReq+0x114>
 401f0f0:	e0bffb17 	ldw	r2,-20(fp)
 401f0f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f0f8:	e0bff717 	ldw	r2,-36(fp)
 401f0fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 401f100:	008010c4 	movi	r2,67
 401f104:	e0bfff15 	stw	r2,-4(fp)
 401f108:	00001206 	br	401f154 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 401f10c:	e0bffc17 	ldw	r2,-16(fp)
 401f110:	10800058 	cmpnei	r2,r2,1
 401f114:	1000071e 	bne	r2,zero,401f134 <OSTaskDelReq+0x13c>
 401f118:	e0bffb17 	ldw	r2,-20(fp)
 401f11c:	e0bff615 	stw	r2,-40(fp)
 401f120:	e0bff617 	ldw	r2,-40(fp)
 401f124:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 401f128:	00800f44 	movi	r2,61
 401f12c:	e0bfff15 	stw	r2,-4(fp)
 401f130:	00000806 	br	401f154 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 401f134:	e0fffc17 	ldw	r3,-16(fp)
 401f138:	00800fc4 	movi	r2,63
 401f13c:	18800dc5 	stb	r2,55(r3)
 401f140:	e0bffb17 	ldw	r2,-20(fp)
 401f144:	e0bff515 	stw	r2,-44(fp)
 401f148:	e0bff517 	ldw	r2,-44(fp)
 401f14c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401f150:	e03fff15 	stw	zero,-4(fp)
 401f154:	e0bfff17 	ldw	r2,-4(fp)
}
 401f158:	e037883a 	mov	sp,fp
 401f15c:	df000017 	ldw	fp,0(sp)
 401f160:	dec00104 	addi	sp,sp,4
 401f164:	f800283a 	ret

0401f168 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 401f168:	defff304 	addi	sp,sp,-52
 401f16c:	dfc00c15 	stw	ra,48(sp)
 401f170:	df000b15 	stw	fp,44(sp)
 401f174:	df000b04 	addi	fp,sp,44
 401f178:	e17ffd15 	stw	r5,-12(fp)
 401f17c:	e1bffe15 	stw	r6,-8(fp)
 401f180:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 401f184:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 401f188:	e0bffe17 	ldw	r2,-8(fp)
 401f18c:	1004c03a 	cmpne	r2,r2,zero
 401f190:	1000021e 	bne	r2,zero,401f19c <OSTaskNameGet+0x34>
        return (0);
 401f194:	e03fff15 	stw	zero,-4(fp)
 401f198:	00005b06 	br	401f308 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 401f19c:	e0bffc03 	ldbu	r2,-16(fp)
 401f1a0:	10800570 	cmpltui	r2,r2,21
 401f1a4:	1000081e 	bne	r2,zero,401f1c8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 401f1a8:	e0bffc03 	ldbu	r2,-16(fp)
 401f1ac:	10803fe0 	cmpeqi	r2,r2,255
 401f1b0:	1000051e 	bne	r2,zero,401f1c8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 401f1b4:	e0fffe17 	ldw	r3,-8(fp)
 401f1b8:	00800a84 	movi	r2,42
 401f1bc:	18800005 	stb	r2,0(r3)
            return (0);
 401f1c0:	e03fff15 	stw	zero,-4(fp)
 401f1c4:	00005006 	br	401f308 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 401f1c8:	e0bffd17 	ldw	r2,-12(fp)
 401f1cc:	1004c03a 	cmpne	r2,r2,zero
 401f1d0:	1000051e 	bne	r2,zero,401f1e8 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 401f1d4:	e0fffe17 	ldw	r3,-8(fp)
 401f1d8:	00800304 	movi	r2,12
 401f1dc:	18800005 	stb	r2,0(r3)
        return (0);
 401f1e0:	e03fff15 	stw	zero,-4(fp)
 401f1e4:	00004806 	br	401f308 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 401f1e8:	008100b4 	movhi	r2,1026
 401f1ec:	109ab204 	addi	r2,r2,27336
 401f1f0:	10800003 	ldbu	r2,0(r2)
 401f1f4:	10803fcc 	andi	r2,r2,255
 401f1f8:	1005003a 	cmpeq	r2,r2,zero
 401f1fc:	1000051e 	bne	r2,zero,401f214 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 401f200:	e0fffe17 	ldw	r3,-8(fp)
 401f204:	00800444 	movi	r2,17
 401f208:	18800005 	stb	r2,0(r3)
        return (0);
 401f20c:	e03fff15 	stw	zero,-4(fp)
 401f210:	00003d06 	br	401f308 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f214:	0005303a 	rdctl	r2,status
 401f218:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f21c:	e0fff817 	ldw	r3,-32(fp)
 401f220:	00bfff84 	movi	r2,-2
 401f224:	1884703a 	and	r2,r3,r2
 401f228:	1001703a 	wrctl	status,r2
  
  return context;
 401f22c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 401f230:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 401f234:	e0bffc03 	ldbu	r2,-16(fp)
 401f238:	10803fd8 	cmpnei	r2,r2,255
 401f23c:	1000051e 	bne	r2,zero,401f254 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 401f240:	008100b4 	movhi	r2,1026
 401f244:	109ab304 	addi	r2,r2,27340
 401f248:	10800017 	ldw	r2,0(r2)
 401f24c:	10800c83 	ldbu	r2,50(r2)
 401f250:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401f254:	e0bffc03 	ldbu	r2,-16(fp)
 401f258:	00c100f4 	movhi	r3,1027
 401f25c:	18d76004 	addi	r3,r3,23936
 401f260:	1085883a 	add	r2,r2,r2
 401f264:	1085883a 	add	r2,r2,r2
 401f268:	10c5883a 	add	r2,r2,r3
 401f26c:	10800017 	ldw	r2,0(r2)
 401f270:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 401f274:	e0bffb17 	ldw	r2,-20(fp)
 401f278:	1004c03a 	cmpne	r2,r2,zero
 401f27c:	1000091e 	bne	r2,zero,401f2a4 <OSTaskNameGet+0x13c>
 401f280:	e0bff917 	ldw	r2,-28(fp)
 401f284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f288:	e0bff717 	ldw	r2,-36(fp)
 401f28c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401f290:	e0fffe17 	ldw	r3,-8(fp)
 401f294:	008010c4 	movi	r2,67
 401f298:	18800005 	stb	r2,0(r3)
        return (0);
 401f29c:	e03fff15 	stw	zero,-4(fp)
 401f2a0:	00001906 	br	401f308 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 401f2a4:	e0bffb17 	ldw	r2,-20(fp)
 401f2a8:	10800058 	cmpnei	r2,r2,1
 401f2ac:	1000091e 	bne	r2,zero,401f2d4 <OSTaskNameGet+0x16c>
 401f2b0:	e0bff917 	ldw	r2,-28(fp)
 401f2b4:	e0bff615 	stw	r2,-40(fp)
 401f2b8:	e0bff617 	ldw	r2,-40(fp)
 401f2bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401f2c0:	e0fffe17 	ldw	r3,-8(fp)
 401f2c4:	008010c4 	movi	r2,67
 401f2c8:	18800005 	stb	r2,0(r3)
        return (0);
 401f2cc:	e03fff15 	stw	zero,-4(fp)
 401f2d0:	00000d06 	br	401f308 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 401f2d4:	e0bffb17 	ldw	r2,-20(fp)
 401f2d8:	11401304 	addi	r5,r2,76
 401f2dc:	e13ffd17 	ldw	r4,-12(fp)
 401f2e0:	4019b300 	call	4019b30 <OS_StrCopy>
 401f2e4:	e0bffa05 	stb	r2,-24(fp)
 401f2e8:	e0bff917 	ldw	r2,-28(fp)
 401f2ec:	e0bff515 	stw	r2,-44(fp)
 401f2f0:	e0bff517 	ldw	r2,-44(fp)
 401f2f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401f2f8:	e0bffe17 	ldw	r2,-8(fp)
 401f2fc:	10000005 	stb	zero,0(r2)
    return (len);
 401f300:	e0bffa03 	ldbu	r2,-24(fp)
 401f304:	e0bfff15 	stw	r2,-4(fp)
 401f308:	e0bfff17 	ldw	r2,-4(fp)
}
 401f30c:	e037883a 	mov	sp,fp
 401f310:	dfc00117 	ldw	ra,4(sp)
 401f314:	df000017 	ldw	fp,0(sp)
 401f318:	dec00204 	addi	sp,sp,8
 401f31c:	f800283a 	ret

0401f320 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 401f320:	defff304 	addi	sp,sp,-52
 401f324:	dfc00c15 	stw	ra,48(sp)
 401f328:	df000b15 	stw	fp,44(sp)
 401f32c:	df000b04 	addi	fp,sp,44
 401f330:	e17ffe15 	stw	r5,-8(fp)
 401f334:	e1bfff15 	stw	r6,-4(fp)
 401f338:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 401f33c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 401f340:	e0bfff17 	ldw	r2,-4(fp)
 401f344:	1005003a 	cmpeq	r2,r2,zero
 401f348:	1000611e 	bne	r2,zero,401f4d0 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 401f34c:	e0bffd03 	ldbu	r2,-12(fp)
 401f350:	10800570 	cmpltui	r2,r2,21
 401f354:	1000071e 	bne	r2,zero,401f374 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 401f358:	e0bffd03 	ldbu	r2,-12(fp)
 401f35c:	10803fe0 	cmpeqi	r2,r2,255
 401f360:	1000041e 	bne	r2,zero,401f374 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 401f364:	e0ffff17 	ldw	r3,-4(fp)
 401f368:	00800a84 	movi	r2,42
 401f36c:	18800005 	stb	r2,0(r3)
            return;
 401f370:	00005706 	br	401f4d0 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 401f374:	e0bffe17 	ldw	r2,-8(fp)
 401f378:	1004c03a 	cmpne	r2,r2,zero
 401f37c:	1000041e 	bne	r2,zero,401f390 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 401f380:	e0ffff17 	ldw	r3,-4(fp)
 401f384:	00800304 	movi	r2,12
 401f388:	18800005 	stb	r2,0(r3)
        return;
 401f38c:	00005006 	br	401f4d0 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 401f390:	008100b4 	movhi	r2,1026
 401f394:	109ab204 	addi	r2,r2,27336
 401f398:	10800003 	ldbu	r2,0(r2)
 401f39c:	10803fcc 	andi	r2,r2,255
 401f3a0:	1005003a 	cmpeq	r2,r2,zero
 401f3a4:	1000041e 	bne	r2,zero,401f3b8 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 401f3a8:	e0ffff17 	ldw	r3,-4(fp)
 401f3ac:	00800484 	movi	r2,18
 401f3b0:	18800005 	stb	r2,0(r3)
        return;
 401f3b4:	00004606 	br	401f4d0 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f3b8:	0005303a 	rdctl	r2,status
 401f3bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f3c0:	e0fff917 	ldw	r3,-28(fp)
 401f3c4:	00bfff84 	movi	r2,-2
 401f3c8:	1884703a 	and	r2,r3,r2
 401f3cc:	1001703a 	wrctl	status,r2
  
  return context;
 401f3d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 401f3d4:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 401f3d8:	e0bffd03 	ldbu	r2,-12(fp)
 401f3dc:	10803fd8 	cmpnei	r2,r2,255
 401f3e0:	1000051e 	bne	r2,zero,401f3f8 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 401f3e4:	008100b4 	movhi	r2,1026
 401f3e8:	109ab304 	addi	r2,r2,27340
 401f3ec:	10800017 	ldw	r2,0(r2)
 401f3f0:	10800c83 	ldbu	r2,50(r2)
 401f3f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401f3f8:	e0bffd03 	ldbu	r2,-12(fp)
 401f3fc:	00c100f4 	movhi	r3,1027
 401f400:	18d76004 	addi	r3,r3,23936
 401f404:	1085883a 	add	r2,r2,r2
 401f408:	1085883a 	add	r2,r2,r2
 401f40c:	10c5883a 	add	r2,r2,r3
 401f410:	10800017 	ldw	r2,0(r2)
 401f414:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 401f418:	e0bffb17 	ldw	r2,-20(fp)
 401f41c:	1004c03a 	cmpne	r2,r2,zero
 401f420:	1000081e 	bne	r2,zero,401f444 <OSTaskNameSet+0x124>
 401f424:	e0bffa17 	ldw	r2,-24(fp)
 401f428:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f42c:	e0bff817 	ldw	r2,-32(fp)
 401f430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401f434:	e0ffff17 	ldw	r3,-4(fp)
 401f438:	008010c4 	movi	r2,67
 401f43c:	18800005 	stb	r2,0(r3)
        return;
 401f440:	00002306 	br	401f4d0 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 401f444:	e0bffb17 	ldw	r2,-20(fp)
 401f448:	10800058 	cmpnei	r2,r2,1
 401f44c:	1000081e 	bne	r2,zero,401f470 <OSTaskNameSet+0x150>
 401f450:	e0bffa17 	ldw	r2,-24(fp)
 401f454:	e0bff715 	stw	r2,-36(fp)
 401f458:	e0bff717 	ldw	r2,-36(fp)
 401f45c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 401f460:	e0ffff17 	ldw	r3,-4(fp)
 401f464:	008010c4 	movi	r2,67
 401f468:	18800005 	stb	r2,0(r3)
        return;
 401f46c:	00001806 	br	401f4d0 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 401f470:	e13ffe17 	ldw	r4,-8(fp)
 401f474:	4019bb00 	call	4019bb0 <OS_StrLen>
 401f478:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 401f47c:	e0bffc03 	ldbu	r2,-16(fp)
 401f480:	10800830 	cmpltui	r2,r2,32
 401f484:	1000081e 	bne	r2,zero,401f4a8 <OSTaskNameSet+0x188>
 401f488:	e0bffa17 	ldw	r2,-24(fp)
 401f48c:	e0bff615 	stw	r2,-40(fp)
 401f490:	e0bff617 	ldw	r2,-40(fp)
 401f494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 401f498:	e0ffff17 	ldw	r3,-4(fp)
 401f49c:	00801044 	movi	r2,65
 401f4a0:	18800005 	stb	r2,0(r3)
        return;
 401f4a4:	00000a06 	br	401f4d0 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 401f4a8:	e0bffb17 	ldw	r2,-20(fp)
 401f4ac:	11001304 	addi	r4,r2,76
 401f4b0:	e17ffe17 	ldw	r5,-8(fp)
 401f4b4:	4019b300 	call	4019b30 <OS_StrCopy>
 401f4b8:	e0bffa17 	ldw	r2,-24(fp)
 401f4bc:	e0bff515 	stw	r2,-44(fp)
 401f4c0:	e0bff517 	ldw	r2,-44(fp)
 401f4c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401f4c8:	e0bfff17 	ldw	r2,-4(fp)
 401f4cc:	10000005 	stb	zero,0(r2)
}
 401f4d0:	e037883a 	mov	sp,fp
 401f4d4:	dfc00117 	ldw	ra,4(sp)
 401f4d8:	df000017 	ldw	fp,0(sp)
 401f4dc:	dec00204 	addi	sp,sp,8
 401f4e0:	f800283a 	ret

0401f4e4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 401f4e4:	defff304 	addi	sp,sp,-52
 401f4e8:	dfc00c15 	stw	ra,48(sp)
 401f4ec:	df000b15 	stw	fp,44(sp)
 401f4f0:	df000b04 	addi	fp,sp,44
 401f4f4:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 401f4f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 401f4fc:	e0bffe03 	ldbu	r2,-8(fp)
 401f500:	10800530 	cmpltui	r2,r2,20
 401f504:	1000031e 	bne	r2,zero,401f514 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 401f508:	00800a84 	movi	r2,42
 401f50c:	e0bfff15 	stw	r2,-4(fp)
 401f510:	00007406 	br	401f6e4 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f514:	0005303a 	rdctl	r2,status
 401f518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f51c:	e0fffb17 	ldw	r3,-20(fp)
 401f520:	00bfff84 	movi	r2,-2
 401f524:	1884703a 	and	r2,r3,r2
 401f528:	1001703a 	wrctl	status,r2
  
  return context;
 401f52c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401f530:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 401f534:	e0bffe03 	ldbu	r2,-8(fp)
 401f538:	00c100f4 	movhi	r3,1027
 401f53c:	18d76004 	addi	r3,r3,23936
 401f540:	1085883a 	add	r2,r2,r2
 401f544:	1085883a 	add	r2,r2,r2
 401f548:	10c5883a 	add	r2,r2,r3
 401f54c:	10800017 	ldw	r2,0(r2)
 401f550:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 401f554:	e0bffd17 	ldw	r2,-12(fp)
 401f558:	1004c03a 	cmpne	r2,r2,zero
 401f55c:	1000071e 	bne	r2,zero,401f57c <OSTaskResume+0x98>
 401f560:	e0bffc17 	ldw	r2,-16(fp)
 401f564:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f568:	e0bffa17 	ldw	r2,-24(fp)
 401f56c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 401f570:	00801184 	movi	r2,70
 401f574:	e0bfff15 	stw	r2,-4(fp)
 401f578:	00005a06 	br	401f6e4 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 401f57c:	e0bffd17 	ldw	r2,-12(fp)
 401f580:	10800058 	cmpnei	r2,r2,1
 401f584:	1000071e 	bne	r2,zero,401f5a4 <OSTaskResume+0xc0>
 401f588:	e0bffc17 	ldw	r2,-16(fp)
 401f58c:	e0bff915 	stw	r2,-28(fp)
 401f590:	e0bff917 	ldw	r2,-28(fp)
 401f594:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401f598:	008010c4 	movi	r2,67
 401f59c:	e0bfff15 	stw	r2,-4(fp)
 401f5a0:	00005006 	br	401f6e4 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 401f5a4:	e0bffd17 	ldw	r2,-12(fp)
 401f5a8:	10800c03 	ldbu	r2,48(r2)
 401f5ac:	10803fcc 	andi	r2,r2,255
 401f5b0:	1080020c 	andi	r2,r2,8
 401f5b4:	1005003a 	cmpeq	r2,r2,zero
 401f5b8:	1000441e 	bne	r2,zero,401f6cc <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 401f5bc:	e0bffd17 	ldw	r2,-12(fp)
 401f5c0:	10c00c03 	ldbu	r3,48(r2)
 401f5c4:	00bffdc4 	movi	r2,-9
 401f5c8:	1884703a 	and	r2,r3,r2
 401f5cc:	1007883a 	mov	r3,r2
 401f5d0:	e0bffd17 	ldw	r2,-12(fp)
 401f5d4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 401f5d8:	e0bffd17 	ldw	r2,-12(fp)
 401f5dc:	10800c03 	ldbu	r2,48(r2)
 401f5e0:	10803fcc 	andi	r2,r2,255
 401f5e4:	1004c03a 	cmpne	r2,r2,zero
 401f5e8:	1000321e 	bne	r2,zero,401f6b4 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 401f5ec:	e0bffd17 	ldw	r2,-12(fp)
 401f5f0:	10800b8b 	ldhu	r2,46(r2)
 401f5f4:	10bfffcc 	andi	r2,r2,65535
 401f5f8:	1004c03a 	cmpne	r2,r2,zero
 401f5fc:	1000281e 	bne	r2,zero,401f6a0 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 401f600:	e0bffd17 	ldw	r2,-12(fp)
 401f604:	10c00d83 	ldbu	r3,54(r2)
 401f608:	008100b4 	movhi	r2,1026
 401f60c:	109ab004 	addi	r2,r2,27328
 401f610:	10800003 	ldbu	r2,0(r2)
 401f614:	1884b03a 	or	r2,r3,r2
 401f618:	1007883a 	mov	r3,r2
 401f61c:	008100b4 	movhi	r2,1026
 401f620:	109ab004 	addi	r2,r2,27328
 401f624:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401f628:	e0bffd17 	ldw	r2,-12(fp)
 401f62c:	10800d03 	ldbu	r2,52(r2)
 401f630:	11003fcc 	andi	r4,r2,255
 401f634:	e0bffd17 	ldw	r2,-12(fp)
 401f638:	10800d03 	ldbu	r2,52(r2)
 401f63c:	10c03fcc 	andi	r3,r2,255
 401f640:	008100b4 	movhi	r2,1026
 401f644:	109ab044 	addi	r2,r2,27329
 401f648:	10c5883a 	add	r2,r2,r3
 401f64c:	10c00003 	ldbu	r3,0(r2)
 401f650:	e0bffd17 	ldw	r2,-12(fp)
 401f654:	10800d43 	ldbu	r2,53(r2)
 401f658:	1884b03a 	or	r2,r3,r2
 401f65c:	1007883a 	mov	r3,r2
 401f660:	008100b4 	movhi	r2,1026
 401f664:	109ab044 	addi	r2,r2,27329
 401f668:	1105883a 	add	r2,r2,r4
 401f66c:	10c00005 	stb	r3,0(r2)
 401f670:	e0bffc17 	ldw	r2,-16(fp)
 401f674:	e0bff815 	stw	r2,-32(fp)
 401f678:	e0bff817 	ldw	r2,-32(fp)
 401f67c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 401f680:	008100b4 	movhi	r2,1026
 401f684:	109aa444 	addi	r2,r2,27281
 401f688:	10800003 	ldbu	r2,0(r2)
 401f68c:	10803fcc 	andi	r2,r2,255
 401f690:	10800058 	cmpnei	r2,r2,1
 401f694:	10000b1e 	bne	r2,zero,401f6c4 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 401f698:	40199ec0 	call	40199ec <OS_Sched>
 401f69c:	00000906 	br	401f6c4 <OSTaskResume+0x1e0>
 401f6a0:	e0bffc17 	ldw	r2,-16(fp)
 401f6a4:	e0bff715 	stw	r2,-36(fp)
 401f6a8:	e0bff717 	ldw	r2,-36(fp)
 401f6ac:	1001703a 	wrctl	status,r2
 401f6b0:	00000406 	br	401f6c4 <OSTaskResume+0x1e0>
 401f6b4:	e0bffc17 	ldw	r2,-16(fp)
 401f6b8:	e0bff615 	stw	r2,-40(fp)
 401f6bc:	e0bff617 	ldw	r2,-40(fp)
 401f6c0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 401f6c4:	e03fff15 	stw	zero,-4(fp)
 401f6c8:	00000606 	br	401f6e4 <OSTaskResume+0x200>
 401f6cc:	e0bffc17 	ldw	r2,-16(fp)
 401f6d0:	e0bff515 	stw	r2,-44(fp)
 401f6d4:	e0bff517 	ldw	r2,-44(fp)
 401f6d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 401f6dc:	00801104 	movi	r2,68
 401f6e0:	e0bfff15 	stw	r2,-4(fp)
 401f6e4:	e0bfff17 	ldw	r2,-4(fp)
}
 401f6e8:	e037883a 	mov	sp,fp
 401f6ec:	dfc00117 	ldw	ra,4(sp)
 401f6f0:	df000017 	ldw	fp,0(sp)
 401f6f4:	dec00204 	addi	sp,sp,8
 401f6f8:	f800283a 	ret

0401f6fc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 401f6fc:	defff204 	addi	sp,sp,-56
 401f700:	df000d15 	stw	fp,52(sp)
 401f704:	df000d04 	addi	fp,sp,52
 401f708:	e17ffe15 	stw	r5,-8(fp)
 401f70c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 401f710:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 401f714:	e0bffd03 	ldbu	r2,-12(fp)
 401f718:	10800570 	cmpltui	r2,r2,21
 401f71c:	1000061e 	bne	r2,zero,401f738 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 401f720:	e0bffd03 	ldbu	r2,-12(fp)
 401f724:	10803fe0 	cmpeqi	r2,r2,255
 401f728:	1000031e 	bne	r2,zero,401f738 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 401f72c:	00800a84 	movi	r2,42
 401f730:	e0bfff15 	stw	r2,-4(fp)
 401f734:	00006b06 	br	401f8e4 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 401f738:	e0bffe17 	ldw	r2,-8(fp)
 401f73c:	1004c03a 	cmpne	r2,r2,zero
 401f740:	1000031e 	bne	r2,zero,401f750 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 401f744:	00800244 	movi	r2,9
 401f748:	e0bfff15 	stw	r2,-4(fp)
 401f74c:	00006506 	br	401f8e4 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 401f750:	e0bffe17 	ldw	r2,-8(fp)
 401f754:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 401f758:	e0bffe17 	ldw	r2,-8(fp)
 401f75c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f760:	0005303a 	rdctl	r2,status
 401f764:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f768:	e0fff717 	ldw	r3,-36(fp)
 401f76c:	00bfff84 	movi	r2,-2
 401f770:	1884703a 	and	r2,r3,r2
 401f774:	1001703a 	wrctl	status,r2
  
  return context;
 401f778:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 401f77c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 401f780:	e0bffd03 	ldbu	r2,-12(fp)
 401f784:	10803fd8 	cmpnei	r2,r2,255
 401f788:	1000051e 	bne	r2,zero,401f7a0 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 401f78c:	008100b4 	movhi	r2,1026
 401f790:	109ab304 	addi	r2,r2,27340
 401f794:	10800017 	ldw	r2,0(r2)
 401f798:	10800c83 	ldbu	r2,50(r2)
 401f79c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401f7a0:	e0bffd03 	ldbu	r2,-12(fp)
 401f7a4:	00c100f4 	movhi	r3,1027
 401f7a8:	18d76004 	addi	r3,r3,23936
 401f7ac:	1085883a 	add	r2,r2,r2
 401f7b0:	1085883a 	add	r2,r2,r2
 401f7b4:	10c5883a 	add	r2,r2,r3
 401f7b8:	10800017 	ldw	r2,0(r2)
 401f7bc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 401f7c0:	e0bffc17 	ldw	r2,-16(fp)
 401f7c4:	1004c03a 	cmpne	r2,r2,zero
 401f7c8:	1000071e 	bne	r2,zero,401f7e8 <OSTaskStkChk+0xec>
 401f7cc:	e0bff817 	ldw	r2,-32(fp)
 401f7d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f7d4:	e0bff617 	ldw	r2,-40(fp)
 401f7d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401f7dc:	008010c4 	movi	r2,67
 401f7e0:	e0bfff15 	stw	r2,-4(fp)
 401f7e4:	00003f06 	br	401f8e4 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 401f7e8:	e0bffc17 	ldw	r2,-16(fp)
 401f7ec:	10800058 	cmpnei	r2,r2,1
 401f7f0:	1000071e 	bne	r2,zero,401f810 <OSTaskStkChk+0x114>
 401f7f4:	e0bff817 	ldw	r2,-32(fp)
 401f7f8:	e0bff515 	stw	r2,-44(fp)
 401f7fc:	e0bff517 	ldw	r2,-44(fp)
 401f800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401f804:	008010c4 	movi	r2,67
 401f808:	e0bfff15 	stw	r2,-4(fp)
 401f80c:	00003506 	br	401f8e4 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 401f810:	e0bffc17 	ldw	r2,-16(fp)
 401f814:	1080040b 	ldhu	r2,16(r2)
 401f818:	10bfffcc 	andi	r2,r2,65535
 401f81c:	1080004c 	andi	r2,r2,1
 401f820:	1004c03a 	cmpne	r2,r2,zero
 401f824:	1000071e 	bne	r2,zero,401f844 <OSTaskStkChk+0x148>
 401f828:	e0bff817 	ldw	r2,-32(fp)
 401f82c:	e0bff415 	stw	r2,-48(fp)
 401f830:	e0bff417 	ldw	r2,-48(fp)
 401f834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 401f838:	00801144 	movi	r2,69
 401f83c:	e0bfff15 	stw	r2,-4(fp)
 401f840:	00002806 	br	401f8e4 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 401f844:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 401f848:	e0bffc17 	ldw	r2,-16(fp)
 401f84c:	10800317 	ldw	r2,12(r2)
 401f850:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 401f854:	e0bffc17 	ldw	r2,-16(fp)
 401f858:	10800217 	ldw	r2,8(r2)
 401f85c:	e0bffb15 	stw	r2,-20(fp)
 401f860:	e0bff817 	ldw	r2,-32(fp)
 401f864:	e0bff315 	stw	r2,-52(fp)
 401f868:	e0bff317 	ldw	r2,-52(fp)
 401f86c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 401f870:	00000306 	br	401f880 <OSTaskStkChk+0x184>
        nfree++;
 401f874:	e0bffa17 	ldw	r2,-24(fp)
 401f878:	10800044 	addi	r2,r2,1
 401f87c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 401f880:	e0bffb17 	ldw	r2,-20(fp)
 401f884:	10800017 	ldw	r2,0(r2)
 401f888:	1005003a 	cmpeq	r2,r2,zero
 401f88c:	1007883a 	mov	r3,r2
 401f890:	e0bffb17 	ldw	r2,-20(fp)
 401f894:	10800104 	addi	r2,r2,4
 401f898:	e0bffb15 	stw	r2,-20(fp)
 401f89c:	18803fcc 	andi	r2,r3,255
 401f8a0:	1004c03a 	cmpne	r2,r2,zero
 401f8a4:	103ff31e 	bne	r2,zero,401f874 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 401f8a8:	e0bffa17 	ldw	r2,-24(fp)
 401f8ac:	1085883a 	add	r2,r2,r2
 401f8b0:	1085883a 	add	r2,r2,r2
 401f8b4:	1007883a 	mov	r3,r2
 401f8b8:	e0bffe17 	ldw	r2,-8(fp)
 401f8bc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 401f8c0:	e0fff917 	ldw	r3,-28(fp)
 401f8c4:	e0bffa17 	ldw	r2,-24(fp)
 401f8c8:	1885c83a 	sub	r2,r3,r2
 401f8cc:	1085883a 	add	r2,r2,r2
 401f8d0:	1085883a 	add	r2,r2,r2
 401f8d4:	1007883a 	mov	r3,r2
 401f8d8:	e0bffe17 	ldw	r2,-8(fp)
 401f8dc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 401f8e0:	e03fff15 	stw	zero,-4(fp)
 401f8e4:	e0bfff17 	ldw	r2,-4(fp)
}
 401f8e8:	e037883a 	mov	sp,fp
 401f8ec:	df000017 	ldw	fp,0(sp)
 401f8f0:	dec00104 	addi	sp,sp,4
 401f8f4:	f800283a 	ret

0401f8f8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 401f8f8:	defff404 	addi	sp,sp,-48
 401f8fc:	dfc00b15 	stw	ra,44(sp)
 401f900:	df000a15 	stw	fp,40(sp)
 401f904:	df000a04 	addi	fp,sp,40
 401f908:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401f90c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 401f910:	e0bffe03 	ldbu	r2,-8(fp)
 401f914:	10800518 	cmpnei	r2,r2,20
 401f918:	1000031e 	bne	r2,zero,401f928 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 401f91c:	008011c4 	movi	r2,71
 401f920:	e0bfff15 	stw	r2,-4(fp)
 401f924:	00007906 	br	401fb0c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 401f928:	e0bffe03 	ldbu	r2,-8(fp)
 401f92c:	10800530 	cmpltui	r2,r2,20
 401f930:	1000061e 	bne	r2,zero,401f94c <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 401f934:	e0bffe03 	ldbu	r2,-8(fp)
 401f938:	10803fe0 	cmpeqi	r2,r2,255
 401f93c:	1000031e 	bne	r2,zero,401f94c <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 401f940:	00800a84 	movi	r2,42
 401f944:	e0bfff15 	stw	r2,-4(fp)
 401f948:	00007006 	br	401fb0c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f94c:	0005303a 	rdctl	r2,status
 401f950:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f954:	e0fff917 	ldw	r3,-28(fp)
 401f958:	00bfff84 	movi	r2,-2
 401f95c:	1884703a 	and	r2,r3,r2
 401f960:	1001703a 	wrctl	status,r2
  
  return context;
 401f964:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 401f968:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 401f96c:	e0bffe03 	ldbu	r2,-8(fp)
 401f970:	10803fd8 	cmpnei	r2,r2,255
 401f974:	1000081e 	bne	r2,zero,401f998 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 401f978:	008100b4 	movhi	r2,1026
 401f97c:	109ab304 	addi	r2,r2,27340
 401f980:	10800017 	ldw	r2,0(r2)
 401f984:	10800c83 	ldbu	r2,50(r2)
 401f988:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 401f98c:	00800044 	movi	r2,1
 401f990:	e0bffd05 	stb	r2,-12(fp)
 401f994:	00000b06 	br	401f9c4 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 401f998:	008100b4 	movhi	r2,1026
 401f99c:	109ab304 	addi	r2,r2,27340
 401f9a0:	10800017 	ldw	r2,0(r2)
 401f9a4:	10800c83 	ldbu	r2,50(r2)
 401f9a8:	10c03fcc 	andi	r3,r2,255
 401f9ac:	e0bffe03 	ldbu	r2,-8(fp)
 401f9b0:	1880031e 	bne	r3,r2,401f9c0 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 401f9b4:	00800044 	movi	r2,1
 401f9b8:	e0bffd05 	stb	r2,-12(fp)
 401f9bc:	00000106 	br	401f9c4 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 401f9c0:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401f9c4:	e0bffe03 	ldbu	r2,-8(fp)
 401f9c8:	00c100f4 	movhi	r3,1027
 401f9cc:	18d76004 	addi	r3,r3,23936
 401f9d0:	1085883a 	add	r2,r2,r2
 401f9d4:	1085883a 	add	r2,r2,r2
 401f9d8:	10c5883a 	add	r2,r2,r3
 401f9dc:	10800017 	ldw	r2,0(r2)
 401f9e0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 401f9e4:	e0bffc17 	ldw	r2,-16(fp)
 401f9e8:	1004c03a 	cmpne	r2,r2,zero
 401f9ec:	1000071e 	bne	r2,zero,401fa0c <OSTaskSuspend+0x114>
 401f9f0:	e0bffa17 	ldw	r2,-24(fp)
 401f9f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f9f8:	e0bff817 	ldw	r2,-32(fp)
 401f9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 401fa00:	00801204 	movi	r2,72
 401fa04:	e0bfff15 	stw	r2,-4(fp)
 401fa08:	00004006 	br	401fb0c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 401fa0c:	e0bffc17 	ldw	r2,-16(fp)
 401fa10:	10800058 	cmpnei	r2,r2,1
 401fa14:	1000071e 	bne	r2,zero,401fa34 <OSTaskSuspend+0x13c>
 401fa18:	e0bffa17 	ldw	r2,-24(fp)
 401fa1c:	e0bff715 	stw	r2,-36(fp)
 401fa20:	e0bff717 	ldw	r2,-36(fp)
 401fa24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401fa28:	008010c4 	movi	r2,67
 401fa2c:	e0bfff15 	stw	r2,-4(fp)
 401fa30:	00003606 	br	401fb0c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 401fa34:	e0bffc17 	ldw	r2,-16(fp)
 401fa38:	10800d03 	ldbu	r2,52(r2)
 401fa3c:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 401fa40:	e13ffb03 	ldbu	r4,-20(fp)
 401fa44:	e0fffb03 	ldbu	r3,-20(fp)
 401fa48:	008100b4 	movhi	r2,1026
 401fa4c:	109ab044 	addi	r2,r2,27329
 401fa50:	10c5883a 	add	r2,r2,r3
 401fa54:	10800003 	ldbu	r2,0(r2)
 401fa58:	1007883a 	mov	r3,r2
 401fa5c:	e0bffc17 	ldw	r2,-16(fp)
 401fa60:	10800d43 	ldbu	r2,53(r2)
 401fa64:	0084303a 	nor	r2,zero,r2
 401fa68:	1884703a 	and	r2,r3,r2
 401fa6c:	1007883a 	mov	r3,r2
 401fa70:	008100b4 	movhi	r2,1026
 401fa74:	109ab044 	addi	r2,r2,27329
 401fa78:	1105883a 	add	r2,r2,r4
 401fa7c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 401fa80:	e0fffb03 	ldbu	r3,-20(fp)
 401fa84:	008100b4 	movhi	r2,1026
 401fa88:	109ab044 	addi	r2,r2,27329
 401fa8c:	10c5883a 	add	r2,r2,r3
 401fa90:	10800003 	ldbu	r2,0(r2)
 401fa94:	10803fcc 	andi	r2,r2,255
 401fa98:	1004c03a 	cmpne	r2,r2,zero
 401fa9c:	10000c1e 	bne	r2,zero,401fad0 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 401faa0:	e0bffc17 	ldw	r2,-16(fp)
 401faa4:	10800d83 	ldbu	r2,54(r2)
 401faa8:	0084303a 	nor	r2,zero,r2
 401faac:	1007883a 	mov	r3,r2
 401fab0:	008100b4 	movhi	r2,1026
 401fab4:	109ab004 	addi	r2,r2,27328
 401fab8:	10800003 	ldbu	r2,0(r2)
 401fabc:	1884703a 	and	r2,r3,r2
 401fac0:	1007883a 	mov	r3,r2
 401fac4:	008100b4 	movhi	r2,1026
 401fac8:	109ab004 	addi	r2,r2,27328
 401facc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 401fad0:	e0bffc17 	ldw	r2,-16(fp)
 401fad4:	10800c03 	ldbu	r2,48(r2)
 401fad8:	10800214 	ori	r2,r2,8
 401fadc:	1007883a 	mov	r3,r2
 401fae0:	e0bffc17 	ldw	r2,-16(fp)
 401fae4:	10c00c05 	stb	r3,48(r2)
 401fae8:	e0bffa17 	ldw	r2,-24(fp)
 401faec:	e0bff615 	stw	r2,-40(fp)
 401faf0:	e0bff617 	ldw	r2,-40(fp)
 401faf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 401faf8:	e0bffd03 	ldbu	r2,-12(fp)
 401fafc:	10800058 	cmpnei	r2,r2,1
 401fb00:	1000011e 	bne	r2,zero,401fb08 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 401fb04:	40199ec0 	call	40199ec <OS_Sched>
    }
    return (OS_ERR_NONE);
 401fb08:	e03fff15 	stw	zero,-4(fp)
 401fb0c:	e0bfff17 	ldw	r2,-4(fp)
}
 401fb10:	e037883a 	mov	sp,fp
 401fb14:	dfc00117 	ldw	ra,4(sp)
 401fb18:	df000017 	ldw	fp,0(sp)
 401fb1c:	dec00204 	addi	sp,sp,8
 401fb20:	f800283a 	ret

0401fb24 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 401fb24:	defff504 	addi	sp,sp,-44
 401fb28:	dfc00a15 	stw	ra,40(sp)
 401fb2c:	df000915 	stw	fp,36(sp)
 401fb30:	df000904 	addi	fp,sp,36
 401fb34:	e17ffe15 	stw	r5,-8(fp)
 401fb38:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401fb3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 401fb40:	e0bffd03 	ldbu	r2,-12(fp)
 401fb44:	10800570 	cmpltui	r2,r2,21
 401fb48:	1000061e 	bne	r2,zero,401fb64 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 401fb4c:	e0bffd03 	ldbu	r2,-12(fp)
 401fb50:	10803fe0 	cmpeqi	r2,r2,255
 401fb54:	1000031e 	bne	r2,zero,401fb64 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 401fb58:	00800a84 	movi	r2,42
 401fb5c:	e0bfff15 	stw	r2,-4(fp)
 401fb60:	00003b06 	br	401fc50 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 401fb64:	e0bffe17 	ldw	r2,-8(fp)
 401fb68:	1004c03a 	cmpne	r2,r2,zero
 401fb6c:	1000031e 	bne	r2,zero,401fb7c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 401fb70:	00800244 	movi	r2,9
 401fb74:	e0bfff15 	stw	r2,-4(fp)
 401fb78:	00003506 	br	401fc50 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fb7c:	0005303a 	rdctl	r2,status
 401fb80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fb84:	e0fffa17 	ldw	r3,-24(fp)
 401fb88:	00bfff84 	movi	r2,-2
 401fb8c:	1884703a 	and	r2,r3,r2
 401fb90:	1001703a 	wrctl	status,r2
  
  return context;
 401fb94:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 401fb98:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 401fb9c:	e0bffd03 	ldbu	r2,-12(fp)
 401fba0:	10803fd8 	cmpnei	r2,r2,255
 401fba4:	1000051e 	bne	r2,zero,401fbbc <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 401fba8:	008100b4 	movhi	r2,1026
 401fbac:	109ab304 	addi	r2,r2,27340
 401fbb0:	10800017 	ldw	r2,0(r2)
 401fbb4:	10800c83 	ldbu	r2,50(r2)
 401fbb8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401fbbc:	e0bffd03 	ldbu	r2,-12(fp)
 401fbc0:	00c100f4 	movhi	r3,1027
 401fbc4:	18d76004 	addi	r3,r3,23936
 401fbc8:	1085883a 	add	r2,r2,r2
 401fbcc:	1085883a 	add	r2,r2,r2
 401fbd0:	10c5883a 	add	r2,r2,r3
 401fbd4:	10800017 	ldw	r2,0(r2)
 401fbd8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 401fbdc:	e0bffc17 	ldw	r2,-16(fp)
 401fbe0:	1004c03a 	cmpne	r2,r2,zero
 401fbe4:	1000071e 	bne	r2,zero,401fc04 <OSTaskQuery+0xe0>
 401fbe8:	e0bffb17 	ldw	r2,-20(fp)
 401fbec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fbf0:	e0bff917 	ldw	r2,-28(fp)
 401fbf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 401fbf8:	00800a44 	movi	r2,41
 401fbfc:	e0bfff15 	stw	r2,-4(fp)
 401fc00:	00001306 	br	401fc50 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 401fc04:	e0bffc17 	ldw	r2,-16(fp)
 401fc08:	10800058 	cmpnei	r2,r2,1
 401fc0c:	1000071e 	bne	r2,zero,401fc2c <OSTaskQuery+0x108>
 401fc10:	e0bffb17 	ldw	r2,-20(fp)
 401fc14:	e0bff815 	stw	r2,-32(fp)
 401fc18:	e0bff817 	ldw	r2,-32(fp)
 401fc1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401fc20:	008010c4 	movi	r2,67
 401fc24:	e0bfff15 	stw	r2,-4(fp)
 401fc28:	00000906 	br	401fc50 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 401fc2c:	e13ffe17 	ldw	r4,-8(fp)
 401fc30:	e17ffc17 	ldw	r5,-16(fp)
 401fc34:	01801b04 	movi	r6,108
 401fc38:	40199800 	call	4019980 <OS_MemCopy>
 401fc3c:	e0bffb17 	ldw	r2,-20(fp)
 401fc40:	e0bff715 	stw	r2,-36(fp)
 401fc44:	e0bff717 	ldw	r2,-36(fp)
 401fc48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401fc4c:	e03fff15 	stw	zero,-4(fp)
 401fc50:	e0bfff17 	ldw	r2,-4(fp)
}
 401fc54:	e037883a 	mov	sp,fp
 401fc58:	dfc00117 	ldw	ra,4(sp)
 401fc5c:	df000017 	ldw	fp,0(sp)
 401fc60:	dec00204 	addi	sp,sp,8
 401fc64:	f800283a 	ret

0401fc68 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 401fc68:	defffc04 	addi	sp,sp,-16
 401fc6c:	df000315 	stw	fp,12(sp)
 401fc70:	df000304 	addi	fp,sp,12
 401fc74:	e13ffd15 	stw	r4,-12(fp)
 401fc78:	e17ffe15 	stw	r5,-8(fp)
 401fc7c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 401fc80:	e0bfff0b 	ldhu	r2,-4(fp)
 401fc84:	1080004c 	andi	r2,r2,1
 401fc88:	10803fcc 	andi	r2,r2,255
 401fc8c:	1005003a 	cmpeq	r2,r2,zero
 401fc90:	1000101e 	bne	r2,zero,401fcd4 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 401fc94:	e0bfff0b 	ldhu	r2,-4(fp)
 401fc98:	1080008c 	andi	r2,r2,2
 401fc9c:	1005003a 	cmpeq	r2,r2,zero
 401fca0:	10000c1e 	bne	r2,zero,401fcd4 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 401fca4:	00000806 	br	401fcc8 <OS_TaskStkClr+0x60>
                size--;
 401fca8:	e0bffe17 	ldw	r2,-8(fp)
 401fcac:	10bfffc4 	addi	r2,r2,-1
 401fcb0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 401fcb4:	e0bffd17 	ldw	r2,-12(fp)
 401fcb8:	10000015 	stw	zero,0(r2)
 401fcbc:	e0bffd17 	ldw	r2,-12(fp)
 401fcc0:	10800104 	addi	r2,r2,4
 401fcc4:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 401fcc8:	e0bffe17 	ldw	r2,-8(fp)
 401fccc:	1004c03a 	cmpne	r2,r2,zero
 401fcd0:	103ff51e 	bne	r2,zero,401fca8 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 401fcd4:	e037883a 	mov	sp,fp
 401fcd8:	df000017 	ldw	fp,0(sp)
 401fcdc:	dec00104 	addi	sp,sp,4
 401fce0:	f800283a 	ret

0401fce4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 401fce4:	defff904 	addi	sp,sp,-28
 401fce8:	dfc00615 	stw	ra,24(sp)
 401fcec:	df000515 	stw	fp,20(sp)
 401fcf0:	df000504 	addi	fp,sp,20
 401fcf4:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 401fcf8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401fcfc:	008100b4 	movhi	r2,1026
 401fd00:	109ab204 	addi	r2,r2,27336
 401fd04:	10800003 	ldbu	r2,0(r2)
 401fd08:	10803fcc 	andi	r2,r2,255
 401fd0c:	1004c03a 	cmpne	r2,r2,zero
 401fd10:	1000421e 	bne	r2,zero,401fe1c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 401fd14:	e0bfff0b 	ldhu	r2,-4(fp)
 401fd18:	1005003a 	cmpeq	r2,r2,zero
 401fd1c:	10003f1e 	bne	r2,zero,401fe1c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fd20:	0005303a 	rdctl	r2,status
 401fd24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fd28:	e0fffc17 	ldw	r3,-16(fp)
 401fd2c:	00bfff84 	movi	r2,-2
 401fd30:	1884703a 	and	r2,r3,r2
 401fd34:	1001703a 	wrctl	status,r2
  
  return context;
 401fd38:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 401fd3c:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 401fd40:	008100b4 	movhi	r2,1026
 401fd44:	109ab304 	addi	r2,r2,27340
 401fd48:	10800017 	ldw	r2,0(r2)
 401fd4c:	10800d03 	ldbu	r2,52(r2)
 401fd50:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 401fd54:	e13ffe03 	ldbu	r4,-8(fp)
 401fd58:	e0fffe03 	ldbu	r3,-8(fp)
 401fd5c:	008100b4 	movhi	r2,1026
 401fd60:	109ab044 	addi	r2,r2,27329
 401fd64:	10c5883a 	add	r2,r2,r3
 401fd68:	10800003 	ldbu	r2,0(r2)
 401fd6c:	1007883a 	mov	r3,r2
 401fd70:	008100b4 	movhi	r2,1026
 401fd74:	109ab304 	addi	r2,r2,27340
 401fd78:	10800017 	ldw	r2,0(r2)
 401fd7c:	10800d43 	ldbu	r2,53(r2)
 401fd80:	0084303a 	nor	r2,zero,r2
 401fd84:	1884703a 	and	r2,r3,r2
 401fd88:	1007883a 	mov	r3,r2
 401fd8c:	008100b4 	movhi	r2,1026
 401fd90:	109ab044 	addi	r2,r2,27329
 401fd94:	1105883a 	add	r2,r2,r4
 401fd98:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 401fd9c:	e0fffe03 	ldbu	r3,-8(fp)
 401fda0:	008100b4 	movhi	r2,1026
 401fda4:	109ab044 	addi	r2,r2,27329
 401fda8:	10c5883a 	add	r2,r2,r3
 401fdac:	10800003 	ldbu	r2,0(r2)
 401fdb0:	10803fcc 	andi	r2,r2,255
 401fdb4:	1004c03a 	cmpne	r2,r2,zero
 401fdb8:	10000e1e 	bne	r2,zero,401fdf4 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 401fdbc:	008100b4 	movhi	r2,1026
 401fdc0:	109ab304 	addi	r2,r2,27340
 401fdc4:	10800017 	ldw	r2,0(r2)
 401fdc8:	10800d83 	ldbu	r2,54(r2)
 401fdcc:	0084303a 	nor	r2,zero,r2
 401fdd0:	1007883a 	mov	r3,r2
 401fdd4:	008100b4 	movhi	r2,1026
 401fdd8:	109ab004 	addi	r2,r2,27328
 401fddc:	10800003 	ldbu	r2,0(r2)
 401fde0:	1884703a 	and	r2,r3,r2
 401fde4:	1007883a 	mov	r3,r2
 401fde8:	008100b4 	movhi	r2,1026
 401fdec:	109ab004 	addi	r2,r2,27328
 401fdf0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 401fdf4:	008100b4 	movhi	r2,1026
 401fdf8:	109ab304 	addi	r2,r2,27340
 401fdfc:	10c00017 	ldw	r3,0(r2)
 401fe00:	e0bfff0b 	ldhu	r2,-4(fp)
 401fe04:	18800b8d 	sth	r2,46(r3)
 401fe08:	e0bffd17 	ldw	r2,-12(fp)
 401fe0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fe10:	e0bffb17 	ldw	r2,-20(fp)
 401fe14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 401fe18:	40199ec0 	call	40199ec <OS_Sched>
    }
}
 401fe1c:	e037883a 	mov	sp,fp
 401fe20:	dfc00117 	ldw	ra,4(sp)
 401fe24:	df000017 	ldw	fp,0(sp)
 401fe28:	dec00204 	addi	sp,sp,8
 401fe2c:	f800283a 	ret

0401fe30 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 401fe30:	defff604 	addi	sp,sp,-40
 401fe34:	dfc00915 	stw	ra,36(sp)
 401fe38:	df000815 	stw	fp,32(sp)
 401fe3c:	dc000715 	stw	r16,28(sp)
 401fe40:	df000704 	addi	fp,sp,28
 401fe44:	e13ffb05 	stb	r4,-20(fp)
 401fe48:	e17ffc05 	stb	r5,-16(fp)
 401fe4c:	e1bffd05 	stb	r6,-12(fp)
 401fe50:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401fe54:	008100b4 	movhi	r2,1026
 401fe58:	109ab204 	addi	r2,r2,27336
 401fe5c:	10800003 	ldbu	r2,0(r2)
 401fe60:	10803fcc 	andi	r2,r2,255
 401fe64:	1005003a 	cmpeq	r2,r2,zero
 401fe68:	1000031e 	bne	r2,zero,401fe78 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 401fe6c:	00801544 	movi	r2,85
 401fe70:	e0bfff15 	stw	r2,-4(fp)
 401fe74:	00004b06 	br	401ffa4 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 401fe78:	e0bffb03 	ldbu	r2,-20(fp)
 401fe7c:	1004c03a 	cmpne	r2,r2,zero
 401fe80:	10000c1e 	bne	r2,zero,401feb4 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 401fe84:	e0bffc03 	ldbu	r2,-16(fp)
 401fe88:	1004c03a 	cmpne	r2,r2,zero
 401fe8c:	1000091e 	bne	r2,zero,401feb4 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 401fe90:	e0bffd03 	ldbu	r2,-12(fp)
 401fe94:	1004c03a 	cmpne	r2,r2,zero
 401fe98:	1000061e 	bne	r2,zero,401feb4 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 401fe9c:	e0bffe0b 	ldhu	r2,-8(fp)
 401fea0:	1004c03a 	cmpne	r2,r2,zero
 401fea4:	1000031e 	bne	r2,zero,401feb4 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 401fea8:	00801504 	movi	r2,84
 401feac:	e0bfff15 	stw	r2,-4(fp)
 401feb0:	00003c06 	br	401ffa4 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
 401feb4:	e0bffc03 	ldbu	r2,-16(fp)
 401feb8:	10800f30 	cmpltui	r2,r2,60
 401febc:	1000031e 	bne	r2,zero,401fecc <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 401fec0:	00801444 	movi	r2,81
 401fec4:	e0bfff15 	stw	r2,-4(fp)
 401fec8:	00003606 	br	401ffa4 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
 401fecc:	e0bffd03 	ldbu	r2,-12(fp)
 401fed0:	10800f30 	cmpltui	r2,r2,60
 401fed4:	1000031e 	bne	r2,zero,401fee4 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 401fed8:	00801484 	movi	r2,82
 401fedc:	e0bfff15 	stw	r2,-4(fp)
 401fee0:	00003006 	br	401ffa4 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
 401fee4:	e0bffe0b 	ldhu	r2,-8(fp)
 401fee8:	1080fa30 	cmpltui	r2,r2,1000
 401feec:	1000031e 	bne	r2,zero,401fefc <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 401fef0:	008014c4 	movi	r2,83
 401fef4:	e0bfff15 	stw	r2,-4(fp)
 401fef8:	00002a06 	br	401ffa4 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 401fefc:	e13ffb03 	ldbu	r4,-20(fp)
 401ff00:	01438404 	movi	r5,3600
 401ff04:	4008ff80 	call	4008ff8 <__mulsi3>
 401ff08:	1021883a 	mov	r16,r2
 401ff0c:	e13ffc03 	ldbu	r4,-16(fp)
 401ff10:	01400f04 	movi	r5,60
 401ff14:	4008ff80 	call	4008ff8 <__mulsi3>
 401ff18:	8087883a 	add	r3,r16,r2
 401ff1c:	e0bffd03 	ldbu	r2,-12(fp)
 401ff20:	1889883a 	add	r4,r3,r2
 401ff24:	0140fa04 	movi	r5,1000
 401ff28:	4008ff80 	call	4008ff8 <__mulsi3>
 401ff2c:	1021883a 	mov	r16,r2
 401ff30:	e13ffe0b 	ldhu	r4,-8(fp)
 401ff34:	0140fa04 	movi	r5,1000
 401ff38:	4008ff80 	call	4008ff8 <__mulsi3>
 401ff3c:	1009883a 	mov	r4,r2
 401ff40:	0140fa04 	movi	r5,1000
 401ff44:	4008fe80 	call	4008fe8 <__udivsi3>
 401ff48:	8085883a 	add	r2,r16,r2
 401ff4c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 401ff50:	e0bffa17 	ldw	r2,-24(fp)
 401ff54:	1004d43a 	srli	r2,r2,16
 401ff58:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 401ff5c:	e0bffa17 	ldw	r2,-24(fp)
 401ff60:	10bfffcc 	andi	r2,r2,65535
 401ff64:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 401ff68:	e0bffa17 	ldw	r2,-24(fp)
 401ff6c:	113fffcc 	andi	r4,r2,65535
 401ff70:	401fce40 	call	401fce4 <OSTimeDly>
    while (loops > 0) {
 401ff74:	00000706 	br	401ff94 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
 401ff78:	01200014 	movui	r4,32768
 401ff7c:	401fce40 	call	401fce4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 401ff80:	01200014 	movui	r4,32768
 401ff84:	401fce40 	call	401fce4 <OSTimeDly>
        loops--;
 401ff88:	e0bff90b 	ldhu	r2,-28(fp)
 401ff8c:	10bfffc4 	addi	r2,r2,-1
 401ff90:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 401ff94:	e0bff90b 	ldhu	r2,-28(fp)
 401ff98:	1004c03a 	cmpne	r2,r2,zero
 401ff9c:	103ff61e 	bne	r2,zero,401ff78 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 401ffa0:	e03fff15 	stw	zero,-4(fp)
 401ffa4:	e0bfff17 	ldw	r2,-4(fp)
}
 401ffa8:	e037883a 	mov	sp,fp
 401ffac:	dfc00217 	ldw	ra,8(sp)
 401ffb0:	df000117 	ldw	fp,4(sp)
 401ffb4:	dc000017 	ldw	r16,0(sp)
 401ffb8:	dec00304 	addi	sp,sp,12
 401ffbc:	f800283a 	ret

0401ffc0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 401ffc0:	defff404 	addi	sp,sp,-48
 401ffc4:	dfc00b15 	stw	ra,44(sp)
 401ffc8:	df000a15 	stw	fp,40(sp)
 401ffcc:	df000a04 	addi	fp,sp,40
 401ffd0:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401ffd4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 401ffd8:	e0bffe03 	ldbu	r2,-8(fp)
 401ffdc:	10800530 	cmpltui	r2,r2,20
 401ffe0:	1000031e 	bne	r2,zero,401fff0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 401ffe4:	00800a84 	movi	r2,42
 401ffe8:	e0bfff15 	stw	r2,-4(fp)
 401ffec:	00007206 	br	40201b8 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fff0:	0005303a 	rdctl	r2,status
 401fff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fff8:	e0fffb17 	ldw	r3,-20(fp)
 401fffc:	00bfff84 	movi	r2,-2
 4020000:	1884703a 	and	r2,r3,r2
 4020004:	1001703a 	wrctl	status,r2
  
  return context;
 4020008:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 402000c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4020010:	e0bffe03 	ldbu	r2,-8(fp)
 4020014:	00c100f4 	movhi	r3,1027
 4020018:	18d76004 	addi	r3,r3,23936
 402001c:	1085883a 	add	r2,r2,r2
 4020020:	1085883a 	add	r2,r2,r2
 4020024:	10c5883a 	add	r2,r2,r3
 4020028:	10800017 	ldw	r2,0(r2)
 402002c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 4020030:	e0bffd17 	ldw	r2,-12(fp)
 4020034:	1004c03a 	cmpne	r2,r2,zero
 4020038:	1000071e 	bne	r2,zero,4020058 <OSTimeDlyResume+0x98>
 402003c:	e0bffc17 	ldw	r2,-16(fp)
 4020040:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4020044:	e0bffa17 	ldw	r2,-24(fp)
 4020048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 402004c:	008010c4 	movi	r2,67
 4020050:	e0bfff15 	stw	r2,-4(fp)
 4020054:	00005806 	br	40201b8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4020058:	e0bffd17 	ldw	r2,-12(fp)
 402005c:	10800058 	cmpnei	r2,r2,1
 4020060:	1000071e 	bne	r2,zero,4020080 <OSTimeDlyResume+0xc0>
 4020064:	e0bffc17 	ldw	r2,-16(fp)
 4020068:	e0bff915 	stw	r2,-28(fp)
 402006c:	e0bff917 	ldw	r2,-28(fp)
 4020070:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4020074:	008010c4 	movi	r2,67
 4020078:	e0bfff15 	stw	r2,-4(fp)
 402007c:	00004e06 	br	40201b8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4020080:	e0bffd17 	ldw	r2,-12(fp)
 4020084:	10800b8b 	ldhu	r2,46(r2)
 4020088:	10bfffcc 	andi	r2,r2,65535
 402008c:	1004c03a 	cmpne	r2,r2,zero
 4020090:	1000071e 	bne	r2,zero,40200b0 <OSTimeDlyResume+0xf0>
 4020094:	e0bffc17 	ldw	r2,-16(fp)
 4020098:	e0bff815 	stw	r2,-32(fp)
 402009c:	e0bff817 	ldw	r2,-32(fp)
 40200a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 40200a4:	00801404 	movi	r2,80
 40200a8:	e0bfff15 	stw	r2,-4(fp)
 40200ac:	00004206 	br	40201b8 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 40200b0:	e0bffd17 	ldw	r2,-12(fp)
 40200b4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 40200b8:	e0bffd17 	ldw	r2,-12(fp)
 40200bc:	10800c03 	ldbu	r2,48(r2)
 40200c0:	10803fcc 	andi	r2,r2,255
 40200c4:	10800dcc 	andi	r2,r2,55
 40200c8:	1005003a 	cmpeq	r2,r2,zero
 40200cc:	10000b1e 	bne	r2,zero,40200fc <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 40200d0:	e0bffd17 	ldw	r2,-12(fp)
 40200d4:	10c00c03 	ldbu	r3,48(r2)
 40200d8:	00bff204 	movi	r2,-56
 40200dc:	1884703a 	and	r2,r3,r2
 40200e0:	1007883a 	mov	r3,r2
 40200e4:	e0bffd17 	ldw	r2,-12(fp)
 40200e8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 40200ec:	e0fffd17 	ldw	r3,-12(fp)
 40200f0:	00800044 	movi	r2,1
 40200f4:	18800c45 	stb	r2,49(r3)
 40200f8:	00000206 	br	4020104 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 40200fc:	e0bffd17 	ldw	r2,-12(fp)
 4020100:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4020104:	e0bffd17 	ldw	r2,-12(fp)
 4020108:	10800c03 	ldbu	r2,48(r2)
 402010c:	10803fcc 	andi	r2,r2,255
 4020110:	1080020c 	andi	r2,r2,8
 4020114:	1004c03a 	cmpne	r2,r2,zero
 4020118:	1000221e 	bne	r2,zero,40201a4 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 402011c:	e0bffd17 	ldw	r2,-12(fp)
 4020120:	10c00d83 	ldbu	r3,54(r2)
 4020124:	008100b4 	movhi	r2,1026
 4020128:	109ab004 	addi	r2,r2,27328
 402012c:	10800003 	ldbu	r2,0(r2)
 4020130:	1884b03a 	or	r2,r3,r2
 4020134:	1007883a 	mov	r3,r2
 4020138:	008100b4 	movhi	r2,1026
 402013c:	109ab004 	addi	r2,r2,27328
 4020140:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4020144:	e0bffd17 	ldw	r2,-12(fp)
 4020148:	10800d03 	ldbu	r2,52(r2)
 402014c:	11003fcc 	andi	r4,r2,255
 4020150:	e0bffd17 	ldw	r2,-12(fp)
 4020154:	10800d03 	ldbu	r2,52(r2)
 4020158:	10c03fcc 	andi	r3,r2,255
 402015c:	008100b4 	movhi	r2,1026
 4020160:	109ab044 	addi	r2,r2,27329
 4020164:	10c5883a 	add	r2,r2,r3
 4020168:	10c00003 	ldbu	r3,0(r2)
 402016c:	e0bffd17 	ldw	r2,-12(fp)
 4020170:	10800d43 	ldbu	r2,53(r2)
 4020174:	1884b03a 	or	r2,r3,r2
 4020178:	1007883a 	mov	r3,r2
 402017c:	008100b4 	movhi	r2,1026
 4020180:	109ab044 	addi	r2,r2,27329
 4020184:	1105883a 	add	r2,r2,r4
 4020188:	10c00005 	stb	r3,0(r2)
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	e0bff715 	stw	r2,-36(fp)
 4020194:	e0bff717 	ldw	r2,-36(fp)
 4020198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 402019c:	40199ec0 	call	40199ec <OS_Sched>
 40201a0:	00000406 	br	40201b4 <OSTimeDlyResume+0x1f4>
 40201a4:	e0bffc17 	ldw	r2,-16(fp)
 40201a8:	e0bff615 	stw	r2,-40(fp)
 40201ac:	e0bff617 	ldw	r2,-40(fp)
 40201b0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 40201b4:	e03fff15 	stw	zero,-4(fp)
 40201b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	df000415 	stw	fp,16(sp)
 40201d8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40201dc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40201e0:	0005303a 	rdctl	r2,status
 40201e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40201e8:	e0fffd17 	ldw	r3,-12(fp)
 40201ec:	00bfff84 	movi	r2,-2
 40201f0:	1884703a 	and	r2,r3,r2
 40201f4:	1001703a 	wrctl	status,r2
  
  return context;
 40201f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 40201fc:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 4020200:	008100b4 	movhi	r2,1026
 4020204:	109ab404 	addi	r2,r2,27344
 4020208:	10800017 	ldw	r2,0(r2)
 402020c:	e0bfff15 	stw	r2,-4(fp)
 4020210:	e0bffe17 	ldw	r2,-8(fp)
 4020214:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4020218:	e0bffc17 	ldw	r2,-16(fp)
 402021c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 4020220:	e0bfff17 	ldw	r2,-4(fp)
}
 4020224:	e037883a 	mov	sp,fp
 4020228:	df000017 	ldw	fp,0(sp)
 402022c:	dec00104 	addi	sp,sp,4
 4020230:	f800283a 	ret

04020234 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 4020234:	defffb04 	addi	sp,sp,-20
 4020238:	df000415 	stw	fp,16(sp)
 402023c:	df000404 	addi	fp,sp,16
 4020240:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4020244:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4020248:	0005303a 	rdctl	r2,status
 402024c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4020250:	e0fffd17 	ldw	r3,-12(fp)
 4020254:	00bfff84 	movi	r2,-2
 4020258:	1884703a 	and	r2,r3,r2
 402025c:	1001703a 	wrctl	status,r2
  
  return context;
 4020260:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4020264:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 4020268:	00c100b4 	movhi	r3,1026
 402026c:	18dab404 	addi	r3,r3,27344
 4020270:	e0bfff17 	ldw	r2,-4(fp)
 4020274:	18800015 	stw	r2,0(r3)
 4020278:	e0bffe17 	ldw	r2,-8(fp)
 402027c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4020280:	e0bffc17 	ldw	r2,-16(fp)
 4020284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4020288:	e037883a 	mov	sp,fp
 402028c:	df000017 	ldw	fp,0(sp)
 4020290:	dec00104 	addi	sp,sp,4
 4020294:	f800283a 	ret

04020298 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4020298:	defffd04 	addi	sp,sp,-12
 402029c:	dfc00215 	stw	ra,8(sp)
 40202a0:	df000115 	stw	fp,4(sp)
 40202a4:	df000104 	addi	fp,sp,4
 40202a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 40202ac:	4022e9c0 	call	4022e9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40202b0:	00800044 	movi	r2,1
 40202b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40202b8:	e037883a 	mov	sp,fp
 40202bc:	dfc00117 	ldw	ra,4(sp)
 40202c0:	df000017 	ldw	fp,0(sp)
 40202c4:	dec00204 	addi	sp,sp,8
 40202c8:	f800283a 	ret

040202cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40202cc:	defffe04 	addi	sp,sp,-8
 40202d0:	dfc00115 	stw	ra,4(sp)
 40202d4:	df000015 	stw	fp,0(sp)
 40202d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 40202dc:	01018034 	movhi	r4,1536
 40202e0:	000b883a 	mov	r5,zero
 40202e4:	000d883a 	mov	r6,zero
 40202e8:	01c0fa04 	movi	r7,1000
 40202ec:	4021b180 	call	4021b18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 40202f0:	010100b4 	movhi	r4,1026
 40202f4:	2115fb04 	addi	r4,r4,22508
 40202f8:	40203680 	call	4020368 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40202fc:	010100b4 	movhi	r4,1026
 4020300:	21163704 	addi	r4,r4,22748
 4020304:	000b883a 	mov	r5,zero
 4020308:	01800104 	movi	r6,4
 402030c:	4020e940 	call	4020e94 <altera_avalon_jtag_uart_init>
 4020310:	010100b4 	movhi	r4,1026
 4020314:	21162d04 	addi	r4,r4,22708
 4020318:	40203300 	call	4020330 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 402031c:	e037883a 	mov	sp,fp
 4020320:	dfc00117 	ldw	ra,4(sp)
 4020324:	df000017 	ldw	fp,0(sp)
 4020328:	dec00204 	addi	sp,sp,8
 402032c:	f800283a 	ret

04020330 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4020330:	defffd04 	addi	sp,sp,-12
 4020334:	dfc00215 	stw	ra,8(sp)
 4020338:	df000115 	stw	fp,4(sp)
 402033c:	df000104 	addi	fp,sp,4
 4020340:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4020344:	e13fff17 	ldw	r4,-4(fp)
 4020348:	014100b4 	movhi	r5,1026
 402034c:	295a5204 	addi	r5,r5,26952
 4020350:	402252c0 	call	402252c <alt_dev_llist_insert>
}
 4020354:	e037883a 	mov	sp,fp
 4020358:	dfc00117 	ldw	ra,4(sp)
 402035c:	df000017 	ldw	fp,0(sp)
 4020360:	dec00204 	addi	sp,sp,8
 4020364:	f800283a 	ret

04020368 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 4020368:	defffc04 	addi	sp,sp,-16
 402036c:	dfc00315 	stw	ra,12(sp)
 4020370:	df000215 	stw	fp,8(sp)
 4020374:	df000204 	addi	fp,sp,8
 4020378:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 402037c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 4020380:	e13fff17 	ldw	r4,-4(fp)
 4020384:	40203f40 	call	40203f4 <alt_epcs_flash_query>
 4020388:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 402038c:	e0bffe17 	ldw	r2,-8(fp)
 4020390:	1004c03a 	cmpne	r2,r2,zero
 4020394:	1000031e 	bne	r2,zero,40203a4 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 4020398:	e13fff17 	ldw	r4,-4(fp)
 402039c:	40203bc0 	call	40203bc <alt_flash_device_register>
 40203a0:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 40203a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40203a8:	e037883a 	mov	sp,fp
 40203ac:	dfc00117 	ldw	ra,4(sp)
 40203b0:	df000017 	ldw	fp,0(sp)
 40203b4:	dec00204 	addi	sp,sp,8
 40203b8:	f800283a 	ret

040203bc <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 40203bc:	defffd04 	addi	sp,sp,-12
 40203c0:	dfc00215 	stw	ra,8(sp)
 40203c4:	df000115 	stw	fp,4(sp)
 40203c8:	df000104 	addi	fp,sp,4
 40203cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 40203d0:	e13fff17 	ldw	r4,-4(fp)
 40203d4:	014100b4 	movhi	r5,1026
 40203d8:	295a5604 	addi	r5,r5,26968
 40203dc:	402252c0 	call	402252c <alt_dev_llist_insert>
}
 40203e0:	e037883a 	mov	sp,fp
 40203e4:	dfc00117 	ldw	ra,4(sp)
 40203e8:	df000017 	ldw	fp,0(sp)
 40203ec:	dec00204 	addi	sp,sp,8
 40203f0:	f800283a 	ret

040203f4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 40203f4:	defffc04 	addi	sp,sp,-16
 40203f8:	dfc00315 	stw	ra,12(sp)
 40203fc:	df000215 	stw	fp,8(sp)
 4020400:	df000204 	addi	fp,sp,8
 4020404:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 4020408:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 402040c:	e0bfff17 	ldw	r2,-4(fp)
 4020410:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 4020414:	e0bfff17 	ldw	r2,-4(fp)
 4020418:	11002d17 	ldw	r4,180(r2)
 402041c:	40220e00 	call	40220e0 <epcs_read_electronic_signature>
 4020420:	10c03fcc 	andi	r3,r2,255
 4020424:	e0bfff17 	ldw	r2,-4(fp)
 4020428:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 402042c:	e0bfff17 	ldw	r2,-4(fp)
 4020430:	10802f17 	ldw	r2,188(r2)
 4020434:	10800598 	cmpnei	r2,r2,22
 4020438:	10000a1e 	bne	r2,zero,4020464 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 402043c:	e0ffff17 	ldw	r3,-4(fp)
 4020440:	00802034 	movhi	r2,128
 4020444:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 4020448:	e0ffff17 	ldw	r3,-4(fp)
 402044c:	00802004 	movi	r2,128
 4020450:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 4020454:	e0ffff17 	ldw	r3,-4(fp)
 4020458:	00800074 	movhi	r2,1
 402045c:	18801015 	stw	r2,64(r3)
 4020460:	00007306 	br	4020630 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 4020464:	e0bfff17 	ldw	r2,-4(fp)
 4020468:	10802f17 	ldw	r2,188(r2)
 402046c:	10800518 	cmpnei	r2,r2,20
 4020470:	10000a1e 	bne	r2,zero,402049c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 4020474:	e0ffff17 	ldw	r3,-4(fp)
 4020478:	00800834 	movhi	r2,32
 402047c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 4020480:	e0ffff17 	ldw	r3,-4(fp)
 4020484:	00800804 	movi	r2,32
 4020488:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 402048c:	e0ffff17 	ldw	r3,-4(fp)
 4020490:	00800074 	movhi	r2,1
 4020494:	18801015 	stw	r2,64(r3)
 4020498:	00006506 	br	4020630 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 402049c:	e0bfff17 	ldw	r2,-4(fp)
 40204a0:	10802f17 	ldw	r2,188(r2)
 40204a4:	108004d8 	cmpnei	r2,r2,19
 40204a8:	10000a1e 	bne	r2,zero,40204d4 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 40204ac:	e0ffff17 	ldw	r3,-4(fp)
 40204b0:	00800434 	movhi	r2,16
 40204b4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 40204b8:	e0ffff17 	ldw	r3,-4(fp)
 40204bc:	00800404 	movi	r2,16
 40204c0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 40204c4:	e0ffff17 	ldw	r3,-4(fp)
 40204c8:	00800074 	movhi	r2,1
 40204cc:	18801015 	stw	r2,64(r3)
 40204d0:	00005706 	br	4020630 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 40204d4:	e0bfff17 	ldw	r2,-4(fp)
 40204d8:	10802f17 	ldw	r2,188(r2)
 40204dc:	10800498 	cmpnei	r2,r2,18
 40204e0:	10000a1e 	bne	r2,zero,402050c <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 40204e4:	e0ffff17 	ldw	r3,-4(fp)
 40204e8:	00800234 	movhi	r2,8
 40204ec:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 40204f0:	e0ffff17 	ldw	r3,-4(fp)
 40204f4:	00800204 	movi	r2,8
 40204f8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 40204fc:	e0ffff17 	ldw	r3,-4(fp)
 4020500:	00800074 	movhi	r2,1
 4020504:	18801015 	stw	r2,64(r3)
 4020508:	00004906 	br	4020630 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 402050c:	e0bfff17 	ldw	r2,-4(fp)
 4020510:	10802f17 	ldw	r2,188(r2)
 4020514:	10800418 	cmpnei	r2,r2,16
 4020518:	10000a1e 	bne	r2,zero,4020544 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 402051c:	e0ffff17 	ldw	r3,-4(fp)
 4020520:	008000b4 	movhi	r2,2
 4020524:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 4020528:	e0ffff17 	ldw	r3,-4(fp)
 402052c:	00800104 	movi	r2,4
 4020530:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 4020534:	e0ffff17 	ldw	r3,-4(fp)
 4020538:	00a00014 	movui	r2,32768
 402053c:	18801015 	stw	r2,64(r3)
 4020540:	00003b06 	br	4020630 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 4020544:	e0bfff17 	ldw	r2,-4(fp)
 4020548:	11002d17 	ldw	r4,180(r2)
 402054c:	402214c0 	call	402214c <epcs_read_device_id>
 4020550:	1007883a 	mov	r3,r2
 4020554:	e0bfff17 	ldw	r2,-4(fp)
 4020558:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 402055c:	e0bfff17 	ldw	r2,-4(fp)
 4020560:	10c02f17 	ldw	r3,188(r2)
 4020564:	00804034 	movhi	r2,256
 4020568:	10bfffc4 	addi	r2,r2,-1
 402056c:	1886703a 	and	r3,r3,r2
 4020570:	00800874 	movhi	r2,33
 4020574:	10ae8604 	addi	r2,r2,-17896
 4020578:	18800a1e 	bne	r3,r2,40205a4 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 402057c:	e0ffff17 	ldw	r3,-4(fp)
 4020580:	00804034 	movhi	r2,256
 4020584:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 4020588:	e0ffff17 	ldw	r3,-4(fp)
 402058c:	00804004 	movi	r2,256
 4020590:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4020594:	e0ffff17 	ldw	r3,-4(fp)
 4020598:	00800074 	movhi	r2,1
 402059c:	18801015 	stw	r2,64(r3)
 40205a0:	00002306 	br	4020630 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 40205a4:	e0bfff17 	ldw	r2,-4(fp)
 40205a8:	10802f17 	ldw	r2,188(r2)
 40205ac:	10803fcc 	andi	r2,r2,255
 40205b0:	10800618 	cmpnei	r2,r2,24
 40205b4:	10000a1e 	bne	r2,zero,40205e0 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 40205b8:	e0ffff17 	ldw	r3,-4(fp)
 40205bc:	00804034 	movhi	r2,256
 40205c0:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 40205c4:	e0ffff17 	ldw	r3,-4(fp)
 40205c8:	00801004 	movi	r2,64
 40205cc:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 40205d0:	e0ffff17 	ldw	r3,-4(fp)
 40205d4:	00800134 	movhi	r2,4
 40205d8:	18801015 	stw	r2,64(r3)
 40205dc:	00001406 	br	4020630 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 40205e0:	e0bfff17 	ldw	r2,-4(fp)
 40205e4:	10802f17 	ldw	r2,188(r2)
 40205e8:	10803fcc 	andi	r2,r2,255
 40205ec:	10800658 	cmpnei	r2,r2,25
 40205f0:	10000d1e 	bne	r2,zero,4020628 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 40205f4:	e0ffff17 	ldw	r3,-4(fp)
 40205f8:	00808034 	movhi	r2,512
 40205fc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 4020600:	e0ffff17 	ldw	r3,-4(fp)
 4020604:	00808004 	movi	r2,512
 4020608:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 402060c:	e0ffff17 	ldw	r3,-4(fp)
 4020610:	00800074 	movhi	r2,1
 4020614:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 4020618:	e0ffff17 	ldw	r3,-4(fp)
 402061c:	00800044 	movi	r2,1
 4020620:	18803115 	stw	r2,196(r3)
 4020624:	00000206 	br	4020630 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 4020628:	00bffb44 	movi	r2,-19
 402062c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 4020630:	e0bfff17 	ldw	r2,-4(fp)
 4020634:	10800e17 	ldw	r2,56(r2)
 4020638:	1007883a 	mov	r3,r2
 402063c:	e0bfff17 	ldw	r2,-4(fp)
 4020640:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 4020644:	e0ffff17 	ldw	r3,-4(fp)
 4020648:	00800044 	movi	r2,1
 402064c:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 4020650:	e0bfff17 	ldw	r2,-4(fp)
 4020654:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 4020658:	e0ffff17 	ldw	r3,-4(fp)
 402065c:	00804004 	movi	r2,256
 4020660:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 4020664:	e0bffe17 	ldw	r2,-8(fp)
}
 4020668:	e037883a 	mov	sp,fp
 402066c:	dfc00117 	ldw	ra,4(sp)
 4020670:	df000017 	ldw	fp,0(sp)
 4020674:	dec00204 	addi	sp,sp,8
 4020678:	f800283a 	ret

0402067c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 402067c:	deffeb04 	addi	sp,sp,-84
 4020680:	dfc01415 	stw	ra,80(sp)
 4020684:	df001315 	stw	fp,76(sp)
 4020688:	df001304 	addi	fp,sp,76
 402068c:	e13ff915 	stw	r4,-28(fp)
 4020690:	e17ffa15 	stw	r5,-24(fp)
 4020694:	e1bffb15 	stw	r6,-20(fp)
 4020698:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 402069c:	00800804 	movi	r2,32
 40206a0:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 40206a4:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 40206a8:	00002c06 	br	402075c <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 40206ac:	e0bff017 	ldw	r2,-64(fp)
 40206b0:	e0bfff15 	stw	r2,-4(fp)
 40206b4:	e0fffc17 	ldw	r3,-16(fp)
 40206b8:	e0fffe15 	stw	r3,-8(fp)
 40206bc:	e0bfff17 	ldw	r2,-4(fp)
 40206c0:	e0fffe17 	ldw	r3,-8(fp)
 40206c4:	10c0022e 	bgeu	r2,r3,40206d0 <alt_epcs_flash_memcmp+0x54>
 40206c8:	e0bfff17 	ldw	r2,-4(fp)
 40206cc:	e0bffe15 	stw	r2,-8(fp)
 40206d0:	e0fffe17 	ldw	r3,-8(fp)
 40206d4:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 40206d8:	e0fffb17 	ldw	r3,-20(fp)
 40206dc:	e0bfef17 	ldw	r2,-68(fp)
 40206e0:	188b883a 	add	r5,r3,r2
 40206e4:	e1bff104 	addi	r6,fp,-60
 40206e8:	e13ff917 	ldw	r4,-28(fp)
 40206ec:	e1ffee17 	ldw	r7,-72(fp)
 40206f0:	4020cb40 	call	4020cb4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 40206f4:	1004403a 	cmpge	r2,r2,zero
 40206f8:	1000031e 	bne	r2,zero,4020708 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 40206fc:	00bfffc4 	movi	r2,-1
 4020700:	e0bffd15 	stw	r2,-12(fp)
 4020704:	00001906 	br	402076c <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 4020708:	e0fffa17 	ldw	r3,-24(fp)
 402070c:	e0bfef17 	ldw	r2,-68(fp)
 4020710:	1889883a 	add	r4,r3,r2
 4020714:	e1bfee17 	ldw	r6,-72(fp)
 4020718:	e17ff104 	addi	r5,fp,-60
 402071c:	402384c0 	call	402384c <memcmp>
 4020720:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 4020724:	e0bfed17 	ldw	r2,-76(fp)
 4020728:	1005003a 	cmpeq	r2,r2,zero
 402072c:	1000031e 	bne	r2,zero,402073c <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 4020730:	e0ffed17 	ldw	r3,-76(fp)
 4020734:	e0fffd15 	stw	r3,-12(fp)
 4020738:	00000c06 	br	402076c <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 402073c:	e0ffee17 	ldw	r3,-72(fp)
 4020740:	e0bffc17 	ldw	r2,-16(fp)
 4020744:	10c5c83a 	sub	r2,r2,r3
 4020748:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 402074c:	e0ffef17 	ldw	r3,-68(fp)
 4020750:	e0bfee17 	ldw	r2,-72(fp)
 4020754:	1885883a 	add	r2,r3,r2
 4020758:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 402075c:	e0bffc17 	ldw	r2,-16(fp)
 4020760:	1004c03a 	cmpne	r2,r2,zero
 4020764:	103fd11e 	bne	r2,zero,40206ac <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 4020768:	e03ffd15 	stw	zero,-12(fp)
 402076c:	e0bffd17 	ldw	r2,-12(fp)
}
 4020770:	e037883a 	mov	sp,fp
 4020774:	dfc00117 	ldw	ra,4(sp)
 4020778:	df000017 	ldw	fp,0(sp)
 402077c:	dec00204 	addi	sp,sp,8
 4020780:	f800283a 	ret

04020784 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 4020784:	defff204 	addi	sp,sp,-56
 4020788:	dfc00d15 	stw	ra,52(sp)
 402078c:	df000c15 	stw	fp,48(sp)
 4020790:	df000c04 	addi	fp,sp,48
 4020794:	e13ffa15 	stw	r4,-24(fp)
 4020798:	e17ffb15 	stw	r5,-20(fp)
 402079c:	e1bffc15 	stw	r6,-16(fp)
 40207a0:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 40207a4:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 40207a8:	e03ff815 	stw	zero,-32(fp)
 40207ac:	00008b06 	br	40209dc <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 40207b0:	e0bff817 	ldw	r2,-32(fp)
 40207b4:	e0fffa17 	ldw	r3,-24(fp)
 40207b8:	1004913a 	slli	r2,r2,4
 40207bc:	10c5883a 	add	r2,r2,r3
 40207c0:	10800d04 	addi	r2,r2,52
 40207c4:	10c00017 	ldw	r3,0(r2)
 40207c8:	e0bffb17 	ldw	r2,-20(fp)
 40207cc:	10c08016 	blt	r2,r3,40209d0 <alt_epcs_flash_write+0x24c>
 40207d0:	e0bff817 	ldw	r2,-32(fp)
 40207d4:	e0fffa17 	ldw	r3,-24(fp)
 40207d8:	1004913a 	slli	r2,r2,4
 40207dc:	10c5883a 	add	r2,r2,r3
 40207e0:	10800d04 	addi	r2,r2,52
 40207e4:	11000017 	ldw	r4,0(r2)
 40207e8:	e0bff817 	ldw	r2,-32(fp)
 40207ec:	e0fffa17 	ldw	r3,-24(fp)
 40207f0:	1004913a 	slli	r2,r2,4
 40207f4:	10c5883a 	add	r2,r2,r3
 40207f8:	10800e04 	addi	r2,r2,56
 40207fc:	10800017 	ldw	r2,0(r2)
 4020800:	2087883a 	add	r3,r4,r2
 4020804:	e0bffb17 	ldw	r2,-20(fp)
 4020808:	10c0710e 	bge	r2,r3,40209d0 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 402080c:	e0bff817 	ldw	r2,-32(fp)
 4020810:	e0fffa17 	ldw	r3,-24(fp)
 4020814:	1004913a 	slli	r2,r2,4
 4020818:	10c5883a 	add	r2,r2,r3
 402081c:	10800d04 	addi	r2,r2,52
 4020820:	10800017 	ldw	r2,0(r2)
 4020824:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4020828:	e03ff715 	stw	zero,-36(fp)
 402082c:	00006006 	br	40209b0 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 4020830:	e0fffb17 	ldw	r3,-20(fp)
 4020834:	e0bff517 	ldw	r2,-44(fp)
 4020838:	18805116 	blt	r3,r2,4020980 <alt_epcs_flash_write+0x1fc>
 402083c:	e0bff817 	ldw	r2,-32(fp)
 4020840:	e0fffa17 	ldw	r3,-24(fp)
 4020844:	1004913a 	slli	r2,r2,4
 4020848:	10c5883a 	add	r2,r2,r3
 402084c:	10801004 	addi	r2,r2,64
 4020850:	10c00017 	ldw	r3,0(r2)
 4020854:	e0bff517 	ldw	r2,-44(fp)
 4020858:	1887883a 	add	r3,r3,r2
 402085c:	e0bffb17 	ldw	r2,-20(fp)
 4020860:	10c0470e 	bge	r2,r3,4020980 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 4020864:	e0bff817 	ldw	r2,-32(fp)
 4020868:	e0fffa17 	ldw	r3,-24(fp)
 402086c:	1004913a 	slli	r2,r2,4
 4020870:	10c5883a 	add	r2,r2,r3
 4020874:	10801004 	addi	r2,r2,64
 4020878:	10c00017 	ldw	r3,0(r2)
 402087c:	e0bff517 	ldw	r2,-44(fp)
 4020880:	1887883a 	add	r3,r3,r2
 4020884:	e0bffb17 	ldw	r2,-20(fp)
 4020888:	1885c83a 	sub	r2,r3,r2
 402088c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 4020890:	e0bff617 	ldw	r2,-40(fp)
 4020894:	e0bfff15 	stw	r2,-4(fp)
 4020898:	e0fffd17 	ldw	r3,-12(fp)
 402089c:	e0fffe15 	stw	r3,-8(fp)
 40208a0:	e0bfff17 	ldw	r2,-4(fp)
 40208a4:	e0fffe17 	ldw	r3,-8(fp)
 40208a8:	10c0020e 	bge	r2,r3,40208b4 <alt_epcs_flash_write+0x130>
 40208ac:	e0bfff17 	ldw	r2,-4(fp)
 40208b0:	e0bffe15 	stw	r2,-8(fp)
 40208b4:	e0fffe17 	ldw	r3,-8(fp)
 40208b8:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 40208bc:	e1fff617 	ldw	r7,-40(fp)
 40208c0:	e13ffa17 	ldw	r4,-24(fp)
 40208c4:	e17ffc17 	ldw	r5,-16(fp)
 40208c8:	e1bffb17 	ldw	r6,-20(fp)
 40208cc:	402067c0 	call	402067c <alt_epcs_flash_memcmp>
 40208d0:	1005003a 	cmpeq	r2,r2,zero
 40208d4:	1000131e 	bne	r2,zero,4020924 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 40208d8:	e0bffa17 	ldw	r2,-24(fp)
 40208dc:	10800817 	ldw	r2,32(r2)
 40208e0:	e13ffa17 	ldw	r4,-24(fp)
 40208e4:	e17ff517 	ldw	r5,-44(fp)
 40208e8:	103ee83a 	callr	r2
 40208ec:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 40208f0:	e0bff917 	ldw	r2,-28(fp)
 40208f4:	1004c03a 	cmpne	r2,r2,zero
 40208f8:	10000a1e 	bne	r2,zero,4020924 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 40208fc:	e0bffa17 	ldw	r2,-24(fp)
 4020900:	10c00917 	ldw	r3,36(r2)
 4020904:	e0bff617 	ldw	r2,-40(fp)
 4020908:	d8800015 	stw	r2,0(sp)
 402090c:	e13ffa17 	ldw	r4,-24(fp)
 4020910:	e17ff517 	ldw	r5,-44(fp)
 4020914:	e1bffb17 	ldw	r6,-20(fp)
 4020918:	e1fffc17 	ldw	r7,-16(fp)
 402091c:	183ee83a 	callr	r3
 4020920:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 4020924:	e0fffd17 	ldw	r3,-12(fp)
 4020928:	e0bff617 	ldw	r2,-40(fp)
 402092c:	18802f26 	beq	r3,r2,40209ec <alt_epcs_flash_write+0x268>
 4020930:	e0bff917 	ldw	r2,-28(fp)
 4020934:	1004c03a 	cmpne	r2,r2,zero
 4020938:	10002c1e 	bne	r2,zero,40209ec <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 402093c:	e0fffd17 	ldw	r3,-12(fp)
 4020940:	e0bff617 	ldw	r2,-40(fp)
 4020944:	1885c83a 	sub	r2,r3,r2
 4020948:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 402094c:	e0bff817 	ldw	r2,-32(fp)
 4020950:	e0fffa17 	ldw	r3,-24(fp)
 4020954:	1004913a 	slli	r2,r2,4
 4020958:	10c5883a 	add	r2,r2,r3
 402095c:	10801004 	addi	r2,r2,64
 4020960:	10c00017 	ldw	r3,0(r2)
 4020964:	e0bff517 	ldw	r2,-44(fp)
 4020968:	1885883a 	add	r2,r3,r2
 402096c:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 4020970:	e0fffc17 	ldw	r3,-16(fp)
 4020974:	e0bff617 	ldw	r2,-40(fp)
 4020978:	1885883a 	add	r2,r3,r2
 402097c:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 4020980:	e0bff817 	ldw	r2,-32(fp)
 4020984:	e0fffa17 	ldw	r3,-24(fp)
 4020988:	1004913a 	slli	r2,r2,4
 402098c:	10c5883a 	add	r2,r2,r3
 4020990:	10801004 	addi	r2,r2,64
 4020994:	10c00017 	ldw	r3,0(r2)
 4020998:	e0bff517 	ldw	r2,-44(fp)
 402099c:	10c5883a 	add	r2,r2,r3
 40209a0:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 40209a4:	e0bff717 	ldw	r2,-36(fp)
 40209a8:	10800044 	addi	r2,r2,1
 40209ac:	e0bff715 	stw	r2,-36(fp)
 40209b0:	e0bff817 	ldw	r2,-32(fp)
 40209b4:	e0fffa17 	ldw	r3,-24(fp)
 40209b8:	1004913a 	slli	r2,r2,4
 40209bc:	10c5883a 	add	r2,r2,r3
 40209c0:	10800f04 	addi	r2,r2,60
 40209c4:	10c00017 	ldw	r3,0(r2)
 40209c8:	e0bff717 	ldw	r2,-36(fp)
 40209cc:	10ff9816 	blt	r2,r3,4020830 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 40209d0:	e0bff817 	ldw	r2,-32(fp)
 40209d4:	10800044 	addi	r2,r2,1
 40209d8:	e0bff815 	stw	r2,-32(fp)
 40209dc:	e0bffa17 	ldw	r2,-24(fp)
 40209e0:	10c00c17 	ldw	r3,48(r2)
 40209e4:	e0bff817 	ldw	r2,-32(fp)
 40209e8:	10ff7116 	blt	r2,r3,40207b0 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 40209ec:	e0bff917 	ldw	r2,-28(fp)
}
 40209f0:	e037883a 	mov	sp,fp
 40209f4:	dfc00117 	ldw	ra,4(sp)
 40209f8:	df000017 	ldw	fp,0(sp)
 40209fc:	dec00204 	addi	sp,sp,8
 4020a00:	f800283a 	ret

04020a04 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 4020a04:	defffa04 	addi	sp,sp,-24
 4020a08:	df000515 	stw	fp,20(sp)
 4020a0c:	df000504 	addi	fp,sp,20
 4020a10:	e13ffd15 	stw	r4,-12(fp)
 4020a14:	e17ffe15 	stw	r5,-8(fp)
 4020a18:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 4020a1c:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 4020a20:	e0bffd17 	ldw	r2,-12(fp)
 4020a24:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 4020a28:	e0bffb17 	ldw	r2,-20(fp)
 4020a2c:	10c00c17 	ldw	r3,48(r2)
 4020a30:	e0bfff17 	ldw	r2,-4(fp)
 4020a34:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 4020a38:	e0bffb17 	ldw	r2,-20(fp)
 4020a3c:	10800c17 	ldw	r2,48(r2)
 4020a40:	1004c03a 	cmpne	r2,r2,zero
 4020a44:	1000031e 	bne	r2,zero,4020a54 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 4020a48:	00bffec4 	movi	r2,-5
 4020a4c:	e0bffc15 	stw	r2,-16(fp)
 4020a50:	00000b06 	br	4020a80 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 4020a54:	e0bffb17 	ldw	r2,-20(fp)
 4020a58:	10800c17 	ldw	r2,48(r2)
 4020a5c:	10800250 	cmplti	r2,r2,9
 4020a60:	1000031e 	bne	r2,zero,4020a70 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 4020a64:	00bffd04 	movi	r2,-12
 4020a68:	e0bffc15 	stw	r2,-16(fp)
 4020a6c:	00000406 	br	4020a80 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 4020a70:	e0bffb17 	ldw	r2,-20(fp)
 4020a74:	10c00d04 	addi	r3,r2,52
 4020a78:	e0bffe17 	ldw	r2,-8(fp)
 4020a7c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 4020a80:	e0bffc17 	ldw	r2,-16(fp)
}
 4020a84:	e037883a 	mov	sp,fp
 4020a88:	df000017 	ldw	fp,0(sp)
 4020a8c:	dec00104 	addi	sp,sp,4
 4020a90:	f800283a 	ret

04020a94 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 4020a94:	defffa04 	addi	sp,sp,-24
 4020a98:	dfc00515 	stw	ra,20(sp)
 4020a9c:	df000415 	stw	fp,16(sp)
 4020aa0:	df000404 	addi	fp,sp,16
 4020aa4:	e13ffe15 	stw	r4,-8(fp)
 4020aa8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4020aac:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020ab0:	e0bffe17 	ldw	r2,-8(fp)
 4020ab4:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 4020ab8:	e13ffe17 	ldw	r4,-8(fp)
 4020abc:	e17fff17 	ldw	r5,-4(fp)
 4020ac0:	4020b040 	call	4020b04 <alt_epcs_test_address>
 4020ac4:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 4020ac8:	e0bffd17 	ldw	r2,-12(fp)
 4020acc:	1004803a 	cmplt	r2,r2,zero
 4020ad0:	1000061e 	bne	r2,zero,4020aec <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 4020ad4:	e0bffc17 	ldw	r2,-16(fp)
 4020ad8:	11002d17 	ldw	r4,180(r2)
 4020adc:	e17fff17 	ldw	r5,-4(fp)
 4020ae0:	e0bffc17 	ldw	r2,-16(fp)
 4020ae4:	11803117 	ldw	r6,196(r2)
 4020ae8:	4021c080 	call	4021c08 <epcs_sector_erase>
  }
  return ret_code;
 4020aec:	e0bffd17 	ldw	r2,-12(fp)
}
 4020af0:	e037883a 	mov	sp,fp
 4020af4:	dfc00117 	ldw	ra,4(sp)
 4020af8:	df000017 	ldw	fp,0(sp)
 4020afc:	dec00204 	addi	sp,sp,8
 4020b00:	f800283a 	ret

04020b04 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 4020b04:	defff904 	addi	sp,sp,-28
 4020b08:	df000615 	stw	fp,24(sp)
 4020b0c:	df000604 	addi	fp,sp,24
 4020b10:	e13ffe15 	stw	r4,-8(fp)
 4020b14:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4020b18:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020b1c:	e0bffe17 	ldw	r2,-8(fp)
 4020b20:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 4020b24:	e0bffc17 	ldw	r2,-16(fp)
 4020b28:	10800c17 	ldw	r2,48(r2)
 4020b2c:	10bfffc4 	addi	r2,r2,-1
 4020b30:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 4020b34:	e0bffb17 	ldw	r2,-20(fp)
 4020b38:	e0fffc17 	ldw	r3,-16(fp)
 4020b3c:	1004913a 	slli	r2,r2,4
 4020b40:	10c5883a 	add	r2,r2,r3
 4020b44:	10800d04 	addi	r2,r2,52
 4020b48:	11000017 	ldw	r4,0(r2)
 4020b4c:	e0bffb17 	ldw	r2,-20(fp)
 4020b50:	e0fffc17 	ldw	r3,-16(fp)
 4020b54:	1004913a 	slli	r2,r2,4
 4020b58:	10c5883a 	add	r2,r2,r3
 4020b5c:	10800e04 	addi	r2,r2,56
 4020b60:	10800017 	ldw	r2,0(r2)
 4020b64:	2085883a 	add	r2,r4,r2
 4020b68:	10bfffc4 	addi	r2,r2,-1
 4020b6c:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 4020b70:	e0ffff17 	ldw	r3,-4(fp)
 4020b74:	e0bffa17 	ldw	r2,-24(fp)
 4020b78:	10c0022e 	bgeu	r2,r3,4020b84 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 4020b7c:	00bffec4 	movi	r2,-5
 4020b80:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 4020b84:	e0bffd17 	ldw	r2,-12(fp)
}
 4020b88:	e037883a 	mov	sp,fp
 4020b8c:	df000017 	ldw	fp,0(sp)
 4020b90:	dec00104 	addi	sp,sp,4
 4020b94:	f800283a 	ret

04020b98 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 4020b98:	defff204 	addi	sp,sp,-56
 4020b9c:	dfc00d15 	stw	ra,52(sp)
 4020ba0:	df000c15 	stw	fp,48(sp)
 4020ba4:	df000c04 	addi	fp,sp,48
 4020ba8:	e13ffa15 	stw	r4,-24(fp)
 4020bac:	e17ffb15 	stw	r5,-20(fp)
 4020bb0:	e1bffc15 	stw	r6,-16(fp)
 4020bb4:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020bb8:	e0bffa17 	ldw	r2,-24(fp)
 4020bbc:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 4020bc0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 4020bc4:	e13ffa17 	ldw	r4,-24(fp)
 4020bc8:	e17ffc17 	ldw	r5,-16(fp)
 4020bcc:	4020b040 	call	4020b04 <alt_epcs_test_address>
 4020bd0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 4020bd4:	e0bff917 	ldw	r2,-28(fp)
 4020bd8:	1004803a 	cmplt	r2,r2,zero
 4020bdc:	10002f1e 	bne	r2,zero,4020c9c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4020be0:	00002b06 	br	4020c90 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 4020be4:	e0bff817 	ldw	r2,-32(fp)
 4020be8:	10c03017 	ldw	r3,192(r2)
 4020bec:	e0bffc17 	ldw	r2,-16(fp)
 4020bf0:	1887883a 	add	r3,r3,r2
 4020bf4:	e0bff817 	ldw	r2,-32(fp)
 4020bf8:	10803017 	ldw	r2,192(r2)
 4020bfc:	0085c83a 	sub	r2,zero,r2
 4020c00:	1884703a 	and	r2,r3,r2
 4020c04:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 4020c08:	e0fff517 	ldw	r3,-44(fp)
 4020c0c:	e0bffc17 	ldw	r2,-16(fp)
 4020c10:	1885c83a 	sub	r2,r3,r2
 4020c14:	e0c00217 	ldw	r3,8(fp)
 4020c18:	e0ffff15 	stw	r3,-4(fp)
 4020c1c:	e0bffe15 	stw	r2,-8(fp)
 4020c20:	e0bfff17 	ldw	r2,-4(fp)
 4020c24:	e0fffe17 	ldw	r3,-8(fp)
 4020c28:	10c0020e 	bge	r2,r3,4020c34 <alt_epcs_flash_write_block+0x9c>
 4020c2c:	e0bfff17 	ldw	r2,-4(fp)
 4020c30:	e0bffe15 	stw	r2,-8(fp)
 4020c34:	e0fffe17 	ldw	r3,-8(fp)
 4020c38:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 4020c3c:	e0bff817 	ldw	r2,-32(fp)
 4020c40:	11002d17 	ldw	r4,180(r2)
 4020c44:	e0fffd17 	ldw	r3,-12(fp)
 4020c48:	e0bff717 	ldw	r2,-36(fp)
 4020c4c:	188d883a 	add	r6,r3,r2
 4020c50:	e0bff817 	ldw	r2,-32(fp)
 4020c54:	10803117 	ldw	r2,196(r2)
 4020c58:	d8800015 	stw	r2,0(sp)
 4020c5c:	e17ffc17 	ldw	r5,-16(fp)
 4020c60:	e1fff617 	ldw	r7,-40(fp)
 4020c64:	4021f700 	call	4021f70 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 4020c68:	e0c00217 	ldw	r3,8(fp)
 4020c6c:	e0bff617 	ldw	r2,-40(fp)
 4020c70:	1885c83a 	sub	r2,r3,r2
 4020c74:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 4020c78:	e0fff717 	ldw	r3,-36(fp)
 4020c7c:	e0bff617 	ldw	r2,-40(fp)
 4020c80:	1885883a 	add	r2,r3,r2
 4020c84:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 4020c88:	e0bff517 	ldw	r2,-44(fp)
 4020c8c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4020c90:	e0800217 	ldw	r2,8(fp)
 4020c94:	1004c03a 	cmpne	r2,r2,zero
 4020c98:	103fd21e 	bne	r2,zero,4020be4 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 4020c9c:	e0bff917 	ldw	r2,-28(fp)
}
 4020ca0:	e037883a 	mov	sp,fp
 4020ca4:	dfc00117 	ldw	ra,4(sp)
 4020ca8:	df000017 	ldw	fp,0(sp)
 4020cac:	dec00204 	addi	sp,sp,8
 4020cb0:	f800283a 	ret

04020cb4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 4020cb4:	defff704 	addi	sp,sp,-36
 4020cb8:	dfc00815 	stw	ra,32(sp)
 4020cbc:	df000715 	stw	fp,28(sp)
 4020cc0:	df000704 	addi	fp,sp,28
 4020cc4:	e13ffc15 	stw	r4,-16(fp)
 4020cc8:	e17ffd15 	stw	r5,-12(fp)
 4020ccc:	e1bffe15 	stw	r6,-8(fp)
 4020cd0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 4020cd4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020cd8:	e0bffc17 	ldw	r2,-16(fp)
 4020cdc:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 4020ce0:	e13ffc17 	ldw	r4,-16(fp)
 4020ce4:	e17ffd17 	ldw	r5,-12(fp)
 4020ce8:	4020b040 	call	4020b04 <alt_epcs_test_address>
 4020cec:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 4020cf0:	e0bffb17 	ldw	r2,-20(fp)
 4020cf4:	1004803a 	cmplt	r2,r2,zero
 4020cf8:	10000e1e 	bne	r2,zero,4020d34 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 4020cfc:	e0bffa17 	ldw	r2,-24(fp)
 4020d00:	11002d17 	ldw	r4,180(r2)
 4020d04:	e1bffe17 	ldw	r6,-8(fp)
 4020d08:	e0bffa17 	ldw	r2,-24(fp)
 4020d0c:	10803117 	ldw	r2,196(r2)
 4020d10:	d8800015 	stw	r2,0(sp)
 4020d14:	e17ffd17 	ldw	r5,-12(fp)
 4020d18:	e1ffff17 	ldw	r7,-4(fp)
 4020d1c:	4021d700 	call	4021d70 <epcs_read_buffer>
 4020d20:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 4020d24:	e0fffb17 	ldw	r3,-20(fp)
 4020d28:	e0bfff17 	ldw	r2,-4(fp)
 4020d2c:	1880011e 	bne	r3,r2,4020d34 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 4020d30:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 4020d34:	e0bffb17 	ldw	r2,-20(fp)
}
 4020d38:	e037883a 	mov	sp,fp
 4020d3c:	dfc00117 	ldw	ra,4(sp)
 4020d40:	df000017 	ldw	fp,0(sp)
 4020d44:	dec00204 	addi	sp,sp,8
 4020d48:	f800283a 	ret

04020d4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4020d4c:	defffa04 	addi	sp,sp,-24
 4020d50:	dfc00515 	stw	ra,20(sp)
 4020d54:	df000415 	stw	fp,16(sp)
 4020d58:	df000404 	addi	fp,sp,16
 4020d5c:	e13ffd15 	stw	r4,-12(fp)
 4020d60:	e17ffe15 	stw	r5,-8(fp)
 4020d64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4020d68:	e0bffd17 	ldw	r2,-12(fp)
 4020d6c:	10800017 	ldw	r2,0(r2)
 4020d70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4020d74:	e0bffc17 	ldw	r2,-16(fp)
 4020d78:	11000a04 	addi	r4,r2,40
 4020d7c:	e0bffd17 	ldw	r2,-12(fp)
 4020d80:	11c00217 	ldw	r7,8(r2)
 4020d84:	e17ffe17 	ldw	r5,-8(fp)
 4020d88:	e1bfff17 	ldw	r6,-4(fp)
 4020d8c:	402150c0 	call	402150c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4020d90:	e037883a 	mov	sp,fp
 4020d94:	dfc00117 	ldw	ra,4(sp)
 4020d98:	df000017 	ldw	fp,0(sp)
 4020d9c:	dec00204 	addi	sp,sp,8
 4020da0:	f800283a 	ret

04020da4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4020da4:	defffa04 	addi	sp,sp,-24
 4020da8:	dfc00515 	stw	ra,20(sp)
 4020dac:	df000415 	stw	fp,16(sp)
 4020db0:	df000404 	addi	fp,sp,16
 4020db4:	e13ffd15 	stw	r4,-12(fp)
 4020db8:	e17ffe15 	stw	r5,-8(fp)
 4020dbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4020dc0:	e0bffd17 	ldw	r2,-12(fp)
 4020dc4:	10800017 	ldw	r2,0(r2)
 4020dc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4020dcc:	e0bffc17 	ldw	r2,-16(fp)
 4020dd0:	11000a04 	addi	r4,r2,40
 4020dd4:	e0bffd17 	ldw	r2,-12(fp)
 4020dd8:	11c00217 	ldw	r7,8(r2)
 4020ddc:	e17ffe17 	ldw	r5,-8(fp)
 4020de0:	e1bfff17 	ldw	r6,-4(fp)
 4020de4:	40217cc0 	call	40217cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4020de8:	e037883a 	mov	sp,fp
 4020dec:	dfc00117 	ldw	ra,4(sp)
 4020df0:	df000017 	ldw	fp,0(sp)
 4020df4:	dec00204 	addi	sp,sp,8
 4020df8:	f800283a 	ret

04020dfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4020dfc:	defffc04 	addi	sp,sp,-16
 4020e00:	dfc00315 	stw	ra,12(sp)
 4020e04:	df000215 	stw	fp,8(sp)
 4020e08:	df000204 	addi	fp,sp,8
 4020e0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4020e10:	e0bfff17 	ldw	r2,-4(fp)
 4020e14:	10800017 	ldw	r2,0(r2)
 4020e18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4020e1c:	e0bffe17 	ldw	r2,-8(fp)
 4020e20:	11000a04 	addi	r4,r2,40
 4020e24:	e0bfff17 	ldw	r2,-4(fp)
 4020e28:	11400217 	ldw	r5,8(r2)
 4020e2c:	40213a40 	call	40213a4 <altera_avalon_jtag_uart_close>
}
 4020e30:	e037883a 	mov	sp,fp
 4020e34:	dfc00117 	ldw	ra,4(sp)
 4020e38:	df000017 	ldw	fp,0(sp)
 4020e3c:	dec00204 	addi	sp,sp,8
 4020e40:	f800283a 	ret

04020e44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4020e44:	defffa04 	addi	sp,sp,-24
 4020e48:	dfc00515 	stw	ra,20(sp)
 4020e4c:	df000415 	stw	fp,16(sp)
 4020e50:	df000404 	addi	fp,sp,16
 4020e54:	e13ffd15 	stw	r4,-12(fp)
 4020e58:	e17ffe15 	stw	r5,-8(fp)
 4020e5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4020e60:	e0bffd17 	ldw	r2,-12(fp)
 4020e64:	10800017 	ldw	r2,0(r2)
 4020e68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4020e6c:	e0bffc17 	ldw	r2,-16(fp)
 4020e70:	11000a04 	addi	r4,r2,40
 4020e74:	e17ffe17 	ldw	r5,-8(fp)
 4020e78:	e1bfff17 	ldw	r6,-4(fp)
 4020e7c:	40214180 	call	4021418 <altera_avalon_jtag_uart_ioctl>
}
 4020e80:	e037883a 	mov	sp,fp
 4020e84:	dfc00117 	ldw	ra,4(sp)
 4020e88:	df000017 	ldw	fp,0(sp)
 4020e8c:	dec00204 	addi	sp,sp,8
 4020e90:	f800283a 	ret

04020e94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4020e94:	defff404 	addi	sp,sp,-48
 4020e98:	dfc00b15 	stw	ra,44(sp)
 4020e9c:	df000a15 	stw	fp,40(sp)
 4020ea0:	df000a04 	addi	fp,sp,40
 4020ea4:	e13ffd15 	stw	r4,-12(fp)
 4020ea8:	e17ffe15 	stw	r5,-8(fp)
 4020eac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 4020eb0:	e0bffd17 	ldw	r2,-12(fp)
 4020eb4:	10800c04 	addi	r2,r2,48
 4020eb8:	e0bffb15 	stw	r2,-20(fp)
 4020ebc:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4020ec0:	e13ffc0b 	ldhu	r4,-16(fp)
 4020ec4:	e17ffc84 	addi	r5,fp,-14
 4020ec8:	401a5940 	call	401a594 <OSFlagCreate>
 4020ecc:	1007883a 	mov	r3,r2
 4020ed0:	e0bffb17 	ldw	r2,-20(fp)
 4020ed4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 4020ed8:	e0bffd17 	ldw	r2,-12(fp)
 4020edc:	10800a04 	addi	r2,r2,40
 4020ee0:	e0bff915 	stw	r2,-28(fp)
 4020ee4:	00800044 	movi	r2,1
 4020ee8:	e0bffa0d 	sth	r2,-24(fp)
 4020eec:	e13ffa0b 	ldhu	r4,-24(fp)
 4020ef0:	401d79c0 	call	401d79c <OSSemCreate>
 4020ef4:	1007883a 	mov	r3,r2
 4020ef8:	e0bff917 	ldw	r2,-28(fp)
 4020efc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4020f00:	e0bffd17 	ldw	r2,-12(fp)
 4020f04:	10800b04 	addi	r2,r2,44
 4020f08:	e0bff715 	stw	r2,-36(fp)
 4020f0c:	00800044 	movi	r2,1
 4020f10:	e0bff80d 	sth	r2,-32(fp)
 4020f14:	e13ff80b 	ldhu	r4,-32(fp)
 4020f18:	401d79c0 	call	401d79c <OSSemCreate>
 4020f1c:	1007883a 	mov	r3,r2
 4020f20:	e0bff717 	ldw	r2,-36(fp)
 4020f24:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4020f28:	e0fffd17 	ldw	r3,-12(fp)
 4020f2c:	00800044 	movi	r2,1
 4020f30:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4020f34:	e0bffd17 	ldw	r2,-12(fp)
 4020f38:	10800017 	ldw	r2,0(r2)
 4020f3c:	11000104 	addi	r4,r2,4
 4020f40:	e0bffd17 	ldw	r2,-12(fp)
 4020f44:	10800817 	ldw	r2,32(r2)
 4020f48:	1007883a 	mov	r3,r2
 4020f4c:	2005883a 	mov	r2,r4
 4020f50:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4020f54:	e13ffe17 	ldw	r4,-8(fp)
 4020f58:	e17fff17 	ldw	r5,-4(fp)
 4020f5c:	d8000015 	stw	zero,0(sp)
 4020f60:	018100b4 	movhi	r6,1026
 4020f64:	3183f304 	addi	r6,r6,4044
 4020f68:	e1fffd17 	ldw	r7,-12(fp)
 4020f6c:	402279c0 	call	402279c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4020f70:	e0bffd17 	ldw	r2,-12(fp)
 4020f74:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4020f78:	e0bffd17 	ldw	r2,-12(fp)
 4020f7c:	11000204 	addi	r4,r2,8
 4020f80:	008100b4 	movhi	r2,1026
 4020f84:	109a9e04 	addi	r2,r2,27256
 4020f88:	10800017 	ldw	r2,0(r2)
 4020f8c:	100b883a 	mov	r5,r2
 4020f90:	018100b4 	movhi	r6,1026
 4020f94:	3184a404 	addi	r6,r6,4752
 4020f98:	e1fffd17 	ldw	r7,-12(fp)
 4020f9c:	402227c0 	call	402227c <alt_alarm_start>
 4020fa0:	1004403a 	cmpge	r2,r2,zero
 4020fa4:	1000041e 	bne	r2,zero,4020fb8 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4020fa8:	e0fffd17 	ldw	r3,-12(fp)
 4020fac:	00a00034 	movhi	r2,32768
 4020fb0:	10bfffc4 	addi	r2,r2,-1
 4020fb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4020fb8:	e037883a 	mov	sp,fp
 4020fbc:	dfc00117 	ldw	ra,4(sp)
 4020fc0:	df000017 	ldw	fp,0(sp)
 4020fc4:	dec00204 	addi	sp,sp,8
 4020fc8:	f800283a 	ret

04020fcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4020fcc:	defff204 	addi	sp,sp,-56
 4020fd0:	dfc00d15 	stw	ra,52(sp)
 4020fd4:	df000c15 	stw	fp,48(sp)
 4020fd8:	df000c04 	addi	fp,sp,48
 4020fdc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4020fe0:	e0bfff17 	ldw	r2,-4(fp)
 4020fe4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4020fe8:	e0bffd17 	ldw	r2,-12(fp)
 4020fec:	10800017 	ldw	r2,0(r2)
 4020ff0:	e0bffc15 	stw	r2,-16(fp)
 4020ff4:	00000006 	br	4020ff8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4020ff8:	e0bffc17 	ldw	r2,-16(fp)
 4020ffc:	10800104 	addi	r2,r2,4
 4021000:	10800037 	ldwio	r2,0(r2)
 4021004:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4021008:	e0bffb17 	ldw	r2,-20(fp)
 402100c:	1080c00c 	andi	r2,r2,768
 4021010:	1005003a 	cmpeq	r2,r2,zero
 4021014:	1000991e 	bne	r2,zero,402127c <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4021018:	e0bffb17 	ldw	r2,-20(fp)
 402101c:	1080400c 	andi	r2,r2,256
 4021020:	1005003a 	cmpeq	r2,r2,zero
 4021024:	1000481e 	bne	r2,zero,4021148 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4021028:	00800074 	movhi	r2,1
 402102c:	e0bffa15 	stw	r2,-24(fp)
 4021030:	00000006 	br	4021034 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021034:	e0bffd17 	ldw	r2,-12(fp)
 4021038:	10800d17 	ldw	r2,52(r2)
 402103c:	10800044 	addi	r2,r2,1
 4021040:	1081ffcc 	andi	r2,r2,2047
 4021044:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 4021048:	e0bffd17 	ldw	r2,-12(fp)
 402104c:	10c00e17 	ldw	r3,56(r2)
 4021050:	e0bff917 	ldw	r2,-28(fp)
 4021054:	18802826 	beq	r3,r2,40210f8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4021058:	e0bffc17 	ldw	r2,-16(fp)
 402105c:	10800037 	ldwio	r2,0(r2)
 4021060:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4021064:	e0bffa17 	ldw	r2,-24(fp)
 4021068:	10a0000c 	andi	r2,r2,32768
 402106c:	1005003a 	cmpeq	r2,r2,zero
 4021070:	1000211e 	bne	r2,zero,40210f8 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4021074:	e0bffd17 	ldw	r2,-12(fp)
 4021078:	10c00d17 	ldw	r3,52(r2)
 402107c:	e0bffa17 	ldw	r2,-24(fp)
 4021080:	1009883a 	mov	r4,r2
 4021084:	e0bffd17 	ldw	r2,-12(fp)
 4021088:	1885883a 	add	r2,r3,r2
 402108c:	10801104 	addi	r2,r2,68
 4021090:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021094:	e0bffd17 	ldw	r2,-12(fp)
 4021098:	10800d17 	ldw	r2,52(r2)
 402109c:	10800044 	addi	r2,r2,1
 40210a0:	10c1ffcc 	andi	r3,r2,2047
 40210a4:	e0bffd17 	ldw	r2,-12(fp)
 40210a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 40210ac:	e0bffd17 	ldw	r2,-12(fp)
 40210b0:	10800c17 	ldw	r2,48(r2)
 40210b4:	e0bff615 	stw	r2,-40(fp)
 40210b8:	00800044 	movi	r2,1
 40210bc:	e0bff70d 	sth	r2,-36(fp)
 40210c0:	00800044 	movi	r2,1
 40210c4:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40210c8:	008100b4 	movhi	r2,1026
 40210cc:	109aa444 	addi	r2,r2,27281
 40210d0:	10800003 	ldbu	r2,0(r2)
 40210d4:	10803fcc 	andi	r2,r2,255
 40210d8:	1005003a 	cmpeq	r2,r2,zero
 40210dc:	103fd51e 	bne	r2,zero,4021034 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 40210e0:	e17ff70b 	ldhu	r5,-36(fp)
 40210e4:	e1bff783 	ldbu	r6,-34(fp)
 40210e8:	e1fffe04 	addi	r7,fp,-8
 40210ec:	e13ff617 	ldw	r4,-40(fp)
 40210f0:	401b2bc0 	call	401b2bc <OSFlagPost>
    return err;
 40210f4:	003fcf06 	br	4021034 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40210f8:	e0bffa17 	ldw	r2,-24(fp)
 40210fc:	10bfffec 	andhi	r2,r2,65535
 4021100:	1005003a 	cmpeq	r2,r2,zero
 4021104:	1000101e 	bne	r2,zero,4021148 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4021108:	e0bffd17 	ldw	r2,-12(fp)
 402110c:	10c00817 	ldw	r3,32(r2)
 4021110:	00bfff84 	movi	r2,-2
 4021114:	1886703a 	and	r3,r3,r2
 4021118:	e0bffd17 	ldw	r2,-12(fp)
 402111c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4021120:	e0bffc17 	ldw	r2,-16(fp)
 4021124:	11000104 	addi	r4,r2,4
 4021128:	e0bffd17 	ldw	r2,-12(fp)
 402112c:	10800817 	ldw	r2,32(r2)
 4021130:	1007883a 	mov	r3,r2
 4021134:	2005883a 	mov	r2,r4
 4021138:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402113c:	e0bffc17 	ldw	r2,-16(fp)
 4021140:	10800104 	addi	r2,r2,4
 4021144:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4021148:	e0bffb17 	ldw	r2,-20(fp)
 402114c:	1080800c 	andi	r2,r2,512
 4021150:	1005003a 	cmpeq	r2,r2,zero
 4021154:	103fa81e 	bne	r2,zero,4020ff8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4021158:	e0bffb17 	ldw	r2,-20(fp)
 402115c:	10bfffec 	andhi	r2,r2,65535
 4021160:	1004d43a 	srli	r2,r2,16
 4021164:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4021168:	00002706 	br	4021208 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402116c:	e13ffc17 	ldw	r4,-16(fp)
 4021170:	e0bffd17 	ldw	r2,-12(fp)
 4021174:	10c01017 	ldw	r3,64(r2)
 4021178:	e0bffd17 	ldw	r2,-12(fp)
 402117c:	1885883a 	add	r2,r3,r2
 4021180:	10821104 	addi	r2,r2,2116
 4021184:	10800003 	ldbu	r2,0(r2)
 4021188:	10c03fcc 	andi	r3,r2,255
 402118c:	18c0201c 	xori	r3,r3,128
 4021190:	18ffe004 	addi	r3,r3,-128
 4021194:	2005883a 	mov	r2,r4
 4021198:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402119c:	e0bffd17 	ldw	r2,-12(fp)
 40211a0:	10801017 	ldw	r2,64(r2)
 40211a4:	10800044 	addi	r2,r2,1
 40211a8:	10c1ffcc 	andi	r3,r2,2047
 40211ac:	e0bffd17 	ldw	r2,-12(fp)
 40211b0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 40211b4:	e0bffd17 	ldw	r2,-12(fp)
 40211b8:	10800c17 	ldw	r2,48(r2)
 40211bc:	e0bff415 	stw	r2,-48(fp)
 40211c0:	00800084 	movi	r2,2
 40211c4:	e0bff50d 	sth	r2,-44(fp)
 40211c8:	00800044 	movi	r2,1
 40211cc:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40211d0:	008100b4 	movhi	r2,1026
 40211d4:	109aa444 	addi	r2,r2,27281
 40211d8:	10800003 	ldbu	r2,0(r2)
 40211dc:	10803fcc 	andi	r2,r2,255
 40211e0:	1005003a 	cmpeq	r2,r2,zero
 40211e4:	1000051e 	bne	r2,zero,40211fc <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 40211e8:	e17ff50b 	ldhu	r5,-44(fp)
 40211ec:	e1bff583 	ldbu	r6,-42(fp)
 40211f0:	e1fffe44 	addi	r7,fp,-7
 40211f4:	e13ff417 	ldw	r4,-48(fp)
 40211f8:	401b2bc0 	call	401b2bc <OSFlagPost>

        space--;
 40211fc:	e0bff817 	ldw	r2,-32(fp)
 4021200:	10bfffc4 	addi	r2,r2,-1
 4021204:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4021208:	e0bff817 	ldw	r2,-32(fp)
 402120c:	1005003a 	cmpeq	r2,r2,zero
 4021210:	1000051e 	bne	r2,zero,4021228 <altera_avalon_jtag_uart_irq+0x25c>
 4021214:	e0bffd17 	ldw	r2,-12(fp)
 4021218:	10c01017 	ldw	r3,64(r2)
 402121c:	e0bffd17 	ldw	r2,-12(fp)
 4021220:	10800f17 	ldw	r2,60(r2)
 4021224:	18bfd11e 	bne	r3,r2,402116c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4021228:	e0bff817 	ldw	r2,-32(fp)
 402122c:	1005003a 	cmpeq	r2,r2,zero
 4021230:	103f711e 	bne	r2,zero,4020ff8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4021234:	e0bffd17 	ldw	r2,-12(fp)
 4021238:	10c00817 	ldw	r3,32(r2)
 402123c:	00bfff44 	movi	r2,-3
 4021240:	1886703a 	and	r3,r3,r2
 4021244:	e0bffd17 	ldw	r2,-12(fp)
 4021248:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402124c:	e0bffd17 	ldw	r2,-12(fp)
 4021250:	10800017 	ldw	r2,0(r2)
 4021254:	11000104 	addi	r4,r2,4
 4021258:	e0bffd17 	ldw	r2,-12(fp)
 402125c:	10800817 	ldw	r2,32(r2)
 4021260:	1007883a 	mov	r3,r2
 4021264:	2005883a 	mov	r2,r4
 4021268:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402126c:	e0bffc17 	ldw	r2,-16(fp)
 4021270:	10800104 	addi	r2,r2,4
 4021274:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4021278:	003f5f06 	br	4020ff8 <altera_avalon_jtag_uart_irq+0x2c>
}
 402127c:	e037883a 	mov	sp,fp
 4021280:	dfc00117 	ldw	ra,4(sp)
 4021284:	df000017 	ldw	fp,0(sp)
 4021288:	dec00204 	addi	sp,sp,8
 402128c:	f800283a 	ret

04021290 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4021290:	defff804 	addi	sp,sp,-32
 4021294:	dfc00715 	stw	ra,28(sp)
 4021298:	df000615 	stw	fp,24(sp)
 402129c:	df000604 	addi	fp,sp,24
 40212a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40212a4:	e0bfff17 	ldw	r2,-4(fp)
 40212a8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40212ac:	e0bffd17 	ldw	r2,-12(fp)
 40212b0:	10800017 	ldw	r2,0(r2)
 40212b4:	10800104 	addi	r2,r2,4
 40212b8:	10800037 	ldwio	r2,0(r2)
 40212bc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40212c0:	e0bffc17 	ldw	r2,-16(fp)
 40212c4:	1081000c 	andi	r2,r2,1024
 40212c8:	1005003a 	cmpeq	r2,r2,zero
 40212cc:	10000c1e 	bne	r2,zero,4021300 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40212d0:	e0bffd17 	ldw	r2,-12(fp)
 40212d4:	10800017 	ldw	r2,0(r2)
 40212d8:	11000104 	addi	r4,r2,4
 40212dc:	e0bffd17 	ldw	r2,-12(fp)
 40212e0:	10800817 	ldw	r2,32(r2)
 40212e4:	10810014 	ori	r2,r2,1024
 40212e8:	1007883a 	mov	r3,r2
 40212ec:	2005883a 	mov	r2,r4
 40212f0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 40212f4:	e0bffd17 	ldw	r2,-12(fp)
 40212f8:	10000915 	stw	zero,36(r2)
 40212fc:	00002106 	br	4021384 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4021300:	e0bffd17 	ldw	r2,-12(fp)
 4021304:	10c00917 	ldw	r3,36(r2)
 4021308:	00a00034 	movhi	r2,32768
 402130c:	10bfff04 	addi	r2,r2,-4
 4021310:	10c01c36 	bltu	r2,r3,4021384 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 4021314:	e0bffd17 	ldw	r2,-12(fp)
 4021318:	10800917 	ldw	r2,36(r2)
 402131c:	10c00044 	addi	r3,r2,1
 4021320:	e0bffd17 	ldw	r2,-12(fp)
 4021324:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 4021328:	e0bffd17 	ldw	r2,-12(fp)
 402132c:	10c00917 	ldw	r3,36(r2)
 4021330:	e0bffd17 	ldw	r2,-12(fp)
 4021334:	10800117 	ldw	r2,4(r2)
 4021338:	18801236 	bltu	r3,r2,4021384 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 402133c:	e0bffd17 	ldw	r2,-12(fp)
 4021340:	10800c17 	ldw	r2,48(r2)
 4021344:	e0bffa15 	stw	r2,-24(fp)
 4021348:	00800104 	movi	r2,4
 402134c:	e0bffb0d 	sth	r2,-20(fp)
 4021350:	00800044 	movi	r2,1
 4021354:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4021358:	008100b4 	movhi	r2,1026
 402135c:	109aa444 	addi	r2,r2,27281
 4021360:	10800003 	ldbu	r2,0(r2)
 4021364:	10803fcc 	andi	r2,r2,255
 4021368:	1005003a 	cmpeq	r2,r2,zero
 402136c:	1000051e 	bne	r2,zero,4021384 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 4021370:	e17ffb0b 	ldhu	r5,-20(fp)
 4021374:	e1bffb83 	ldbu	r6,-18(fp)
 4021378:	e1fffe04 	addi	r7,fp,-8
 402137c:	e13ffa17 	ldw	r4,-24(fp)
 4021380:	401b2bc0 	call	401b2bc <OSFlagPost>
 4021384:	008100b4 	movhi	r2,1026
 4021388:	109a9e04 	addi	r2,r2,27256
 402138c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 4021390:	e037883a 	mov	sp,fp
 4021394:	dfc00117 	ldw	ra,4(sp)
 4021398:	df000017 	ldw	fp,0(sp)
 402139c:	dec00204 	addi	sp,sp,8
 40213a0:	f800283a 	ret

040213a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40213a4:	defffc04 	addi	sp,sp,-16
 40213a8:	df000315 	stw	fp,12(sp)
 40213ac:	df000304 	addi	fp,sp,12
 40213b0:	e13ffd15 	stw	r4,-12(fp)
 40213b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40213b8:	00000706 	br	40213d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 40213bc:	e0bffe17 	ldw	r2,-8(fp)
 40213c0:	1090000c 	andi	r2,r2,16384
 40213c4:	1005003a 	cmpeq	r2,r2,zero
 40213c8:	1000031e 	bne	r2,zero,40213d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 40213cc:	00bffd44 	movi	r2,-11
 40213d0:	e0bfff15 	stw	r2,-4(fp)
 40213d4:	00000b06 	br	4021404 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40213d8:	e0bffd17 	ldw	r2,-12(fp)
 40213dc:	10c01017 	ldw	r3,64(r2)
 40213e0:	e0bffd17 	ldw	r2,-12(fp)
 40213e4:	10800f17 	ldw	r2,60(r2)
 40213e8:	18800526 	beq	r3,r2,4021400 <altera_avalon_jtag_uart_close+0x5c>
 40213ec:	e0bffd17 	ldw	r2,-12(fp)
 40213f0:	10c00917 	ldw	r3,36(r2)
 40213f4:	e0bffd17 	ldw	r2,-12(fp)
 40213f8:	10800117 	ldw	r2,4(r2)
 40213fc:	18bfef36 	bltu	r3,r2,40213bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4021400:	e03fff15 	stw	zero,-4(fp)
 4021404:	e0bfff17 	ldw	r2,-4(fp)
}
 4021408:	e037883a 	mov	sp,fp
 402140c:	df000017 	ldw	fp,0(sp)
 4021410:	dec00104 	addi	sp,sp,4
 4021414:	f800283a 	ret

04021418 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4021418:	defff804 	addi	sp,sp,-32
 402141c:	df000715 	stw	fp,28(sp)
 4021420:	df000704 	addi	fp,sp,28
 4021424:	e13ffb15 	stw	r4,-20(fp)
 4021428:	e17ffc15 	stw	r5,-16(fp)
 402142c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 4021430:	00bff9c4 	movi	r2,-25
 4021434:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 4021438:	e0bffc17 	ldw	r2,-16(fp)
 402143c:	e0bfff15 	stw	r2,-4(fp)
 4021440:	e0ffff17 	ldw	r3,-4(fp)
 4021444:	189a8060 	cmpeqi	r2,r3,27137
 4021448:	1000041e 	bne	r2,zero,402145c <altera_avalon_jtag_uart_ioctl+0x44>
 402144c:	e0ffff17 	ldw	r3,-4(fp)
 4021450:	189a80a0 	cmpeqi	r2,r3,27138
 4021454:	10001b1e 	bne	r2,zero,40214c4 <altera_avalon_jtag_uart_ioctl+0xac>
 4021458:	00002706 	br	40214f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402145c:	e0bffb17 	ldw	r2,-20(fp)
 4021460:	10c00117 	ldw	r3,4(r2)
 4021464:	00a00034 	movhi	r2,32768
 4021468:	10bfffc4 	addi	r2,r2,-1
 402146c:	18802226 	beq	r3,r2,40214f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4021470:	e0bffd17 	ldw	r2,-12(fp)
 4021474:	10800017 	ldw	r2,0(r2)
 4021478:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402147c:	e0bff917 	ldw	r2,-28(fp)
 4021480:	10800090 	cmplti	r2,r2,2
 4021484:	1000071e 	bne	r2,zero,40214a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 4021488:	e0fff917 	ldw	r3,-28(fp)
 402148c:	00a00034 	movhi	r2,32768
 4021490:	10bfffc4 	addi	r2,r2,-1
 4021494:	18800326 	beq	r3,r2,40214a4 <altera_avalon_jtag_uart_ioctl+0x8c>
 4021498:	e0bff917 	ldw	r2,-28(fp)
 402149c:	e0bffe15 	stw	r2,-8(fp)
 40214a0:	00000306 	br	40214b0 <altera_avalon_jtag_uart_ioctl+0x98>
 40214a4:	00e00034 	movhi	r3,32768
 40214a8:	18ffff84 	addi	r3,r3,-2
 40214ac:	e0fffe15 	stw	r3,-8(fp)
 40214b0:	e0bffb17 	ldw	r2,-20(fp)
 40214b4:	e0fffe17 	ldw	r3,-8(fp)
 40214b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 40214bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 40214c0:	00000d06 	br	40214f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40214c4:	e0bffb17 	ldw	r2,-20(fp)
 40214c8:	10c00117 	ldw	r3,4(r2)
 40214cc:	00a00034 	movhi	r2,32768
 40214d0:	10bfffc4 	addi	r2,r2,-1
 40214d4:	18800826 	beq	r3,r2,40214f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40214d8:	e13ffd17 	ldw	r4,-12(fp)
 40214dc:	e0bffb17 	ldw	r2,-20(fp)
 40214e0:	10c00917 	ldw	r3,36(r2)
 40214e4:	e0bffb17 	ldw	r2,-20(fp)
 40214e8:	10800117 	ldw	r2,4(r2)
 40214ec:	1885803a 	cmpltu	r2,r3,r2
 40214f0:	20800015 	stw	r2,0(r4)
      rc = 0;
 40214f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 40214f8:	e0bffa17 	ldw	r2,-24(fp)
}
 40214fc:	e037883a 	mov	sp,fp
 4021500:	df000017 	ldw	fp,0(sp)
 4021504:	dec00104 	addi	sp,sp,4
 4021508:	f800283a 	ret

0402150c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402150c:	deffeb04 	addi	sp,sp,-84
 4021510:	dfc01415 	stw	ra,80(sp)
 4021514:	df001315 	stw	fp,76(sp)
 4021518:	df001304 	addi	fp,sp,76
 402151c:	e13ffb15 	stw	r4,-20(fp)
 4021520:	e17ffc15 	stw	r5,-16(fp)
 4021524:	e1bffd15 	stw	r6,-12(fp)
 4021528:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 402152c:	e0bffc17 	ldw	r2,-16(fp)
 4021530:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 4021534:	e0bffb17 	ldw	r2,-20(fp)
 4021538:	10800a17 	ldw	r2,40(r2)
 402153c:	e0bff315 	stw	r2,-52(fp)
 4021540:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 4021544:	e17ff40b 	ldhu	r5,-48(fp)
 4021548:	e1bffa44 	addi	r6,fp,-23
 402154c:	e13ff317 	ldw	r4,-52(fp)
 4021550:	401db500 	call	401db50 <OSSemPend>

  while (space > 0)
 4021554:	00006406 	br	40216e8 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4021558:	e0bffb17 	ldw	r2,-20(fp)
 402155c:	10800d17 	ldw	r2,52(r2)
 4021560:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 4021564:	e0bffb17 	ldw	r2,-20(fp)
 4021568:	10800e17 	ldw	r2,56(r2)
 402156c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 4021570:	e0fff617 	ldw	r3,-40(fp)
 4021574:	e0bff517 	ldw	r2,-44(fp)
 4021578:	18800536 	bltu	r3,r2,4021590 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 402157c:	e0bff617 	ldw	r2,-40(fp)
 4021580:	e0fff517 	ldw	r3,-44(fp)
 4021584:	10c5c83a 	sub	r2,r2,r3
 4021588:	e0bff715 	stw	r2,-36(fp)
 402158c:	00000406 	br	40215a0 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4021590:	00820004 	movi	r2,2048
 4021594:	e0fff517 	ldw	r3,-44(fp)
 4021598:	10c5c83a 	sub	r2,r2,r3
 402159c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 40215a0:	e0bff717 	ldw	r2,-36(fp)
 40215a4:	1005003a 	cmpeq	r2,r2,zero
 40215a8:	10001f1e 	bne	r2,zero,4021628 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 40215ac:	e0fffd17 	ldw	r3,-12(fp)
 40215b0:	e0bff717 	ldw	r2,-36(fp)
 40215b4:	1880022e 	bgeu	r3,r2,40215c0 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 40215b8:	e0bffd17 	ldw	r2,-12(fp)
 40215bc:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40215c0:	e0bffb17 	ldw	r2,-20(fp)
 40215c4:	10c01104 	addi	r3,r2,68
 40215c8:	e0bff517 	ldw	r2,-44(fp)
 40215cc:	1887883a 	add	r3,r3,r2
 40215d0:	e0bff917 	ldw	r2,-28(fp)
 40215d4:	1009883a 	mov	r4,r2
 40215d8:	180b883a 	mov	r5,r3
 40215dc:	e1bff717 	ldw	r6,-36(fp)
 40215e0:	4010a180 	call	4010a18 <memcpy>
      ptr   += n;
 40215e4:	e0fff717 	ldw	r3,-36(fp)
 40215e8:	e0bff917 	ldw	r2,-28(fp)
 40215ec:	10c5883a 	add	r2,r2,r3
 40215f0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 40215f4:	e0fffd17 	ldw	r3,-12(fp)
 40215f8:	e0bff717 	ldw	r2,-36(fp)
 40215fc:	1885c83a 	sub	r2,r3,r2
 4021600:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021604:	e0fff517 	ldw	r3,-44(fp)
 4021608:	e0bff717 	ldw	r2,-36(fp)
 402160c:	1885883a 	add	r2,r3,r2
 4021610:	10c1ffcc 	andi	r3,r2,2047
 4021614:	e0bffb17 	ldw	r2,-20(fp)
 4021618:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 402161c:	e0bffd17 	ldw	r2,-12(fp)
 4021620:	10800048 	cmpgei	r2,r2,1
 4021624:	103fcc1e 	bne	r2,zero,4021558 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 4021628:	e0fff917 	ldw	r3,-28(fp)
 402162c:	e0bffc17 	ldw	r2,-16(fp)
 4021630:	1880301e 	bne	r3,r2,40216f4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4021634:	e0bffe17 	ldw	r2,-8(fp)
 4021638:	1090000c 	andi	r2,r2,16384
 402163c:	1004c03a 	cmpne	r2,r2,zero
 4021640:	10002c1e 	bne	r2,zero,40216f4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 4021644:	008100b4 	movhi	r2,1026
 4021648:	109aa444 	addi	r2,r2,27281
 402164c:	10800003 	ldbu	r2,0(r2)
 4021650:	10803fcc 	andi	r2,r2,255
 4021654:	10800058 	cmpnei	r2,r2,1
 4021658:	1000161e 	bne	r2,zero,40216b4 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 402165c:	e0bffb17 	ldw	r2,-20(fp)
 4021660:	10800c17 	ldw	r2,48(r2)
 4021664:	e0bff015 	stw	r2,-64(fp)
 4021668:	00800144 	movi	r2,5
 402166c:	e0bff10d 	sth	r2,-60(fp)
 4021670:	00bfe0c4 	movi	r2,-125
 4021674:	e0bff185 	stb	r2,-58(fp)
 4021678:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 402167c:	008100b4 	movhi	r2,1026
 4021680:	109aa444 	addi	r2,r2,27281
 4021684:	10800003 	ldbu	r2,0(r2)
 4021688:	10803fcc 	andi	r2,r2,255
 402168c:	1005003a 	cmpeq	r2,r2,zero
 4021690:	1000111e 	bne	r2,zero,40216d8 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4021694:	e17ff10b 	ldhu	r5,-60(fp)
 4021698:	e1bff183 	ldbu	r6,-58(fp)
 402169c:	e1fff20b 	ldhu	r7,-56(fp)
 40216a0:	e0bffa04 	addi	r2,fp,-24
 40216a4:	d8800015 	stw	r2,0(sp)
 40216a8:	e13ff017 	ldw	r4,-64(fp)
 40216ac:	401ac100 	call	401ac10 <OSFlagPend>
    return err;
 40216b0:	00000906 	br	40216d8 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40216b4:	e0bffb17 	ldw	r2,-20(fp)
 40216b8:	10c00d17 	ldw	r3,52(r2)
 40216bc:	e0bff617 	ldw	r2,-40(fp)
 40216c0:	1880051e 	bne	r3,r2,40216d8 <altera_avalon_jtag_uart_read+0x1cc>
 40216c4:	e0bffb17 	ldw	r2,-20(fp)
 40216c8:	10c00917 	ldw	r3,36(r2)
 40216cc:	e0bffb17 	ldw	r2,-20(fp)
 40216d0:	10800117 	ldw	r2,4(r2)
 40216d4:	18bff736 	bltu	r3,r2,40216b4 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40216d8:	e0bffb17 	ldw	r2,-20(fp)
 40216dc:	10c00d17 	ldw	r3,52(r2)
 40216e0:	e0bff617 	ldw	r2,-40(fp)
 40216e4:	18800326 	beq	r3,r2,40216f4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40216e8:	e0bffd17 	ldw	r2,-12(fp)
 40216ec:	10800048 	cmpgei	r2,r2,1
 40216f0:	103f991e 	bne	r2,zero,4021558 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 40216f4:	e0bffb17 	ldw	r2,-20(fp)
 40216f8:	11000a17 	ldw	r4,40(r2)
 40216fc:	401df480 	call	401df48 <OSSemPost>

  if (ptr != buffer)
 4021700:	e0fff917 	ldw	r3,-28(fp)
 4021704:	e0bffc17 	ldw	r2,-16(fp)
 4021708:	18801926 	beq	r3,r2,4021770 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402170c:	0005303a 	rdctl	r2,status
 4021710:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021714:	e0ffef17 	ldw	r3,-68(fp)
 4021718:	00bfff84 	movi	r2,-2
 402171c:	1884703a 	and	r2,r3,r2
 4021720:	1001703a 	wrctl	status,r2
  
  return context;
 4021724:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4021728:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402172c:	e0bffb17 	ldw	r2,-20(fp)
 4021730:	10800817 	ldw	r2,32(r2)
 4021734:	10c00054 	ori	r3,r2,1
 4021738:	e0bffb17 	ldw	r2,-20(fp)
 402173c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4021740:	e0bffb17 	ldw	r2,-20(fp)
 4021744:	10800017 	ldw	r2,0(r2)
 4021748:	11000104 	addi	r4,r2,4
 402174c:	e0bffb17 	ldw	r2,-20(fp)
 4021750:	10800817 	ldw	r2,32(r2)
 4021754:	1007883a 	mov	r3,r2
 4021758:	2005883a 	mov	r2,r4
 402175c:	10c00035 	stwio	r3,0(r2)
 4021760:	e0bff817 	ldw	r2,-32(fp)
 4021764:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021768:	e0bfee17 	ldw	r2,-72(fp)
 402176c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4021770:	e0fff917 	ldw	r3,-28(fp)
 4021774:	e0bffc17 	ldw	r2,-16(fp)
 4021778:	18800526 	beq	r3,r2,4021790 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 402177c:	e0fff917 	ldw	r3,-28(fp)
 4021780:	e0bffc17 	ldw	r2,-16(fp)
 4021784:	1887c83a 	sub	r3,r3,r2
 4021788:	e0ffff15 	stw	r3,-4(fp)
 402178c:	00000906 	br	40217b4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 4021790:	e0bffe17 	ldw	r2,-8(fp)
 4021794:	1090000c 	andi	r2,r2,16384
 4021798:	1005003a 	cmpeq	r2,r2,zero
 402179c:	1000031e 	bne	r2,zero,40217ac <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 40217a0:	00bffd44 	movi	r2,-11
 40217a4:	e0bfff15 	stw	r2,-4(fp)
 40217a8:	00000206 	br	40217b4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 40217ac:	00bffec4 	movi	r2,-5
 40217b0:	e0bfff15 	stw	r2,-4(fp)
 40217b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40217b8:	e037883a 	mov	sp,fp
 40217bc:	dfc00117 	ldw	ra,4(sp)
 40217c0:	df000017 	ldw	fp,0(sp)
 40217c4:	dec00204 	addi	sp,sp,8
 40217c8:	f800283a 	ret

040217cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40217cc:	deffeb04 	addi	sp,sp,-84
 40217d0:	dfc01415 	stw	ra,80(sp)
 40217d4:	df001315 	stw	fp,76(sp)
 40217d8:	df001304 	addi	fp,sp,76
 40217dc:	e13ffb15 	stw	r4,-20(fp)
 40217e0:	e17ffc15 	stw	r5,-16(fp)
 40217e4:	e1bffd15 	stw	r6,-12(fp)
 40217e8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40217ec:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40217f0:	e0bffc17 	ldw	r2,-16(fp)
 40217f4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 40217f8:	e0bffb17 	ldw	r2,-20(fp)
 40217fc:	10800b17 	ldw	r2,44(r2)
 4021800:	e0bff315 	stw	r2,-52(fp)
 4021804:	e03ff40d 	sth	zero,-48(fp)
 4021808:	e17ff40b 	ldhu	r5,-48(fp)
 402180c:	e1bffa04 	addi	r6,fp,-24
 4021810:	e13ff317 	ldw	r4,-52(fp)
 4021814:	401db500 	call	401db50 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4021818:	00003a06 	br	4021904 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402181c:	e0bffb17 	ldw	r2,-20(fp)
 4021820:	10800f17 	ldw	r2,60(r2)
 4021824:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4021828:	e0bffb17 	ldw	r2,-20(fp)
 402182c:	10801017 	ldw	r2,64(r2)
 4021830:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 4021834:	e0fff917 	ldw	r3,-28(fp)
 4021838:	e0bff817 	ldw	r2,-32(fp)
 402183c:	1880062e 	bgeu	r3,r2,4021858 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 4021840:	e0fff817 	ldw	r3,-32(fp)
 4021844:	e0bff917 	ldw	r2,-28(fp)
 4021848:	1885c83a 	sub	r2,r3,r2
 402184c:	10bfffc4 	addi	r2,r2,-1
 4021850:	e0bff715 	stw	r2,-36(fp)
 4021854:	00000c06 	br	4021888 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 4021858:	e0bff817 	ldw	r2,-32(fp)
 402185c:	1005003a 	cmpeq	r2,r2,zero
 4021860:	1000051e 	bne	r2,zero,4021878 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4021864:	00820004 	movi	r2,2048
 4021868:	e0fff917 	ldw	r3,-28(fp)
 402186c:	10c5c83a 	sub	r2,r2,r3
 4021870:	e0bff715 	stw	r2,-36(fp)
 4021874:	00000406 	br	4021888 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4021878:	0081ffc4 	movi	r2,2047
 402187c:	e0fff917 	ldw	r3,-28(fp)
 4021880:	10c5c83a 	sub	r2,r2,r3
 4021884:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4021888:	e0bff717 	ldw	r2,-36(fp)
 402188c:	1005003a 	cmpeq	r2,r2,zero
 4021890:	10001f1e 	bne	r2,zero,4021910 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 4021894:	e0fffd17 	ldw	r3,-12(fp)
 4021898:	e0bff717 	ldw	r2,-36(fp)
 402189c:	1880022e 	bgeu	r3,r2,40218a8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 40218a0:	e0bffd17 	ldw	r2,-12(fp)
 40218a4:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40218a8:	e0bffb17 	ldw	r2,-20(fp)
 40218ac:	10c21104 	addi	r3,r2,2116
 40218b0:	e0bff917 	ldw	r2,-28(fp)
 40218b4:	1885883a 	add	r2,r3,r2
 40218b8:	e0fffc17 	ldw	r3,-16(fp)
 40218bc:	1009883a 	mov	r4,r2
 40218c0:	180b883a 	mov	r5,r3
 40218c4:	e1bff717 	ldw	r6,-36(fp)
 40218c8:	4010a180 	call	4010a18 <memcpy>
      ptr   += n;
 40218cc:	e0fff717 	ldw	r3,-36(fp)
 40218d0:	e0bffc17 	ldw	r2,-16(fp)
 40218d4:	10c5883a 	add	r2,r2,r3
 40218d8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 40218dc:	e0fffd17 	ldw	r3,-12(fp)
 40218e0:	e0bff717 	ldw	r2,-36(fp)
 40218e4:	1885c83a 	sub	r2,r3,r2
 40218e8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40218ec:	e0fff917 	ldw	r3,-28(fp)
 40218f0:	e0bff717 	ldw	r2,-36(fp)
 40218f4:	1885883a 	add	r2,r3,r2
 40218f8:	10c1ffcc 	andi	r3,r2,2047
 40218fc:	e0bffb17 	ldw	r2,-20(fp)
 4021900:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4021904:	e0bffd17 	ldw	r2,-12(fp)
 4021908:	10800048 	cmpgei	r2,r2,1
 402190c:	103fc31e 	bne	r2,zero,402181c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4021910:	0005303a 	rdctl	r2,status
 4021914:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021918:	e0fff217 	ldw	r3,-56(fp)
 402191c:	00bfff84 	movi	r2,-2
 4021920:	1884703a 	and	r2,r3,r2
 4021924:	1001703a 	wrctl	status,r2
  
  return context;
 4021928:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402192c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4021930:	e0bffb17 	ldw	r2,-20(fp)
 4021934:	10800817 	ldw	r2,32(r2)
 4021938:	10c00094 	ori	r3,r2,2
 402193c:	e0bffb17 	ldw	r2,-20(fp)
 4021940:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4021944:	e0bffb17 	ldw	r2,-20(fp)
 4021948:	10800017 	ldw	r2,0(r2)
 402194c:	11000104 	addi	r4,r2,4
 4021950:	e0bffb17 	ldw	r2,-20(fp)
 4021954:	10800817 	ldw	r2,32(r2)
 4021958:	1007883a 	mov	r3,r2
 402195c:	2005883a 	mov	r2,r4
 4021960:	10c00035 	stwio	r3,0(r2)
 4021964:	e0bff617 	ldw	r2,-40(fp)
 4021968:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402196c:	e0bff117 	ldw	r2,-60(fp)
 4021970:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4021974:	e0bffd17 	ldw	r2,-12(fp)
 4021978:	10800050 	cmplti	r2,r2,1
 402197c:	10002d1e 	bne	r2,zero,4021a34 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 4021980:	e0bffe17 	ldw	r2,-8(fp)
 4021984:	1090000c 	andi	r2,r2,16384
 4021988:	1004c03a 	cmpne	r2,r2,zero
 402198c:	10002c1e 	bne	r2,zero,4021a40 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4021990:	008100b4 	movhi	r2,1026
 4021994:	109aa444 	addi	r2,r2,27281
 4021998:	10800003 	ldbu	r2,0(r2)
 402199c:	10803fcc 	andi	r2,r2,255
 40219a0:	10800058 	cmpnei	r2,r2,1
 40219a4:	1000161e 	bne	r2,zero,4021a00 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 40219a8:	e0bffb17 	ldw	r2,-20(fp)
 40219ac:	10800c17 	ldw	r2,48(r2)
 40219b0:	e0bfee15 	stw	r2,-72(fp)
 40219b4:	00800184 	movi	r2,6
 40219b8:	e0bfef0d 	sth	r2,-68(fp)
 40219bc:	00bfe0c4 	movi	r2,-125
 40219c0:	e0bfef85 	stb	r2,-66(fp)
 40219c4:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 40219c8:	008100b4 	movhi	r2,1026
 40219cc:	109aa444 	addi	r2,r2,27281
 40219d0:	10800003 	ldbu	r2,0(r2)
 40219d4:	10803fcc 	andi	r2,r2,255
 40219d8:	1005003a 	cmpeq	r2,r2,zero
 40219dc:	1000111e 	bne	r2,zero,4021a24 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 40219e0:	e17fef0b 	ldhu	r5,-68(fp)
 40219e4:	e1bfef83 	ldbu	r6,-66(fp)
 40219e8:	e1fff00b 	ldhu	r7,-64(fp)
 40219ec:	e0bffa44 	addi	r2,fp,-23
 40219f0:	d8800015 	stw	r2,0(sp)
 40219f4:	e13fee17 	ldw	r4,-72(fp)
 40219f8:	401ac100 	call	401ac10 <OSFlagPend>
    return err;
 40219fc:	00000906 	br	4021a24 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4021a00:	e0bffb17 	ldw	r2,-20(fp)
 4021a04:	10c01017 	ldw	r3,64(r2)
 4021a08:	e0bff817 	ldw	r2,-32(fp)
 4021a0c:	1880051e 	bne	r3,r2,4021a24 <altera_avalon_jtag_uart_write+0x258>
 4021a10:	e0bffb17 	ldw	r2,-20(fp)
 4021a14:	10c00917 	ldw	r3,36(r2)
 4021a18:	e0bffb17 	ldw	r2,-20(fp)
 4021a1c:	10800117 	ldw	r2,4(r2)
 4021a20:	18bff736 	bltu	r3,r2,4021a00 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4021a24:	e0bffb17 	ldw	r2,-20(fp)
 4021a28:	10c01017 	ldw	r3,64(r2)
 4021a2c:	e0bff817 	ldw	r2,-32(fp)
 4021a30:	18800326 	beq	r3,r2,4021a40 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 4021a34:	e0bffd17 	ldw	r2,-12(fp)
 4021a38:	10800048 	cmpgei	r2,r2,1
 4021a3c:	103fb11e 	bne	r2,zero,4021904 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4021a40:	e0bffb17 	ldw	r2,-20(fp)
 4021a44:	11000b17 	ldw	r4,44(r2)
 4021a48:	401df480 	call	401df48 <OSSemPost>

  if (ptr != start)
 4021a4c:	e0fffc17 	ldw	r3,-16(fp)
 4021a50:	e0bff517 	ldw	r2,-44(fp)
 4021a54:	18800526 	beq	r3,r2,4021a6c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 4021a58:	e0fffc17 	ldw	r3,-16(fp)
 4021a5c:	e0bff517 	ldw	r2,-44(fp)
 4021a60:	1887c83a 	sub	r3,r3,r2
 4021a64:	e0ffff15 	stw	r3,-4(fp)
 4021a68:	00000906 	br	4021a90 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 4021a6c:	e0bffe17 	ldw	r2,-8(fp)
 4021a70:	1090000c 	andi	r2,r2,16384
 4021a74:	1005003a 	cmpeq	r2,r2,zero
 4021a78:	1000031e 	bne	r2,zero,4021a88 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 4021a7c:	00bffd44 	movi	r2,-11
 4021a80:	e0bfff15 	stw	r2,-4(fp)
 4021a84:	00000206 	br	4021a90 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 4021a88:	00bffec4 	movi	r2,-5
 4021a8c:	e0bfff15 	stw	r2,-4(fp)
 4021a90:	e0bfff17 	ldw	r2,-4(fp)
}
 4021a94:	e037883a 	mov	sp,fp
 4021a98:	dfc00117 	ldw	ra,4(sp)
 4021a9c:	df000017 	ldw	fp,0(sp)
 4021aa0:	dec00204 	addi	sp,sp,8
 4021aa4:	f800283a 	ret

04021aa8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4021aa8:	defffa04 	addi	sp,sp,-24
 4021aac:	dfc00515 	stw	ra,20(sp)
 4021ab0:	df000415 	stw	fp,16(sp)
 4021ab4:	df000404 	addi	fp,sp,16
 4021ab8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4021abc:	e0bfff17 	ldw	r2,-4(fp)
 4021ac0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4021ac4:	e0bfff17 	ldw	r2,-4(fp)
 4021ac8:	10800104 	addi	r2,r2,4
 4021acc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4021ad0:	0005303a 	rdctl	r2,status
 4021ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021ad8:	e0fffd17 	ldw	r3,-12(fp)
 4021adc:	00bfff84 	movi	r2,-2
 4021ae0:	1884703a 	and	r2,r3,r2
 4021ae4:	1001703a 	wrctl	status,r2
  
  return context;
 4021ae8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4021aec:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4021af0:	40179180 	call	4017918 <alt_tick>
 4021af4:	e0bffe17 	ldw	r2,-8(fp)
 4021af8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021afc:	e0bffc17 	ldw	r2,-16(fp)
 4021b00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4021b04:	e037883a 	mov	sp,fp
 4021b08:	dfc00117 	ldw	ra,4(sp)
 4021b0c:	df000017 	ldw	fp,0(sp)
 4021b10:	dec00204 	addi	sp,sp,8
 4021b14:	f800283a 	ret

04021b18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4021b18:	defff804 	addi	sp,sp,-32
 4021b1c:	dfc00715 	stw	ra,28(sp)
 4021b20:	df000615 	stw	fp,24(sp)
 4021b24:	df000604 	addi	fp,sp,24
 4021b28:	e13ffc15 	stw	r4,-16(fp)
 4021b2c:	e17ffd15 	stw	r5,-12(fp)
 4021b30:	e1bffe15 	stw	r6,-8(fp)
 4021b34:	e1ffff15 	stw	r7,-4(fp)
 4021b38:	e0bfff17 	ldw	r2,-4(fp)
 4021b3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4021b40:	008100b4 	movhi	r2,1026
 4021b44:	109a9e04 	addi	r2,r2,27256
 4021b48:	10800017 	ldw	r2,0(r2)
 4021b4c:	1004c03a 	cmpne	r2,r2,zero
 4021b50:	1000041e 	bne	r2,zero,4021b64 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4021b54:	00c100b4 	movhi	r3,1026
 4021b58:	18da9e04 	addi	r3,r3,27256
 4021b5c:	e0bffb17 	ldw	r2,-20(fp)
 4021b60:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4021b64:	e0bffc17 	ldw	r2,-16(fp)
 4021b68:	10800104 	addi	r2,r2,4
 4021b6c:	1007883a 	mov	r3,r2
 4021b70:	008001c4 	movi	r2,7
 4021b74:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4021b78:	d8000015 	stw	zero,0(sp)
 4021b7c:	e13ffd17 	ldw	r4,-12(fp)
 4021b80:	e17ffe17 	ldw	r5,-8(fp)
 4021b84:	018100b4 	movhi	r6,1026
 4021b88:	3186aa04 	addi	r6,r6,6824
 4021b8c:	e1fffc17 	ldw	r7,-16(fp)
 4021b90:	402279c0 	call	402279c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4021b94:	e037883a 	mov	sp,fp
 4021b98:	dfc00117 	ldw	ra,4(sp)
 4021b9c:	df000017 	ldw	fp,0(sp)
 4021ba0:	dec00204 	addi	sp,sp,8
 4021ba4:	f800283a 	ret

04021ba8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 4021ba8:	defff904 	addi	sp,sp,-28
 4021bac:	dfc00615 	stw	ra,24(sp)
 4021bb0:	df000515 	stw	fp,20(sp)
 4021bb4:	df000504 	addi	fp,sp,20
 4021bb8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 4021bbc:	00800144 	movi	r2,5
 4021bc0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 4021bc4:	00800044 	movi	r2,1
 4021bc8:	d8800015 	stw	r2,0(sp)
 4021bcc:	e0bffe44 	addi	r2,fp,-7
 4021bd0:	d8800115 	stw	r2,4(sp)
 4021bd4:	d8000215 	stw	zero,8(sp)
 4021bd8:	e13fff17 	ldw	r4,-4(fp)
 4021bdc:	000b883a 	mov	r5,zero
 4021be0:	01800044 	movi	r6,1
 4021be4:	e1fffe04 	addi	r7,fp,-8
 4021be8:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4021bec:	e0bffe43 	ldbu	r2,-7(fp)
 4021bf0:	10803fcc 	andi	r2,r2,255
}
 4021bf4:	e037883a 	mov	sp,fp
 4021bf8:	dfc00117 	ldw	ra,4(sp)
 4021bfc:	df000017 	ldw	fp,0(sp)
 4021c00:	dec00204 	addi	sp,sp,8
 4021c04:	f800283a 	ret

04021c08 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 4021c08:	defff604 	addi	sp,sp,-40
 4021c0c:	dfc00915 	stw	ra,36(sp)
 4021c10:	df000815 	stw	fp,32(sp)
 4021c14:	df000804 	addi	fp,sp,32
 4021c18:	e13ffd15 	stw	r4,-12(fp)
 4021c1c:	e17ffe15 	stw	r5,-8(fp)
 4021c20:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 4021c24:	e0bfff17 	ldw	r2,-4(fp)
 4021c28:	1005003a 	cmpeq	r2,r2,zero
 4021c2c:	1000121e 	bne	r2,zero,4021c78 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 4021c30:	00bff604 	movi	r2,-40
 4021c34:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 4021c38:	e0bffe17 	ldw	r2,-8(fp)
 4021c3c:	1004d63a 	srli	r2,r2,24
 4021c40:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 4021c44:	e0bffe17 	ldw	r2,-8(fp)
 4021c48:	1004d43a 	srli	r2,r2,16
 4021c4c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 4021c50:	e0bffe17 	ldw	r2,-8(fp)
 4021c54:	1004d23a 	srli	r2,r2,8
 4021c58:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 4021c5c:	e0bffe17 	ldw	r2,-8(fp)
 4021c60:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 4021c64:	00800144 	movi	r2,5
 4021c68:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 4021c6c:	e13ffd17 	ldw	r4,-12(fp)
 4021c70:	40221cc0 	call	40221cc <epcs_enter_4_bytes_mode>
 4021c74:	00000c06 	br	4021ca8 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 4021c78:	00bff604 	movi	r2,-40
 4021c7c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 4021c80:	e0bffe17 	ldw	r2,-8(fp)
 4021c84:	1004d43a 	srli	r2,r2,16
 4021c88:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 4021c8c:	e0bffe17 	ldw	r2,-8(fp)
 4021c90:	1004d23a 	srli	r2,r2,8
 4021c94:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 4021c98:	e0bffe17 	ldw	r2,-8(fp)
 4021c9c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 4021ca0:	00800104 	movi	r2,4
 4021ca4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 4021ca8:	e13ffd17 	ldw	r4,-12(fp)
 4021cac:	4021ebc0 	call	4021ebc <epcs_write_enable>

  alt_avalon_spi_command(
 4021cb0:	e1bffb03 	ldbu	r6,-20(fp)
 4021cb4:	e1fffb44 	addi	r7,fp,-19
 4021cb8:	d8000015 	stw	zero,0(sp)
 4021cbc:	d8000115 	stw	zero,4(sp)
 4021cc0:	d8000215 	stw	zero,8(sp)
 4021cc4:	e13ffd17 	ldw	r4,-12(fp)
 4021cc8:	000b883a 	mov	r5,zero
 4021ccc:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4021cd0:	e13ffd17 	ldw	r4,-12(fp)
 4021cd4:	4021d000 	call	4021d00 <epcs_await_wip_released>

  if(four_bytes_mode)
 4021cd8:	e0bfff17 	ldw	r2,-4(fp)
 4021cdc:	1005003a 	cmpeq	r2,r2,zero
 4021ce0:	1000021e 	bne	r2,zero,4021cec <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 4021ce4:	e13ffd17 	ldw	r4,-12(fp)
 4021ce8:	40222240 	call	4022224 <epcs_exit_4_bytes_mode>
  }
}
 4021cec:	e037883a 	mov	sp,fp
 4021cf0:	dfc00117 	ldw	ra,4(sp)
 4021cf4:	df000017 	ldw	fp,0(sp)
 4021cf8:	dec00204 	addi	sp,sp,8
 4021cfc:	f800283a 	ret

04021d00 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 4021d00:	defffd04 	addi	sp,sp,-12
 4021d04:	dfc00215 	stw	ra,8(sp)
 4021d08:	df000115 	stw	fp,4(sp)
 4021d0c:	df000104 	addi	fp,sp,4
 4021d10:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 4021d14:	e13fff17 	ldw	r4,-4(fp)
 4021d18:	4021d380 	call	4021d38 <epcs_test_wip>
 4021d1c:	1004c03a 	cmpne	r2,r2,zero
 4021d20:	103ffc1e 	bne	r2,zero,4021d14 <epcs_await_wip_released+0x14>
  {
  }
}
 4021d24:	e037883a 	mov	sp,fp
 4021d28:	dfc00117 	ldw	ra,4(sp)
 4021d2c:	df000017 	ldw	fp,0(sp)
 4021d30:	dec00204 	addi	sp,sp,8
 4021d34:	f800283a 	ret

04021d38 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4021d38:	defffd04 	addi	sp,sp,-12
 4021d3c:	dfc00215 	stw	ra,8(sp)
 4021d40:	df000115 	stw	fp,4(sp)
 4021d44:	df000104 	addi	fp,sp,4
 4021d48:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 4021d4c:	e13fff17 	ldw	r4,-4(fp)
 4021d50:	4021ba80 	call	4021ba8 <epcs_read_status_register>
 4021d54:	10803fcc 	andi	r2,r2,255
 4021d58:	1080004c 	andi	r2,r2,1
}
 4021d5c:	e037883a 	mov	sp,fp
 4021d60:	dfc00117 	ldw	ra,4(sp)
 4021d64:	df000017 	ldw	fp,0(sp)
 4021d68:	dec00204 	addi	sp,sp,8
 4021d6c:	f800283a 	ret

04021d70 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 4021d70:	defff404 	addi	sp,sp,-48
 4021d74:	dfc00b15 	stw	ra,44(sp)
 4021d78:	df000a15 	stw	fp,40(sp)
 4021d7c:	df000a04 	addi	fp,sp,40
 4021d80:	e13ffc15 	stw	r4,-16(fp)
 4021d84:	e17ffd15 	stw	r5,-12(fp)
 4021d88:	e1bffe15 	stw	r6,-8(fp)
 4021d8c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 4021d90:	008000c4 	movi	r2,3
 4021d94:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4021d98:	e0800217 	ldw	r2,8(fp)
 4021d9c:	1005003a 	cmpeq	r2,r2,zero
 4021da0:	10001c1e 	bne	r2,zero,4021e14 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 4021da4:	e0bffd17 	ldw	r2,-12(fp)
 4021da8:	1005d63a 	srai	r2,r2,24
 4021dac:	1007883a 	mov	r3,r2
 4021db0:	00bfffc4 	movi	r2,-1
 4021db4:	1884703a 	and	r2,r3,r2
 4021db8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 4021dbc:	e0bffd17 	ldw	r2,-12(fp)
 4021dc0:	1005d43a 	srai	r2,r2,16
 4021dc4:	1007883a 	mov	r3,r2
 4021dc8:	00bfffc4 	movi	r2,-1
 4021dcc:	1884703a 	and	r2,r3,r2
 4021dd0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 4021dd4:	e0bffd17 	ldw	r2,-12(fp)
 4021dd8:	1005d23a 	srai	r2,r2,8
 4021ddc:	1007883a 	mov	r3,r2
 4021de0:	00bfffc4 	movi	r2,-1
 4021de4:	1884703a 	and	r2,r3,r2
 4021de8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 4021dec:	e0bffd17 	ldw	r2,-12(fp)
 4021df0:	1007883a 	mov	r3,r2
 4021df4:	00bfffc4 	movi	r2,-1
 4021df8:	1884703a 	and	r2,r3,r2
 4021dfc:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 4021e00:	00800144 	movi	r2,5
 4021e04:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 4021e08:	e13ffc17 	ldw	r4,-16(fp)
 4021e0c:	40221cc0 	call	40221cc <epcs_enter_4_bytes_mode>
 4021e10:	00001306 	br	4021e60 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 4021e14:	e0bffd17 	ldw	r2,-12(fp)
 4021e18:	1005d43a 	srai	r2,r2,16
 4021e1c:	1007883a 	mov	r3,r2
 4021e20:	00bfffc4 	movi	r2,-1
 4021e24:	1884703a 	and	r2,r3,r2
 4021e28:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 4021e2c:	e0bffd17 	ldw	r2,-12(fp)
 4021e30:	1005d23a 	srai	r2,r2,8
 4021e34:	1007883a 	mov	r3,r2
 4021e38:	00bfffc4 	movi	r2,-1
 4021e3c:	1884703a 	and	r2,r3,r2
 4021e40:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 4021e44:	e0bffd17 	ldw	r2,-12(fp)
 4021e48:	1007883a 	mov	r3,r2
 4021e4c:	00bfffc4 	movi	r2,-1
 4021e50:	1884703a 	and	r2,r3,r2
 4021e54:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 4021e58:	00800104 	movi	r2,4
 4021e5c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 4021e60:	e13ffc17 	ldw	r4,-16(fp)
 4021e64:	4021d000 	call	4021d00 <epcs_await_wip_released>

  alt_avalon_spi_command(
 4021e68:	e0bfff17 	ldw	r2,-4(fp)
 4021e6c:	e1fffa04 	addi	r7,fp,-24
 4021e70:	d8800015 	stw	r2,0(sp)
 4021e74:	e0bffe17 	ldw	r2,-8(fp)
 4021e78:	d8800115 	stw	r2,4(sp)
 4021e7c:	d8000215 	stw	zero,8(sp)
 4021e80:	e13ffc17 	ldw	r4,-16(fp)
 4021e84:	000b883a 	mov	r5,zero
 4021e88:	e1bff917 	ldw	r6,-28(fp)
 4021e8c:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 4021e90:	e0800217 	ldw	r2,8(fp)
 4021e94:	1005003a 	cmpeq	r2,r2,zero
 4021e98:	1000021e 	bne	r2,zero,4021ea4 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 4021e9c:	e13ffc17 	ldw	r4,-16(fp)
 4021ea0:	40222240 	call	4022224 <epcs_exit_4_bytes_mode>
  }

  return length;
 4021ea4:	e0bfff17 	ldw	r2,-4(fp)
}
 4021ea8:	e037883a 	mov	sp,fp
 4021eac:	dfc00117 	ldw	ra,4(sp)
 4021eb0:	df000017 	ldw	fp,0(sp)
 4021eb4:	dec00204 	addi	sp,sp,8
 4021eb8:	f800283a 	ret

04021ebc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4021ebc:	defff904 	addi	sp,sp,-28
 4021ec0:	dfc00615 	stw	ra,24(sp)
 4021ec4:	df000515 	stw	fp,20(sp)
 4021ec8:	df000504 	addi	fp,sp,20
 4021ecc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 4021ed0:	00800184 	movi	r2,6
 4021ed4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 4021ed8:	d8000015 	stw	zero,0(sp)
 4021edc:	d8000115 	stw	zero,4(sp)
 4021ee0:	d8000215 	stw	zero,8(sp)
 4021ee4:	e13fff17 	ldw	r4,-4(fp)
 4021ee8:	000b883a 	mov	r5,zero
 4021eec:	01800044 	movi	r6,1
 4021ef0:	e1fffe04 	addi	r7,fp,-8
 4021ef4:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 4021ef8:	e037883a 	mov	sp,fp
 4021efc:	dfc00117 	ldw	ra,4(sp)
 4021f00:	df000017 	ldw	fp,0(sp)
 4021f04:	dec00204 	addi	sp,sp,8
 4021f08:	f800283a 	ret

04021f0c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 4021f0c:	defff804 	addi	sp,sp,-32
 4021f10:	dfc00715 	stw	ra,28(sp)
 4021f14:	df000615 	stw	fp,24(sp)
 4021f18:	df000604 	addi	fp,sp,24
 4021f1c:	e13ffe15 	stw	r4,-8(fp)
 4021f20:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4021f24:	00800044 	movi	r2,1
 4021f28:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 4021f2c:	e0bfff03 	ldbu	r2,-4(fp)
 4021f30:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 4021f34:	d8000015 	stw	zero,0(sp)
 4021f38:	d8000115 	stw	zero,4(sp)
 4021f3c:	d8000215 	stw	zero,8(sp)
 4021f40:	e13ffe17 	ldw	r4,-8(fp)
 4021f44:	000b883a 	mov	r5,zero
 4021f48:	01800084 	movi	r6,2
 4021f4c:	e1fffd04 	addi	r7,fp,-12
 4021f50:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4021f54:	e13ffe17 	ldw	r4,-8(fp)
 4021f58:	4021d000 	call	4021d00 <epcs_await_wip_released>
}
 4021f5c:	e037883a 	mov	sp,fp
 4021f60:	dfc00117 	ldw	ra,4(sp)
 4021f64:	df000017 	ldw	fp,0(sp)
 4021f68:	dec00204 	addi	sp,sp,8
 4021f6c:	f800283a 	ret

04021f70 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 4021f70:	defff404 	addi	sp,sp,-48
 4021f74:	dfc00b15 	stw	ra,44(sp)
 4021f78:	df000a15 	stw	fp,40(sp)
 4021f7c:	df000a04 	addi	fp,sp,40
 4021f80:	e13ffc15 	stw	r4,-16(fp)
 4021f84:	e17ffd15 	stw	r5,-12(fp)
 4021f88:	e1bffe15 	stw	r6,-8(fp)
 4021f8c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 4021f90:	00800084 	movi	r2,2
 4021f94:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4021f98:	e0800217 	ldw	r2,8(fp)
 4021f9c:	1005003a 	cmpeq	r2,r2,zero
 4021fa0:	10001c1e 	bne	r2,zero,4022014 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 4021fa4:	e0bffd17 	ldw	r2,-12(fp)
 4021fa8:	1005d63a 	srai	r2,r2,24
 4021fac:	1007883a 	mov	r3,r2
 4021fb0:	00bfffc4 	movi	r2,-1
 4021fb4:	1884703a 	and	r2,r3,r2
 4021fb8:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 4021fbc:	e0bffd17 	ldw	r2,-12(fp)
 4021fc0:	1005d43a 	srai	r2,r2,16
 4021fc4:	1007883a 	mov	r3,r2
 4021fc8:	00bfffc4 	movi	r2,-1
 4021fcc:	1884703a 	and	r2,r3,r2
 4021fd0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 4021fd4:	e0bffd17 	ldw	r2,-12(fp)
 4021fd8:	1005d23a 	srai	r2,r2,8
 4021fdc:	1007883a 	mov	r3,r2
 4021fe0:	00bfffc4 	movi	r2,-1
 4021fe4:	1884703a 	and	r2,r3,r2
 4021fe8:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 4021fec:	e0bffd17 	ldw	r2,-12(fp)
 4021ff0:	1007883a 	mov	r3,r2
 4021ff4:	00bfffc4 	movi	r2,-1
 4021ff8:	1884703a 	and	r2,r3,r2
 4021ffc:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 4022000:	00800144 	movi	r2,5
 4022004:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 4022008:	e13ffc17 	ldw	r4,-16(fp)
 402200c:	40221cc0 	call	40221cc <epcs_enter_4_bytes_mode>
 4022010:	00001306 	br	4022060 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 4022014:	e0bffd17 	ldw	r2,-12(fp)
 4022018:	1005d43a 	srai	r2,r2,16
 402201c:	1007883a 	mov	r3,r2
 4022020:	00bfffc4 	movi	r2,-1
 4022024:	1884703a 	and	r2,r3,r2
 4022028:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 402202c:	e0bffd17 	ldw	r2,-12(fp)
 4022030:	1005d23a 	srai	r2,r2,8
 4022034:	1007883a 	mov	r3,r2
 4022038:	00bfffc4 	movi	r2,-1
 402203c:	1884703a 	and	r2,r3,r2
 4022040:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 4022044:	e0bffd17 	ldw	r2,-12(fp)
 4022048:	1007883a 	mov	r3,r2
 402204c:	00bfffc4 	movi	r2,-1
 4022050:	1884703a 	and	r2,r3,r2
 4022054:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 4022058:	00800104 	movi	r2,4
 402205c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 4022060:	e13ffc17 	ldw	r4,-16(fp)
 4022064:	4021ebc0 	call	4021ebc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 4022068:	e1fffa04 	addi	r7,fp,-24
 402206c:	d8000015 	stw	zero,0(sp)
 4022070:	d8000115 	stw	zero,4(sp)
 4022074:	00800044 	movi	r2,1
 4022078:	d8800215 	stw	r2,8(sp)
 402207c:	e13ffc17 	ldw	r4,-16(fp)
 4022080:	000b883a 	mov	r5,zero
 4022084:	e1bff917 	ldw	r6,-28(fp)
 4022088:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 402208c:	e1bfff17 	ldw	r6,-4(fp)
 4022090:	d8000015 	stw	zero,0(sp)
 4022094:	d8000115 	stw	zero,4(sp)
 4022098:	d8000215 	stw	zero,8(sp)
 402209c:	e13ffc17 	ldw	r4,-16(fp)
 40220a0:	000b883a 	mov	r5,zero
 40220a4:	e1fffe17 	ldw	r7,-8(fp)
 40220a8:	40233a40 	call	40233a4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 40220ac:	e13ffc17 	ldw	r4,-16(fp)
 40220b0:	4021d000 	call	4021d00 <epcs_await_wip_released>

  if(four_bytes_mode)
 40220b4:	e0800217 	ldw	r2,8(fp)
 40220b8:	1005003a 	cmpeq	r2,r2,zero
 40220bc:	1000021e 	bne	r2,zero,40220c8 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 40220c0:	e13ffc17 	ldw	r4,-16(fp)
 40220c4:	40222240 	call	4022224 <epcs_exit_4_bytes_mode>
  }

  return length;
 40220c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40220cc:	e037883a 	mov	sp,fp
 40220d0:	dfc00117 	ldw	ra,4(sp)
 40220d4:	df000017 	ldw	fp,0(sp)
 40220d8:	dec00204 	addi	sp,sp,8
 40220dc:	f800283a 	ret

040220e0 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 40220e0:	defff804 	addi	sp,sp,-32
 40220e4:	dfc00715 	stw	ra,28(sp)
 40220e8:	df000615 	stw	fp,24(sp)
 40220ec:	df000604 	addi	fp,sp,24
 40220f0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 40220f4:	00bfeac4 	movi	r2,-85
 40220f8:	e0bffd05 	stb	r2,-12(fp)
 40220fc:	e03ffd45 	stb	zero,-11(fp)
 4022100:	e03ffd85 	stb	zero,-10(fp)
 4022104:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4022108:	00800044 	movi	r2,1
 402210c:	d8800015 	stw	r2,0(sp)
 4022110:	e0bffe04 	addi	r2,fp,-8
 4022114:	d8800115 	stw	r2,4(sp)
 4022118:	d8000215 	stw	zero,8(sp)
 402211c:	e13fff17 	ldw	r4,-4(fp)
 4022120:	000b883a 	mov	r5,zero
 4022124:	01800104 	movi	r6,4
 4022128:	e1fffd04 	addi	r7,fp,-12
 402212c:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4022130:	e0bffe03 	ldbu	r2,-8(fp)
 4022134:	10803fcc 	andi	r2,r2,255
}
 4022138:	e037883a 	mov	sp,fp
 402213c:	dfc00117 	ldw	ra,4(sp)
 4022140:	df000017 	ldw	fp,0(sp)
 4022144:	dec00204 	addi	sp,sp,8
 4022148:	f800283a 	ret

0402214c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 402214c:	defff904 	addi	sp,sp,-28
 4022150:	dfc00615 	stw	ra,24(sp)
 4022154:	df000515 	stw	fp,20(sp)
 4022158:	df000504 	addi	fp,sp,20
 402215c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 4022160:	00bfe7c4 	movi	r2,-97
 4022164:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 4022168:	008000c4 	movi	r2,3
 402216c:	d8800015 	stw	r2,0(sp)
 4022170:	e0bffe44 	addi	r2,fp,-7
 4022174:	d8800115 	stw	r2,4(sp)
 4022178:	d8000215 	stw	zero,8(sp)
 402217c:	e13fff17 	ldw	r4,-4(fp)
 4022180:	000b883a 	mov	r5,zero
 4022184:	01800044 	movi	r6,1
 4022188:	e1fffe04 	addi	r7,fp,-8
 402218c:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 4022190:	e0bffe43 	ldbu	r2,-7(fp)
 4022194:	10803fcc 	andi	r2,r2,255
 4022198:	1006943a 	slli	r3,r2,16
 402219c:	e0bffe83 	ldbu	r2,-6(fp)
 40221a0:	10803fcc 	andi	r2,r2,255
 40221a4:	1004923a 	slli	r2,r2,8
 40221a8:	1886b03a 	or	r3,r3,r2
 40221ac:	e0bffec3 	ldbu	r2,-5(fp)
 40221b0:	10803fcc 	andi	r2,r2,255
 40221b4:	1884b03a 	or	r2,r3,r2
}
 40221b8:	e037883a 	mov	sp,fp
 40221bc:	dfc00117 	ldw	ra,4(sp)
 40221c0:	df000017 	ldw	fp,0(sp)
 40221c4:	dec00204 	addi	sp,sp,8
 40221c8:	f800283a 	ret

040221cc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 40221cc:	defff904 	addi	sp,sp,-28
 40221d0:	dfc00615 	stw	ra,24(sp)
 40221d4:	df000515 	stw	fp,20(sp)
 40221d8:	df000504 	addi	fp,sp,20
 40221dc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 40221e0:	00bfedc4 	movi	r2,-73
 40221e4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 40221e8:	e13fff17 	ldw	r4,-4(fp)
 40221ec:	4021ebc0 	call	4021ebc <epcs_write_enable>

  alt_avalon_spi_command(
 40221f0:	d8000015 	stw	zero,0(sp)
 40221f4:	d8000115 	stw	zero,4(sp)
 40221f8:	d8000215 	stw	zero,8(sp)
 40221fc:	e13fff17 	ldw	r4,-4(fp)
 4022200:	000b883a 	mov	r5,zero
 4022204:	01800044 	movi	r6,1
 4022208:	e1fffe04 	addi	r7,fp,-8
 402220c:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 4022210:	e037883a 	mov	sp,fp
 4022214:	dfc00117 	ldw	ra,4(sp)
 4022218:	df000017 	ldw	fp,0(sp)
 402221c:	dec00204 	addi	sp,sp,8
 4022220:	f800283a 	ret

04022224 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 4022224:	defff904 	addi	sp,sp,-28
 4022228:	dfc00615 	stw	ra,24(sp)
 402222c:	df000515 	stw	fp,20(sp)
 4022230:	df000504 	addi	fp,sp,20
 4022234:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 4022238:	00bffa44 	movi	r2,-23
 402223c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4022240:	e13fff17 	ldw	r4,-4(fp)
 4022244:	4021ebc0 	call	4021ebc <epcs_write_enable>

  alt_avalon_spi_command(
 4022248:	d8000015 	stw	zero,0(sp)
 402224c:	d8000115 	stw	zero,4(sp)
 4022250:	d8000215 	stw	zero,8(sp)
 4022254:	e13fff17 	ldw	r4,-4(fp)
 4022258:	000b883a 	mov	r5,zero
 402225c:	01800044 	movi	r6,1
 4022260:	e1fffe04 	addi	r7,fp,-8
 4022264:	40233a40 	call	40233a4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 4022268:	e037883a 	mov	sp,fp
 402226c:	dfc00117 	ldw	ra,4(sp)
 4022270:	df000017 	ldw	fp,0(sp)
 4022274:	dec00204 	addi	sp,sp,8
 4022278:	f800283a 	ret

0402227c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402227c:	defff404 	addi	sp,sp,-48
 4022280:	df000b15 	stw	fp,44(sp)
 4022284:	df000b04 	addi	fp,sp,44
 4022288:	e13ffb15 	stw	r4,-20(fp)
 402228c:	e17ffc15 	stw	r5,-16(fp)
 4022290:	e1bffd15 	stw	r6,-12(fp)
 4022294:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4022298:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402229c:	008100b4 	movhi	r2,1026
 40222a0:	109a9e04 	addi	r2,r2,27256
 40222a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 40222a8:	1005003a 	cmpeq	r2,r2,zero
 40222ac:	1000411e 	bne	r2,zero,40223b4 <alt_alarm_start+0x138>
  {
    if (alarm)
 40222b0:	e0bffb17 	ldw	r2,-20(fp)
 40222b4:	1005003a 	cmpeq	r2,r2,zero
 40222b8:	10003b1e 	bne	r2,zero,40223a8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 40222bc:	e0fffb17 	ldw	r3,-20(fp)
 40222c0:	e0bffd17 	ldw	r2,-12(fp)
 40222c4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 40222c8:	e0fffb17 	ldw	r3,-20(fp)
 40222cc:	e0bffe17 	ldw	r2,-8(fp)
 40222d0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40222d4:	0005303a 	rdctl	r2,status
 40222d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40222dc:	e0fff817 	ldw	r3,-32(fp)
 40222e0:	00bfff84 	movi	r2,-2
 40222e4:	1884703a 	and	r2,r3,r2
 40222e8:	1001703a 	wrctl	status,r2
  
  return context;
 40222ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 40222f0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40222f4:	008100b4 	movhi	r2,1026
 40222f8:	109a9f04 	addi	r2,r2,27260
 40222fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4022300:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4022304:	e0fffc17 	ldw	r3,-16(fp)
 4022308:	e0bff917 	ldw	r2,-28(fp)
 402230c:	1885883a 	add	r2,r3,r2
 4022310:	10c00044 	addi	r3,r2,1
 4022314:	e0bffb17 	ldw	r2,-20(fp)
 4022318:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402231c:	e0bffb17 	ldw	r2,-20(fp)
 4022320:	10c00217 	ldw	r3,8(r2)
 4022324:	e0bff917 	ldw	r2,-28(fp)
 4022328:	1880042e 	bgeu	r3,r2,402233c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 402232c:	e0fffb17 	ldw	r3,-20(fp)
 4022330:	00800044 	movi	r2,1
 4022334:	18800405 	stb	r2,16(r3)
 4022338:	00000206 	br	4022344 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 402233c:	e0bffb17 	ldw	r2,-20(fp)
 4022340:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4022344:	e0fffb17 	ldw	r3,-20(fp)
 4022348:	008100b4 	movhi	r2,1026
 402234c:	109a5904 	addi	r2,r2,26980
 4022350:	e0bff615 	stw	r2,-40(fp)
 4022354:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4022358:	e0fff717 	ldw	r3,-36(fp)
 402235c:	e0bff617 	ldw	r2,-40(fp)
 4022360:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4022364:	e0bff617 	ldw	r2,-40(fp)
 4022368:	10c00017 	ldw	r3,0(r2)
 402236c:	e0bff717 	ldw	r2,-36(fp)
 4022370:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4022374:	e0bff617 	ldw	r2,-40(fp)
 4022378:	10c00017 	ldw	r3,0(r2)
 402237c:	e0bff717 	ldw	r2,-36(fp)
 4022380:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4022384:	e0fff617 	ldw	r3,-40(fp)
 4022388:	e0bff717 	ldw	r2,-36(fp)
 402238c:	18800015 	stw	r2,0(r3)
 4022390:	e0bffa17 	ldw	r2,-24(fp)
 4022394:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022398:	e0bff517 	ldw	r2,-44(fp)
 402239c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40223a0:	e03fff15 	stw	zero,-4(fp)
 40223a4:	00000506 	br	40223bc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 40223a8:	00bffa84 	movi	r2,-22
 40223ac:	e0bfff15 	stw	r2,-4(fp)
 40223b0:	00000206 	br	40223bc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 40223b4:	00bfde84 	movi	r2,-134
 40223b8:	e0bfff15 	stw	r2,-4(fp)
 40223bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40223c0:	e037883a 	mov	sp,fp
 40223c4:	df000017 	ldw	fp,0(sp)
 40223c8:	dec00104 	addi	sp,sp,4
 40223cc:	f800283a 	ret

040223d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40223d0:	defffa04 	addi	sp,sp,-24
 40223d4:	dfc00515 	stw	ra,20(sp)
 40223d8:	df000415 	stw	fp,16(sp)
 40223dc:	df000404 	addi	fp,sp,16
 40223e0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40223e4:	00800244 	movi	r2,9
 40223e8:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40223ec:	e13ffc17 	ldw	r4,-16(fp)
 40223f0:	014003f4 	movhi	r5,15
 40223f4:	29509004 	addi	r5,r5,16960
 40223f8:	4008ff80 	call	4008ff8 <__mulsi3>
 40223fc:	100b883a 	mov	r5,r2
 4022400:	01017db4 	movhi	r4,1526
 4022404:	21384004 	addi	r4,r4,-7936
 4022408:	4008fe80 	call	4008fe8 <__udivsi3>
 402240c:	100b883a 	mov	r5,r2
 4022410:	01200034 	movhi	r4,32768
 4022414:	213fffc4 	addi	r4,r4,-1
 4022418:	4008fe80 	call	4008fe8 <__udivsi3>
 402241c:	100b883a 	mov	r5,r2
 4022420:	e13fff17 	ldw	r4,-4(fp)
 4022424:	4008fe80 	call	4008fe8 <__udivsi3>
 4022428:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402242c:	e0bffd17 	ldw	r2,-12(fp)
 4022430:	1005003a 	cmpeq	r2,r2,zero
 4022434:	10002a1e 	bne	r2,zero,40224e0 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 4022438:	e03ffe15 	stw	zero,-8(fp)
 402243c:	00001706 	br	402249c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4022440:	00a00034 	movhi	r2,32768
 4022444:	10bfffc4 	addi	r2,r2,-1
 4022448:	10bfffc4 	addi	r2,r2,-1
 402244c:	103ffe1e 	bne	r2,zero,4022448 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4022450:	e13ffc17 	ldw	r4,-16(fp)
 4022454:	014003f4 	movhi	r5,15
 4022458:	29509004 	addi	r5,r5,16960
 402245c:	4008ff80 	call	4008ff8 <__mulsi3>
 4022460:	100b883a 	mov	r5,r2
 4022464:	01017db4 	movhi	r4,1526
 4022468:	21384004 	addi	r4,r4,-7936
 402246c:	4008fe80 	call	4008fe8 <__udivsi3>
 4022470:	100b883a 	mov	r5,r2
 4022474:	01200034 	movhi	r4,32768
 4022478:	213fffc4 	addi	r4,r4,-1
 402247c:	4008fe80 	call	4008fe8 <__udivsi3>
 4022480:	1007883a 	mov	r3,r2
 4022484:	e0bfff17 	ldw	r2,-4(fp)
 4022488:	10c5c83a 	sub	r2,r2,r3
 402248c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4022490:	e0bffe17 	ldw	r2,-8(fp)
 4022494:	10800044 	addi	r2,r2,1
 4022498:	e0bffe15 	stw	r2,-8(fp)
 402249c:	e0fffe17 	ldw	r3,-8(fp)
 40224a0:	e0bffd17 	ldw	r2,-12(fp)
 40224a4:	18bfe616 	blt	r3,r2,4022440 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40224a8:	e13ffc17 	ldw	r4,-16(fp)
 40224ac:	014003f4 	movhi	r5,15
 40224b0:	29509004 	addi	r5,r5,16960
 40224b4:	4008ff80 	call	4008ff8 <__mulsi3>
 40224b8:	100b883a 	mov	r5,r2
 40224bc:	01017db4 	movhi	r4,1526
 40224c0:	21384004 	addi	r4,r4,-7936
 40224c4:	4008fe80 	call	4008fe8 <__udivsi3>
 40224c8:	1009883a 	mov	r4,r2
 40224cc:	e17fff17 	ldw	r5,-4(fp)
 40224d0:	4008ff80 	call	4008ff8 <__mulsi3>
 40224d4:	10bfffc4 	addi	r2,r2,-1
 40224d8:	103ffe1e 	bne	r2,zero,40224d4 <alt_busy_sleep+0x104>
 40224dc:	00000d06 	br	4022514 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40224e0:	e13ffc17 	ldw	r4,-16(fp)
 40224e4:	014003f4 	movhi	r5,15
 40224e8:	29509004 	addi	r5,r5,16960
 40224ec:	4008ff80 	call	4008ff8 <__mulsi3>
 40224f0:	100b883a 	mov	r5,r2
 40224f4:	01017db4 	movhi	r4,1526
 40224f8:	21384004 	addi	r4,r4,-7936
 40224fc:	4008fe80 	call	4008fe8 <__udivsi3>
 4022500:	1009883a 	mov	r4,r2
 4022504:	e17fff17 	ldw	r5,-4(fp)
 4022508:	4008ff80 	call	4008ff8 <__mulsi3>
 402250c:	10bfffc4 	addi	r2,r2,-1
 4022510:	00bffe16 	blt	zero,r2,402250c <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4022514:	0005883a 	mov	r2,zero
}
 4022518:	e037883a 	mov	sp,fp
 402251c:	dfc00117 	ldw	ra,4(sp)
 4022520:	df000017 	ldw	fp,0(sp)
 4022524:	dec00204 	addi	sp,sp,8
 4022528:	f800283a 	ret

0402252c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 402252c:	defff904 	addi	sp,sp,-28
 4022530:	dfc00615 	stw	ra,24(sp)
 4022534:	df000515 	stw	fp,20(sp)
 4022538:	df000504 	addi	fp,sp,20
 402253c:	e13ffd15 	stw	r4,-12(fp)
 4022540:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4022544:	e0bffd17 	ldw	r2,-12(fp)
 4022548:	1005003a 	cmpeq	r2,r2,zero
 402254c:	1000041e 	bne	r2,zero,4022560 <alt_dev_llist_insert+0x34>
 4022550:	e0bffd17 	ldw	r2,-12(fp)
 4022554:	10800217 	ldw	r2,8(r2)
 4022558:	1004c03a 	cmpne	r2,r2,zero
 402255c:	1000071e 	bne	r2,zero,402257c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4022560:	40225e00 	call	40225e0 <alt_get_errno>
 4022564:	1007883a 	mov	r3,r2
 4022568:	00800584 	movi	r2,22
 402256c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4022570:	00bffa84 	movi	r2,-22
 4022574:	e0bfff15 	stw	r2,-4(fp)
 4022578:	00001306 	br	40225c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402257c:	e0fffd17 	ldw	r3,-12(fp)
 4022580:	e0bffe17 	ldw	r2,-8(fp)
 4022584:	e0bffb15 	stw	r2,-20(fp)
 4022588:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402258c:	e0fffc17 	ldw	r3,-16(fp)
 4022590:	e0bffb17 	ldw	r2,-20(fp)
 4022594:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4022598:	e0bffb17 	ldw	r2,-20(fp)
 402259c:	10c00017 	ldw	r3,0(r2)
 40225a0:	e0bffc17 	ldw	r2,-16(fp)
 40225a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40225a8:	e0bffb17 	ldw	r2,-20(fp)
 40225ac:	10c00017 	ldw	r3,0(r2)
 40225b0:	e0bffc17 	ldw	r2,-16(fp)
 40225b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 40225b8:	e0fffb17 	ldw	r3,-20(fp)
 40225bc:	e0bffc17 	ldw	r2,-16(fp)
 40225c0:	18800015 	stw	r2,0(r3)

  return 0;  
 40225c4:	e03fff15 	stw	zero,-4(fp)
 40225c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40225cc:	e037883a 	mov	sp,fp
 40225d0:	dfc00117 	ldw	ra,4(sp)
 40225d4:	df000017 	ldw	fp,0(sp)
 40225d8:	dec00204 	addi	sp,sp,8
 40225dc:	f800283a 	ret

040225e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40225e0:	defffd04 	addi	sp,sp,-12
 40225e4:	dfc00215 	stw	ra,8(sp)
 40225e8:	df000115 	stw	fp,4(sp)
 40225ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40225f0:	008100b4 	movhi	r2,1026
 40225f4:	109a5504 	addi	r2,r2,26964
 40225f8:	10800017 	ldw	r2,0(r2)
 40225fc:	1005003a 	cmpeq	r2,r2,zero
 4022600:	1000061e 	bne	r2,zero,402261c <alt_get_errno+0x3c>
 4022604:	008100b4 	movhi	r2,1026
 4022608:	109a5504 	addi	r2,r2,26964
 402260c:	10800017 	ldw	r2,0(r2)
 4022610:	103ee83a 	callr	r2
 4022614:	e0bfff15 	stw	r2,-4(fp)
 4022618:	00000306 	br	4022628 <alt_get_errno+0x48>
 402261c:	008100b4 	movhi	r2,1026
 4022620:	109a9604 	addi	r2,r2,27224
 4022624:	e0bfff15 	stw	r2,-4(fp)
 4022628:	e0bfff17 	ldw	r2,-4(fp)
}
 402262c:	e037883a 	mov	sp,fp
 4022630:	dfc00117 	ldw	ra,4(sp)
 4022634:	df000017 	ldw	fp,0(sp)
 4022638:	dec00204 	addi	sp,sp,8
 402263c:	f800283a 	ret

04022640 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4022640:	defffd04 	addi	sp,sp,-12
 4022644:	dfc00215 	stw	ra,8(sp)
 4022648:	df000115 	stw	fp,4(sp)
 402264c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4022650:	00bfff04 	movi	r2,-4
 4022654:	00c100b4 	movhi	r3,1026
 4022658:	18cf0604 	addi	r3,r3,15384
 402265c:	1885883a 	add	r2,r3,r2
 4022660:	e0bfff15 	stw	r2,-4(fp)
 4022664:	00000606 	br	4022680 <_do_ctors+0x40>
        (*ctor) (); 
 4022668:	e0bfff17 	ldw	r2,-4(fp)
 402266c:	10800017 	ldw	r2,0(r2)
 4022670:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4022674:	e0bfff17 	ldw	r2,-4(fp)
 4022678:	10bfff04 	addi	r2,r2,-4
 402267c:	e0bfff15 	stw	r2,-4(fp)
 4022680:	e0ffff17 	ldw	r3,-4(fp)
 4022684:	008100b4 	movhi	r2,1026
 4022688:	108f0504 	addi	r2,r2,15380
 402268c:	18bff62e 	bgeu	r3,r2,4022668 <_do_ctors+0x28>
        (*ctor) (); 
}
 4022690:	e037883a 	mov	sp,fp
 4022694:	dfc00117 	ldw	ra,4(sp)
 4022698:	df000017 	ldw	fp,0(sp)
 402269c:	dec00204 	addi	sp,sp,8
 40226a0:	f800283a 	ret

040226a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40226a4:	defffd04 	addi	sp,sp,-12
 40226a8:	dfc00215 	stw	ra,8(sp)
 40226ac:	df000115 	stw	fp,4(sp)
 40226b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40226b4:	00bfff04 	movi	r2,-4
 40226b8:	00c100b4 	movhi	r3,1026
 40226bc:	18cf0604 	addi	r3,r3,15384
 40226c0:	1885883a 	add	r2,r3,r2
 40226c4:	e0bfff15 	stw	r2,-4(fp)
 40226c8:	00000606 	br	40226e4 <_do_dtors+0x40>
        (*dtor) (); 
 40226cc:	e0bfff17 	ldw	r2,-4(fp)
 40226d0:	10800017 	ldw	r2,0(r2)
 40226d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40226d8:	e0bfff17 	ldw	r2,-4(fp)
 40226dc:	10bfff04 	addi	r2,r2,-4
 40226e0:	e0bfff15 	stw	r2,-4(fp)
 40226e4:	e0ffff17 	ldw	r3,-4(fp)
 40226e8:	008100b4 	movhi	r2,1026
 40226ec:	108f0604 	addi	r2,r2,15384
 40226f0:	18bff62e 	bgeu	r3,r2,40226cc <_do_dtors+0x28>
        (*dtor) (); 
}
 40226f4:	e037883a 	mov	sp,fp
 40226f8:	dfc00117 	ldw	ra,4(sp)
 40226fc:	df000017 	ldw	fp,0(sp)
 4022700:	dec00204 	addi	sp,sp,8
 4022704:	f800283a 	ret

04022708 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4022708:	defff904 	addi	sp,sp,-28
 402270c:	dfc00615 	stw	ra,24(sp)
 4022710:	df000515 	stw	fp,20(sp)
 4022714:	df000504 	addi	fp,sp,20
 4022718:	e13ffd15 	stw	r4,-12(fp)
 402271c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4022720:	e0bffe17 	ldw	r2,-8(fp)
 4022724:	10800017 	ldw	r2,0(r2)
 4022728:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 402272c:	e13ffd17 	ldw	r4,-12(fp)
 4022730:	400a3740 	call	400a374 <strlen>
 4022734:	10800044 	addi	r2,r2,1
 4022738:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402273c:	00000d06 	br	4022774 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4022740:	e0bffc17 	ldw	r2,-16(fp)
 4022744:	11000217 	ldw	r4,8(r2)
 4022748:	e1bffb17 	ldw	r6,-20(fp)
 402274c:	e17ffd17 	ldw	r5,-12(fp)
 4022750:	402384c0 	call	402384c <memcmp>
 4022754:	1004c03a 	cmpne	r2,r2,zero
 4022758:	1000031e 	bne	r2,zero,4022768 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402275c:	e0bffc17 	ldw	r2,-16(fp)
 4022760:	e0bfff15 	stw	r2,-4(fp)
 4022764:	00000706 	br	4022784 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4022768:	e0bffc17 	ldw	r2,-16(fp)
 402276c:	10800017 	ldw	r2,0(r2)
 4022770:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4022774:	e0fffe17 	ldw	r3,-8(fp)
 4022778:	e0bffc17 	ldw	r2,-16(fp)
 402277c:	10fff01e 	bne	r2,r3,4022740 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4022780:	e03fff15 	stw	zero,-4(fp)
 4022784:	e0bfff17 	ldw	r2,-4(fp)
}
 4022788:	e037883a 	mov	sp,fp
 402278c:	dfc00117 	ldw	ra,4(sp)
 4022790:	df000017 	ldw	fp,0(sp)
 4022794:	dec00204 	addi	sp,sp,8
 4022798:	f800283a 	ret

0402279c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402279c:	defff904 	addi	sp,sp,-28
 40227a0:	dfc00615 	stw	ra,24(sp)
 40227a4:	df000515 	stw	fp,20(sp)
 40227a8:	df000504 	addi	fp,sp,20
 40227ac:	e13ffc15 	stw	r4,-16(fp)
 40227b0:	e17ffd15 	stw	r5,-12(fp)
 40227b4:	e1bffe15 	stw	r6,-8(fp)
 40227b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40227bc:	e0800217 	ldw	r2,8(fp)
 40227c0:	d8800015 	stw	r2,0(sp)
 40227c4:	e13ffc17 	ldw	r4,-16(fp)
 40227c8:	e17ffd17 	ldw	r5,-12(fp)
 40227cc:	e1bffe17 	ldw	r6,-8(fp)
 40227d0:	e1ffff17 	ldw	r7,-4(fp)
 40227d4:	40229700 	call	4022970 <alt_iic_isr_register>
}  
 40227d8:	e037883a 	mov	sp,fp
 40227dc:	dfc00117 	ldw	ra,4(sp)
 40227e0:	df000017 	ldw	fp,0(sp)
 40227e4:	dec00204 	addi	sp,sp,8
 40227e8:	f800283a 	ret

040227ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40227ec:	defff904 	addi	sp,sp,-28
 40227f0:	df000615 	stw	fp,24(sp)
 40227f4:	df000604 	addi	fp,sp,24
 40227f8:	e13ffe15 	stw	r4,-8(fp)
 40227fc:	e17fff15 	stw	r5,-4(fp)
 4022800:	e0bfff17 	ldw	r2,-4(fp)
 4022804:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022808:	0005303a 	rdctl	r2,status
 402280c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022810:	e0fffb17 	ldw	r3,-20(fp)
 4022814:	00bfff84 	movi	r2,-2
 4022818:	1884703a 	and	r2,r3,r2
 402281c:	1001703a 	wrctl	status,r2
  
  return context;
 4022820:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4022824:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4022828:	e0fffc17 	ldw	r3,-16(fp)
 402282c:	00800044 	movi	r2,1
 4022830:	10c4983a 	sll	r2,r2,r3
 4022834:	1007883a 	mov	r3,r2
 4022838:	008100b4 	movhi	r2,1026
 402283c:	109ab804 	addi	r2,r2,27360
 4022840:	10800017 	ldw	r2,0(r2)
 4022844:	1886b03a 	or	r3,r3,r2
 4022848:	008100b4 	movhi	r2,1026
 402284c:	109ab804 	addi	r2,r2,27360
 4022850:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4022854:	008100b4 	movhi	r2,1026
 4022858:	109ab804 	addi	r2,r2,27360
 402285c:	10800017 	ldw	r2,0(r2)
 4022860:	100170fa 	wrctl	ienable,r2
 4022864:	e0bffd17 	ldw	r2,-12(fp)
 4022868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402286c:	e0bffa17 	ldw	r2,-24(fp)
 4022870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4022874:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4022878:	e037883a 	mov	sp,fp
 402287c:	df000017 	ldw	fp,0(sp)
 4022880:	dec00104 	addi	sp,sp,4
 4022884:	f800283a 	ret

04022888 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4022888:	defff904 	addi	sp,sp,-28
 402288c:	df000615 	stw	fp,24(sp)
 4022890:	df000604 	addi	fp,sp,24
 4022894:	e13ffe15 	stw	r4,-8(fp)
 4022898:	e17fff15 	stw	r5,-4(fp)
 402289c:	e0bfff17 	ldw	r2,-4(fp)
 40228a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40228a4:	0005303a 	rdctl	r2,status
 40228a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40228ac:	e0fffb17 	ldw	r3,-20(fp)
 40228b0:	00bfff84 	movi	r2,-2
 40228b4:	1884703a 	and	r2,r3,r2
 40228b8:	1001703a 	wrctl	status,r2
  
  return context;
 40228bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40228c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 40228c4:	e0fffc17 	ldw	r3,-16(fp)
 40228c8:	00800044 	movi	r2,1
 40228cc:	10c4983a 	sll	r2,r2,r3
 40228d0:	0084303a 	nor	r2,zero,r2
 40228d4:	1007883a 	mov	r3,r2
 40228d8:	008100b4 	movhi	r2,1026
 40228dc:	109ab804 	addi	r2,r2,27360
 40228e0:	10800017 	ldw	r2,0(r2)
 40228e4:	1886703a 	and	r3,r3,r2
 40228e8:	008100b4 	movhi	r2,1026
 40228ec:	109ab804 	addi	r2,r2,27360
 40228f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40228f4:	008100b4 	movhi	r2,1026
 40228f8:	109ab804 	addi	r2,r2,27360
 40228fc:	10800017 	ldw	r2,0(r2)
 4022900:	100170fa 	wrctl	ienable,r2
 4022904:	e0bffd17 	ldw	r2,-12(fp)
 4022908:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402290c:	e0bffa17 	ldw	r2,-24(fp)
 4022910:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4022914:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4022918:	e037883a 	mov	sp,fp
 402291c:	df000017 	ldw	fp,0(sp)
 4022920:	dec00104 	addi	sp,sp,4
 4022924:	f800283a 	ret

04022928 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4022928:	defffc04 	addi	sp,sp,-16
 402292c:	df000315 	stw	fp,12(sp)
 4022930:	df000304 	addi	fp,sp,12
 4022934:	e13ffe15 	stw	r4,-8(fp)
 4022938:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402293c:	000530fa 	rdctl	r2,ienable
 4022940:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4022944:	e0ffff17 	ldw	r3,-4(fp)
 4022948:	00800044 	movi	r2,1
 402294c:	10c4983a 	sll	r2,r2,r3
 4022950:	1007883a 	mov	r3,r2
 4022954:	e0bffd17 	ldw	r2,-12(fp)
 4022958:	1884703a 	and	r2,r3,r2
 402295c:	1004c03a 	cmpne	r2,r2,zero
}
 4022960:	e037883a 	mov	sp,fp
 4022964:	df000017 	ldw	fp,0(sp)
 4022968:	dec00104 	addi	sp,sp,4
 402296c:	f800283a 	ret

04022970 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4022970:	defff404 	addi	sp,sp,-48
 4022974:	dfc00b15 	stw	ra,44(sp)
 4022978:	df000a15 	stw	fp,40(sp)
 402297c:	df000a04 	addi	fp,sp,40
 4022980:	e13ffb15 	stw	r4,-20(fp)
 4022984:	e17ffc15 	stw	r5,-16(fp)
 4022988:	e1bffd15 	stw	r6,-12(fp)
 402298c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 4022990:	00bffa84 	movi	r2,-22
 4022994:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4022998:	e0bffc17 	ldw	r2,-16(fp)
 402299c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40229a0:	e0bff917 	ldw	r2,-28(fp)
 40229a4:	10800808 	cmpgei	r2,r2,32
 40229a8:	1000291e 	bne	r2,zero,4022a50 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40229ac:	0005303a 	rdctl	r2,status
 40229b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40229b4:	e0fff717 	ldw	r3,-36(fp)
 40229b8:	00bfff84 	movi	r2,-2
 40229bc:	1884703a 	and	r2,r3,r2
 40229c0:	1001703a 	wrctl	status,r2
  
  return context;
 40229c4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40229c8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 40229cc:	e0bff917 	ldw	r2,-28(fp)
 40229d0:	00c100f4 	movhi	r3,1027
 40229d4:	18d77504 	addi	r3,r3,24020
 40229d8:	100490fa 	slli	r2,r2,3
 40229dc:	10c7883a 	add	r3,r2,r3
 40229e0:	e0bffd17 	ldw	r2,-12(fp)
 40229e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 40229e8:	e0bff917 	ldw	r2,-28(fp)
 40229ec:	00c100f4 	movhi	r3,1027
 40229f0:	18d77504 	addi	r3,r3,24020
 40229f4:	100490fa 	slli	r2,r2,3
 40229f8:	10c5883a 	add	r2,r2,r3
 40229fc:	10c00104 	addi	r3,r2,4
 4022a00:	e0bffe17 	ldw	r2,-8(fp)
 4022a04:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4022a08:	e0bffd17 	ldw	r2,-12(fp)
 4022a0c:	1005003a 	cmpeq	r2,r2,zero
 4022a10:	1000051e 	bne	r2,zero,4022a28 <alt_iic_isr_register+0xb8>
 4022a14:	e17ff917 	ldw	r5,-28(fp)
 4022a18:	e13ffb17 	ldw	r4,-20(fp)
 4022a1c:	40227ec0 	call	40227ec <alt_ic_irq_enable>
 4022a20:	e0bfff15 	stw	r2,-4(fp)
 4022a24:	00000406 	br	4022a38 <alt_iic_isr_register+0xc8>
 4022a28:	e17ff917 	ldw	r5,-28(fp)
 4022a2c:	e13ffb17 	ldw	r4,-20(fp)
 4022a30:	40228880 	call	4022888 <alt_ic_irq_disable>
 4022a34:	e0bfff15 	stw	r2,-4(fp)
 4022a38:	e0bfff17 	ldw	r2,-4(fp)
 4022a3c:	e0bffa15 	stw	r2,-24(fp)
 4022a40:	e0bff817 	ldw	r2,-32(fp)
 4022a44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022a48:	e0bff617 	ldw	r2,-40(fp)
 4022a4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4022a50:	e0bffa17 	ldw	r2,-24(fp)
}
 4022a54:	e037883a 	mov	sp,fp
 4022a58:	dfc00117 	ldw	ra,4(sp)
 4022a5c:	df000017 	ldw	fp,0(sp)
 4022a60:	dec00204 	addi	sp,sp,8
 4022a64:	f800283a 	ret

04022a68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4022a68:	defff804 	addi	sp,sp,-32
 4022a6c:	dfc00715 	stw	ra,28(sp)
 4022a70:	df000615 	stw	fp,24(sp)
 4022a74:	dc000515 	stw	r16,20(sp)
 4022a78:	df000504 	addi	fp,sp,20
 4022a7c:	e13ffc15 	stw	r4,-16(fp)
 4022a80:	e17ffd15 	stw	r5,-12(fp)
 4022a84:	e1bffe15 	stw	r6,-8(fp)
 4022a88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4022a8c:	e13ffd17 	ldw	r4,-12(fp)
 4022a90:	e17ffe17 	ldw	r5,-8(fp)
 4022a94:	e1bfff17 	ldw	r6,-4(fp)
 4022a98:	4022cb00 	call	4022cb0 <open>
 4022a9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4022aa0:	e0bffb17 	ldw	r2,-20(fp)
 4022aa4:	1004803a 	cmplt	r2,r2,zero
 4022aa8:	10001f1e 	bne	r2,zero,4022b28 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4022aac:	e13ffb17 	ldw	r4,-20(fp)
 4022ab0:	040100b4 	movhi	r16,1026
 4022ab4:	84159b04 	addi	r16,r16,22124
 4022ab8:	01400304 	movi	r5,12
 4022abc:	4008ff80 	call	4008ff8 <__mulsi3>
 4022ac0:	1405883a 	add	r2,r2,r16
 4022ac4:	10c00017 	ldw	r3,0(r2)
 4022ac8:	e0bffc17 	ldw	r2,-16(fp)
 4022acc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4022ad0:	e13ffb17 	ldw	r4,-20(fp)
 4022ad4:	040100b4 	movhi	r16,1026
 4022ad8:	84159b04 	addi	r16,r16,22124
 4022adc:	01400304 	movi	r5,12
 4022ae0:	4008ff80 	call	4008ff8 <__mulsi3>
 4022ae4:	1405883a 	add	r2,r2,r16
 4022ae8:	10800104 	addi	r2,r2,4
 4022aec:	10c00017 	ldw	r3,0(r2)
 4022af0:	e0bffc17 	ldw	r2,-16(fp)
 4022af4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4022af8:	e13ffb17 	ldw	r4,-20(fp)
 4022afc:	040100b4 	movhi	r16,1026
 4022b00:	84159b04 	addi	r16,r16,22124
 4022b04:	01400304 	movi	r5,12
 4022b08:	4008ff80 	call	4008ff8 <__mulsi3>
 4022b0c:	1405883a 	add	r2,r2,r16
 4022b10:	10800204 	addi	r2,r2,8
 4022b14:	10c00017 	ldw	r3,0(r2)
 4022b18:	e0bffc17 	ldw	r2,-16(fp)
 4022b1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4022b20:	e13ffb17 	ldw	r4,-20(fp)
 4022b24:	401774c0 	call	401774c <alt_release_fd>
  }
} 
 4022b28:	e037883a 	mov	sp,fp
 4022b2c:	dfc00217 	ldw	ra,8(sp)
 4022b30:	df000117 	ldw	fp,4(sp)
 4022b34:	dc000017 	ldw	r16,0(sp)
 4022b38:	dec00304 	addi	sp,sp,12
 4022b3c:	f800283a 	ret

04022b40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4022b40:	defffb04 	addi	sp,sp,-20
 4022b44:	dfc00415 	stw	ra,16(sp)
 4022b48:	df000315 	stw	fp,12(sp)
 4022b4c:	df000304 	addi	fp,sp,12
 4022b50:	e13ffd15 	stw	r4,-12(fp)
 4022b54:	e17ffe15 	stw	r5,-8(fp)
 4022b58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4022b5c:	010100b4 	movhi	r4,1026
 4022b60:	21159e04 	addi	r4,r4,22136
 4022b64:	e17ffd17 	ldw	r5,-12(fp)
 4022b68:	01800044 	movi	r6,1
 4022b6c:	01c07fc4 	movi	r7,511
 4022b70:	4022a680 	call	4022a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4022b74:	010100b4 	movhi	r4,1026
 4022b78:	21159b04 	addi	r4,r4,22124
 4022b7c:	e17ffe17 	ldw	r5,-8(fp)
 4022b80:	000d883a 	mov	r6,zero
 4022b84:	01c07fc4 	movi	r7,511
 4022b88:	4022a680 	call	4022a68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4022b8c:	010100b4 	movhi	r4,1026
 4022b90:	2115a104 	addi	r4,r4,22148
 4022b94:	e17fff17 	ldw	r5,-4(fp)
 4022b98:	01800044 	movi	r6,1
 4022b9c:	01c07fc4 	movi	r7,511
 4022ba0:	4022a680 	call	4022a68 <alt_open_fd>
}  
 4022ba4:	e037883a 	mov	sp,fp
 4022ba8:	dfc00117 	ldw	ra,4(sp)
 4022bac:	df000017 	ldw	fp,0(sp)
 4022bb0:	dec00204 	addi	sp,sp,8
 4022bb4:	f800283a 	ret

04022bb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4022bb8:	defffa04 	addi	sp,sp,-24
 4022bbc:	dfc00515 	stw	ra,20(sp)
 4022bc0:	df000415 	stw	fp,16(sp)
 4022bc4:	dc000315 	stw	r16,12(sp)
 4022bc8:	df000304 	addi	fp,sp,12
 4022bcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4022bd0:	e0bffe17 	ldw	r2,-8(fp)
 4022bd4:	10800217 	ldw	r2,8(r2)
 4022bd8:	10d00034 	orhi	r3,r2,16384
 4022bdc:	e0bffe17 	ldw	r2,-8(fp)
 4022be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4022be4:	e03ffd15 	stw	zero,-12(fp)
 4022be8:	00002306 	br	4022c78 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4022bec:	e13ffd17 	ldw	r4,-12(fp)
 4022bf0:	040100b4 	movhi	r16,1026
 4022bf4:	84159b04 	addi	r16,r16,22124
 4022bf8:	01400304 	movi	r5,12
 4022bfc:	4008ff80 	call	4008ff8 <__mulsi3>
 4022c00:	1405883a 	add	r2,r2,r16
 4022c04:	10c00017 	ldw	r3,0(r2)
 4022c08:	e0bffe17 	ldw	r2,-8(fp)
 4022c0c:	10800017 	ldw	r2,0(r2)
 4022c10:	1880161e 	bne	r3,r2,4022c6c <alt_file_locked+0xb4>
 4022c14:	e13ffd17 	ldw	r4,-12(fp)
 4022c18:	040100b4 	movhi	r16,1026
 4022c1c:	84159b04 	addi	r16,r16,22124
 4022c20:	01400304 	movi	r5,12
 4022c24:	4008ff80 	call	4008ff8 <__mulsi3>
 4022c28:	1405883a 	add	r2,r2,r16
 4022c2c:	10800204 	addi	r2,r2,8
 4022c30:	10800017 	ldw	r2,0(r2)
 4022c34:	1004403a 	cmpge	r2,r2,zero
 4022c38:	10000c1e 	bne	r2,zero,4022c6c <alt_file_locked+0xb4>
 4022c3c:	e13ffd17 	ldw	r4,-12(fp)
 4022c40:	01400304 	movi	r5,12
 4022c44:	4008ff80 	call	4008ff8 <__mulsi3>
 4022c48:	1007883a 	mov	r3,r2
 4022c4c:	008100b4 	movhi	r2,1026
 4022c50:	10959b04 	addi	r2,r2,22124
 4022c54:	1887883a 	add	r3,r3,r2
 4022c58:	e0bffe17 	ldw	r2,-8(fp)
 4022c5c:	18800326 	beq	r3,r2,4022c6c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4022c60:	00bffcc4 	movi	r2,-13
 4022c64:	e0bfff15 	stw	r2,-4(fp)
 4022c68:	00000a06 	br	4022c94 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4022c6c:	e0bffd17 	ldw	r2,-12(fp)
 4022c70:	10800044 	addi	r2,r2,1
 4022c74:	e0bffd15 	stw	r2,-12(fp)
 4022c78:	008100b4 	movhi	r2,1026
 4022c7c:	109a5404 	addi	r2,r2,26960
 4022c80:	10800017 	ldw	r2,0(r2)
 4022c84:	1007883a 	mov	r3,r2
 4022c88:	e0bffd17 	ldw	r2,-12(fp)
 4022c8c:	18bfd72e 	bgeu	r3,r2,4022bec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4022c90:	e03fff15 	stw	zero,-4(fp)
 4022c94:	e0bfff17 	ldw	r2,-4(fp)
}
 4022c98:	e037883a 	mov	sp,fp
 4022c9c:	dfc00217 	ldw	ra,8(sp)
 4022ca0:	df000117 	ldw	fp,4(sp)
 4022ca4:	dc000017 	ldw	r16,0(sp)
 4022ca8:	dec00304 	addi	sp,sp,12
 4022cac:	f800283a 	ret

04022cb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4022cb0:	defff404 	addi	sp,sp,-48
 4022cb4:	dfc00b15 	stw	ra,44(sp)
 4022cb8:	df000a15 	stw	fp,40(sp)
 4022cbc:	df000a04 	addi	fp,sp,40
 4022cc0:	e13ffb15 	stw	r4,-20(fp)
 4022cc4:	e17ffc15 	stw	r5,-16(fp)
 4022cc8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4022ccc:	00bfffc4 	movi	r2,-1
 4022cd0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4022cd4:	00bffb44 	movi	r2,-19
 4022cd8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4022cdc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4022ce0:	e13ffb17 	ldw	r4,-20(fp)
 4022ce4:	014100b4 	movhi	r5,1026
 4022ce8:	295a5204 	addi	r5,r5,26952
 4022cec:	40227080 	call	4022708 <alt_find_dev>
 4022cf0:	e0bffa15 	stw	r2,-24(fp)
 4022cf4:	e0bffa17 	ldw	r2,-24(fp)
 4022cf8:	1004c03a 	cmpne	r2,r2,zero
 4022cfc:	1000051e 	bne	r2,zero,4022d14 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4022d00:	e13ffb17 	ldw	r4,-20(fp)
 4022d04:	40235dc0 	call	40235dc <alt_find_file>
 4022d08:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4022d0c:	00800044 	movi	r2,1
 4022d10:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4022d14:	e0bffa17 	ldw	r2,-24(fp)
 4022d18:	1005003a 	cmpeq	r2,r2,zero
 4022d1c:	1000311e 	bne	r2,zero,4022de4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4022d20:	e13ffa17 	ldw	r4,-24(fp)
 4022d24:	40236fc0 	call	40236fc <alt_get_fd>
 4022d28:	e0bff815 	stw	r2,-32(fp)
 4022d2c:	e0bff817 	ldw	r2,-32(fp)
 4022d30:	1004403a 	cmpge	r2,r2,zero
 4022d34:	1000031e 	bne	r2,zero,4022d44 <open+0x94>
    {
      status = index;
 4022d38:	e0bff817 	ldw	r2,-32(fp)
 4022d3c:	e0bff715 	stw	r2,-36(fp)
 4022d40:	00002a06 	br	4022dec <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4022d44:	e13ff817 	ldw	r4,-32(fp)
 4022d48:	01400304 	movi	r5,12
 4022d4c:	4008ff80 	call	4008ff8 <__mulsi3>
 4022d50:	1007883a 	mov	r3,r2
 4022d54:	008100b4 	movhi	r2,1026
 4022d58:	10959b04 	addi	r2,r2,22124
 4022d5c:	1885883a 	add	r2,r3,r2
 4022d60:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4022d64:	e0fffc17 	ldw	r3,-16(fp)
 4022d68:	00900034 	movhi	r2,16384
 4022d6c:	10bfffc4 	addi	r2,r2,-1
 4022d70:	1886703a 	and	r3,r3,r2
 4022d74:	e0bff917 	ldw	r2,-28(fp)
 4022d78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4022d7c:	e0bff617 	ldw	r2,-40(fp)
 4022d80:	1004c03a 	cmpne	r2,r2,zero
 4022d84:	1000061e 	bne	r2,zero,4022da0 <open+0xf0>
 4022d88:	e13ff917 	ldw	r4,-28(fp)
 4022d8c:	4022bb80 	call	4022bb8 <alt_file_locked>
 4022d90:	e0bff715 	stw	r2,-36(fp)
 4022d94:	e0bff717 	ldw	r2,-36(fp)
 4022d98:	1004803a 	cmplt	r2,r2,zero
 4022d9c:	1000131e 	bne	r2,zero,4022dec <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4022da0:	e0bffa17 	ldw	r2,-24(fp)
 4022da4:	10800317 	ldw	r2,12(r2)
 4022da8:	1005003a 	cmpeq	r2,r2,zero
 4022dac:	1000091e 	bne	r2,zero,4022dd4 <open+0x124>
 4022db0:	e0bffa17 	ldw	r2,-24(fp)
 4022db4:	10800317 	ldw	r2,12(r2)
 4022db8:	e13ff917 	ldw	r4,-28(fp)
 4022dbc:	e17ffb17 	ldw	r5,-20(fp)
 4022dc0:	e1bffc17 	ldw	r6,-16(fp)
 4022dc4:	e1fffd17 	ldw	r7,-12(fp)
 4022dc8:	103ee83a 	callr	r2
 4022dcc:	e0bfff15 	stw	r2,-4(fp)
 4022dd0:	00000106 	br	4022dd8 <open+0x128>
 4022dd4:	e03fff15 	stw	zero,-4(fp)
 4022dd8:	e0bfff17 	ldw	r2,-4(fp)
 4022ddc:	e0bff715 	stw	r2,-36(fp)
 4022de0:	00000206 	br	4022dec <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4022de4:	00bffb44 	movi	r2,-19
 4022de8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4022dec:	e0bff717 	ldw	r2,-36(fp)
 4022df0:	1004403a 	cmpge	r2,r2,zero
 4022df4:	1000091e 	bne	r2,zero,4022e1c <open+0x16c>
  {
    alt_release_fd (index);  
 4022df8:	e13ff817 	ldw	r4,-32(fp)
 4022dfc:	401774c0 	call	401774c <alt_release_fd>
    ALT_ERRNO = -status;
 4022e00:	4022e3c0 	call	4022e3c <alt_get_errno>
 4022e04:	e0fff717 	ldw	r3,-36(fp)
 4022e08:	00c7c83a 	sub	r3,zero,r3
 4022e0c:	10c00015 	stw	r3,0(r2)
    return -1;
 4022e10:	00bfffc4 	movi	r2,-1
 4022e14:	e0bffe15 	stw	r2,-8(fp)
 4022e18:	00000206 	br	4022e24 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 4022e1c:	e0bff817 	ldw	r2,-32(fp)
 4022e20:	e0bffe15 	stw	r2,-8(fp)
 4022e24:	e0bffe17 	ldw	r2,-8(fp)
}
 4022e28:	e037883a 	mov	sp,fp
 4022e2c:	dfc00117 	ldw	ra,4(sp)
 4022e30:	df000017 	ldw	fp,0(sp)
 4022e34:	dec00204 	addi	sp,sp,8
 4022e38:	f800283a 	ret

04022e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022e3c:	defffd04 	addi	sp,sp,-12
 4022e40:	dfc00215 	stw	ra,8(sp)
 4022e44:	df000115 	stw	fp,4(sp)
 4022e48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4022e4c:	008100b4 	movhi	r2,1026
 4022e50:	109a5504 	addi	r2,r2,26964
 4022e54:	10800017 	ldw	r2,0(r2)
 4022e58:	1005003a 	cmpeq	r2,r2,zero
 4022e5c:	1000061e 	bne	r2,zero,4022e78 <alt_get_errno+0x3c>
 4022e60:	008100b4 	movhi	r2,1026
 4022e64:	109a5504 	addi	r2,r2,26964
 4022e68:	10800017 	ldw	r2,0(r2)
 4022e6c:	103ee83a 	callr	r2
 4022e70:	e0bfff15 	stw	r2,-4(fp)
 4022e74:	00000306 	br	4022e84 <alt_get_errno+0x48>
 4022e78:	008100b4 	movhi	r2,1026
 4022e7c:	109a9604 	addi	r2,r2,27224
 4022e80:	e0bfff15 	stw	r2,-4(fp)
 4022e84:	e0bfff17 	ldw	r2,-4(fp)
}
 4022e88:	e037883a 	mov	sp,fp
 4022e8c:	dfc00117 	ldw	ra,4(sp)
 4022e90:	df000017 	ldw	fp,0(sp)
 4022e94:	dec00204 	addi	sp,sp,8
 4022e98:	f800283a 	ret

04022e9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4022e9c:	deffff04 	addi	sp,sp,-4
 4022ea0:	df000015 	stw	fp,0(sp)
 4022ea4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4022ea8:	000170fa 	wrctl	ienable,zero
}
 4022eac:	e037883a 	mov	sp,fp
 4022eb0:	df000017 	ldw	fp,0(sp)
 4022eb4:	dec00104 	addi	sp,sp,4
 4022eb8:	f800283a 	ret

04022ebc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4022ebc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4022ec0:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 4022ec4:	d1206b17 	ldw	r4,-32340(gp)

      stw ra,  0(sp)
 4022ec8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4022ecc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4022ed0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 4022ed4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 4022ed8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4022edc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4022ee0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4022ee4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 4022ee8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 4022eec:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4022ef0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 4022ef4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4022ef8:	40232dc0 	call	40232dc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 4022efc:	d1206617 	ldw	r4,-32360(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4022f00:	d1605e07 	ldb	r5,-32392(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 4022f04:	d1206b15 	stw	r4,-32340(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 4022f08:	d1605e45 	stb	r5,-32391(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 4022f0c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 4022f10:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 4022f14:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 4022f18:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 4022f1c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 4022f20:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 4022f24:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 4022f28:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 4022f2c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 4022f30:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 4022f34:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 4022f38:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 4022f3c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 4022f40:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 4022f44:	f800283a 	ret

04022f48 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 4022f48:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 4022f4c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 4022f50:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 4022f54:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4022f58:	40232dc0 	call	40232dc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 4022f5c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 4022f60:	d4a05c45 	stb	r18,-32399(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 4022f64:	003fe506 	br	4022efc <OSCtxSw+0x40>

04022f68 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 4022f68:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 4022f6c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4022f70:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4022f74:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 4022f78:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 4022f7c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 4022f80:	dec00204 	addi	sp,sp,8

      callr r2
 4022f84:	103ee83a 	callr	r2

      nop
 4022f88:	0001883a 	nop

04022f8c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4022f8c:	defff704 	addi	sp,sp,-36
 4022f90:	dfc00815 	stw	ra,32(sp)
 4022f94:	df000715 	stw	fp,28(sp)
 4022f98:	df000704 	addi	fp,sp,28
 4022f9c:	e13ffc15 	stw	r4,-16(fp)
 4022fa0:	e17ffd15 	stw	r5,-12(fp)
 4022fa4:	e1bffe15 	stw	r6,-8(fp)
 4022fa8:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4022fac:	e0bffe17 	ldw	r2,-8(fp)
 4022fb0:	1007883a 	mov	r3,r2
 4022fb4:	00bfff04 	movi	r2,-4
 4022fb8:	1884703a 	and	r2,r3,r2
 4022fbc:	10bf0004 	addi	r2,r2,-1024
 4022fc0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 4022fc4:	e0bff917 	ldw	r2,-28(fp)
 4022fc8:	10000015 	stw	zero,0(r2)
 4022fcc:	e0bff917 	ldw	r2,-28(fp)
 4022fd0:	10c0bb04 	addi	r3,r2,748
 4022fd4:	e0bff917 	ldw	r2,-28(fp)
 4022fd8:	10c00115 	stw	r3,4(r2)
 4022fdc:	e0bff917 	ldw	r2,-28(fp)
 4022fe0:	1080bb04 	addi	r2,r2,748
 4022fe4:	10c01704 	addi	r3,r2,92
 4022fe8:	e0bff917 	ldw	r2,-28(fp)
 4022fec:	10c00215 	stw	r3,8(r2)
 4022ff0:	e0bff917 	ldw	r2,-28(fp)
 4022ff4:	1080bb04 	addi	r2,r2,748
 4022ff8:	10c02e04 	addi	r3,r2,184
 4022ffc:	e0bff917 	ldw	r2,-28(fp)
 4023000:	10c00315 	stw	r3,12(r2)
 4023004:	e0bff917 	ldw	r2,-28(fp)
 4023008:	10000415 	stw	zero,16(r2)
 402300c:	e0bff917 	ldw	r2,-28(fp)
 4023010:	10800504 	addi	r2,r2,20
 4023014:	1009883a 	mov	r4,r2
 4023018:	01800644 	movi	r6,25
 402301c:	000b883a 	mov	r5,zero
 4023020:	4010b980 	call	4010b98 <memset>
 4023024:	e0bff917 	ldw	r2,-28(fp)
 4023028:	10000c15 	stw	zero,48(r2)
 402302c:	e0fff917 	ldw	r3,-28(fp)
 4023030:	008100b4 	movhi	r2,1026
 4023034:	10930304 	addi	r2,r2,19468
 4023038:	18800d15 	stw	r2,52(r3)
 402303c:	e0bff917 	ldw	r2,-28(fp)
 4023040:	10000e15 	stw	zero,56(r2)
 4023044:	e0bff917 	ldw	r2,-28(fp)
 4023048:	10000f15 	stw	zero,60(r2)
 402304c:	e0bff917 	ldw	r2,-28(fp)
 4023050:	10001015 	stw	zero,64(r2)
 4023054:	e0bff917 	ldw	r2,-28(fp)
 4023058:	10001115 	stw	zero,68(r2)
 402305c:	e0bff917 	ldw	r2,-28(fp)
 4023060:	10001215 	stw	zero,72(r2)
 4023064:	e0bff917 	ldw	r2,-28(fp)
 4023068:	10001315 	stw	zero,76(r2)
 402306c:	e0bff917 	ldw	r2,-28(fp)
 4023070:	10001415 	stw	zero,80(r2)
 4023074:	e0bff917 	ldw	r2,-28(fp)
 4023078:	10001515 	stw	zero,84(r2)
 402307c:	e0bff917 	ldw	r2,-28(fp)
 4023080:	10001615 	stw	zero,88(r2)
 4023084:	e0bff917 	ldw	r2,-28(fp)
 4023088:	10001715 	stw	zero,92(r2)
 402308c:	e0bff917 	ldw	r2,-28(fp)
 4023090:	10001805 	stb	zero,96(r2)
 4023094:	e0bff917 	ldw	r2,-28(fp)
 4023098:	10801f04 	addi	r2,r2,124
 402309c:	10000015 	stw	zero,0(r2)
 40230a0:	10000115 	stw	zero,4(r2)
 40230a4:	10000215 	stw	zero,8(r2)
 40230a8:	10000315 	stw	zero,12(r2)
 40230ac:	10000415 	stw	zero,16(r2)
 40230b0:	10000515 	stw	zero,20(r2)
 40230b4:	10000615 	stw	zero,24(r2)
 40230b8:	10000715 	stw	zero,28(r2)
 40230bc:	10000815 	stw	zero,32(r2)
 40230c0:	e0bff917 	ldw	r2,-28(fp)
 40230c4:	10002815 	stw	zero,160(r2)
 40230c8:	e0fff917 	ldw	r3,-28(fp)
 40230cc:	00800044 	movi	r2,1
 40230d0:	18802915 	stw	r2,164(r3)
 40230d4:	18002a15 	stw	zero,168(r3)
 40230d8:	e0fff917 	ldw	r3,-28(fp)
 40230dc:	008cc384 	movi	r2,13070
 40230e0:	18802b0d 	sth	r2,172(r3)
 40230e4:	e0fff917 	ldw	r3,-28(fp)
 40230e8:	00aaf344 	movi	r2,-21555
 40230ec:	18802b8d 	sth	r2,174(r3)
 40230f0:	e0fff917 	ldw	r3,-28(fp)
 40230f4:	00848d04 	movi	r2,4660
 40230f8:	18802c0d 	sth	r2,176(r3)
 40230fc:	e0fff917 	ldw	r3,-28(fp)
 4023100:	00b99b44 	movi	r2,-6547
 4023104:	18802c8d 	sth	r2,178(r3)
 4023108:	e0fff917 	ldw	r3,-28(fp)
 402310c:	00b7bb04 	movi	r2,-8468
 4023110:	18802d0d 	sth	r2,180(r3)
 4023114:	e0fff917 	ldw	r3,-28(fp)
 4023118:	00800144 	movi	r2,5
 402311c:	18802d8d 	sth	r2,182(r3)
 4023120:	e0fff917 	ldw	r3,-28(fp)
 4023124:	008002c4 	movi	r2,11
 4023128:	18802e0d 	sth	r2,184(r3)
 402312c:	e0bff917 	ldw	r2,-28(fp)
 4023130:	10002f15 	stw	zero,188(r2)
 4023134:	e0bff917 	ldw	r2,-28(fp)
 4023138:	10003015 	stw	zero,192(r2)
 402313c:	e0bff917 	ldw	r2,-28(fp)
 4023140:	10003115 	stw	zero,196(r2)
 4023144:	e0bff917 	ldw	r2,-28(fp)
 4023148:	10003215 	stw	zero,200(r2)
 402314c:	e0bff917 	ldw	r2,-28(fp)
 4023150:	10003315 	stw	zero,204(r2)
 4023154:	e0bff917 	ldw	r2,-28(fp)
 4023158:	10003415 	stw	zero,208(r2)
 402315c:	e0bff917 	ldw	r2,-28(fp)
 4023160:	10003e15 	stw	zero,248(r2)
 4023164:	e0bff917 	ldw	r2,-28(fp)
 4023168:	10003f15 	stw	zero,252(r2)
 402316c:	e0bff917 	ldw	r2,-28(fp)
 4023170:	10004015 	stw	zero,256(r2)
 4023174:	e0bff917 	ldw	r2,-28(fp)
 4023178:	10004115 	stw	zero,260(r2)
 402317c:	e0bff917 	ldw	r2,-28(fp)
 4023180:	10004215 	stw	zero,264(r2)
 4023184:	e0bff917 	ldw	r2,-28(fp)
 4023188:	10004315 	stw	zero,268(r2)
 402318c:	e0bff917 	ldw	r2,-28(fp)
 4023190:	10004415 	stw	zero,272(r2)
 4023194:	e0bff917 	ldw	r2,-28(fp)
 4023198:	10004515 	stw	zero,276(r2)
 402319c:	e0bff917 	ldw	r2,-28(fp)
 40231a0:	10004615 	stw	zero,280(r2)
 40231a4:	e0bff917 	ldw	r2,-28(fp)
 40231a8:	10004715 	stw	zero,284(r2)
 40231ac:	e0bff917 	ldw	r2,-28(fp)
 40231b0:	10003505 	stb	zero,212(r2)
 40231b4:	e0bff917 	ldw	r2,-28(fp)
 40231b8:	10003705 	stb	zero,220(r2)
 40231bc:	e0bff917 	ldw	r2,-28(fp)
 40231c0:	10003d15 	stw	zero,244(r2)
 40231c4:	e0bff917 	ldw	r2,-28(fp)
 40231c8:	10005215 	stw	zero,328(r2)
 40231cc:	e0bff917 	ldw	r2,-28(fp)
 40231d0:	10005315 	stw	zero,332(r2)
 40231d4:	e0bff917 	ldw	r2,-28(fp)
 40231d8:	10005415 	stw	zero,336(r2)
 40231dc:	e0bff917 	ldw	r2,-28(fp)
 40231e0:	10005515 	stw	zero,340(r2)
 40231e4:	e0bff917 	ldw	r2,-28(fp)
 40231e8:	1000b515 	stw	zero,724(r2)
 40231ec:	e0bff917 	ldw	r2,-28(fp)
 40231f0:	10007515 	stw	zero,468(r2)
 40231f4:	e0bff917 	ldw	r2,-28(fp)
 40231f8:	1000b715 	stw	zero,732(r2)
 40231fc:	e0bff917 	ldw	r2,-28(fp)
 4023200:	1000b815 	stw	zero,736(r2)
 4023204:	e0bff917 	ldw	r2,-28(fp)
 4023208:	1000b915 	stw	zero,740(r2)
 402320c:	e0bff917 	ldw	r2,-28(fp)
 4023210:	1000ba15 	stw	zero,744(r2)
 4023214:	e0bff917 	ldw	r2,-28(fp)
 4023218:	1080bb04 	addi	r2,r2,748
 402321c:	1009883a 	mov	r4,r2
 4023220:	01804504 	movi	r6,276
 4023224:	000b883a 	mov	r5,zero
 4023228:	4010b980 	call	4010b98 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 402322c:	e0bff917 	ldw	r2,-28(fp)
 4023230:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 4023234:	e0bffb17 	ldw	r2,-20(fp)
 4023238:	10bff304 	addi	r2,r2,-52
 402323c:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 4023240:	e0bffa17 	ldw	r2,-24(fp)
 4023244:	10c00c04 	addi	r3,r2,48
 4023248:	e0bffc17 	ldw	r2,-16(fp)
 402324c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 4023250:	e0bffa17 	ldw	r2,-24(fp)
 4023254:	10c00b04 	addi	r3,r2,44
 4023258:	e0bffd17 	ldw	r2,-12(fp)
 402325c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 4023260:	e0bffa17 	ldw	r2,-24(fp)
 4023264:	10c00a04 	addi	r3,r2,40
 4023268:	e0bff917 	ldw	r2,-28(fp)
 402326c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4023270:	008100b4 	movhi	r2,1026
 4023274:	108bda04 	addi	r2,r2,12136
 4023278:	10c00104 	addi	r3,r2,4
 402327c:	e0bffa17 	ldw	r2,-24(fp)
 4023280:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 4023284:	e0bffa17 	ldw	r2,-24(fp)
}
 4023288:	e037883a 	mov	sp,fp
 402328c:	dfc00117 	ldw	ra,4(sp)
 4023290:	df000017 	ldw	fp,0(sp)
 4023294:	dec00204 	addi	sp,sp,8
 4023298:	f800283a 	ret

0402329c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 402329c:	defffe04 	addi	sp,sp,-8
 40232a0:	df000115 	stw	fp,4(sp)
 40232a4:	df000104 	addi	fp,sp,4
 40232a8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 40232ac:	e037883a 	mov	sp,fp
 40232b0:	df000017 	ldw	fp,0(sp)
 40232b4:	dec00104 	addi	sp,sp,4
 40232b8:	f800283a 	ret

040232bc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 40232bc:	defffe04 	addi	sp,sp,-8
 40232c0:	df000115 	stw	fp,4(sp)
 40232c4:	df000104 	addi	fp,sp,4
 40232c8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 40232cc:	e037883a 	mov	sp,fp
 40232d0:	df000017 	ldw	fp,0(sp)
 40232d4:	dec00104 	addi	sp,sp,4
 40232d8:	f800283a 	ret

040232dc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 40232dc:	deffff04 	addi	sp,sp,-4
 40232e0:	df000015 	stw	fp,0(sp)
 40232e4:	d839883a 	mov	fp,sp
}
 40232e8:	e037883a 	mov	sp,fp
 40232ec:	df000017 	ldw	fp,0(sp)
 40232f0:	dec00104 	addi	sp,sp,4
 40232f4:	f800283a 	ret

040232f8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 40232f8:	deffff04 	addi	sp,sp,-4
 40232fc:	df000015 	stw	fp,0(sp)
 4023300:	d839883a 	mov	fp,sp
}
 4023304:	e037883a 	mov	sp,fp
 4023308:	df000017 	ldw	fp,0(sp)
 402330c:	dec00104 	addi	sp,sp,4
 4023310:	f800283a 	ret

04023314 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 4023314:	deffff04 	addi	sp,sp,-4
 4023318:	df000015 	stw	fp,0(sp)
 402331c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 4023320:	e037883a 	mov	sp,fp
 4023324:	df000017 	ldw	fp,0(sp)
 4023328:	dec00104 	addi	sp,sp,4
 402332c:	f800283a 	ret

04023330 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 4023330:	deffff04 	addi	sp,sp,-4
 4023334:	df000015 	stw	fp,0(sp)
 4023338:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 402333c:	e037883a 	mov	sp,fp
 4023340:	df000017 	ldw	fp,0(sp)
 4023344:	dec00104 	addi	sp,sp,4
 4023348:	f800283a 	ret

0402334c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 402334c:	deffff04 	addi	sp,sp,-4
 4023350:	df000015 	stw	fp,0(sp)
 4023354:	d839883a 	mov	fp,sp
}
 4023358:	e037883a 	mov	sp,fp
 402335c:	df000017 	ldw	fp,0(sp)
 4023360:	dec00104 	addi	sp,sp,4
 4023364:	f800283a 	ret

04023368 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 4023368:	deffff04 	addi	sp,sp,-4
 402336c:	df000015 	stw	fp,0(sp)
 4023370:	d839883a 	mov	fp,sp
}
 4023374:	e037883a 	mov	sp,fp
 4023378:	df000017 	ldw	fp,0(sp)
 402337c:	dec00104 	addi	sp,sp,4
 4023380:	f800283a 	ret

04023384 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 4023384:	defffe04 	addi	sp,sp,-8
 4023388:	df000115 	stw	fp,4(sp)
 402338c:	df000104 	addi	fp,sp,4
 4023390:	e13fff15 	stw	r4,-4(fp)
}
 4023394:	e037883a 	mov	sp,fp
 4023398:	df000017 	ldw	fp,0(sp)
 402339c:	dec00104 	addi	sp,sp,4
 40233a0:	f800283a 	ret

040233a4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 40233a4:	defff404 	addi	sp,sp,-48
 40233a8:	df000b15 	stw	fp,44(sp)
 40233ac:	df000b04 	addi	fp,sp,44
 40233b0:	e13ffc15 	stw	r4,-16(fp)
 40233b4:	e17ffd15 	stw	r5,-12(fp)
 40233b8:	e1bffe15 	stw	r6,-8(fp)
 40233bc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40233c0:	e0fffe17 	ldw	r3,-8(fp)
 40233c4:	e0bfff17 	ldw	r2,-4(fp)
 40233c8:	10c5883a 	add	r2,r2,r3
 40233cc:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 40233d0:	e0c00117 	ldw	r3,4(fp)
 40233d4:	e0800217 	ldw	r2,8(fp)
 40233d8:	10c5883a 	add	r2,r2,r3
 40233dc:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 40233e0:	e0800117 	ldw	r2,4(fp)
 40233e4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 40233e8:	e0bffe17 	ldw	r2,-8(fp)
 40233ec:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40233f0:	00800044 	movi	r2,1
 40233f4:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40233f8:	e0bffc17 	ldw	r2,-16(fp)
 40233fc:	11000504 	addi	r4,r2,20
 4023400:	e0fffd17 	ldw	r3,-12(fp)
 4023404:	00800044 	movi	r2,1
 4023408:	10c6983a 	sll	r3,r2,r3
 402340c:	2005883a 	mov	r2,r4
 4023410:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4023414:	e0800317 	ldw	r2,12(fp)
 4023418:	1080008c 	andi	r2,r2,2
 402341c:	1004c03a 	cmpne	r2,r2,zero
 4023420:	1000051e 	bne	r2,zero,4023438 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4023424:	e0bffc17 	ldw	r2,-16(fp)
 4023428:	10800304 	addi	r2,r2,12
 402342c:	1007883a 	mov	r3,r2
 4023430:	00810004 	movi	r2,1024
 4023434:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4023438:	e0bffc17 	ldw	r2,-16(fp)
 402343c:	10800037 	ldwio	r2,0(r2)
 4023440:	00000006 	br	4023444 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4023444:	e0bffc17 	ldw	r2,-16(fp)
 4023448:	10800204 	addi	r2,r2,8
 402344c:	10800037 	ldwio	r2,0(r2)
 4023450:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4023454:	e0bff717 	ldw	r2,-36(fp)
 4023458:	1080100c 	andi	r2,r2,64
 402345c:	1005003a 	cmpeq	r2,r2,zero
 4023460:	1000031e 	bne	r2,zero,4023470 <alt_avalon_spi_command+0xcc>
 4023464:	e0bff617 	ldw	r2,-40(fp)
 4023468:	1004c03a 	cmpne	r2,r2,zero
 402346c:	1000041e 	bne	r2,zero,4023480 <alt_avalon_spi_command+0xdc>
 4023470:	e0bff717 	ldw	r2,-36(fp)
 4023474:	1080200c 	andi	r2,r2,128
 4023478:	1005003a 	cmpeq	r2,r2,zero
 402347c:	103ff11e 	bne	r2,zero,4023444 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4023480:	e0bff717 	ldw	r2,-36(fp)
 4023484:	1080100c 	andi	r2,r2,64
 4023488:	1005003a 	cmpeq	r2,r2,zero
 402348c:	1000201e 	bne	r2,zero,4023510 <alt_avalon_spi_command+0x16c>
 4023490:	e0bff617 	ldw	r2,-40(fp)
 4023494:	10800050 	cmplti	r2,r2,1
 4023498:	10001d1e 	bne	r2,zero,4023510 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 402349c:	e0bff617 	ldw	r2,-40(fp)
 40234a0:	10bfffc4 	addi	r2,r2,-1
 40234a4:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 40234a8:	e0ffff17 	ldw	r3,-4(fp)
 40234ac:	e0bffb17 	ldw	r2,-20(fp)
 40234b0:	18800b2e 	bgeu	r3,r2,40234e0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 40234b4:	e0bffc17 	ldw	r2,-16(fp)
 40234b8:	11000104 	addi	r4,r2,4
 40234bc:	e0bfff17 	ldw	r2,-4(fp)
 40234c0:	10800003 	ldbu	r2,0(r2)
 40234c4:	10c03fcc 	andi	r3,r2,255
 40234c8:	e0bfff17 	ldw	r2,-4(fp)
 40234cc:	10800044 	addi	r2,r2,1
 40234d0:	e0bfff15 	stw	r2,-4(fp)
 40234d4:	2005883a 	mov	r2,r4
 40234d8:	10c00035 	stwio	r3,0(r2)
 40234dc:	00000c06 	br	4023510 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 40234e0:	e0bff917 	ldw	r2,-28(fp)
 40234e4:	1005003a 	cmpeq	r2,r2,zero
 40234e8:	1000071e 	bne	r2,zero,4023508 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 40234ec:	e0bff917 	ldw	r2,-28(fp)
 40234f0:	10bfffc4 	addi	r2,r2,-1
 40234f4:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40234f8:	e0bffc17 	ldw	r2,-16(fp)
 40234fc:	10800104 	addi	r2,r2,4
 4023500:	10000035 	stwio	zero,0(r2)
 4023504:	00000206 	br	4023510 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 4023508:	00bf0004 	movi	r2,-1024
 402350c:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4023510:	e0bff717 	ldw	r2,-36(fp)
 4023514:	1080200c 	andi	r2,r2,128
 4023518:	1005003a 	cmpeq	r2,r2,zero
 402351c:	103fc91e 	bne	r2,zero,4023444 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4023520:	e0bffc17 	ldw	r2,-16(fp)
 4023524:	10800037 	ldwio	r2,0(r2)
 4023528:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 402352c:	e0bff817 	ldw	r2,-32(fp)
 4023530:	1005003a 	cmpeq	r2,r2,zero
 4023534:	1000041e 	bne	r2,zero,4023548 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 4023538:	e0bff817 	ldw	r2,-32(fp)
 402353c:	10bfffc4 	addi	r2,r2,-1
 4023540:	e0bff815 	stw	r2,-32(fp)
 4023544:	00000706 	br	4023564 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 4023548:	e0bff517 	ldw	r2,-44(fp)
 402354c:	1007883a 	mov	r3,r2
 4023550:	e0800217 	ldw	r2,8(fp)
 4023554:	10c00005 	stb	r3,0(r2)
 4023558:	e0800217 	ldw	r2,8(fp)
 402355c:	10800044 	addi	r2,r2,1
 4023560:	e0800215 	stw	r2,8(fp)
      credits++;
 4023564:	e0bff617 	ldw	r2,-40(fp)
 4023568:	10800044 	addi	r2,r2,1
 402356c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 4023570:	e0bff817 	ldw	r2,-32(fp)
 4023574:	1004c03a 	cmpne	r2,r2,zero
 4023578:	103fb21e 	bne	r2,zero,4023444 <alt_avalon_spi_command+0xa0>
 402357c:	e0c00217 	ldw	r3,8(fp)
 4023580:	e0bffa17 	ldw	r2,-24(fp)
 4023584:	18800126 	beq	r3,r2,402358c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 4023588:	003fae06 	br	4023444 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 402358c:	e0bffc17 	ldw	r2,-16(fp)
 4023590:	10800204 	addi	r2,r2,8
 4023594:	10800037 	ldwio	r2,0(r2)
 4023598:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 402359c:	e0bff717 	ldw	r2,-36(fp)
 40235a0:	1080080c 	andi	r2,r2,32
 40235a4:	1005003a 	cmpeq	r2,r2,zero
 40235a8:	103ff81e 	bne	r2,zero,402358c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 40235ac:	e0800317 	ldw	r2,12(fp)
 40235b0:	1080004c 	andi	r2,r2,1
 40235b4:	1004c03a 	cmpne	r2,r2,zero
 40235b8:	1000031e 	bne	r2,zero,40235c8 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 40235bc:	e0bffc17 	ldw	r2,-16(fp)
 40235c0:	10800304 	addi	r2,r2,12
 40235c4:	10000035 	stwio	zero,0(r2)

  return read_length;
 40235c8:	e0800117 	ldw	r2,4(fp)
}
 40235cc:	e037883a 	mov	sp,fp
 40235d0:	df000017 	ldw	fp,0(sp)
 40235d4:	dec00104 	addi	sp,sp,4
 40235d8:	f800283a 	ret

040235dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40235dc:	defffa04 	addi	sp,sp,-24
 40235e0:	dfc00515 	stw	ra,20(sp)
 40235e4:	df000415 	stw	fp,16(sp)
 40235e8:	df000404 	addi	fp,sp,16
 40235ec:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40235f0:	008100b4 	movhi	r2,1026
 40235f4:	109a5004 	addi	r2,r2,26944
 40235f8:	10800017 	ldw	r2,0(r2)
 40235fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4023600:	00003306 	br	40236d0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 4023604:	e0bffd17 	ldw	r2,-12(fp)
 4023608:	11000217 	ldw	r4,8(r2)
 402360c:	400a3740 	call	400a374 <strlen>
 4023610:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4023614:	e0bffd17 	ldw	r2,-12(fp)
 4023618:	10c00217 	ldw	r3,8(r2)
 402361c:	e0bffc17 	ldw	r2,-16(fp)
 4023620:	1885883a 	add	r2,r3,r2
 4023624:	10bfffc4 	addi	r2,r2,-1
 4023628:	10800003 	ldbu	r2,0(r2)
 402362c:	10803fcc 	andi	r2,r2,255
 4023630:	1080201c 	xori	r2,r2,128
 4023634:	10bfe004 	addi	r2,r2,-128
 4023638:	10800bd8 	cmpnei	r2,r2,47
 402363c:	1000031e 	bne	r2,zero,402364c <alt_find_file+0x70>
    {
      len -= 1;
 4023640:	e0bffc17 	ldw	r2,-16(fp)
 4023644:	10bfffc4 	addi	r2,r2,-1
 4023648:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402364c:	e0bffc17 	ldw	r2,-16(fp)
 4023650:	1007883a 	mov	r3,r2
 4023654:	e0bffe17 	ldw	r2,-8(fp)
 4023658:	1885883a 	add	r2,r3,r2
 402365c:	10800003 	ldbu	r2,0(r2)
 4023660:	10803fcc 	andi	r2,r2,255
 4023664:	1080201c 	xori	r2,r2,128
 4023668:	10bfe004 	addi	r2,r2,-128
 402366c:	10800be0 	cmpeqi	r2,r2,47
 4023670:	10000a1e 	bne	r2,zero,402369c <alt_find_file+0xc0>
 4023674:	e0bffc17 	ldw	r2,-16(fp)
 4023678:	1007883a 	mov	r3,r2
 402367c:	e0bffe17 	ldw	r2,-8(fp)
 4023680:	1885883a 	add	r2,r3,r2
 4023684:	10800003 	ldbu	r2,0(r2)
 4023688:	10803fcc 	andi	r2,r2,255
 402368c:	1080201c 	xori	r2,r2,128
 4023690:	10bfe004 	addi	r2,r2,-128
 4023694:	1004c03a 	cmpne	r2,r2,zero
 4023698:	10000a1e 	bne	r2,zero,40236c4 <alt_find_file+0xe8>
 402369c:	e0bffd17 	ldw	r2,-12(fp)
 40236a0:	11000217 	ldw	r4,8(r2)
 40236a4:	e1bffc17 	ldw	r6,-16(fp)
 40236a8:	e17ffe17 	ldw	r5,-8(fp)
 40236ac:	402384c0 	call	402384c <memcmp>
 40236b0:	1004c03a 	cmpne	r2,r2,zero
 40236b4:	1000031e 	bne	r2,zero,40236c4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40236b8:	e0bffd17 	ldw	r2,-12(fp)
 40236bc:	e0bfff15 	stw	r2,-4(fp)
 40236c0:	00000806 	br	40236e4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 40236c4:	e0bffd17 	ldw	r2,-12(fp)
 40236c8:	10800017 	ldw	r2,0(r2)
 40236cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40236d0:	00c100b4 	movhi	r3,1026
 40236d4:	18da5004 	addi	r3,r3,26944
 40236d8:	e0bffd17 	ldw	r2,-12(fp)
 40236dc:	10ffc91e 	bne	r2,r3,4023604 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40236e0:	e03fff15 	stw	zero,-4(fp)
 40236e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40236e8:	e037883a 	mov	sp,fp
 40236ec:	dfc00117 	ldw	ra,4(sp)
 40236f0:	df000017 	ldw	fp,0(sp)
 40236f4:	dec00204 	addi	sp,sp,8
 40236f8:	f800283a 	ret

040236fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40236fc:	defff704 	addi	sp,sp,-36
 4023700:	dfc00815 	stw	ra,32(sp)
 4023704:	df000715 	stw	fp,28(sp)
 4023708:	dc000615 	stw	r16,24(sp)
 402370c:	df000604 	addi	fp,sp,24
 4023710:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4023714:	00bffa04 	movi	r2,-24
 4023718:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 402371c:	008100b4 	movhi	r2,1026
 4023720:	109a9a04 	addi	r2,r2,27240
 4023724:	10800017 	ldw	r2,0(r2)
 4023728:	e0bffa15 	stw	r2,-24(fp)
 402372c:	e03ffb0d 	sth	zero,-20(fp)
 4023730:	e17ffb0b 	ldhu	r5,-20(fp)
 4023734:	e1bffe04 	addi	r6,fp,-8
 4023738:	e13ffa17 	ldw	r4,-24(fp)
 402373c:	401db500 	call	401db50 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4023740:	e03ffd15 	stw	zero,-12(fp)
 4023744:	00002006 	br	40237c8 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 4023748:	e13ffd17 	ldw	r4,-12(fp)
 402374c:	040100b4 	movhi	r16,1026
 4023750:	84159b04 	addi	r16,r16,22124
 4023754:	01400304 	movi	r5,12
 4023758:	4008ff80 	call	4008ff8 <__mulsi3>
 402375c:	1405883a 	add	r2,r2,r16
 4023760:	10800017 	ldw	r2,0(r2)
 4023764:	1004c03a 	cmpne	r2,r2,zero
 4023768:	1000141e 	bne	r2,zero,40237bc <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 402376c:	e13ffd17 	ldw	r4,-12(fp)
 4023770:	040100b4 	movhi	r16,1026
 4023774:	84159b04 	addi	r16,r16,22124
 4023778:	01400304 	movi	r5,12
 402377c:	4008ff80 	call	4008ff8 <__mulsi3>
 4023780:	1407883a 	add	r3,r2,r16
 4023784:	e0bfff17 	ldw	r2,-4(fp)
 4023788:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 402378c:	008100b4 	movhi	r2,1026
 4023790:	109a5404 	addi	r2,r2,26960
 4023794:	10c00017 	ldw	r3,0(r2)
 4023798:	e0bffd17 	ldw	r2,-12(fp)
 402379c:	1880040e 	bge	r3,r2,40237b0 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 40237a0:	00c100b4 	movhi	r3,1026
 40237a4:	18da5404 	addi	r3,r3,26960
 40237a8:	e0bffd17 	ldw	r2,-12(fp)
 40237ac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 40237b0:	e0bffd17 	ldw	r2,-12(fp)
 40237b4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 40237b8:	00000606 	br	40237d4 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40237bc:	e0bffd17 	ldw	r2,-12(fp)
 40237c0:	10800044 	addi	r2,r2,1
 40237c4:	e0bffd15 	stw	r2,-12(fp)
 40237c8:	e0bffd17 	ldw	r2,-12(fp)
 40237cc:	10800810 	cmplti	r2,r2,32
 40237d0:	103fdd1e 	bne	r2,zero,4023748 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 40237d4:	008100b4 	movhi	r2,1026
 40237d8:	109a9a04 	addi	r2,r2,27240
 40237dc:	11000017 	ldw	r4,0(r2)
 40237e0:	401df480 	call	401df48 <OSSemPost>

  return rc;
 40237e4:	e0bffc17 	ldw	r2,-16(fp)
}
 40237e8:	e037883a 	mov	sp,fp
 40237ec:	dfc00217 	ldw	ra,8(sp)
 40237f0:	df000117 	ldw	fp,4(sp)
 40237f4:	dc000017 	ldw	r16,0(sp)
 40237f8:	dec00304 	addi	sp,sp,12
 40237fc:	f800283a 	ret

04023800 <atexit>:
 4023800:	200b883a 	mov	r5,r4
 4023804:	000d883a 	mov	r6,zero
 4023808:	0009883a 	mov	r4,zero
 402380c:	000f883a 	mov	r7,zero
 4023810:	40238c01 	jmpi	40238c0 <__register_exitproc>

04023814 <exit>:
 4023814:	defffe04 	addi	sp,sp,-8
 4023818:	000b883a 	mov	r5,zero
 402381c:	dc000015 	stw	r16,0(sp)
 4023820:	dfc00115 	stw	ra,4(sp)
 4023824:	2021883a 	mov	r16,r4
 4023828:	40239f80 	call	40239f8 <__call_exitprocs>
 402382c:	008100b4 	movhi	r2,1026
 4023830:	109a4a04 	addi	r2,r2,26920
 4023834:	11000017 	ldw	r4,0(r2)
 4023838:	20800f17 	ldw	r2,60(r4)
 402383c:	10000126 	beq	r2,zero,4023844 <exit+0x30>
 4023840:	103ee83a 	callr	r2
 4023844:	8009883a 	mov	r4,r16
 4023848:	4023be80 	call	4023be8 <_exit>

0402384c <memcmp>:
 402384c:	00c000c4 	movi	r3,3
 4023850:	1980032e 	bgeu	r3,r6,4023860 <memcmp+0x14>
 4023854:	2144b03a 	or	r2,r4,r5
 4023858:	10c4703a 	and	r2,r2,r3
 402385c:	10000f26 	beq	r2,zero,402389c <memcmp+0x50>
 4023860:	31ffffc4 	addi	r7,r6,-1
 4023864:	3000061e 	bne	r6,zero,4023880 <memcmp+0x34>
 4023868:	00000a06 	br	4023894 <memcmp+0x48>
 402386c:	39ffffc4 	addi	r7,r7,-1
 4023870:	00bfffc4 	movi	r2,-1
 4023874:	21000044 	addi	r4,r4,1
 4023878:	29400044 	addi	r5,r5,1
 402387c:	38800526 	beq	r7,r2,4023894 <memcmp+0x48>
 4023880:	20c00003 	ldbu	r3,0(r4)
 4023884:	28800003 	ldbu	r2,0(r5)
 4023888:	18bff826 	beq	r3,r2,402386c <memcmp+0x20>
 402388c:	1885c83a 	sub	r2,r3,r2
 4023890:	f800283a 	ret
 4023894:	0005883a 	mov	r2,zero
 4023898:	f800283a 	ret
 402389c:	180f883a 	mov	r7,r3
 40238a0:	20c00017 	ldw	r3,0(r4)
 40238a4:	28800017 	ldw	r2,0(r5)
 40238a8:	18bfed1e 	bne	r3,r2,4023860 <memcmp+0x14>
 40238ac:	31bfff04 	addi	r6,r6,-4
 40238b0:	21000104 	addi	r4,r4,4
 40238b4:	29400104 	addi	r5,r5,4
 40238b8:	39bff936 	bltu	r7,r6,40238a0 <memcmp+0x54>
 40238bc:	003fe806 	br	4023860 <memcmp+0x14>

040238c0 <__register_exitproc>:
 40238c0:	defffa04 	addi	sp,sp,-24
 40238c4:	008100b4 	movhi	r2,1026
 40238c8:	109a4a04 	addi	r2,r2,26920
 40238cc:	dc000015 	stw	r16,0(sp)
 40238d0:	14000017 	ldw	r16,0(r2)
 40238d4:	dd000415 	stw	r20,16(sp)
 40238d8:	2829883a 	mov	r20,r5
 40238dc:	81405217 	ldw	r5,328(r16)
 40238e0:	dcc00315 	stw	r19,12(sp)
 40238e4:	dc800215 	stw	r18,8(sp)
 40238e8:	dc400115 	stw	r17,4(sp)
 40238ec:	dfc00515 	stw	ra,20(sp)
 40238f0:	2023883a 	mov	r17,r4
 40238f4:	3027883a 	mov	r19,r6
 40238f8:	3825883a 	mov	r18,r7
 40238fc:	28002526 	beq	r5,zero,4023994 <__register_exitproc+0xd4>
 4023900:	29000117 	ldw	r4,4(r5)
 4023904:	008007c4 	movi	r2,31
 4023908:	11002716 	blt	r2,r4,40239a8 <__register_exitproc+0xe8>
 402390c:	8800101e 	bne	r17,zero,4023950 <__register_exitproc+0x90>
 4023910:	2105883a 	add	r2,r4,r4
 4023914:	1085883a 	add	r2,r2,r2
 4023918:	20c00044 	addi	r3,r4,1
 402391c:	1145883a 	add	r2,r2,r5
 4023920:	0009883a 	mov	r4,zero
 4023924:	15000215 	stw	r20,8(r2)
 4023928:	28c00115 	stw	r3,4(r5)
 402392c:	2005883a 	mov	r2,r4
 4023930:	dfc00517 	ldw	ra,20(sp)
 4023934:	dd000417 	ldw	r20,16(sp)
 4023938:	dcc00317 	ldw	r19,12(sp)
 402393c:	dc800217 	ldw	r18,8(sp)
 4023940:	dc400117 	ldw	r17,4(sp)
 4023944:	dc000017 	ldw	r16,0(sp)
 4023948:	dec00604 	addi	sp,sp,24
 402394c:	f800283a 	ret
 4023950:	29802204 	addi	r6,r5,136
 4023954:	00800044 	movi	r2,1
 4023958:	110e983a 	sll	r7,r2,r4
 402395c:	30c04017 	ldw	r3,256(r6)
 4023960:	2105883a 	add	r2,r4,r4
 4023964:	1085883a 	add	r2,r2,r2
 4023968:	1185883a 	add	r2,r2,r6
 402396c:	19c6b03a 	or	r3,r3,r7
 4023970:	14802015 	stw	r18,128(r2)
 4023974:	14c00015 	stw	r19,0(r2)
 4023978:	00800084 	movi	r2,2
 402397c:	30c04015 	stw	r3,256(r6)
 4023980:	88bfe31e 	bne	r17,r2,4023910 <__register_exitproc+0x50>
 4023984:	30804117 	ldw	r2,260(r6)
 4023988:	11c4b03a 	or	r2,r2,r7
 402398c:	30804115 	stw	r2,260(r6)
 4023990:	003fdf06 	br	4023910 <__register_exitproc+0x50>
 4023994:	008100f4 	movhi	r2,1027
 4023998:	1097b504 	addi	r2,r2,24276
 402399c:	100b883a 	mov	r5,r2
 40239a0:	80805215 	stw	r2,328(r16)
 40239a4:	003fd606 	br	4023900 <__register_exitproc+0x40>
 40239a8:	00810074 	movhi	r2,1025
 40239ac:	10a68204 	addi	r2,r2,-26104
 40239b0:	1000021e 	bne	r2,zero,40239bc <__register_exitproc+0xfc>
 40239b4:	013fffc4 	movi	r4,-1
 40239b8:	003fdc06 	br	402392c <__register_exitproc+0x6c>
 40239bc:	01006404 	movi	r4,400
 40239c0:	103ee83a 	callr	r2
 40239c4:	1007883a 	mov	r3,r2
 40239c8:	103ffa26 	beq	r2,zero,40239b4 <__register_exitproc+0xf4>
 40239cc:	80805217 	ldw	r2,328(r16)
 40239d0:	180b883a 	mov	r5,r3
 40239d4:	18000115 	stw	zero,4(r3)
 40239d8:	18800015 	stw	r2,0(r3)
 40239dc:	80c05215 	stw	r3,328(r16)
 40239e0:	18006215 	stw	zero,392(r3)
 40239e4:	18006315 	stw	zero,396(r3)
 40239e8:	0009883a 	mov	r4,zero
 40239ec:	883fc826 	beq	r17,zero,4023910 <__register_exitproc+0x50>
 40239f0:	003fd706 	br	4023950 <__register_exitproc+0x90>

040239f4 <register_fini>:
 40239f4:	f800283a 	ret

040239f8 <__call_exitprocs>:
 40239f8:	008100b4 	movhi	r2,1026
 40239fc:	109a4a04 	addi	r2,r2,26920
 4023a00:	10800017 	ldw	r2,0(r2)
 4023a04:	defff304 	addi	sp,sp,-52
 4023a08:	df000b15 	stw	fp,44(sp)
 4023a0c:	d8800115 	stw	r2,4(sp)
 4023a10:	00810074 	movhi	r2,1025
 4023a14:	10a67d04 	addi	r2,r2,-26124
 4023a18:	1005003a 	cmpeq	r2,r2,zero
 4023a1c:	d8800215 	stw	r2,8(sp)
 4023a20:	d8800117 	ldw	r2,4(sp)
 4023a24:	dd400815 	stw	r21,32(sp)
 4023a28:	dd000715 	stw	r20,28(sp)
 4023a2c:	10805204 	addi	r2,r2,328
 4023a30:	dfc00c15 	stw	ra,48(sp)
 4023a34:	ddc00a15 	stw	r23,40(sp)
 4023a38:	dd800915 	stw	r22,36(sp)
 4023a3c:	dcc00615 	stw	r19,24(sp)
 4023a40:	dc800515 	stw	r18,20(sp)
 4023a44:	dc400415 	stw	r17,16(sp)
 4023a48:	dc000315 	stw	r16,12(sp)
 4023a4c:	282b883a 	mov	r21,r5
 4023a50:	2039883a 	mov	fp,r4
 4023a54:	d8800015 	stw	r2,0(sp)
 4023a58:	2829003a 	cmpeq	r20,r5,zero
 4023a5c:	d8800117 	ldw	r2,4(sp)
 4023a60:	14405217 	ldw	r17,328(r2)
 4023a64:	88001026 	beq	r17,zero,4023aa8 <__call_exitprocs+0xb0>
 4023a68:	ddc00017 	ldw	r23,0(sp)
 4023a6c:	88800117 	ldw	r2,4(r17)
 4023a70:	8c802204 	addi	r18,r17,136
 4023a74:	143fffc4 	addi	r16,r2,-1
 4023a78:	80000916 	blt	r16,zero,4023aa0 <__call_exitprocs+0xa8>
 4023a7c:	05bfffc4 	movi	r22,-1
 4023a80:	a000151e 	bne	r20,zero,4023ad8 <__call_exitprocs+0xe0>
 4023a84:	8409883a 	add	r4,r16,r16
 4023a88:	2105883a 	add	r2,r4,r4
 4023a8c:	1485883a 	add	r2,r2,r18
 4023a90:	10c02017 	ldw	r3,128(r2)
 4023a94:	a8c01126 	beq	r21,r3,4023adc <__call_exitprocs+0xe4>
 4023a98:	843fffc4 	addi	r16,r16,-1
 4023a9c:	85bff81e 	bne	r16,r22,4023a80 <__call_exitprocs+0x88>
 4023aa0:	d8800217 	ldw	r2,8(sp)
 4023aa4:	10003126 	beq	r2,zero,4023b6c <__call_exitprocs+0x174>
 4023aa8:	dfc00c17 	ldw	ra,48(sp)
 4023aac:	df000b17 	ldw	fp,44(sp)
 4023ab0:	ddc00a17 	ldw	r23,40(sp)
 4023ab4:	dd800917 	ldw	r22,36(sp)
 4023ab8:	dd400817 	ldw	r21,32(sp)
 4023abc:	dd000717 	ldw	r20,28(sp)
 4023ac0:	dcc00617 	ldw	r19,24(sp)
 4023ac4:	dc800517 	ldw	r18,20(sp)
 4023ac8:	dc400417 	ldw	r17,16(sp)
 4023acc:	dc000317 	ldw	r16,12(sp)
 4023ad0:	dec00d04 	addi	sp,sp,52
 4023ad4:	f800283a 	ret
 4023ad8:	8409883a 	add	r4,r16,r16
 4023adc:	88c00117 	ldw	r3,4(r17)
 4023ae0:	2105883a 	add	r2,r4,r4
 4023ae4:	1445883a 	add	r2,r2,r17
 4023ae8:	18ffffc4 	addi	r3,r3,-1
 4023aec:	11800217 	ldw	r6,8(r2)
 4023af0:	1c001526 	beq	r3,r16,4023b48 <__call_exitprocs+0x150>
 4023af4:	10000215 	stw	zero,8(r2)
 4023af8:	303fe726 	beq	r6,zero,4023a98 <__call_exitprocs+0xa0>
 4023afc:	00c00044 	movi	r3,1
 4023b00:	1c06983a 	sll	r3,r3,r16
 4023b04:	90804017 	ldw	r2,256(r18)
 4023b08:	8cc00117 	ldw	r19,4(r17)
 4023b0c:	1884703a 	and	r2,r3,r2
 4023b10:	10001426 	beq	r2,zero,4023b64 <__call_exitprocs+0x16c>
 4023b14:	90804117 	ldw	r2,260(r18)
 4023b18:	1884703a 	and	r2,r3,r2
 4023b1c:	10000c1e 	bne	r2,zero,4023b50 <__call_exitprocs+0x158>
 4023b20:	2105883a 	add	r2,r4,r4
 4023b24:	1485883a 	add	r2,r2,r18
 4023b28:	11400017 	ldw	r5,0(r2)
 4023b2c:	e009883a 	mov	r4,fp
 4023b30:	303ee83a 	callr	r6
 4023b34:	88800117 	ldw	r2,4(r17)
 4023b38:	98bfc81e 	bne	r19,r2,4023a5c <__call_exitprocs+0x64>
 4023b3c:	b8800017 	ldw	r2,0(r23)
 4023b40:	147fd526 	beq	r2,r17,4023a98 <__call_exitprocs+0xa0>
 4023b44:	003fc506 	br	4023a5c <__call_exitprocs+0x64>
 4023b48:	8c000115 	stw	r16,4(r17)
 4023b4c:	003fea06 	br	4023af8 <__call_exitprocs+0x100>
 4023b50:	2105883a 	add	r2,r4,r4
 4023b54:	1485883a 	add	r2,r2,r18
 4023b58:	11000017 	ldw	r4,0(r2)
 4023b5c:	303ee83a 	callr	r6
 4023b60:	003ff406 	br	4023b34 <__call_exitprocs+0x13c>
 4023b64:	303ee83a 	callr	r6
 4023b68:	003ff206 	br	4023b34 <__call_exitprocs+0x13c>
 4023b6c:	88800117 	ldw	r2,4(r17)
 4023b70:	1000081e 	bne	r2,zero,4023b94 <__call_exitprocs+0x19c>
 4023b74:	89000017 	ldw	r4,0(r17)
 4023b78:	20000726 	beq	r4,zero,4023b98 <__call_exitprocs+0x1a0>
 4023b7c:	b9000015 	stw	r4,0(r23)
 4023b80:	8809883a 	mov	r4,r17
 4023b84:	40099f40 	call	40099f4 <free>
 4023b88:	bc400017 	ldw	r17,0(r23)
 4023b8c:	883fb71e 	bne	r17,zero,4023a6c <__call_exitprocs+0x74>
 4023b90:	003fc506 	br	4023aa8 <__call_exitprocs+0xb0>
 4023b94:	89000017 	ldw	r4,0(r17)
 4023b98:	882f883a 	mov	r23,r17
 4023b9c:	2023883a 	mov	r17,r4
 4023ba0:	883fb21e 	bne	r17,zero,4023a6c <__call_exitprocs+0x74>
 4023ba4:	003fc006 	br	4023aa8 <__call_exitprocs+0xb0>

04023ba8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4023ba8:	defffd04 	addi	sp,sp,-12
 4023bac:	df000215 	stw	fp,8(sp)
 4023bb0:	df000204 	addi	fp,sp,8
 4023bb4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4023bb8:	e0bfff17 	ldw	r2,-4(fp)
 4023bbc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4023bc0:	e0bffe17 	ldw	r2,-8(fp)
 4023bc4:	1005003a 	cmpeq	r2,r2,zero
 4023bc8:	1000021e 	bne	r2,zero,4023bd4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4023bcc:	002af070 	cmpltui	zero,zero,43969
 4023bd0:	00000106 	br	4023bd8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4023bd4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4023bd8:	e037883a 	mov	sp,fp
 4023bdc:	df000017 	ldw	fp,0(sp)
 4023be0:	dec00104 	addi	sp,sp,4
 4023be4:	f800283a 	ret

04023be8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4023be8:	defffd04 	addi	sp,sp,-12
 4023bec:	dfc00215 	stw	ra,8(sp)
 4023bf0:	df000115 	stw	fp,4(sp)
 4023bf4:	df000104 	addi	fp,sp,4
 4023bf8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4023bfc:	008100b4 	movhi	r2,1026
 4023c00:	109aa444 	addi	r2,r2,27281
 4023c04:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4023c08:	e13fff17 	ldw	r4,-4(fp)
 4023c0c:	4023ba80 	call	4023ba8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4023c10:	003fff06 	br	4023c10 <_exit+0x28>
 4023c14:	040239f4 	movhi	r16,2279
